1687212826
2 2
11 libmathutil 4 SkjP 5 panda 
324
427 5 clear 4 753 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 10 0
80
inline void ::PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

428 6 output 4 753 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 11 0
88
void ::PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(ostream &out) const;

429 19 ~PointerToArrayBase 4 752 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
68
inline ::PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

430 19 ConstPointerToArray 4 751 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 2 1 2 0
214
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ::ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);

431 4 size 4 751 38 ConstPointerToArray< LMatrix3f >::size 0 1 3 0
73
inline unsigned int ::ConstPointerToArray< LMatrix3f >::size(void) const;

432 11 get_element 4 751 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 4 0
94
inline LMatrix3f const &::ConstPointerToArray< LMatrix3f >::get_element(unsigned int n) const;

433 11 __getitem__ 4 751 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 5 0
94
inline LMatrix3f const &::ConstPointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

434 8 get_data 4 751 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 6 0
85
inline basic_string< char > ::ConstPointerToArray< LMatrix3f >::get_data(void) const;

435 11 get_subdata 4 751 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 7 0
118
inline basic_string< char > ::ConstPointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

436 13 get_ref_count 4 751 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 8 0
73
inline int ::ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

437 18 get_node_ref_count 4 751 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 9 0
78
inline int ::ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

438 20 ~ConstPointerToArray 4 751 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
63
::ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

439 5 clear 4 757 59 PointerToBase< ReferenceCountedVector< LMatrix4f > >::clear 0 1 21 0
80
inline void ::PointerToBase< ReferenceCountedVector< LMatrix4f > >::clear(void);

440 6 output 4 757 60 PointerToBase< ReferenceCountedVector< LMatrix4f > >::output 0 1 22 0
88
void ::PointerToBase< ReferenceCountedVector< LMatrix4f > >::output(ostream &out) const;

441 19 ~PointerToArrayBase 4 756 52 PointerToArrayBase< LMatrix4f >::~PointerToArrayBase 0 0 0
68
inline ::PointerToArrayBase< LMatrix4f >::~PointerToArrayBase(void);

442 19 ConstPointerToArray 4 755 53 ConstPointerToArray< LMatrix4f >::ConstPointerToArray 0 2 12 13 0
214
inline ::ConstPointerToArray< LMatrix4f >::ConstPointerToArray(PointerToArray< LMatrix4f > const &copy);
inline ::ConstPointerToArray< LMatrix4f >::ConstPointerToArray(ConstPointerToArray< LMatrix4f > const &copy);

443 4 size 4 755 38 ConstPointerToArray< LMatrix4f >::size 0 1 14 0
73
inline unsigned int ::ConstPointerToArray< LMatrix4f >::size(void) const;

444 11 get_element 4 755 45 ConstPointerToArray< LMatrix4f >::get_element 0 1 15 0
94
inline LMatrix4f const &::ConstPointerToArray< LMatrix4f >::get_element(unsigned int n) const;

445 11 __getitem__ 4 755 45 ConstPointerToArray< LMatrix4f >::__getitem__ 0 1 16 0
94
inline LMatrix4f const &::ConstPointerToArray< LMatrix4f >::__getitem__(unsigned int n) const;

446 8 get_data 4 755 42 ConstPointerToArray< LMatrix4f >::get_data 0 1 17 0
85
inline basic_string< char > ::ConstPointerToArray< LMatrix4f >::get_data(void) const;

447 11 get_subdata 4 755 45 ConstPointerToArray< LMatrix4f >::get_subdata 0 1 18 0
118
inline basic_string< char > ::ConstPointerToArray< LMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

448 13 get_ref_count 4 755 47 ConstPointerToArray< LMatrix4f >::get_ref_count 0 1 19 0
73
inline int ::ConstPointerToArray< LMatrix4f >::get_ref_count(void) const;

449 18 get_node_ref_count 4 755 52 ConstPointerToArray< LMatrix4f >::get_node_ref_count 0 1 20 0
78
inline int ::ConstPointerToArray< LMatrix4f >::get_node_ref_count(void) const;

450 20 ~ConstPointerToArray 4 755 54 ConstPointerToArray< LMatrix4f >::~ConstPointerToArray 0 0 0
63
::ConstPointerToArray< LMatrix4f >::~ConstPointerToArray(void);

451 5 clear 4 760 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 32 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

452 6 output 4 760 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 33 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(ostream &out) const;

453 19 ~PointerToArrayBase 4 759 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

454 19 ConstPointerToArray 4 758 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 2 23 24 0
218
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ::ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);

455 4 size 4 758 39 ConstPointerToArray< LVecBase2f >::size 0 1 25 0
74
inline unsigned int ::ConstPointerToArray< LVecBase2f >::size(void) const;

456 11 get_element 4 758 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 26 0
96
inline LVecBase2f const &::ConstPointerToArray< LVecBase2f >::get_element(unsigned int n) const;

457 11 __getitem__ 4 758 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 27 0
96
inline LVecBase2f const &::ConstPointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

458 8 get_data 4 758 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 28 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase2f >::get_data(void) const;

459 11 get_subdata 4 758 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 29 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

460 13 get_ref_count 4 758 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 30 0
74
inline int ::ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

461 18 get_node_ref_count 4 758 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 31 0
79
inline int ::ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

462 20 ~ConstPointerToArray 4 758 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

463 5 clear 4 763 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 43 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

464 6 output 4 763 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 44 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(ostream &out) const;

465 19 ~PointerToArrayBase 4 762 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

466 19 ConstPointerToArray 4 761 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 2 34 35 0
218
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ::ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);

467 4 size 4 761 39 ConstPointerToArray< LVecBase3f >::size 0 1 36 0
74
inline unsigned int ::ConstPointerToArray< LVecBase3f >::size(void) const;

468 11 get_element 4 761 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 37 0
96
inline LVecBase3f const &::ConstPointerToArray< LVecBase3f >::get_element(unsigned int n) const;

469 11 __getitem__ 4 761 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 38 0
96
inline LVecBase3f const &::ConstPointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

470 8 get_data 4 761 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 39 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase3f >::get_data(void) const;

471 11 get_subdata 4 761 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 40 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

472 13 get_ref_count 4 761 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 41 0
74
inline int ::ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

473 18 get_node_ref_count 4 761 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 42 0
79
inline int ::ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

474 20 ~ConstPointerToArray 4 761 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

475 5 clear 4 766 60 PointerToBase< ReferenceCountedVector< LVecBase4f > >::clear 0 1 54 0
81
inline void ::PointerToBase< ReferenceCountedVector< LVecBase4f > >::clear(void);

476 6 output 4 766 61 PointerToBase< ReferenceCountedVector< LVecBase4f > >::output 0 1 55 0
89
void ::PointerToBase< ReferenceCountedVector< LVecBase4f > >::output(ostream &out) const;

477 19 ~PointerToArrayBase 4 765 53 PointerToArrayBase< LVecBase4f >::~PointerToArrayBase 0 0 0
69
inline ::PointerToArrayBase< LVecBase4f >::~PointerToArrayBase(void);

478 19 ConstPointerToArray 4 764 54 ConstPointerToArray< LVecBase4f >::ConstPointerToArray 0 2 45 46 0
218
inline ::ConstPointerToArray< LVecBase4f >::ConstPointerToArray(PointerToArray< LVecBase4f > const &copy);
inline ::ConstPointerToArray< LVecBase4f >::ConstPointerToArray(ConstPointerToArray< LVecBase4f > const &copy);

479 4 size 4 764 39 ConstPointerToArray< LVecBase4f >::size 0 1 47 0
74
inline unsigned int ::ConstPointerToArray< LVecBase4f >::size(void) const;

480 11 get_element 4 764 46 ConstPointerToArray< LVecBase4f >::get_element 0 1 48 0
96
inline LVecBase4f const &::ConstPointerToArray< LVecBase4f >::get_element(unsigned int n) const;

481 11 __getitem__ 4 764 46 ConstPointerToArray< LVecBase4f >::__getitem__ 0 1 49 0
96
inline LVecBase4f const &::ConstPointerToArray< LVecBase4f >::__getitem__(unsigned int n) const;

482 8 get_data 4 764 43 ConstPointerToArray< LVecBase4f >::get_data 0 1 50 0
86
inline basic_string< char > ::ConstPointerToArray< LVecBase4f >::get_data(void) const;

483 11 get_subdata 4 764 46 ConstPointerToArray< LVecBase4f >::get_subdata 0 1 51 0
119
inline basic_string< char > ::ConstPointerToArray< LVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

484 13 get_ref_count 4 764 48 ConstPointerToArray< LVecBase4f >::get_ref_count 0 1 52 0
74
inline int ::ConstPointerToArray< LVecBase4f >::get_ref_count(void) const;

485 18 get_node_ref_count 4 764 53 ConstPointerToArray< LVecBase4f >::get_node_ref_count 0 1 53 0
79
inline int ::ConstPointerToArray< LVecBase4f >::get_node_ref_count(void) const;

486 20 ~ConstPointerToArray 4 764 55 ConstPointerToArray< LVecBase4f >::~ConstPointerToArray 0 0 0
64
::ConstPointerToArray< LVecBase4f >::~ConstPointerToArray(void);

487 8 Frustumd 4 767 18 Frustumd::Frustumd 0 1 56 1374
// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
32
inline Frustumd::Frustumd(void);

488 13 make_ortho_2D 4 767 23 Frustumd::make_ortho_2D 0 2 57 58 1002
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
119
inline void Frustumd::make_ortho_2D(void);
inline void Frustumd::make_ortho_2D(double l, double r, double t, double b);

489 10 make_ortho 4 767 20 Frustumd::make_ortho 0 2 59 60 902
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
161
inline void Frustumd::make_ortho(double fnear, double ffar);
inline void Frustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

490 21 make_perspective_hfov 4 767 31 Frustumd::make_perspective_hfov 0 1 61 1158
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
99
inline void Frustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

491 21 make_perspective_vfov 4 767 31 Frustumd::make_perspective_vfov 0 1 62 0
99
inline void Frustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

492 16 make_perspective 4 767 26 Frustumd::make_perspective 0 1 63 0
92
inline void Frustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

493 22 get_perspective_params 4 767 32 Frustumd::get_perspective_params 0 0 850
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
235
inline void Frustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void Frustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

494 9 ~Frustumd 4 767 19 Frustumd::~Frustumd 0 0 0
26
Frustumd::~Frustumd(void);

495 8 Frustumf 4 768 18 Frustumf::Frustumf 0 1 64 686
// Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
32
inline Frustumf::Frustumf(void);

496 13 make_ortho_2D 4 768 23 Frustumf::make_ortho_2D 0 2 65 66 500
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
115
inline void Frustumf::make_ortho_2D(void);
inline void Frustumf::make_ortho_2D(float l, float r, float t, float b);

497 10 make_ortho 4 768 20 Frustumf::make_ortho 0 2 67 68 450
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
153
inline void Frustumf::make_ortho(float fnear, float ffar);
inline void Frustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

498 21 make_perspective_hfov 4 768 31 Frustumf::make_perspective_hfov 0 1 69 578
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
95
inline void Frustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

499 21 make_perspective_vfov 4 768 31 Frustumf::make_perspective_vfov 0 1 70 0
95
inline void Frustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

500 16 make_perspective 4 768 26 Frustumf::make_perspective 0 1 71 0
88
inline void Frustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

501 22 get_perspective_params 4 768 32 Frustumf::get_perspective_params 0 0 424
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
226
inline void Frustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void Frustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

502 9 ~Frustumf 4 768 19 Frustumf::~Frustumf 0 0 0
26
Frustumf::~Frustumf(void);

503 6 Planed 4 769 14 Planed::Planed 0 5 72 73 74 75 76 4298
// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////

// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
289
inline Planed::Planed(void);
inline Planed::Planed(LVecBase4d const &copy);
inline Planed::Planed(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline Planed::Planed(LVector3d const &normal, LPoint3d const &point);
inline Planed::Planed(double a, double b, double c, double d);

504 10 operator * 4 769 18 Planed::operator * 0 2 77 78 1090
////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
123
inline Planed Planed::operator *(LMatrix3d const &mat) const;
inline Planed Planed::operator *(LMatrix4d const &mat) const;

505 11 operator *= 4 769 19 Planed::operator *= 0 1 79 546
////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
54
inline void Planed::operator *=(LMatrix4d const &mat);

506 5 xform 4 769 13 Planed::xform 0 1 80 516
////////////////////////////////////////////////////////////////////
//     Function: Plane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
48
inline void Planed::xform(LMatrix4d const &mat);

507 10 operator - 68 769 18 Planed::operator - 0 1 81 536
////////////////////////////////////////////////////////////////////
//     Function: Plane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////
45
inline Planed Planed::operator -(void) const;

508 18 get_reflection_mat 4 769 26 Planed::get_reflection_mat 0 1 82 853
// Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Plane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
49
LMatrix4d Planed::get_reflection_mat(void) const;

509 10 get_normal 4 769 18 Planed::get_normal 0 1 83 516
////////////////////////////////////////////////////////////////////
//     Function: Plane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
48
inline LVector3d Planed::get_normal(void) const;

510 9 get_point 4 769 17 Planed::get_point 0 1 84 381
////////////////////////////////////////////////////////////////////
//     Function: Plane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
39
LPoint3d Planed::get_point(void) const;

511 13 dist_to_plane 4 769 21 Planed::dist_to_plane 0 1 85 1224
////////////////////////////////////////////////////////////////////
//     Function: Plane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
65
inline double Planed::dist_to_plane(LPoint3d const &point) const;

512 7 project 4 769 15 Planed::project 0 1 86 614
////////////////////////////////////////////////////////////////////
//     Function: Plane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
61
inline LPoint3d Planed::project(LPoint3d const &point) const;

513 15 intersects_line 4 769 23 Planed::intersects_line 0 1 87 3254
////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
212
inline bool Planed::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool Planed::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

514 16 intersects_plane 4 769 24 Planed::intersects_plane 0 1 88 588
////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
91
bool Planed::intersects_plane(LPoint3d &from, LVector3d &delta, Planed const &other) const;

515 19 intersects_parabola 4 769 27 Planed::intersects_parabola 0 0 770
////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
90
bool Planed::intersects_parabola(double &t1, double &t2, Parabolad const &parabola) const;

516 6 output 4 769 14 Planed::output 0 1 89 212
////////////////////////////////////////////////////////////////////
//     Function: Plane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
void Planed::output(ostream &out) const;

517 5 write 4 769 13 Planed::write 0 2 90 91 211
////////////////////////////////////////////////////////////////////
//     Function: Plane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
void Planed::write(ostream &out, int indent_level = (0)) const;

518 7 ~Planed 4 769 15 Planed::~Planed 0 0 0
22
Planed::~Planed(void);

519 6 Planef 4 771 14 Planef::Planef 0 5 92 93 94 95 96 2148
// Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
285
inline Planef::Planef(void);
inline Planef::Planef(LVecBase4f const &copy);
inline Planef::Planef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline Planef::Planef(LVector3f const &normal, LPoint3f const &point);
inline Planef::Planef(float a, float b, float c, float d);

520 10 operator * 4 771 18 Planef::operator * 0 2 97 98 544
////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
123
inline Planef Planef::operator *(LMatrix3f const &mat) const;
inline Planef Planef::operator *(LMatrix4f const &mat) const;

521 11 operator *= 4 771 19 Planef::operator *= 0 1 99 272
////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
54
inline void Planef::operator *=(LMatrix4f const &mat);

522 5 xform 4 771 13 Planef::xform 0 1 100 257
////////////////////////////////////////////////////////////////////
//     Function: Plane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
48
inline void Planef::xform(LMatrix4f const &mat);

523 10 operator - 68 771 18 Planef::operator - 0 1 101 267
////////////////////////////////////////////////////////////////////
//     Function: Plane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
////////////////////////////////////////////////////////////////////
45
inline Planef Planef::operator -(void) const;

524 18 get_reflection_mat 4 771 26 Planef::get_reflection_mat 0 1 102 853
// Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Plane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
49
LMatrix4f Planef::get_reflection_mat(void) const;

525 10 get_normal 4 771 18 Planef::get_normal 0 1 103 257
////////////////////////////////////////////////////////////////////
//     Function: Plane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
48
inline LVector3f Planef::get_normal(void) const;

526 9 get_point 4 771 17 Planef::get_point 0 1 104 381
////////////////////////////////////////////////////////////////////
//     Function: Plane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
39
LPoint3f Planef::get_point(void) const;

527 13 dist_to_plane 4 771 21 Planef::dist_to_plane 0 1 105 611
////////////////////////////////////////////////////////////////////
//     Function: Plane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
64
inline float Planef::dist_to_plane(LPoint3f const &point) const;

528 7 project 4 771 15 Planef::project 0 1 106 306
////////////////////////////////////////////////////////////////////
//     Function: Plane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
61
inline LPoint3f Planef::project(LPoint3f const &point) const;

529 15 intersects_line 4 771 23 Planef::intersects_line 0 1 107 1626
////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
211
inline bool Planef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool Planef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

530 16 intersects_plane 4 771 24 Planef::intersects_plane 0 1 108 588
////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
91
bool Planef::intersects_plane(LPoint3f &from, LVector3f &delta, Planef const &other) const;

531 19 intersects_parabola 4 771 27 Planef::intersects_parabola 0 0 770
////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
88
bool Planef::intersects_parabola(float &t1, float &t2, Parabolaf const &parabola) const;

532 6 output 4 771 14 Planef::output 0 1 109 212
////////////////////////////////////////////////////////////////////
//     Function: Plane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
void Planef::output(ostream &out) const;

533 5 write 4 771 13 Planef::write 0 2 110 111 211
////////////////////////////////////////////////////////////////////
//     Function: Plane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
void Planef::write(ostream &out, int indent_level = (0)) const;

534 7 ~Planef 4 771 15 Planef::~Planef 0 0 0
22
Planef::~Planef(void);

535 14 PointerToArray 4 773 43 PointerToArray< LMatrix3f >::PointerToArray 0 4 112 113 114 115 0
302
inline ::PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));
inline ::PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
::PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *sequence);

536 11 empty_array 4 773 40 PointerToArray< LMatrix3f >::empty_array 0 2 116 117 0
172
static inline PointerToArray< LMatrix3f > ::PointerToArray< LMatrix3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));

537 4 size 4 773 33 PointerToArray< LMatrix3f >::size 0 1 118 0
68
inline unsigned int ::PointerToArray< LMatrix3f >::size(void) const;

538 9 push_back 4 773 38 PointerToArray< LMatrix3f >::push_back 0 1 119 0
73
inline void ::PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

539 8 pop_back 4 773 37 PointerToArray< LMatrix3f >::pop_back 0 1 120 0
58
inline void ::PointerToArray< LMatrix3f >::pop_back(void);

540 11 get_element 4 773 40 PointerToArray< LMatrix3f >::get_element 0 1 121 0
89
inline LMatrix3f const &::PointerToArray< LMatrix3f >::get_element(unsigned int n) const;

541 11 set_element 4 773 40 PointerToArray< LMatrix3f >::set_element 0 1 122 0
95
inline void ::PointerToArray< LMatrix3f >::set_element(unsigned int n, LMatrix3f const &value);

542 11 __getitem__ 4 773 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 123 0
89
inline LMatrix3f const &::PointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

543 11 __setitem__ 4 773 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 124 0
95
inline void ::PointerToArray< LMatrix3f >::__setitem__(unsigned int n, LMatrix3f const &value);

544 8 get_data 4 773 37 PointerToArray< LMatrix3f >::get_data 0 1 125 0
80
inline basic_string< char > ::PointerToArray< LMatrix3f >::get_data(void) const;

545 8 set_data 4 773 37 PointerToArray< LMatrix3f >::set_data 0 1 126 0
86
inline void ::PointerToArray< LMatrix3f >::set_data(basic_string< char > const &data);

546 11 get_subdata 4 773 40 PointerToArray< LMatrix3f >::get_subdata 0 1 127 0
113
inline basic_string< char > ::PointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

547 11 set_subdata 4 773 40 PointerToArray< LMatrix3f >::set_subdata 0 1 128 0
125
inline void ::PointerToArray< LMatrix3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

548 13 get_ref_count 4 773 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 129 0
68
inline int ::PointerToArray< LMatrix3f >::get_ref_count(void) const;

549 18 get_node_ref_count 4 773 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 130 0
73
inline int ::PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

550 15 ~PointerToArray 4 773 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
53
::PointerToArray< LMatrix3f >::~PointerToArray(void);

551 14 PointerToArray 4 774 43 PointerToArray< LMatrix4f >::PointerToArray 0 4 131 132 133 134 0
302
inline ::PointerToArray< LMatrix4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix4f const *)(0)))));
inline ::PointerToArray< LMatrix4f >::PointerToArray(PointerToArray< LMatrix4f > const &copy);
::PointerToArray< LMatrix4f >::PointerToArray(PyObject *self, PyObject *sequence);

552 11 empty_array 4 774 40 PointerToArray< LMatrix4f >::empty_array 0 2 135 136 0
172
static inline PointerToArray< LMatrix4f > ::PointerToArray< LMatrix4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix4f const *)(0)))));

553 4 size 4 774 33 PointerToArray< LMatrix4f >::size 0 1 137 0
68
inline unsigned int ::PointerToArray< LMatrix4f >::size(void) const;

554 9 push_back 4 774 38 PointerToArray< LMatrix4f >::push_back 0 1 138 0
73
inline void ::PointerToArray< LMatrix4f >::push_back(LMatrix4f const &x);

555 8 pop_back 4 774 37 PointerToArray< LMatrix4f >::pop_back 0 1 139 0
58
inline void ::PointerToArray< LMatrix4f >::pop_back(void);

556 11 get_element 4 774 40 PointerToArray< LMatrix4f >::get_element 0 1 140 0
89
inline LMatrix4f const &::PointerToArray< LMatrix4f >::get_element(unsigned int n) const;

557 11 set_element 4 774 40 PointerToArray< LMatrix4f >::set_element 0 1 141 0
95
inline void ::PointerToArray< LMatrix4f >::set_element(unsigned int n, LMatrix4f const &value);

558 11 __getitem__ 4 774 40 PointerToArray< LMatrix4f >::__getitem__ 0 1 142 0
89
inline LMatrix4f const &::PointerToArray< LMatrix4f >::__getitem__(unsigned int n) const;

559 11 __setitem__ 4 774 40 PointerToArray< LMatrix4f >::__setitem__ 0 1 143 0
95
inline void ::PointerToArray< LMatrix4f >::__setitem__(unsigned int n, LMatrix4f const &value);

560 8 get_data 4 774 37 PointerToArray< LMatrix4f >::get_data 0 1 144 0
80
inline basic_string< char > ::PointerToArray< LMatrix4f >::get_data(void) const;

561 8 set_data 4 774 37 PointerToArray< LMatrix4f >::set_data 0 1 145 0
86
inline void ::PointerToArray< LMatrix4f >::set_data(basic_string< char > const &data);

562 11 get_subdata 4 774 40 PointerToArray< LMatrix4f >::get_subdata 0 1 146 0
113
inline basic_string< char > ::PointerToArray< LMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

563 11 set_subdata 4 774 40 PointerToArray< LMatrix4f >::set_subdata 0 1 147 0
125
inline void ::PointerToArray< LMatrix4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

564 13 get_ref_count 4 774 42 PointerToArray< LMatrix4f >::get_ref_count 0 1 148 0
68
inline int ::PointerToArray< LMatrix4f >::get_ref_count(void) const;

565 18 get_node_ref_count 4 774 47 PointerToArray< LMatrix4f >::get_node_ref_count 0 1 149 0
73
inline int ::PointerToArray< LMatrix4f >::get_node_ref_count(void) const;

566 15 ~PointerToArray 4 774 44 PointerToArray< LMatrix4f >::~PointerToArray 0 0 0
53
::PointerToArray< LMatrix4f >::~PointerToArray(void);

567 14 PointerToArray 4 775 44 PointerToArray< LVecBase2f >::PointerToArray 0 4 150 151 152 153 0
307
inline ::PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));
inline ::PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
::PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *sequence);

568 11 empty_array 4 775 41 PointerToArray< LVecBase2f >::empty_array 0 2 154 155 0
175
static inline PointerToArray< LVecBase2f > ::PointerToArray< LVecBase2f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));

569 4 size 4 775 34 PointerToArray< LVecBase2f >::size 0 1 156 0
69
inline unsigned int ::PointerToArray< LVecBase2f >::size(void) const;

570 9 push_back 4 775 39 PointerToArray< LVecBase2f >::push_back 0 1 157 0
75
inline void ::PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

571 8 pop_back 4 775 38 PointerToArray< LVecBase2f >::pop_back 0 1 158 0
59
inline void ::PointerToArray< LVecBase2f >::pop_back(void);

572 11 get_element 4 775 41 PointerToArray< LVecBase2f >::get_element 0 1 159 0
91
inline LVecBase2f const &::PointerToArray< LVecBase2f >::get_element(unsigned int n) const;

573 11 set_element 4 775 41 PointerToArray< LVecBase2f >::set_element 0 1 160 0
97
inline void ::PointerToArray< LVecBase2f >::set_element(unsigned int n, LVecBase2f const &value);

574 11 __getitem__ 4 775 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 161 0
91
inline LVecBase2f const &::PointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

575 11 __setitem__ 4 775 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 162 0
97
inline void ::PointerToArray< LVecBase2f >::__setitem__(unsigned int n, LVecBase2f const &value);

576 8 get_data 4 775 38 PointerToArray< LVecBase2f >::get_data 0 1 163 0
81
inline basic_string< char > ::PointerToArray< LVecBase2f >::get_data(void) const;

577 8 set_data 4 775 38 PointerToArray< LVecBase2f >::set_data 0 1 164 0
87
inline void ::PointerToArray< LVecBase2f >::set_data(basic_string< char > const &data);

578 11 get_subdata 4 775 41 PointerToArray< LVecBase2f >::get_subdata 0 1 165 0
114
inline basic_string< char > ::PointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

579 11 set_subdata 4 775 41 PointerToArray< LVecBase2f >::set_subdata 0 1 166 0
126
inline void ::PointerToArray< LVecBase2f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

580 13 get_ref_count 4 775 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 167 0
69
inline int ::PointerToArray< LVecBase2f >::get_ref_count(void) const;

581 18 get_node_ref_count 4 775 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 168 0
74
inline int ::PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

582 15 ~PointerToArray 4 775 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase2f >::~PointerToArray(void);

583 14 PointerToArray 4 776 44 PointerToArray< LVecBase3f >::PointerToArray 0 4 169 170 171 172 0
307
inline ::PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));
inline ::PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
::PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *sequence);

584 11 empty_array 4 776 41 PointerToArray< LVecBase3f >::empty_array 0 2 173 174 0
175
static inline PointerToArray< LVecBase3f > ::PointerToArray< LVecBase3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));

585 4 size 4 776 34 PointerToArray< LVecBase3f >::size 0 1 175 0
69
inline unsigned int ::PointerToArray< LVecBase3f >::size(void) const;

586 9 push_back 4 776 39 PointerToArray< LVecBase3f >::push_back 0 1 176 0
75
inline void ::PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

587 8 pop_back 4 776 38 PointerToArray< LVecBase3f >::pop_back 0 1 177 0
59
inline void ::PointerToArray< LVecBase3f >::pop_back(void);

588 11 get_element 4 776 41 PointerToArray< LVecBase3f >::get_element 0 1 178 0
91
inline LVecBase3f const &::PointerToArray< LVecBase3f >::get_element(unsigned int n) const;

589 11 set_element 4 776 41 PointerToArray< LVecBase3f >::set_element 0 1 179 0
97
inline void ::PointerToArray< LVecBase3f >::set_element(unsigned int n, LVecBase3f const &value);

590 11 __getitem__ 4 776 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 180 0
91
inline LVecBase3f const &::PointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

591 11 __setitem__ 4 776 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 181 0
97
inline void ::PointerToArray< LVecBase3f >::__setitem__(unsigned int n, LVecBase3f const &value);

592 8 get_data 4 776 38 PointerToArray< LVecBase3f >::get_data 0 1 182 0
81
inline basic_string< char > ::PointerToArray< LVecBase3f >::get_data(void) const;

593 8 set_data 4 776 38 PointerToArray< LVecBase3f >::set_data 0 1 183 0
87
inline void ::PointerToArray< LVecBase3f >::set_data(basic_string< char > const &data);

594 11 get_subdata 4 776 41 PointerToArray< LVecBase3f >::get_subdata 0 1 184 0
114
inline basic_string< char > ::PointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

595 11 set_subdata 4 776 41 PointerToArray< LVecBase3f >::set_subdata 0 1 185 0
126
inline void ::PointerToArray< LVecBase3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

596 13 get_ref_count 4 776 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 186 0
69
inline int ::PointerToArray< LVecBase3f >::get_ref_count(void) const;

597 18 get_node_ref_count 4 776 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 187 0
74
inline int ::PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

598 15 ~PointerToArray 4 776 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase3f >::~PointerToArray(void);

599 14 PointerToArray 4 777 44 PointerToArray< LVecBase4f >::PointerToArray 0 4 188 189 190 191 0
307
inline ::PointerToArray< LVecBase4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase4f const *)(0)))));
inline ::PointerToArray< LVecBase4f >::PointerToArray(PointerToArray< LVecBase4f > const &copy);
::PointerToArray< LVecBase4f >::PointerToArray(PyObject *self, PyObject *sequence);

600 11 empty_array 4 777 41 PointerToArray< LVecBase4f >::empty_array 0 2 192 193 0
175
static inline PointerToArray< LVecBase4f > ::PointerToArray< LVecBase4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase4f const *)(0)))));

601 4 size 4 777 34 PointerToArray< LVecBase4f >::size 0 1 194 0
69
inline unsigned int ::PointerToArray< LVecBase4f >::size(void) const;

602 9 push_back 4 777 39 PointerToArray< LVecBase4f >::push_back 0 1 195 0
75
inline void ::PointerToArray< LVecBase4f >::push_back(LVecBase4f const &x);

603 8 pop_back 4 777 38 PointerToArray< LVecBase4f >::pop_back 0 1 196 0
59
inline void ::PointerToArray< LVecBase4f >::pop_back(void);

604 11 get_element 4 777 41 PointerToArray< LVecBase4f >::get_element 0 1 197 0
91
inline LVecBase4f const &::PointerToArray< LVecBase4f >::get_element(unsigned int n) const;

605 11 set_element 4 777 41 PointerToArray< LVecBase4f >::set_element 0 1 198 0
97
inline void ::PointerToArray< LVecBase4f >::set_element(unsigned int n, LVecBase4f const &value);

606 11 __getitem__ 4 777 41 PointerToArray< LVecBase4f >::__getitem__ 0 1 199 0
91
inline LVecBase4f const &::PointerToArray< LVecBase4f >::__getitem__(unsigned int n) const;

607 11 __setitem__ 4 777 41 PointerToArray< LVecBase4f >::__setitem__ 0 1 200 0
97
inline void ::PointerToArray< LVecBase4f >::__setitem__(unsigned int n, LVecBase4f const &value);

608 8 get_data 4 777 38 PointerToArray< LVecBase4f >::get_data 0 1 201 0
81
inline basic_string< char > ::PointerToArray< LVecBase4f >::get_data(void) const;

609 8 set_data 4 777 38 PointerToArray< LVecBase4f >::set_data 0 1 202 0
87
inline void ::PointerToArray< LVecBase4f >::set_data(basic_string< char > const &data);

610 11 get_subdata 4 777 41 PointerToArray< LVecBase4f >::get_subdata 0 1 203 0
114
inline basic_string< char > ::PointerToArray< LVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

611 11 set_subdata 4 777 41 PointerToArray< LVecBase4f >::set_subdata 0 1 204 0
126
inline void ::PointerToArray< LVecBase4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

612 13 get_ref_count 4 777 43 PointerToArray< LVecBase4f >::get_ref_count 0 1 205 0
69
inline int ::PointerToArray< LVecBase4f >::get_ref_count(void) const;

613 18 get_node_ref_count 4 777 48 PointerToArray< LVecBase4f >::get_node_ref_count 0 1 206 0
74
inline int ::PointerToArray< LVecBase4f >::get_node_ref_count(void) const;

614 15 ~PointerToArray 4 777 45 PointerToArray< LVecBase4f >::~PointerToArray 0 0 0
54
::PointerToArray< LVecBase4f >::~PointerToArray(void);

615 9 make_copy 4 778 25 BoundingVolume::make_copy 0 1 207 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

616 8 is_empty 4 778 24 BoundingVolume::is_empty 0 1 208 525
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
////////////////////////////////////////////////////////////////////
49
inline bool BoundingVolume::is_empty(void) const;

617 11 is_infinite 4 778 27 BoundingVolume::is_infinite 0 1 209 905
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
////////////////////////////////////////////////////////////////////
52
inline bool BoundingVolume::is_infinite(void) const;

618 12 set_infinite 4 778 28 BoundingVolume::set_infinite 0 1 210 383
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
////////////////////////////////////////////////////////////////////
47
inline void BoundingVolume::set_infinite(void);

619 9 extend_by 4 778 25 BoundingVolume::extend_by 0 1 211 303
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

620 6 around 4 778 22 BoundingVolume::around 0 0 573
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::around
//       Access: Published
//  Description: Resets the volume to enclose only the volumes
//               indicated.  Returns true if successful, false if the
//               volume doesn't know how to do that or can't do that.
////////////////////////////////////////////////////////////////////
87
bool BoundingVolume::around(BoundingVolume const **first, BoundingVolume const **last);

621 8 contains 4 778 24 BoundingVolume::contains 0 1 212 372
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

622 6 output 4 778 22 BoundingVolume::output 0 1 213 0
60
virtual void BoundingVolume::output(ostream &out) const = 0;

623 5 write 4 778 21 BoundingVolume::write 0 2 214 215 220
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
virtual void BoundingVolume::write(ostream &out, int indent_level = (0)) const;

624 14 get_class_type 4 778 30 BoundingVolume::get_class_type 0 1 216 0
55
static TypeHandle BoundingVolume::get_class_type(void);

625 15 ~BoundingVolume 4 778 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

626 9 extend_by 4 782 34 GeometricBoundingVolume::extend_by 0 2 217 218 619
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
////////////////////////////////////////////////////////////////////
154
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3f const &point);

627 6 around 4 782 31 GeometricBoundingVolume::around 0 1 219 769
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the volumes
//               indicated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
////////////////////////////////////////////////////////////////////
211
inline bool GeometricBoundingVolume::around(GeometricBoundingVolume const **first, GeometricBoundingVolume const **last);
inline bool GeometricBoundingVolume::around(LPoint3f const *first, LPoint3f const *last);

628 8 contains 4 782 33 GeometricBoundingVolume::contains 0 3 220 221 222 1143
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
////////////////////////////////////////////////////////////////////
252
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3f const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3f const &a, LPoint3f const &b) const;

629 17 get_approx_center 4 782 42 GeometricBoundingVolume::get_approx_center 0 1 223 0
76
virtual LPoint3f GeometricBoundingVolume::get_approx_center(void) const = 0;

630 5 xform 4 782 30 GeometricBoundingVolume::xform 0 1 224 0
70
virtual void GeometricBoundingVolume::xform(LMatrix4f const &mat) = 0;

631 14 get_class_type 4 782 39 GeometricBoundingVolume::get_class_type 0 1 225 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

632 24 ~GeometricBoundingVolume 4 782 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

633 7 get_min 4 783 29 FiniteBoundingVolume::get_min 0 1 226 0
63
virtual LPoint3f FiniteBoundingVolume::get_min(void) const = 0;

634 7 get_max 4 783 29 FiniteBoundingVolume::get_max 0 1 227 0
63
virtual LPoint3f FiniteBoundingVolume::get_max(void) const = 0;

635 10 get_volume 4 783 32 FiniteBoundingVolume::get_volume 0 1 228 238
////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
59
virtual float FiniteBoundingVolume::get_volume(void) const;

636 14 get_class_type 4 783 36 FiniteBoundingVolume::get_class_type 0 1 229 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

637 21 ~FiniteBoundingVolume 4 783 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

638 9 Parabolaf 4 784 20 Parabolaf::Parabolaf 0 3 230 231 232 1372
// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Parabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
178
inline Parabolaf::Parabolaf(void);
inline Parabolaf::Parabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline Parabolaf::Parabolaf(Parabolaf const &copy);

639 10 operator = 4 784 21 Parabolaf::operator = 0 1 233 234
////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void Parabolaf::operator =(Parabolaf const &copy);

640 10 ~Parabolaf 4 784 21 Parabolaf::~Parabolaf 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: Parabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
35
inline Parabolaf::~Parabolaf(void);

641 5 xform 4 784 16 Parabolaf::xform 0 1 234 753
// Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Parabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
44
void Parabolaf::xform(LMatrix4f const &mat);

642 5 get_a 4 784 16 Parabolaf::get_a 0 1 235 312
////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
54
inline LVecBase3f const &Parabolaf::get_a(void) const;

643 5 get_b 4 784 16 Parabolaf::get_b 0 1 236 317
////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
54
inline LVecBase3f const &Parabolaf::get_b(void) const;

644 5 get_c 4 784 16 Parabolaf::get_c 0 1 237 311
////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
54
inline LVecBase3f const &Parabolaf::get_c(void) const;

645 10 calc_point 4 784 21 Parabolaf::calc_point 0 1 238 265
////////////////////////////////////////////////////////////////////
//     Function: Parabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
53
inline LPoint3f Parabolaf::calc_point(float t) const;

646 6 output 4 784 17 Parabolaf::output 0 1 239 215
////////////////////////////////////////////////////////////////////
//     Function: Parabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void Parabolaf::output(ostream &out) const;

647 5 write 4 784 16 Parabolaf::write 0 2 240 241 214
////////////////////////////////////////////////////////////////////
//     Function: Parabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void Parabolaf::write(ostream &out, int indent_level = (0)) const;

648 9 Parabolad 4 785 20 Parabolad::Parabolad 0 3 242 243 244 2746
// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Parabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

// Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Parabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
178
inline Parabolad::Parabolad(void);
inline Parabolad::Parabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline Parabolad::Parabolad(Parabolad const &copy);

649 10 operator = 4 785 21 Parabolad::operator = 0 1 245 470
////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Assignment Operator
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline void Parabolad::operator =(Parabolad const &copy);

650 10 ~Parabolad 4 785 21 Parabolad::~Parabolad 0 0 442
////////////////////////////////////////////////////////////////////
//     Function: Parabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
35
inline Parabolad::~Parabolad(void);

651 5 xform 4 785 16 Parabolad::xform 0 1 246 753
// Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Parabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
44
void Parabolad::xform(LMatrix4d const &mat);

652 5 get_a 4 785 16 Parabolad::get_a 0 1 247 626
////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
54
inline LVecBase3d const &Parabolad::get_a(void) const;

653 5 get_b 4 785 16 Parabolad::get_b 0 1 248 636
////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
54
inline LVecBase3d const &Parabolad::get_b(void) const;

654 5 get_c 4 785 16 Parabolad::get_c 0 1 249 624
////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
54
inline LVecBase3d const &Parabolad::get_c(void) const;

655 10 calc_point 4 785 21 Parabolad::calc_point 0 1 250 532
////////////////////////////////////////////////////////////////////
//     Function: Parabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Parabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
54
inline LPoint3d Parabolad::calc_point(double t) const;

656 6 output 4 785 17 Parabolad::output 0 1 251 215
////////////////////////////////////////////////////////////////////
//     Function: Parabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void Parabolad::output(ostream &out) const;

657 5 write 4 785 16 Parabolad::write 0 2 252 253 214
////////////////////////////////////////////////////////////////////
//     Function: Parabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void Parabolad::write(ostream &out, int indent_level = (0)) const;

658 11 BoundingBox 4 786 24 BoundingBox::BoundingBox 0 2 254 255 1001
// Filename: boundingBox.I
// Created by:  drose (31May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
////////////////////////////////////////////////////////////////////
113
inline BoundingBox::BoundingBox(void);
inline BoundingBox::BoundingBox(LPoint3f const &min, LPoint3f const &max);

659 12 operator new 4 786 25 BoundingBox::operator new 0 1 256 0
128
inline void *BoundingBox::operator new(unsigned int size);
inline void *BoundingBox::operator new(unsigned int size, void *ptr);

660 15 operator delete 4 786 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

661 12 validate_ptr 4 786 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

662 14 get_num_points 4 786 27 BoundingBox::get_num_points 0 1 257 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_points(void) const;

663 9 get_point 4 786 22 BoundingBox::get_point 0 1 258 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
////////////////////////////////////////////////////////////////////
52
inline LPoint3f BoundingBox::get_point(int n) const;

664 14 get_num_planes 4 786 27 BoundingBox::get_num_planes 0 1 259 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_planes(void) const;

665 9 get_plane 4 786 22 BoundingBox::get_plane 0 1 260 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
////////////////////////////////////////////////////////////////////
50
inline Planef BoundingBox::get_plane(int n) const;

666 14 get_class_type 4 786 27 BoundingBox::get_class_type 0 1 261 0
52
static TypeHandle BoundingBox::get_class_type(void);

667 12 ~BoundingBox 4 786 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

668 18 BoundingHexahedron 4 787 38 BoundingHexahedron::BoundingHexahedron 0 3 262 263 264 1188
// Filename: boundingHexahedron.I
// Created by:  drose (03Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
323
BoundingHexahedron::BoundingHexahedron(Frustumf const &frustum, bool is_ortho, CoordinateSystem cs = (CS_default));
BoundingHexahedron::BoundingHexahedron(LPoint3f const &fll, LPoint3f const &flr, LPoint3f const &fur, LPoint3f const &ful, LPoint3f const &nll, LPoint3f const &nlr, LPoint3f const &nur, LPoint3f const &nul);

669 14 get_num_points 4 787 34 BoundingHexahedron::get_num_points 0 1 265 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_points(void) const;

670 9 get_point 4 787 29 BoundingHexahedron::get_point 0 1 266 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f BoundingHexahedron::get_point(int n) const;

671 14 get_num_planes 4 787 34 BoundingHexahedron::get_num_planes 0 1 267 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_planes(void) const;

672 9 get_plane 4 787 29 BoundingHexahedron::get_plane 0 1 268 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
////////////////////////////////////////////////////////////////////
57
inline Planef BoundingHexahedron::get_plane(int n) const;

673 14 get_class_type 4 787 34 BoundingHexahedron::get_class_type 0 1 269 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

674 19 ~BoundingHexahedron 4 787 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

675 12 BoundingLine 4 788 26 BoundingLine::BoundingLine 0 1 270 937
// Filename: boundingLine.I
// Created by:  drose (04Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline BoundingLine::BoundingLine(LPoint3f const &a, LPoint3f const &b);

676 12 operator new 4 788 26 BoundingLine::operator new 0 1 271 0
130
inline void *BoundingLine::operator new(unsigned int size);
inline void *BoundingLine::operator new(unsigned int size, void *ptr);

677 15 operator delete 4 788 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

678 12 validate_ptr 4 788 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

679 11 get_point_a 4 788 25 BoundingLine::get_point_a 0 1 272 271
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
////////////////////////////////////////////////////////////////////
61
inline LPoint3f const &BoundingLine::get_point_a(void) const;

680 11 get_point_b 4 788 25 BoundingLine::get_point_b 0 1 273 272
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f BoundingLine::get_point_b(void) const;

681 14 get_class_type 4 788 28 BoundingLine::get_class_type 0 1 274 0
53
static TypeHandle BoundingLine::get_class_type(void);

682 13 ~BoundingLine 4 788 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

683 13 BoundingPlane 4 789 28 BoundingPlane::BoundingPlane 0 2 275 276 1022
// Filename: boundingPlane.I
// Created by:  drose (19Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
100
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(Planef const &plane);

684 12 operator new 4 789 27 BoundingPlane::operator new 0 1 277 0
132
inline void *BoundingPlane::operator new(unsigned int size);
inline void *BoundingPlane::operator new(unsigned int size, void *ptr);

685 15 operator delete 4 789 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

686 12 validate_ptr 4 789 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

687 9 get_plane 4 789 24 BoundingPlane::get_plane 0 1 278 224
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline Planef const &BoundingPlane::get_plane(void) const;

688 14 get_class_type 4 789 29 BoundingPlane::get_class_type 0 1 279 0
54
static TypeHandle BoundingPlane::get_class_type(void);

689 14 ~BoundingPlane 4 789 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

690 14 BoundingSphere 4 790 30 BoundingSphere::BoundingSphere 0 2 280 281 1002
// Filename: boundingSphere.I
// Created by:  drose (02Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
////////////////////////////////////////////////////////////////////
121
inline BoundingSphere::BoundingSphere(void);
inline BoundingSphere::BoundingSphere(LPoint3f const &center, float radius);

691 12 operator new 4 790 28 BoundingSphere::operator new 0 1 282 0
134
inline void *BoundingSphere::operator new(unsigned int size);
inline void *BoundingSphere::operator new(unsigned int size, void *ptr);

692 15 operator delete 4 790 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

693 12 validate_ptr 4 790 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

694 10 get_center 4 790 26 BoundingSphere::get_center 0 1 283 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline LPoint3f BoundingSphere::get_center(void) const;

695 10 get_radius 4 790 26 BoundingSphere::get_radius 0 1 284 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline float BoundingSphere::get_radius(void) const;

696 14 get_class_type 4 790 30 BoundingSphere::get_class_type 0 1 285 0
55
static TypeHandle BoundingSphere::get_class_type(void);

697 15 ~BoundingSphere 4 790 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

698 8 heads_up 1 0 8 heads_up 0 24 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 1390
////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
////////////////////////////////////////////////////////////////////
1255
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

699 7 look_at 1 0 7 look_at 0 24 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 1390
////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
////////////////////////////////////////////////////////////////////
1243
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (CS_default));
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

700 18 OmniBoundingVolume 4 791 38 OmniBoundingVolume::OmniBoundingVolume 0 1 286 721
// Filename: omniBoundingVolume.I
// Created by:  drose (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

701 14 get_class_type 4 791 34 OmniBoundingVolume::get_class_type 0 1 287 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

702 19 ~OmniBoundingVolume 4 791 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

703 8 Mersenne 4 792 18 Mersenne::Mersenne 0 1 288 35
/* initializes mt[N] with a seed */
43
Mersenne::Mersenne(unsigned long int seed);

704 10 get_uint31 4 792 20 Mersenne::get_uint31 0 1 289 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

705 9 ~Mersenne 4 792 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

706 8 get_seed 4 793 21 PerlinNoise::get_seed 0 1 290 368
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
////////////////////////////////////////////////////////////////////
53
inline unsigned long int PerlinNoise::get_seed(void);

707 12 ~PerlinNoise 4 793 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

708 12 PerlinNoise2 4 794 26 PerlinNoise2::PerlinNoise2 0 5 291 292 293 294 295 1633
// Filename: perlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
212
inline PerlinNoise2::PerlinNoise2(void);
inline PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

709 10 operator = 4 794 24 PerlinNoise2::operator = 0 1 296 337
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

710 9 set_scale 4 794 23 PerlinNoise2::set_scale 0 4 297 298 299 300 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

711 5 noise 4 794 19 PerlinNoise2::noise 0 3 301 302 303 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

712 11 operator () 4 794 25 PerlinNoise2::operator () 0 3 304 305 306 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
////////////////////////////////////////////////////////////////////
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

713 13 ~PerlinNoise2 4 794 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

714 12 PerlinNoise3 4 795 26 PerlinNoise3::PerlinNoise3 0 5 307 308 309 310 311 1633
// Filename: perlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
223
inline PerlinNoise3::PerlinNoise3(void);
inline PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

715 10 operator = 4 795 24 PerlinNoise3::operator = 0 1 312 337
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

716 9 set_scale 4 795 23 PerlinNoise3::set_scale 0 4 313 314 315 316 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

717 5 noise 4 795 19 PerlinNoise3::noise 0 3 317 318 319 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

718 11 operator () 4 795 25 PerlinNoise3::operator () 0 3 320 321 322 808
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

719 13 ~PerlinNoise3 4 795 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

720 9 rotate_to 1 0 9 rotate_to 0 4 423 424 425 426 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

721 19 StackedPerlinNoise2 4 796 40 StackedPerlinNoise2::StackedPerlinNoise2 0 8 323 324 325 326 327 328 329 330 1865
// Filename: stackedPerlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
322
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = (2), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

722 10 operator = 4 796 31 StackedPerlinNoise2::operator = 0 1 331 376
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

723 9 add_level 4 796 30 StackedPerlinNoise2::add_level 0 2 332 333 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = (1));

724 5 clear 4 796 26 StackedPerlinNoise2::clear 0 1 334 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise2::clear(void);

725 5 noise 4 796 26 StackedPerlinNoise2::noise 0 3 335 336 337 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

726 11 operator () 4 796 32 StackedPerlinNoise2::operator () 0 3 338 339 340 829
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

727 20 ~StackedPerlinNoise2 4 796 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

728 19 StackedPerlinNoise3 4 797 40 StackedPerlinNoise3::StackedPerlinNoise3 0 8 341 342 343 344 345 346 347 348 1865
// Filename: stackedPerlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
333
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = (3), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

729 10 operator = 4 797 31 StackedPerlinNoise3::operator = 0 1 349 376
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

730 9 add_level 4 797 30 StackedPerlinNoise3::add_level 0 2 350 351 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = (1));

731 5 clear 4 797 26 StackedPerlinNoise3::clear 0 1 352 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise3::clear(void);

732 5 noise 4 797 26 StackedPerlinNoise3::noise 0 3 353 354 355 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

733 11 operator () 4 797 32 StackedPerlinNoise3::operator () 0 3 356 357 358 829
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

734 20 ~StackedPerlinNoise3 4 797 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

735 12 Triangulator 4 798 26 Triangulator::Triangulator 0 1 359 225
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
33
Triangulator::Triangulator(void);

736 5 clear 4 798 19 Triangulator::clear 0 1 360 337
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
////////////////////////////////////////////////////////////////////
31
void Triangulator::clear(void);

737 10 add_vertex 4 798 24 Triangulator::add_vertex 0 2 361 362 1114
// Filename: triangulator.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

738 16 get_num_vertices 4 798 30 Triangulator::get_num_vertices 0 1 363 545
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
////////////////////////////////////////////////////////////////////
54
inline int Triangulator::get_num_vertices(void) const;

739 10 get_vertex 4 798 24 Triangulator::get_vertex 0 1 364 247
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
////////////////////////////////////////////////////////////////////
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

740 13 clear_polygon 4 798 27 Triangulator::clear_polygon 0 1 365 342
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
////////////////////////////////////////////////////////////////////
39
void Triangulator::clear_polygon(void);

741 18 add_polygon_vertex 4 798 32 Triangulator::add_polygon_vertex 0 1 366 645
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
////////////////////////////////////////////////////////////////////
49
void Triangulator::add_polygon_vertex(int index);

742 15 is_left_winding 4 798 29 Triangulator::is_left_winding 0 1 367 394
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
////////////////////////////////////////////////////////////////////
54
inline bool Triangulator::is_left_winding(void) const;

743 10 begin_hole 4 798 24 Triangulator::begin_hole 0 1 368 308
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
////////////////////////////////////////////////////////////////////
36
void Triangulator::begin_hole(void);

744 15 add_hole_vertex 4 798 29 Triangulator::add_hole_vertex 0 1 369 571
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
////////////////////////////////////////////////////////////////////
46
void Triangulator::add_hole_vertex(int index);

745 11 triangulate 4 798 25 Triangulator::triangulate 0 1 370 439
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
////////////////////////////////////////////////////////////////////
37
void Triangulator::triangulate(void);

746 17 get_num_triangles 4 798 31 Triangulator::get_num_triangles 0 1 371 328
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
////////////////////////////////////////////////////////////////////
48
int Triangulator::get_num_triangles(void) const;

747 15 get_triangle_v0 4 798 29 Triangulator::get_triangle_v0 0 1 372 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v0(int n) const;

748 15 get_triangle_v1 4 798 29 Triangulator::get_triangle_v1 0 1 373 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v1(int n) const;

749 15 get_triangle_v2 4 798 29 Triangulator::get_triangle_v2 0 1 374 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v2(int n) const;

750 13 ~Triangulator 4 798 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

426
1 14 Dtool_SkjPrVxk 7 8 801 438 14 Dtool_SkjPrVxk 0 1 4 copy 1 799  
2 14 Dtool_SkjPpaza 7 8 801 438 14 Dtool_SkjPpaza 0 1 4 copy 1 802  
3 14 Dtool_SkjPKofp 6 9 804 0 14 Dtool_SkjPKofp 0 1 4 this 3 799  
4 14 Dtool_SkjPft6D 6 10 805 0 14 Dtool_SkjPft6D 0 2 4 this 3 799  1 n 1 804  
5 14 Dtool_SkjP1BL7 6 11 805 0 14 Dtool_SkjP1BL7 0 2 4 this 3 799  1 n 1 804  
6 14 Dtool_SkjP_SHt 6 12 808 0 14 Dtool_SkjP_SHt 0 1 4 this 3 799  
7 14 Dtool_SkjPJPZ_ 6 13 808 0 14 Dtool_SkjPJPZ_ 0 3 4 this 3 799  1 n 1 804  5 count 1 804  
8 14 Dtool_SkjPx8tw 6 14 809 0 14 Dtool_SkjPx8tw 0 1 4 this 3 799  
9 14 Dtool_SkjPUk4u 6 15 809 0 14 Dtool_SkjPUk4u 0 1 4 this 3 799  
10 14 Dtool_SkjPPF3f 4 5 811 0 14 Dtool_SkjPPF3f 0 1 4 this 3 810  
11 14 Dtool_SkjPEXO2 4 6 811 0 14 Dtool_SkjPEXO2 0 2 4 this 3 812  3 out 1 814  
12 14 Dtool_SkjPsuG0 7 23 818 450 14 Dtool_SkjPsuG0 0 1 4 copy 1 816  
13 14 Dtool_SkjPuDFD 7 23 818 450 14 Dtool_SkjPuDFD 0 1 4 copy 1 819  
14 14 Dtool_SkjPKhtq 6 24 804 0 14 Dtool_SkjPKhtq 0 1 4 this 3 816  
15 14 Dtool_SkjPfkIF 6 25 821 0 14 Dtool_SkjPfkIF 0 2 4 this 3 816  1 n 1 804  
16 14 Dtool_SkjP1IZ8 6 26 821 0 14 Dtool_SkjP1IZ8 0 2 4 this 3 816  1 n 1 804  
17 14 Dtool_SkjP_VVu 6 27 808 0 14 Dtool_SkjP_VVu 0 1 4 this 3 816  
18 14 Dtool_SkjPJWn_ 6 28 808 0 14 Dtool_SkjPJWn_ 0 3 4 this 3 816  1 n 1 804  5 count 1 804  
19 14 Dtool_SkjPxn7x 6 29 809 0 14 Dtool_SkjPxn7x 0 1 4 this 3 816  
20 14 Dtool_SkjPUjGw 6 30 809 0 14 Dtool_SkjPUjGw 0 1 4 this 3 816  
21 14 Dtool_SkjP074f 4 20 811 0 14 Dtool_SkjP074f 0 1 4 this 3 824  
22 14 Dtool_SkjPDhQ2 4 21 811 0 14 Dtool_SkjPDhQ2 0 2 4 this 3 825  3 out 1 814  
23 14 Dtool_SkjPiMrA 7 38 829 462 14 Dtool_SkjPiMrA 0 1 4 copy 1 827  
24 14 Dtool_SkjP2OwM 7 38 829 462 14 Dtool_SkjP2OwM 0 1 4 copy 1 830  
25 14 Dtool_SkjPhR1s 6 39 804 0 14 Dtool_SkjPhR1s 0 1 4 this 3 827  
26 14 Dtool_SkjPFCi7 6 40 832 0 14 Dtool_SkjPFCi7 0 2 4 this 3 827  1 n 1 804  
27 14 Dtool_SkjP5qVk 6 41 832 0 14 Dtool_SkjP5qVk 0 2 4 this 3 827  1 n 1 804  
28 14 Dtool_SkjPvjrg 6 42 808 0 14 Dtool_SkjPvjrg 0 1 4 this 3 827  
29 14 Dtool_SkjPz9KK 6 43 808 0 14 Dtool_SkjPz9KK 0 3 4 this 3 827  1 n 1 804  5 count 1 804  
30 14 Dtool_SkjPUjAU 6 44 809 0 14 Dtool_SkjPUjAU 0 1 4 this 3 827  
31 14 Dtool_SkjPlwRa 6 45 809 0 14 Dtool_SkjPlwRa 0 1 4 this 3 827  
32 14 Dtool_SkjPkIIZ 4 35 811 0 14 Dtool_SkjPkIIZ 0 1 4 this 3 835  
33 14 Dtool_SkjP5vzm 4 36 811 0 14 Dtool_SkjP5vzm 0 2 4 this 3 836  3 out 1 814  
34 14 Dtool_SkjPAfuX 7 53 840 474 14 Dtool_SkjPAfuX 0 1 4 copy 1 838  
35 14 Dtool_SkjPHUzr 7 53 840 474 14 Dtool_SkjPHUzr 0 1 4 copy 1 841  
36 14 Dtool_SkjPux5T 6 54 804 0 14 Dtool_SkjPux5T 0 1 4 this 3 838  
37 14 Dtool_SkjPEili 6 55 843 0 14 Dtool_SkjPEili 0 2 4 this 3 838  1 n 1 804  
38 14 Dtool_SkjP6KYL 6 56 843 0 14 Dtool_SkjP6KYL 0 2 4 this 3 838  1 n 1 804  
39 14 Dtool_SkjPgDvH 6 57 808 0 14 Dtool_SkjPgDvH 0 1 4 this 3 838  
40 14 Dtool_SkjPzdOx 6 58 808 0 14 Dtool_SkjPzdOx 0 3 4 this 3 838  1 n 1 804  5 count 1 804  
41 14 Dtool_SkjPUDD7 6 59 809 0 14 Dtool_SkjPUDD7 0 1 4 this 3 838  
42 14 Dtool_SkjPqQUB 6 60 809 0 14 Dtool_SkjPqQUB 0 1 4 this 3 838  
43 14 Dtool_SkjPEEvZ 4 50 811 0 14 Dtool_SkjPEEvZ 0 1 4 this 3 846  
44 14 Dtool_SkjPZzYn 4 51 811 0 14 Dtool_SkjPZzYn 0 2 4 this 3 847  3 out 1 814  
45 14 Dtool_SkjPdczu 7 68 851 486 14 Dtool_SkjPdczu 0 1 4 copy 1 849  
46 14 Dtool_SkjPVi3K 7 68 851 486 14 Dtool_SkjPVi3K 0 1 4 copy 1 852  
47 14 Dtool_SkjPuR86 6 69 804 0 14 Dtool_SkjPuR86 0 1 4 this 3 849  
48 14 Dtool_SkjPHCpJ 6 70 854 0 14 Dtool_SkjPHCpJ 0 2 4 this 3 849  1 n 1 804  
49 14 Dtool_SkjP6qcy 6 71 854 0 14 Dtool_SkjP6qcy 0 2 4 this 3 849  1 n 1 804  
50 14 Dtool_SkjPgjyu 6 72 808 0 14 Dtool_SkjPgjyu 0 1 4 this 3 849  
51 14 Dtool_SkjPy9TY 6 73 808 0 14 Dtool_SkjPy9TY 0 3 4 this 3 849  1 n 1 804  5 count 1 804  
52 14 Dtool_SkjPriHi 6 74 809 0 14 Dtool_SkjPriHi 0 1 4 this 3 849  
53 14 Dtool_SkjPqwYo 6 75 809 0 14 Dtool_SkjPqwYo 0 1 4 this 3 849  
54 14 Dtool_SkjPkBWa 4 65 811 0 14 Dtool_SkjPkBWa 0 1 4 this 3 856  
55 14 Dtool_SkjP52Bo 4 66 811 0 14 Dtool_SkjP52Bo 0 2 4 this 3 857  3 out 1 814  
56 14 Dtool_SkjP9ko_ 7 78 859 494 14 Dtool_SkjP9ko_ 686 // Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
57 14 Dtool_SkjPFiT5 4 79 811 0 14 Dtool_SkjPFiT5 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 859  
58 14 Dtool_SkjPPyqK 4 79 811 0 14 Dtool_SkjPPyqK 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 859  1 l 1 860  1 r 1 860  1 t 1 860  1 b 1 860  
59 14 Dtool_SkjPoaj7 4 80 811 0 14 Dtool_SkjPoaj7 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 859  5 fnear 1 860  4 ffar 1 860  
60 14 Dtool_SkjPBpZ4 4 80 811 0 14 Dtool_SkjPBpZ4 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 859  5 fnear 1 860  4 ffar 1 860  1 l 1 860  1 r 1 860  1 t 1 860  1 b 1 860  
61 14 Dtool_SkjPWxk6 4 81 811 0 14 Dtool_SkjPWxk6 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 859  4 xfov 1 860  6 aspect 1 860  5 fnear 1 860  4 ffar 1 860  
62 14 Dtool_SkjPNz0m 4 82 811 0 14 Dtool_SkjPNz0m 0 5 4 this 3 859  4 yfov 1 860  6 aspect 1 860  5 fnear 1 860  4 ffar 1 860  
63 14 Dtool_SkjP7tfK 4 83 811 0 14 Dtool_SkjP7tfK 0 5 4 this 3 859  4 xfov 1 860  4 yfov 1 860  5 fnear 1 860  4 ffar 1 860  
64 14 Dtool_SkjPykLF 7 87 861 502 14 Dtool_SkjPykLF 686 // Filename: frustum_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
65 14 Dtool_SkjPHiaH 4 88 811 0 14 Dtool_SkjPHiaH 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 861  
66 14 Dtool_SkjPRDrY 4 88 811 0 14 Dtool_SkjPRDrY 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 861  1 l 1 862  1 r 1 862  1 t 1 862  1 b 1 862  
67 14 Dtool_SkjPssCo 4 89 811 0 14 Dtool_SkjPssCo 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 861  5 fnear 1 862  4 ffar 1 862  
68 14 Dtool_SkjPHulf 4 89 811 0 14 Dtool_SkjPHulf 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 861  5 fnear 1 862  4 ffar 1 862  1 l 1 862  1 r 1 862  1 t 1 862  1 b 1 862  
69 14 Dtool_SkjPcYOF 4 90 811 0 14 Dtool_SkjPcYOF 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 861  4 xfov 1 862  6 aspect 1 862  5 fnear 1 862  4 ffar 1 862  
70 14 Dtool_SkjPUaex 4 91 811 0 14 Dtool_SkjPUaex 0 5 4 this 3 861  4 yfov 1 862  6 aspect 1 862  5 fnear 1 862  4 ffar 1 862  
71 14 Dtool_SkjP7E42 4 92 811 0 14 Dtool_SkjP7E42 0 5 4 this 3 861  4 xfov 1 862  4 yfov 1 862  5 fnear 1 862  4 ffar 1 862  
72 14 Dtool_SkjPnOXP 7 97 863 518 14 Dtool_SkjPnOXP 880 // Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
73 14 Dtool_SkjPgIG8 7 97 863 518 14 Dtool_SkjPgIG8 428 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 864  1 b 1 864  1 c 1 864  
74 14 Dtool_SkjPIv1H 7 97 863 518 14 Dtool_SkjPIv1H 222 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 867  
75 14 Dtool_SkjPB10l 7 97 863 518 14 Dtool_SkjPB10l 313 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 869  5 point 1 864  
76 14 Dtool_SkjP6cFb 7 97 863 518 14 Dtool_SkjP6cFb 297 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 860  1 b 1 860  1 c 1 860  1 d 1 860  
77 14 Dtool_SkjPVTn3 7 98 863 518 14 Dtool_SkjPVTn3 271 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  3 mat 1 874  
78 14 Dtool_SkjPUDJL 7 98 863 518 14 Dtool_SkjPUDJL 271 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  3 mat 1 877  
79 14 Dtool_SkjPULsd 6 99 863 0 14 Dtool_SkjPULsd 272 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  3 mat 1 877  
80 14 Dtool_SkjPgovA 4 100 811 0 14 Dtool_SkjPgovA 257 ////////////////////////////////////////////////////////////////////
//     Function: Plane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  3 mat 1 877  
81 14 Dtool_SkjPsBIL 7 101 863 518 14 Dtool_SkjPsBIL 267 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 872  
82 14 Dtool_SkjPz5g3 7 102 880 0 14 Dtool_SkjPz5g3 853 // Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Plane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 872  
83 14 Dtool_SkjP4OIM 7 103 881 0 14 Dtool_SkjP4OIM 257 ////////////////////////////////////////////////////////////////////
//     Function: Plane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 872  
84 14 Dtool_SkjPNQrN 7 104 882 0 14 Dtool_SkjPNQrN 381 ////////////////////////////////////////////////////////////////////
//     Function: Plane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 872  
85 14 Dtool_SkjPKgCi 6 105 860 0 14 Dtool_SkjPKgCi 611 ////////////////////////////////////////////////////////////////////
//     Function: Plane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  5 point 1 864  
86 14 Dtool_SkjPStKr 7 106 882 0 14 Dtool_SkjPStKr 306 ////////////////////////////////////////////////////////////////////
//     Function: Plane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  5 point 1 864  
87 14 Dtool_SkjPzf1l 6 107 883 0 14 Dtool_SkjPzf1l 609 ////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 872  18 intersection_point 1 882  2 p1 1 864  2 p2 1 864  
88 14 Dtool_SkjPEkbi 6 108 883 0 14 Dtool_SkjPEkbi 588 ////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 872  4 from 1 882  5 delta 1 881  5 other 1 872  
89 14 Dtool_SkjPxytW 4 110 811 0 14 Dtool_SkjPxytW 212 ////////////////////////////////////////////////////////////////////
//     Function: Plane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  3 out 1 814  
90 14 Dtool_SkjPkL9K 4 111 811 0 14 Dtool_SkjPkL9K 211 ////////////////////////////////////////////////////////////////////
//     Function: Plane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 872  3 out 1 814  12 indent_level 1 809  
91 14 Dtool_SkjP8yXN 4 111 811 0 14 Dtool_SkjP8yXN 211 ////////////////////////////////////////////////////////////////////
//     Function: Plane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  3 out 1 814  
92 14 Dtool_SkjPN3bW 7 115 884 534 14 Dtool_SkjPN3bW 880 // Filename: plane_src.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
93 14 Dtool_SkjPgFjF 7 115 884 534 14 Dtool_SkjPgFjF 428 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 885  1 b 1 885  1 c 1 885  
94 14 Dtool_SkjPc48O 7 115 884 534 14 Dtool_SkjPc48O 222 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 854  
95 14 Dtool_SkjPEC54 7 115 884 534 14 Dtool_SkjPEC54 313 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 888  5 point 1 885  
96 14 Dtool_SkjPIw6g 7 115 884 534 14 Dtool_SkjPIw6g 297 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 862  1 b 1 862  1 c 1 862  1 d 1 862  
97 14 Dtool_SkjPVdcZ 7 116 884 534 14 Dtool_SkjPVdcZ 271 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix3
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 891  3 mat 1 805  
98 14 Dtool_SkjPVN_s 7 116 884 534 14 Dtool_SkjPVN_s 271 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator * LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 891  3 mat 1 821  
99 14 Dtool_SkjPB0wV 6 117 884 0 14 Dtool_SkjPB0wV 272 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Operator *= LMatrix4
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 884  3 mat 1 821  
100 14 Dtool_SkjP3gqx 4 118 811 0 14 Dtool_SkjP3gqx 257 ////////////////////////////////////////////////////////////////////
//     Function: Plane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 884  3 mat 1 821  
101 14 Dtool_SkjPQINL 7 119 884 534 14 Dtool_SkjPQINL 267 ////////////////////////////////////////////////////////////////////
//     Function: Plane::Unary -
//       Access: Published
//  Description: Returns the same plane facing the opposite direction.
//////////////////////////////////////////////////////////////////// 1 4 this 3 891  
102 14 Dtool_SkjPX_l3 7 120 893 0 14 Dtool_SkjPX_l3 853 // Filename: plane_src.cxx
// Created by:  drose (03Apr01)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Plane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 891  
103 14 Dtool_SkjPUHNM 7 121 894 0 14 Dtool_SkjPUHNM 257 ////////////////////////////////////////////////////////////////////
//     Function: Plane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 891  
104 14 Dtool_SkjPpIwN 7 122 895 0 14 Dtool_SkjPpIwN 381 ////////////////////////////////////////////////////////////////////
//     Function: Plane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 891  
105 14 Dtool_SkjPyRLi 6 123 862 0 14 Dtool_SkjPyRLi 611 ////////////////////////////////////////////////////////////////////
//     Function: Plane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 891  5 point 1 885  
106 14 Dtool_SkjP_KOH 7 124 895 0 14 Dtool_SkjP_KOH 306 ////////////////////////////////////////////////////////////////////
//     Function: Plane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 891  5 point 1 885  
107 14 Dtool_SkjP7eH0 6 125 883 0 14 Dtool_SkjP7eH0 609 ////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 891  18 intersection_point 1 895  2 p1 1 885  2 p2 1 885  
108 14 Dtool_SkjPP8pH 6 126 883 0 14 Dtool_SkjPP8pH 588 ////////////////////////////////////////////////////////////////////
//     Function: Plane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 891  4 from 1 895  5 delta 1 894  5 other 1 891  
109 14 Dtool_SkjPt6yW 4 128 811 0 14 Dtool_SkjPt6yW 212 ////////////////////////////////////////////////////////////////////
//     Function: Plane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 891  3 out 1 814  
110 14 Dtool_SkjP4DCL 4 129 811 0 14 Dtool_SkjP4DCL 211 ////////////////////////////////////////////////////////////////////
//     Function: Plane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 891  3 out 1 814  12 indent_level 1 809  
111 14 Dtool_SkjPYLcN 4 129 811 0 14 Dtool_SkjPYLcN 211 ////////////////////////////////////////////////////////////////////
//     Function: Plane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 891  3 out 1 814  
112 14 Dtool_SkjP8egW 7 132 896 550 14 Dtool_SkjP8egW 0 1 4 copy 1 802  
113 14 Dtool_SkjP9TFH 7 132 896 550 14 Dtool_SkjP9TFH 0 2 4 self 1 897  8 sequence 1 897  
114 14 Dtool_SkjP_qVS 7 132 896 550 14 Dtool_SkjP_qVS 0 1 11 type_handle 1 899  
115 14 Dtool_SkjPTJ0W 7 132 896 550 14 Dtool_SkjPTJ0W 0 0 
116 14 Dtool_SkjPVaiU 7 133 896 550 14 Dtool_SkjPVaiU 0 2 1 n 1 804  11 type_handle 1 899  
117 14 Dtool_SkjP8VEr 7 133 896 550 14 Dtool_SkjP8VEr 0 1 1 n 1 804  
118 14 Dtool_SkjPB5Kz 6 134 804 0 14 Dtool_SkjPB5Kz 0 1 4 this 3 802  
119 14 Dtool_SkjPLXgY 4 135 811 0 14 Dtool_SkjPLXgY 0 2 4 this 3 896  1 x 1 805  
120 14 Dtool_SkjPd0Yx 4 136 811 0 14 Dtool_SkjPd0Yx 0 1 4 this 3 896  
121 14 Dtool_SkjPJDVA 6 137 805 0 14 Dtool_SkjPJDVA 0 2 4 this 3 802  1 n 1 804  
122 14 Dtool_SkjPc6__ 4 138 811 0 14 Dtool_SkjPc6__ 0 3 4 this 3 896  1 n 1 804  5 value 1 805  
123 14 Dtool_SkjPb_87 6 139 805 0 14 Dtool_SkjPb_87 0 2 4 this 3 802  1 n 1 804  
124 14 Dtool_SkjPnU_G 4 140 811 0 14 Dtool_SkjPnU_G 0 3 4 this 3 896  1 n 1 804  5 value 1 805  
125 14 Dtool_SkjP_N90 6 141 808 0 14 Dtool_SkjP_N90 0 1 4 this 3 802  
126 14 Dtool_SkjPzCeh 4 142 811 0 14 Dtool_SkjPzCeh 0 2 4 this 3 896  4 data 1 808  
127 14 Dtool_SkjPLnj9 6 143 808 0 14 Dtool_SkjPLnj9 0 3 4 this 3 802  1 n 1 804  5 count 1 804  
128 14 Dtool_SkjPmA7x 4 144 811 0 14 Dtool_SkjPmA7x 0 4 4 this 3 896  1 n 1 804  5 count 1 804  4 data 1 808  
129 14 Dtool_SkjPn7wW 6 145 809 0 14 Dtool_SkjPn7wW 0 1 4 this 3 802  
130 14 Dtool_SkjPI21V 6 146 809 0 14 Dtool_SkjPI21V 0 1 4 this 3 802  
131 14 Dtool_SkjPcS4g 7 149 901 566 14 Dtool_SkjPcS4g 0 1 4 copy 1 819  
132 14 Dtool_SkjPdfsH 7 149 901 566 14 Dtool_SkjPdfsH 0 2 4 self 1 897  8 sequence 1 897  
133 14 Dtool_SkjPe26S 7 149 901 566 14 Dtool_SkjPe26S 0 1 11 type_handle 1 899  
134 14 Dtool_SkjPzMdX 7 149 901 566 14 Dtool_SkjPzMdX 0 0 
135 14 Dtool_SkjP1eJV 7 150 901 566 14 Dtool_SkjP1eJV 0 2 1 n 1 804  11 type_handle 1 899  
136 14 Dtool_SkjPcZtr 7 150 901 566 14 Dtool_SkjPcZtr 0 1 1 n 1 804  
137 14 Dtool_SkjPhFxz 6 151 804 0 14 Dtool_SkjPhFxz 0 1 4 this 3 819  
138 14 Dtool_SkjPs5IZ 4 152 811 0 14 Dtool_SkjPs5IZ 0 2 4 this 3 901  1 x 1 821  
139 14 Dtool_SkjP9LAy 4 153 811 0 14 Dtool_SkjP9LAy 0 1 4 this 3 901  
140 14 Dtool_SkjPpP8A 6 154 821 0 14 Dtool_SkjPpP8A 0 2 4 this 3 819  1 n 1 804  
141 14 Dtool_SkjP9adF 4 155 811 0 14 Dtool_SkjP9adF 0 3 4 this 3 901  1 n 1 804  5 value 1 821  
142 14 Dtool_SkjP78l8 6 156 821 0 14 Dtool_SkjP78l8 0 2 4 this 3 819  1 n 1 804  
143 14 Dtool_SkjPH0eM 4 157 811 0 14 Dtool_SkjPH0eM 0 3 4 this 3 901  1 n 1 804  5 value 1 821  
144 14 Dtool_SkjPexk1 6 158 808 0 14 Dtool_SkjPexk1 0 1 4 this 3 819  
145 14 Dtool_SkjPTHFi 4 159 811 0 14 Dtool_SkjPTHFi 0 2 4 this 3 901  4 data 1 808  
146 14 Dtool_SkjPrjI_ 6 160 808 0 14 Dtool_SkjPrjI_ 0 3 4 this 3 819  1 n 1 804  5 count 1 804  
147 14 Dtool_SkjPGEiy 4 161 811 0 14 Dtool_SkjPGEiy 0 4 4 this 3 901  1 n 1 804  5 count 1 804  4 data 1 808  
148 14 Dtool_SkjPH2XX 6 162 809 0 14 Dtool_SkjPH2XX 0 1 4 this 3 819  
149 14 Dtool_SkjPoqcW 6 163 809 0 14 Dtool_SkjPoqcW 0 1 4 this 3 819  
150 14 Dtool_SkjPoJ1_ 7 166 902 582 14 Dtool_SkjPoJ1_ 0 1 4 copy 1 830  
151 14 Dtool_SkjP8VXU 7 166 902 582 14 Dtool_SkjP8VXU 0 2 4 self 1 897  8 sequence 1 897  
152 14 Dtool_SkjPrOZ7 7 166 902 582 14 Dtool_SkjPrOZ7 0 1 11 type_handle 1 899  
153 14 Dtool_SkjPRfWK 7 166 902 582 14 Dtool_SkjPRfWK 0 0 
154 14 Dtool_SkjPsbZD 7 167 902 582 14 Dtool_SkjPsbZD 0 2 1 n 1 804  11 type_handle 1 899  
155 14 Dtool_SkjPnlDT 7 167 902 582 14 Dtool_SkjPnlDT 0 1 1 n 1 804  
156 14 Dtool_SkjPlS3U 6 168 804 0 14 Dtool_SkjPlS3U 0 1 4 this 3 830  
157 14 Dtool_SkjPgR8_ 4 169 811 0 14 Dtool_SkjPgR8_ 0 2 4 this 3 902  1 x 1 832  
158 14 Dtool_SkjPBuPc 4 170 811 0 14 Dtool_SkjPBuPc 0 1 4 this 3 902  
159 14 Dtool_SkjPI3L8 6 171 832 0 14 Dtool_SkjPI3L8 0 2 4 this 3 830  1 n 1 804  
160 14 Dtool_SkjPw5Nu 4 172 811 0 14 Dtool_SkjPw5Nu 0 3 4 this 3 902  1 n 1 804  5 value 1 832  
161 14 Dtool_SkjPPNlw 6 173 832 0 14 Dtool_SkjPPNlw 0 2 4 this 3 830  1 n 1 804  
162 14 Dtool_SkjPJOjO 4 174 811 0 14 Dtool_SkjPJOjO 0 3 4 this 3 902  1 n 1 804  5 value 1 832  
163 14 Dtool_SkjPz3uO 6 175 808 0 14 Dtool_SkjPz3uO 0 1 4 this 3 830  
164 14 Dtool_SkjP7L_g 4 176 811 0 14 Dtool_SkjP7L_g 0 2 4 this 3 902  4 data 1 808  
165 14 Dtool_SkjPjsej 6 177 808 0 14 Dtool_SkjPjsej 0 3 4 this 3 830  1 n 1 804  5 count 1 804  
166 14 Dtool_SkjPnlby 4 178 811 0 14 Dtool_SkjPnlby 0 4 4 this 3 902  1 n 1 804  5 count 1 804  4 data 1 808  
167 14 Dtool_SkjPhiaI 6 179 809 0 14 Dtool_SkjPhiaI 0 1 4 this 3 830  
168 14 Dtool_SkjPwXir 6 180 809 0 14 Dtool_SkjPwXir 0 1 4 this 3 830  
169 14 Dtool_SkjPPnWg 7 183 903 598 14 Dtool_SkjPPnWg 0 1 4 copy 1 841  
170 14 Dtool_SkjP8F5n 7 183 903 598 14 Dtool_SkjP8F5n 0 2 4 self 1 897  8 sequence 1 897  
171 14 Dtool_SkjPq_6O 7 183 903 598 14 Dtool_SkjPq_6O 0 1 11 type_handle 1 899  
172 14 Dtool_SkjPRP4d 7 183 903 598 14 Dtool_SkjPRP4d 0 0 
173 14 Dtool_SkjPsr6W 7 184 903 598 14 Dtool_SkjPsr6W 0 2 1 n 1 804  11 type_handle 1 899  
174 14 Dtool_SkjPnVlm 7 184 903 598 14 Dtool_SkjPnVlm 0 1 1 n 1 804  
175 14 Dtool_SkjPlCZo 6 185 804 0 14 Dtool_SkjPlCZo 0 1 4 this 3 841  
176 14 Dtool_SkjPhxAn 4 186 811 0 14 Dtool_SkjPhxAn 0 2 4 this 3 903  1 x 1 843  
177 14 Dtool_SkjPB_xv 4 187 811 0 14 Dtool_SkjPB_xv 0 1 4 this 3 903  
178 14 Dtool_SkjPLntP 6 188 843 0 14 Dtool_SkjPLntP 0 2 4 this 3 841  1 n 1 804  
179 14 Dtool_SkjPB2vI 4 189 811 0 14 Dtool_SkjPB2vI 0 3 4 this 3 903  1 n 1 804  5 value 1 843  
180 14 Dtool_SkjPMdHE 6 190 843 0 14 Dtool_SkjPMdHE 0 2 4 this 3 841  1 n 1 804  
181 14 Dtool_SkjPX5Cp 4 191 811 0 14 Dtool_SkjPX5Cp 0 3 4 this 3 903  1 n 1 804  5 value 1 843  
182 14 Dtool_SkjPznQi 6 192 808 0 14 Dtool_SkjPznQi 0 1 4 this 3 841  
183 14 Dtool_SkjP77h0 4 193 811 0 14 Dtool_SkjP77h0 0 2 4 this 3 903  4 data 1 808  
184 14 Dtool_SkjPjc_2 6 194 808 0 14 Dtool_SkjPjc_2 0 3 4 this 3 841  1 n 1 804  5 count 1 804  
185 14 Dtool_SkjPmV8F 4 195 811 0 14 Dtool_SkjPmV8F 0 4 4 this 3 903  1 n 1 804  5 count 1 804  4 data 1 808  
186 14 Dtool_SkjPhS8b 6 196 809 0 14 Dtool_SkjPhS8b 0 1 4 this 3 841  
187 14 Dtool_SkjPwnE_ 6 197 809 0 14 Dtool_SkjPwnE_ 0 1 4 this 3 841  
188 14 Dtool_SkjPyy4B 7 200 904 614 14 Dtool_SkjPyy4B 0 1 4 copy 1 852  
189 14 Dtool_SkjP81b7 7 200 904 614 14 Dtool_SkjP81b7 0 2 4 self 1 897  8 sequence 1 897  
190 14 Dtool_SkjPquci 7 200 904 614 14 Dtool_SkjPquci 0 1 11 type_handle 1 899  
191 14 Dtool_SkjPR_Zx 7 200 904 614 14 Dtool_SkjPR_Zx 0 0 
192 14 Dtool_SkjPs7cq 7 201 904 614 14 Dtool_SkjPs7cq 0 2 1 n 1 804  11 type_handle 1 899  
193 14 Dtool_SkjPnFH6 7 201 904 614 14 Dtool_SkjPnFH6 0 1 1 n 1 804  
194 14 Dtool_SkjPly67 6 202 804 0 14 Dtool_SkjPly67 0 1 4 this 3 852  
195 14 Dtool_SkjPiRDO 4 203 811 0 14 Dtool_SkjPiRDO 0 2 4 this 3 904  1 x 1 854  
196 14 Dtool_SkjPAOTD 4 204 811 0 14 Dtool_SkjPAOTD 0 1 4 this 3 904  
197 14 Dtool_SkjPLXPj 6 205 854 0 14 Dtool_SkjPLXPj 0 2 4 this 3 852  1 n 1 804  
198 14 Dtool_SkjPTnRj 4 206 811 0 14 Dtool_SkjPTnRj 0 3 4 this 3 904  1 n 1 804  5 value 1 854  
199 14 Dtool_SkjPMtpX 6 207 854 0 14 Dtool_SkjPMtpX 0 2 4 this 3 852  1 n 1 804  
200 14 Dtool_SkjPmrkD 4 208 811 0 14 Dtool_SkjPmrkD 0 3 4 this 3 904  1 n 1 804  5 value 1 854  
201 14 Dtool_SkjPzXy1 6 209 808 0 14 Dtool_SkjPzXy1 0 1 4 this 3 852  
202 14 Dtool_SkjP4rDI 4 210 811 0 14 Dtool_SkjP4rDI 0 2 4 this 3 904  4 data 1 808  
203 14 Dtool_SkjPiMhK 6 211 808 0 14 Dtool_SkjPiMhK 0 3 4 this 3 852  1 n 1 804  5 count 1 804  
204 14 Dtool_SkjPmFeZ 4 212 811 0 14 Dtool_SkjPmFeZ 0 4 4 this 3 904  1 n 1 804  5 count 1 804  4 data 1 808  
205 14 Dtool_SkjPhCev 6 213 809 0 14 Dtool_SkjPhCev 0 1 4 this 3 852  
206 14 Dtool_SkjPx3mS 6 214 809 0 14 Dtool_SkjPx3mS 0 1 4 this 3 852  
207 14 Dtool_SkjPi4zP 7 218 907 625 14 Dtool_SkjPi4zP 0 1 4 this 3 905  
208 14 Dtool_SkjPVfqL 6 219 883 0 14 Dtool_SkjPVfqL 525 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 905  
209 14 Dtool_SkjPFsFC 6 220 883 0 14 Dtool_SkjPFsFC 905 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 905  
210 14 Dtool_SkjPD2hm 4 221 811 0 14 Dtool_SkjPD2hm 383 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 907  
211 14 Dtool_SkjPARix 6 222 883 0 14 Dtool_SkjPARix 303 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 907  3 vol 1 905  
212 14 Dtool_SkjPdpPR 6 225 809 0 14 Dtool_SkjPdpPR 372 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 905  3 vol 1 905  
213 14 Dtool_SkjPQbvQ 4 226 811 0 14 Dtool_SkjPQbvQ 0 2 4 this 3 905  3 out 1 814  
214 14 Dtool_SkjPJz6_ 4 227 811 0 14 Dtool_SkjPJz6_ 220 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 905  3 out 1 814  12 indent_level 1 809  
215 14 Dtool_SkjPZ2qR 4 227 811 0 14 Dtool_SkjPZ2qR 220 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 905  3 out 1 814  
216 14 Dtool_SkjPrfVo 7 229 899 0 14 Dtool_SkjPrfVo 0 0 
217 14 Dtool_SkjPzZa3 6 232 883 0 14 Dtool_SkjPzZa3 309 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 908  3 vol 1 909  
218 14 Dtool_SkjP5ZtT 6 232 883 0 14 Dtool_SkjP5ZtT 308 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 908  5 point 1 885  
219 14 Dtool_SkjPdv6k 6 233 883 0 14 Dtool_SkjPdv6k 300 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 908  5 first 1 885  4 last 1 885  
220 14 Dtool_SkjPB8A3 6 234 809 0 14 Dtool_SkjPB8A3 378 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 909  3 vol 1 909  
221 14 Dtool_SkjPEncR 6 234 809 0 14 Dtool_SkjPEncR 377 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 909  5 point 1 885  
222 14 Dtool_SkjP0SwX 6 234 809 0 14 Dtool_SkjP0SwX 384 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
//////////////////////////////////////////////////////////////////// 3 4 this 3 909  1 a 1 885  1 b 1 885  
223 14 Dtool_SkjPGh7m 7 235 895 0 14 Dtool_SkjPGh7m 0 1 4 this 3 909  
224 14 Dtool_SkjPIb98 4 236 811 0 14 Dtool_SkjPIb98 0 2 4 this 3 908  3 mat 1 821  
225 14 Dtool_SkjPB1fo 7 237 899 0 14 Dtool_SkjPB1fo 0 0 
226 14 Dtool_SkjPhQ34 7 240 895 0 14 Dtool_SkjPhQ34 0 1 4 this 3 911  
227 14 Dtool_SkjPaM3J 7 241 895 0 14 Dtool_SkjPaM3J 0 1 4 this 3 911  
228 14 Dtool_SkjP6P0K 6 242 862 0 14 Dtool_SkjP6P0K 238 ////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 911  
229 14 Dtool_SkjPITxA 7 243 899 0 14 Dtool_SkjPITxA 0 0 
230 14 Dtool_SkjPRtib 7 246 913 640 14 Dtool_SkjPRtib 762 // Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Parabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
231 14 Dtool_SkjPj1z4 7 246 913 640 14 Dtool_SkjPj1z4 380 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 843  1 b 1 843  1 c 1 843  
232 14 Dtool_SkjPEKic 7 246 913 640 14 Dtool_SkjPEKic 226 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 914  
233 14 Dtool_SkjPqBFI 6 247 913 0 14 Dtool_SkjPqBFI 234 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 913  4 copy 1 914  
234 14 Dtool_SkjPDPHT 4 249 811 0 14 Dtool_SkjPDPHT 753 // Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Parabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 913  3 mat 1 821  
235 14 Dtool_SkjPkpW4 6 250 843 0 14 Dtool_SkjPkpW4 312 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 914  
236 14 Dtool_SkjPsYf4 6 251 843 0 14 Dtool_SkjPsYf4 317 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 914  
237 14 Dtool_SkjPULp4 6 252 843 0 14 Dtool_SkjPULp4 311 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 914  
238 14 Dtool_SkjPxeXf 7 253 895 0 14 Dtool_SkjPxeXf 265 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 914  1 t 1 862  
239 14 Dtool_SkjPSViV 4 254 811 0 14 Dtool_SkjPSViV 215 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 914  3 out 1 814  
240 14 Dtool_SkjPu5nM 4 255 811 0 14 Dtool_SkjPu5nM 214 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 914  3 out 1 814  12 indent_level 1 809  
241 14 Dtool_SkjPegAW 4 255 811 0 14 Dtool_SkjPegAW 214 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 914  3 out 1 814  
242 14 Dtool_SkjPzwBY 7 257 916 650 14 Dtool_SkjPzwBY 762 // Filename: parabola_src.I
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Parabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
243 14 Dtool_SkjPtSai 7 257 916 650 14 Dtool_SkjPtSai 380 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 917  1 b 1 917  1 c 1 917  
244 14 Dtool_SkjPAA8Y 7 257 916 650 14 Dtool_SkjPAA8Y 226 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 920  
245 14 Dtool_SkjPBTJC 6 258 916 0 14 Dtool_SkjPBTJC 234 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::Copy Assignment Operator
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 916  4 copy 1 920  
246 14 Dtool_SkjPq3WO 4 260 811 0 14 Dtool_SkjPq3WO 753 // Filename: parabola_src.cxx
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Parabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 916  3 mat 1 877  
247 14 Dtool_SkjPNo20 6 261 917 0 14 Dtool_SkjPNo20 312 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 920  
248 14 Dtool_SkjPFZ_0 6 262 917 0 14 Dtool_SkjPFZ_0 317 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 920  
249 14 Dtool_SkjP9KJ1 6 263 917 0 14 Dtool_SkjP9KJ1 311 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 920  
250 14 Dtool_SkjPXQ7n 7 264 882 0 14 Dtool_SkjPXQ7n 265 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 920  1 t 1 860  
251 14 Dtool_SkjPNUCS 4 265 811 0 14 Dtool_SkjPNUCS 215 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 920  3 out 1 814  
252 14 Dtool_SkjPH5HJ 4 266 811 0 14 Dtool_SkjPH5HJ 214 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 920  3 out 1 814  12 indent_level 1 809  
253 14 Dtool_SkjP3ggS 4 266 811 0 14 Dtool_SkjP3ggS 214 ////////////////////////////////////////////////////////////////////
//     Function: Parabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 920  3 out 1 814  
254 14 Dtool_SkjPC_T2 7 268 922 667 14 Dtool_SkjPC_T2 742 // Filename: boundingBox.I
// Created by:  drose (31May07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
//////////////////////////////////////////////////////////////////// 0 
255 14 Dtool_SkjPUDkp 7 268 922 667 14 Dtool_SkjPUDkp 257 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
//////////////////////////////////////////////////////////////////// 2 3 min 1 885  3 max 1 885  
256 14 Dtool_SkjP3R23 4 269 811 0 14 Dtool_SkjP3R23 0 2 4 this 3 922  4 size 1 804  
257 14 Dtool_SkjPCqx3 6 272 809 0 14 Dtool_SkjPCqx3 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 923  
258 14 Dtool_SkjPoi08 7 273 895 0 14 Dtool_SkjPoi08 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 923  1 n 1 809  
259 14 Dtool_SkjPyaSV 6 274 809 0 14 Dtool_SkjPyaSV 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 923  
260 14 Dtool_SkjPjuTV 7 275 884 534 14 Dtool_SkjPjuTV 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 923  1 n 1 809  
261 14 Dtool_SkjPAHSK 7 276 899 0 14 Dtool_SkjPAHSK 0 0 
262 14 Dtool_SkjPEoV0 7 279 928 674 14 Dtool_SkjPEoV0 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 7 frustum 1 925  8 is_ortho 1 883  2 cs 1 927  
263 14 Dtool_SkjPLgAa 7 279 928 674 14 Dtool_SkjPLgAa 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 7 frustum 1 925  8 is_ortho 1 883  
264 14 Dtool_SkjPraJQ 7 279 928 674 14 Dtool_SkjPraJQ 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 8 3 fll 1 885  3 flr 1 885  3 fur 1 885  3 ful 1 885  3 nll 1 885  3 nlr 1 885  3 nur 1 885  3 nul 1 885  
265 14 Dtool_SkjPjxzO 6 280 809 0 14 Dtool_SkjPjxzO 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 929  
266 14 Dtool_SkjPI7ir 7 281 895 0 14 Dtool_SkjPI7ir 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 929  1 n 1 809  
267 14 Dtool_SkjPcorK 6 282 809 0 14 Dtool_SkjPcorK 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 929  
268 14 Dtool_SkjPSYfp 7 283 884 534 14 Dtool_SkjPSYfp 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 929  1 n 1 809  
269 14 Dtool_SkjP6Mjt 7 284 899 0 14 Dtool_SkjP6Mjt 0 0 
270 14 Dtool_SkjPAR_R 7 287 931 682 14 Dtool_SkjPAR_R 225 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 1 a 1 885  1 b 1 885  
271 14 Dtool_SkjPtKOi 4 288 811 0 14 Dtool_SkjPtKOi 0 2 4 this 3 931  4 size 1 804  
272 14 Dtool_SkjPRIF_ 6 291 885 0 14 Dtool_SkjPRIF_ 271 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 932  
273 14 Dtool_SkjPI2G_ 7 292 895 0 14 Dtool_SkjPI2G_ 272 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 932  
274 14 Dtool_SkjPmcUv 7 293 899 0 14 Dtool_SkjPmcUv 0 0 
275 14 Dtool_SkjPwCTi 7 296 934 689 14 Dtool_SkjPwCTi 794 // Filename: boundingPlane.I
// Created by:  drose (19Aug05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
//////////////////////////////////////////////////////////////////// 0 
276 14 Dtool_SkjPiCf4 7 296 934 689 14 Dtool_SkjPiCf4 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 5 plane 1 891  
277 14 Dtool_SkjP7Vwa 4 297 811 0 14 Dtool_SkjP7Vwa 0 2 4 this 3 934  4 size 1 804  
278 14 Dtool_SkjPMOJy 6 300 891 0 14 Dtool_SkjPMOJy 224 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 935  
279 14 Dtool_SkjPPW_8 7 301 899 0 14 Dtool_SkjPPW_8 0 0 
280 14 Dtool_SkjPqeoF 7 304 937 697 14 Dtool_SkjPqeoF 744 // Filename: boundingSphere.I
// Created by:  drose (02Oct99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
//////////////////////////////////////////////////////////////////// 0 
281 14 Dtool_SkjPX3ZH 7 304 937 697 14 Dtool_SkjPX3ZH 256 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
//////////////////////////////////////////////////////////////////// 2 6 center 1 885  6 radius 1 862  
282 14 Dtool_SkjPXC2T 4 305 811 0 14 Dtool_SkjPXC2T 0 2 4 this 3 937  4 size 1 804  
283 14 Dtool_SkjPzKph 7 308 895 0 14 Dtool_SkjPzKph 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 938  
284 14 Dtool_SkjPyYsx 6 309 862 0 14 Dtool_SkjPyYsx 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 938  
285 14 Dtool_SkjPwySa 7 310 899 0 14 Dtool_SkjPwySa 0 0 
286 14 Dtool_SkjPRdBj 7 315 940 702 14 Dtool_SkjPRdBj 721 // Filename: omniBoundingVolume.I
// Created by:  drose (22Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
287 14 Dtool_SkjPbPVO 7 316 899 0 14 Dtool_SkjPbPVO 0 0 
288 14 Dtool_SkjPllv3 7 319 942 705 14 Dtool_SkjPllv3 35 /* initializes mt[N] with a seed */ 1 4 seed 1 941  
289 14 Dtool_SkjPBSDv 6 320 941 0 14 Dtool_SkjPBSDv 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 942  
290 14 Dtool_SkjPB_ig 6 323 941 0 14 Dtool_SkjPB_ig 368 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
//////////////////////////////////////////////////////////////////// 1 4 this 3 943  
291 14 Dtool_SkjPv6cm 7 326 944 713 14 Dtool_SkjPv6cm 872 // Filename: perlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
292 14 Dtool_SkjPsfkp 7 326 944 713 14 Dtool_SkjPsfkp 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 945  
293 14 Dtool_SkjPGeIA 7 326 944 713 14 Dtool_SkjPGeIA 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 4 2 sx 1 860  2 sy 1 860  10 table_size 1 809  4 seed 1 941  
294 14 Dtool_SkjP9P5z 7 326 944 713 14 Dtool_SkjP9P5z 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 860  2 sy 1 860  10 table_size 1 809  
295 14 Dtool_SkjPCOIG 7 326 944 713 14 Dtool_SkjPCOIG 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 860  2 sy 1 860  
296 14 Dtool_SkjPM_IZ 6 327 944 0 14 Dtool_SkjPM_IZ 337 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 944  4 copy 1 945  
297 14 Dtool_SkjPg7Cf 4 328 811 0 14 Dtool_SkjPg7Cf 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 944  5 scale 1 947  
298 14 Dtool_SkjPGuCP 4 328 811 0 14 Dtool_SkjPGuCP 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 944  5 scale 1 832  
299 14 Dtool_SkjPBSzQ 4 328 811 0 14 Dtool_SkjPBSzQ 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 944  5 scale 1 860  
300 14 Dtool_SkjPgNGr 4 328 811 0 14 Dtool_SkjPgNGr 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 944  2 sx 1 860  2 sy 1 860  
301 14 Dtool_SkjP5PlC 6 329 860 0 14 Dtool_SkjP5PlC 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 945  5 value 1 947  
302 14 Dtool_SkjPdIqC 6 329 862 0 14 Dtool_SkjPdIqC 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 945  5 value 1 832  
303 14 Dtool_SkjPPCI3 6 329 860 0 14 Dtool_SkjPPCI3 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 945  1 x 1 860  1 y 1 860  
304 14 Dtool_SkjPJm1a 6 330 860 0 14 Dtool_SkjPJm1a 264 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 945  5 value 1 947  
305 14 Dtool_SkjPJCuf 6 330 862 0 14 Dtool_SkjPJCuf 264 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 945  5 value 1 832  
306 14 Dtool_SkjPEAH_ 6 330 860 0 14 Dtool_SkjPEAH_ 270 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the two inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 945  1 x 1 860  1 y 1 860  
307 14 Dtool_SkjPPLfp 7 333 950 719 14 Dtool_SkjPPLfp 872 // Filename: perlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
308 14 Dtool_SkjPukoc 7 333 950 719 14 Dtool_SkjPukoc 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 951  
309 14 Dtool_SkjP58i2 7 333 950 719 14 Dtool_SkjP58i2 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 5 2 sx 1 860  2 sy 1 860  2 sz 1 860  10 table_size 1 809  4 seed 1 941  
310 14 Dtool_SkjPXjDy 7 333 950 719 14 Dtool_SkjPXjDy 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 4 2 sx 1 860  2 sy 1 860  2 sz 1 860  10 table_size 1 809  
311 14 Dtool_SkjPBU40 7 333 950 719 14 Dtool_SkjPBU40 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 860  2 sy 1 860  2 sz 1 860  
312 14 Dtool_SkjPNxrp 6 334 950 0 14 Dtool_SkjPNxrp 337 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 950  4 copy 1 951  
313 14 Dtool_SkjP0JOD 4 335 811 0 14 Dtool_SkjP0JOD 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 950  5 scale 1 917  
314 14 Dtool_SkjPrdOz 4 335 811 0 14 Dtool_SkjPrdOz 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 950  5 scale 1 843  
315 14 Dtool_SkjPBcPT 4 335 811 0 14 Dtool_SkjPBcPT 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 950  5 scale 1 860  
316 14 Dtool_SkjPTM4f 4 335 811 0 14 Dtool_SkjPTM4f 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 950  2 sx 1 860  2 sy 1 860  2 sz 1 860  
317 14 Dtool_SkjPxYBh 6 336 860 0 14 Dtool_SkjPxYBh 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 951  5 value 1 917  
318 14 Dtool_SkjPVTGh 6 336 862 0 14 Dtool_SkjPVTGh 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 951  5 value 1 843  
319 14 Dtool_SkjPsWEW 6 336 860 0 14 Dtool_SkjPsWEW 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 951  1 x 1 860  1 y 1 860  1 z 1 860  
320 14 Dtool_SkjP18Wd 6 337 860 0 14 Dtool_SkjP18Wd 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 951  5 value 1 917  
321 14 Dtool_SkjP1YPi 6 337 862 0 14 Dtool_SkjP1YPi 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 951  5 value 1 843  
322 14 Dtool_SkjP_joi 6 337 860 0 14 Dtool_SkjP_joi 272 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 951  1 x 1 860  1 y 1 860  1 z 1 860  
323 14 Dtool_SkjPATvG 7 341 953 727 14 Dtool_SkjPATvG 876 // Filename: stackedPerlinNoise2.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
324 14 Dtool_SkjPOBoG 7 341 953 727 14 Dtool_SkjPOBoG 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 954  
325 14 Dtool_SkjPJSRe 7 341 953 727 14 Dtool_SkjPJSRe 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 7 2 sx 1 860  2 sy 1 860  10 num_levels 1 809  12 scale_factor 1 860  9 amp_scale 1 860  10 table_size 1 809  4 seed 1 941  
326 14 Dtool_SkjP1q92 7 341 953 727 14 Dtool_SkjP1q92 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 6 2 sx 1 860  2 sy 1 860  10 num_levels 1 809  12 scale_factor 1 860  9 amp_scale 1 860  10 table_size 1 809  
327 14 Dtool_SkjPpveW 7 341 953 727 14 Dtool_SkjPpveW 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 5 2 sx 1 860  2 sy 1 860  10 num_levels 1 809  12 scale_factor 1 860  9 amp_scale 1 860  
328 14 Dtool_SkjPJ86_ 7 341 953 727 14 Dtool_SkjPJ86_ 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 4 2 sx 1 860  2 sy 1 860  10 num_levels 1 809  12 scale_factor 1 860  
329 14 Dtool_SkjP9SEq 7 341 953 727 14 Dtool_SkjP9SEq 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 3 2 sx 1 860  2 sy 1 860  10 num_levels 1 809  
330 14 Dtool_SkjP8Mpe 7 341 953 727 14 Dtool_SkjP8Mpe 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 2 2 sx 1 860  2 sy 1 860  
331 14 Dtool_SkjPuaKK 6 342 953 0 14 Dtool_SkjPuaKK 376 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 953  4 copy 1 954  
332 14 Dtool_SkjPjEp3 4 343 811 0 14 Dtool_SkjPjEp3 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 953  5 level 1 945  3 amp 1 860  
333 14 Dtool_SkjP_n9S 4 343 811 0 14 Dtool_SkjP_n9S 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 2 4 this 3 953  5 level 1 945  
334 14 Dtool_SkjPc8sO 4 344 811 0 14 Dtool_SkjPc8sO 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 953  
335 14 Dtool_SkjPZyC_ 6 345 860 0 14 Dtool_SkjPZyC_ 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 953  5 value 1 947  
336 14 Dtool_SkjPcyQb 6 345 862 0 14 Dtool_SkjPcyQb 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 953  5 value 1 832  
337 14 Dtool_SkjP1thz 6 345 860 0 14 Dtool_SkjP1thz 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 953  1 x 1 860  1 y 1 860  
338 14 Dtool_SkjPgny9 6 346 860 0 14 Dtool_SkjPgny9 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 953  5 value 1 947  
339 14 Dtool_SkjPHqyL 6 346 862 0 14 Dtool_SkjPHqyL 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 953  5 value 1 832  
340 14 Dtool_SkjP0TSf 6 346 860 0 14 Dtool_SkjP0TSf 279 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 953  1 x 1 860  1 y 1 860  
341 14 Dtool_SkjP_B5N 7 349 956 734 14 Dtool_SkjP_B5N 876 // Filename: stackedPerlinNoise3.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
342 14 Dtool_SkjPkcOQ 7 349 956 734 14 Dtool_SkjPkcOQ 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 957  
343 14 Dtool_SkjPqAFA 7 349 956 734 14 Dtool_SkjPqAFA 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 8 2 sx 1 860  2 sy 1 860  2 sz 1 860  10 num_levels 1 809  12 scale_factor 1 860  9 amp_scale 1 860  10 table_size 1 809  4 seed 1 941  
344 14 Dtool_SkjPJa_5 7 349 956 734 14 Dtool_SkjPJa_5 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 7 2 sx 1 860  2 sy 1 860  2 sz 1 860  10 num_levels 1 809  12 scale_factor 1 860  9 amp_scale 1 860  10 table_size 1 809  
345 14 Dtool_SkjPbcHj 7 349 956 734 14 Dtool_SkjPbcHj 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 6 2 sx 1 860  2 sy 1 860  2 sz 1 860  10 num_levels 1 809  12 scale_factor 1 860  9 amp_scale 1 860  
346 14 Dtool_SkjPD8iG 7 349 956 734 14 Dtool_SkjPD8iG 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 5 2 sx 1 860  2 sy 1 860  2 sz 1 860  10 num_levels 1 809  12 scale_factor 1 860  
347 14 Dtool_SkjPfg_v 7 349 956 734 14 Dtool_SkjPfg_v 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 4 2 sx 1 860  2 sy 1 860  2 sz 1 860  10 num_levels 1 809  
348 14 Dtool_SkjPV0sw 7 349 956 734 14 Dtool_SkjPV0sw 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 3 2 sx 1 860  2 sy 1 860  2 sz 1 860  
349 14 Dtool_SkjP8rsk 6 350 956 0 14 Dtool_SkjP8rsk 376 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Assignment Operator
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 956  4 copy 1 957  
350 14 Dtool_SkjPOHpF 4 351 811 0 14 Dtool_SkjPOHpF 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 956  5 level 1 951  3 amp 1 860  
351 14 Dtool_SkjPbp9g 4 351 811 0 14 Dtool_SkjPbp9g 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 2 4 this 3 956  5 level 1 951  
352 14 Dtool_SkjPu9sV 4 352 811 0 14 Dtool_SkjPu9sV 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 956  
353 14 Dtool_SkjPIjeI 6 353 860 0 14 Dtool_SkjPIjeI 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 956  5 value 1 917  
354 14 Dtool_SkjPKjsk 6 353 862 0 14 Dtool_SkjPKjsk 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 956  5 value 1 843  
355 14 Dtool_SkjP9XOm 6 353 860 0 14 Dtool_SkjP9XOm 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 956  1 x 1 860  1 y 1 860  1 z 1 860  
356 14 Dtool_SkjPTpAh 6 354 860 0 14 Dtool_SkjPTpAh 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 956  5 value 1 917  
357 14 Dtool_SkjP3rAv 6 354 862 0 14 Dtool_SkjP3rAv 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 956  5 value 1 843  
358 14 Dtool_SkjPrzlU 6 354 860 0 14 Dtool_SkjPrzlU 279 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::operator ()
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 956  1 x 1 860  1 y 1 860  1 z 1 860  
359 14 Dtool_SkjPFBK1 7 357 959 750 14 Dtool_SkjPFBK1 225 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
360 14 Dtool_SkjPVJYT 4 358 811 0 14 Dtool_SkjPVJYT 337 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
//////////////////////////////////////////////////////////////////// 1 4 this 3 959  
361 14 Dtool_SkjPgPrY 6 359 809 0 14 Dtool_SkjPgPrY 312 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 959  5 point 1 960  
362 14 Dtool_SkjP7U2X 6 359 809 0 14 Dtool_SkjP7U2X 800 // Filename: triangulator.I
// Created by:  drose (18Jan07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 3 4 this 3 959  1 x 1 860  1 y 1 860  
363 14 Dtool_SkjPihH8 6 360 809 0 14 Dtool_SkjPihH8 545 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
//////////////////////////////////////////////////////////////////// 1 4 this 3 963  
364 14 Dtool_SkjPcI6X 6 361 960 0 14 Dtool_SkjPcI6X 247 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 963  1 n 1 809  
365 14 Dtool_SkjPyAY7 4 362 811 0 14 Dtool_SkjPyAY7 342 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 959  
366 14 Dtool_SkjPlJzv 4 363 811 0 14 Dtool_SkjPlJzv 645 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
//////////////////////////////////////////////////////////////////// 2 4 this 3 959  5 index 1 809  
367 14 Dtool_SkjPyuMa 6 364 883 0 14 Dtool_SkjPyuMa 394 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 963  
368 14 Dtool_SkjPcIaQ 4 365 811 0 14 Dtool_SkjPcIaQ 308 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
//////////////////////////////////////////////////////////////////// 1 4 this 3 959  
369 14 Dtool_SkjPK0o5 4 366 811 0 14 Dtool_SkjPK0o5 571 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 959  5 index 1 809  
370 14 Dtool_SkjPDWnH 4 367 811 0 14 Dtool_SkjPDWnH 439 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 959  
371 14 Dtool_SkjPH7LS 6 368 809 0 14 Dtool_SkjPH7LS 328 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 963  
372 14 Dtool_SkjP6J8i 6 369 809 0 14 Dtool_SkjP6J8i 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 963  1 n 1 809  
373 14 Dtool_SkjPyO8_ 6 370 809 0 14 Dtool_SkjPyO8_ 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 963  1 n 1 809  
374 14 Dtool_SkjPrD8a 6 371 809 0 14 Dtool_SkjPrD8a 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 963  1 n 1 809  
375 14 Dtool_SkjPyYd4 4 312 811 0 14 Dtool_SkjPyYd4 0 3 3 mat 1 965  3 fwd 1 869  2 cs 1 927  
376 14 Dtool_SkjPmjSo 4 312 811 0 14 Dtool_SkjPmjSo 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 965  3 fwd 1 869  2 up 1 869  2 cs 1 927  
377 14 Dtool_SkjPv5m2 4 312 811 0 14 Dtool_SkjPv5m2 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 965  3 fwd 1 869  2 up 1 869  
378 14 Dtool_SkjPTJmh 4 312 811 0 14 Dtool_SkjPTJmh 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 965  3 fwd 1 869  
379 14 Dtool_SkjP5qVz 4 312 811 0 14 Dtool_SkjP5qVz 0 3 3 mat 1 966  3 fwd 1 888  2 cs 1 927  
380 14 Dtool_SkjPstmb 4 312 811 0 14 Dtool_SkjPstmb 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 966  3 fwd 1 888  2 up 1 888  2 cs 1 927  
381 14 Dtool_SkjP5P9p 4 312 811 0 14 Dtool_SkjP5P9p 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 966  3 fwd 1 888  2 up 1 888  
382 14 Dtool_SkjPucec 4 312 811 0 14 Dtool_SkjPucec 694 ////////////////////////////////////////////////////////////////////
//     Function: heads_up
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The up vector will be rotated to z-up first,
//               then the forward vector will be rotated as nearly to
//               y-forward as possible.  This will only have a
//               different effect from look_at() if the forward and up
//               vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 966  3 fwd 1 888  
383 14 Dtool_SkjPy0V9 4 312 811 0 14 Dtool_SkjPy0V9 0 3 3 mat 1 880  3 fwd 1 869  2 cs 1 927  
384 14 Dtool_SkjPm_Kt 4 312 811 0 14 Dtool_SkjPm_Kt 0 4 3 mat 1 880  3 fwd 1 869  2 up 1 869  2 cs 1 927  
385 14 Dtool_SkjPvdh7 4 312 811 0 14 Dtool_SkjPvdh7 0 3 3 mat 1 880  3 fwd 1 869  2 up 1 869  
386 14 Dtool_SkjPTtem 4 312 811 0 14 Dtool_SkjPTtem 0 2 3 mat 1 880  3 fwd 1 869  
387 14 Dtool_SkjP5GM4 4 312 811 0 14 Dtool_SkjP5GM4 0 3 3 mat 1 893  3 fwd 1 888  2 cs 1 927  
388 14 Dtool_SkjPsJfg 4 312 811 0 14 Dtool_SkjPsJfg 0 4 3 mat 1 893  3 fwd 1 888  2 up 1 888  2 cs 1 927  
389 14 Dtool_SkjP5j1u 4 312 811 0 14 Dtool_SkjP5j1u 0 3 3 mat 1 893  3 fwd 1 888  2 up 1 888  
390 14 Dtool_SkjPuwWh 4 312 811 0 14 Dtool_SkjPuwWh 0 2 3 mat 1 893  3 fwd 1 888  
391 14 Dtool_SkjPTxQm 4 312 811 0 14 Dtool_SkjPTxQm 0 3 4 quat 1 967  3 fwd 1 869  2 cs 1 927  
392 14 Dtool_SkjPd9Wi 4 312 811 0 14 Dtool_SkjPd9Wi 0 4 4 quat 1 967  3 fwd 1 869  2 up 1 869  2 cs 1 927  
393 14 Dtool_SkjPiZq8 4 312 811 0 14 Dtool_SkjPiZq8 0 3 4 quat 1 967  3 fwd 1 869  2 up 1 869  
394 14 Dtool_SkjP3Jjx 4 312 811 0 14 Dtool_SkjP3Jjx 0 2 4 quat 1 967  3 fwd 1 869  
395 14 Dtool_SkjPRh3W 4 312 811 0 14 Dtool_SkjPRh3W 0 3 4 quat 1 969  3 fwd 1 888  2 cs 1 927  
396 14 Dtool_SkjPjnkT 4 312 811 0 14 Dtool_SkjPjnkT 0 4 4 quat 1 969  3 fwd 1 888  2 up 1 888  2 cs 1 927  
397 14 Dtool_SkjPHl5t 4 312 811 0 14 Dtool_SkjPHl5t 0 3 4 quat 1 969  3 fwd 1 888  2 up 1 888  
398 14 Dtool_SkjP1YKi 4 312 811 0 14 Dtool_SkjP1YKi 0 2 4 quat 1 969  3 fwd 1 888  
399 14 Dtool_SkjP2iJ6 4 313 811 0 14 Dtool_SkjP2iJ6 0 3 3 mat 1 965  3 fwd 1 869  2 cs 1 927  
400 14 Dtool_SkjPe3n7 4 313 811 0 14 Dtool_SkjPe3n7 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 965  3 fwd 1 869  2 up 1 869  2 cs 1 927  
401 14 Dtool_SkjPYQHg 4 313 811 0 14 Dtool_SkjPYQHg 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 965  3 fwd 1 869  2 up 1 869  
402 14 Dtool_SkjPhTgt 4 313 811 0 14 Dtool_SkjPhTgt 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 965  3 fwd 1 869  
403 14 Dtool_SkjPTR_D 4 313 811 0 14 Dtool_SkjPTR_D 0 3 3 mat 1 966  3 fwd 1 888  2 cs 1 927  
404 14 Dtool_SkjPzsOP 4 313 811 0 14 Dtool_SkjPzsOP 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 966  3 fwd 1 888  2 up 1 888  2 cs 1 927  
405 14 Dtool_SkjP04uz 4 313 811 0 14 Dtool_SkjP04uz 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 3 3 mat 1 966  3 fwd 1 888  2 up 1 888  
406 14 Dtool_SkjPNDW3 4 313 811 0 14 Dtool_SkjPNDW3 694 ////////////////////////////////////////////////////////////////////
//     Function: look_at
//  Description: Given two vectors defining a forward direction and an
//               up vector, constructs the matrix that rotates things
//               from the defined coordinate system to y-forward and
//               z-up.  The forward vector will be rotated to
//               y-forward first, then the up vector will be rotated
//               as nearly to z-up as possible.  This will only have a
//               different effect from heads_up() if the forward and
//               up vectors are not perpendicular.
//////////////////////////////////////////////////////////////////// 2 3 mat 1 966  3 fwd 1 888  
407 14 Dtool_SkjP_RT6 4 313 811 0 14 Dtool_SkjP_RT6 0 3 3 mat 1 880  3 fwd 1 869  2 cs 1 927  
408 14 Dtool_SkjPWkx7 4 313 811 0 14 Dtool_SkjPWkx7 0 4 3 mat 1 880  3 fwd 1 869  2 up 1 869  2 cs 1 927  
409 14 Dtool_SkjPQhRg 4 313 811 0 14 Dtool_SkjPQhRg 0 3 3 mat 1 880  3 fwd 1 869  2 up 1 869  
410 14 Dtool_SkjPpCqt 4 313 811 0 14 Dtool_SkjPpCqt 0 2 3 mat 1 880  3 fwd 1 869  
411 14 Dtool_SkjPbAJE 4 313 811 0 14 Dtool_SkjPbAJE 0 3 3 mat 1 893  3 fwd 1 888  2 cs 1 927  
412 14 Dtool_SkjPLcXP 4 313 811 0 14 Dtool_SkjPLcXP 0 4 3 mat 1 893  3 fwd 1 888  2 up 1 888  2 cs 1 927  
413 14 Dtool_SkjPMJ3z 4 313 811 0 14 Dtool_SkjPMJ3z 0 3 3 mat 1 893  3 fwd 1 888  2 up 1 888  
414 14 Dtool_SkjP1yf3 4 313 811 0 14 Dtool_SkjP1yf3 0 2 3 mat 1 893  3 fwd 1 888  
415 14 Dtool_SkjPdgkh 4 313 811 0 14 Dtool_SkjPdgkh 0 3 4 quat 1 967  3 fwd 1 869  2 cs 1 927  
416 14 Dtool_SkjPq4at 4 313 811 0 14 Dtool_SkjPq4at 0 4 4 quat 1 967  3 fwd 1 869  2 up 1 869  2 cs 1 927  
417 14 Dtool_SkjP6OSa 4 313 811 0 14 Dtool_SkjP6OSa 0 3 4 quat 1 967  3 fwd 1 869  2 up 1 869  
418 14 Dtool_SkjPmF_T 4 313 811 0 14 Dtool_SkjPmF_T 0 2 4 quat 1 967  3 fwd 1 869  
419 14 Dtool_SkjPPvHl 4 313 811 0 14 Dtool_SkjPPvHl 0 3 4 quat 1 969  3 fwd 1 888  2 cs 1 927  
420 14 Dtool_SkjP_f8w 4 313 811 0 14 Dtool_SkjP_f8w 0 4 4 quat 1 969  3 fwd 1 888  2 up 1 888  2 cs 1 927  
421 14 Dtool_SkjPxh1d 4 313 811 0 14 Dtool_SkjPxh1d 0 3 4 quat 1 969  3 fwd 1 888  2 up 1 888  
422 14 Dtool_SkjPGIgX 4 313 811 0 14 Dtool_SkjPGIgX 0 2 4 quat 1 969  3 fwd 1 888  
423 14 Dtool_SkjP8zF6 4 339 811 0 14 Dtool_SkjP8zF6 0 3 3 mat 1 965  1 a 1 869  1 b 1 869  
424 14 Dtool_SkjP6uMk 4 339 811 0 14 Dtool_SkjP6uMk 0 3 3 mat 1 966  1 a 1 888  1 b 1 888  
425 14 Dtool_SkjPxzTW 4 339 811 0 14 Dtool_SkjPxzTW 0 3 3 mat 1 880  1 a 1 869  1 b 1 869  
426 14 Dtool_SkjP_uaA 4 339 811 0 14 Dtool_SkjP_uaA 0 3 3 mat 1 893  1 a 1 888  1 b 1 888  
220
751 8 CPTAMat3 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 430 438 0 7 431 432 433 434 435 436 437 0 0 1 0 752 0 0 0 0 0

752 31 PointerToArrayBase< LMatrix3f > 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 429 0 0 0 0 1 0 753 0 0 0 0 0

753 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 427 428 0 0 1 0 754 0 0 0 0 0

754 13 PointerToVoid 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

755 8 CPTAMat4 141313 32 ConstPointerToArray< LMatrix4f > 32 ConstPointerToArray< LMatrix4f > 0 0 0 1 442 450 0 7 443 444 445 446 447 448 449 0 0 1 0 756 0 0 0 0 0

756 31 PointerToArrayBase< LMatrix4f > 26625 31 PointerToArrayBase< LMatrix4f > 31 PointerToArrayBase< LMatrix4f > 0 0 0 0 441 0 0 0 0 1 0 757 0 0 0 0 0

757 52 PointerToBase< ReferenceCountedVector< LMatrix4f > > 43009 52 PointerToBase< ReferenceCountedVector< LMatrix4f > > 52 PointerToBase< ReferenceCountedVector< LMatrix4f > > 0 0 0 0 0 0 2 439 440 0 0 1 0 754 0 0 0 0 0

758 11 PTAVecBase2 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 454 462 0 7 455 456 457 458 459 460 461 0 0 1 0 759 0 0 0 0 0

759 32 PointerToArrayBase< LVecBase2f > 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 453 0 0 0 0 1 0 760 0 0 0 0 0

760 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 451 452 0 0 1 0 754 0 0 0 0 0

761 11 PTAVecBase3 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 466 474 0 7 467 468 469 470 471 472 473 0 0 1 0 762 0 0 0 0 0

762 32 PointerToArrayBase< LVecBase3f > 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 465 0 0 0 0 1 0 763 0 0 0 0 0

763 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 463 464 0 0 1 0 754 0 0 0 0 0

764 11 PTAVecBase4 141313 33 ConstPointerToArray< LVecBase4f > 33 ConstPointerToArray< LVecBase4f > 0 0 0 1 478 486 0 7 479 480 481 482 483 484 485 0 0 1 0 765 0 0 0 0 0

765 32 PointerToArrayBase< LVecBase4f > 26625 32 PointerToArrayBase< LVecBase4f > 32 PointerToArrayBase< LVecBase4f > 0 0 0 0 477 0 0 0 0 1 0 766 0 0 0 0 0

766 53 PointerToBase< ReferenceCountedVector< LVecBase4f > > 43009 53 PointerToBase< ReferenceCountedVector< LVecBase4f > > 53 PointerToBase< ReferenceCountedVector< LVecBase4f > > 0 0 0 0 0 0 2 475 476 0 0 1 0 754 0 0 0 0 0

767 8 Frustumd 141313 8 Frustumd 8 Frustumd 0 0 0 1 487 494 0 6 488 489 490 491 492 493 0 0 0 0 0 665
// Filename: frustum_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : Frustum
// Description :
////////////////////////////////////////////////////////////////////

768 8 Frustumf 141313 8 Frustumf 8 Frustumf 0 0 0 1 495 502 0 6 496 497 498 499 500 501 0 0 0 0 0 665
// Filename: frustum_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : Frustum
// Description :
////////////////////////////////////////////////////////////////////

769 6 Planed 141313 6 Planed 6 Planed 0 0 0 1 503 518 0 14 504 505 506 507 508 509 510 511 512 513 514 515 516 517 0 0 1 0 770 0 0 0 0 785
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : Plane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

770 6 Colord 2049 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

771 6 Planef 141313 6 Planef 6 Planef 0 0 0 1 519 534 0 14 520 521 522 523 524 525 526 527 528 529 530 531 532 533 0 0 1 0 772 0 0 0 0 785
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : Plane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

772 6 Colorf 2049 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

773 7 PTAMat3 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 535 550 0 14 536 537 538 539 540 541 542 543 544 545 546 547 548 549 0 0 1 0 752 0 0 0 0 0

774 7 PTAMat4 141313 27 PointerToArray< LMatrix4f > 27 PointerToArray< LMatrix4f > 0 0 0 1 551 566 0 14 552 553 554 555 556 557 558 559 560 561 562 563 564 565 0 0 1 0 756 0 0 0 0 0

775 11 PTAVecBase2 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 567 582 0 14 568 569 570 571 572 573 574 575 576 577 578 579 580 581 0 0 1 0 759 0 0 0 0 0

776 11 PTAVecBase3 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 583 598 0 14 584 585 586 587 588 589 590 591 592 593 594 595 596 597 0 0 1 0 762 0 0 0 0 0

777 11 PTAVecBase4 141313 28 PointerToArray< LVecBase4f > 28 PointerToArray< LVecBase4f > 0 0 0 1 599 614 0 14 600 601 602 603 604 605 606 607 608 609 610 611 612 613 0 0 1 0 765 0 0 0 0 0

778 14 BoundingVolume 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 625 0 10 615 616 617 618 619 620 621 622 623 624 0 0 1 0 779 0 0 0 2 780 781 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

779 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

780 17 IntersectionFlags 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 778 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 0 11 IF_possible 27 BoundingVolume::IF_possible 1 7 IF_some 23 BoundingVolume::IF_some 2 6 IF_all 22 BoundingVolume::IF_all 4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 8 0 77
// The contains() functions return the union of one or more of these
// bits.

781 10 BoundsType 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 778 0 0 0 0 0 0 0 0 0 4 10 BT_default 26 BoundingVolume::BT_default 0 7 BT_best 23 BoundingVolume::BT_best 1 9 BT_sphere 25 BoundingVolume::BT_sphere 2 6 BT_box 22 BoundingVolume::BT_box 3 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

782 23 GeometricBoundingVolume 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 632 0 6 626 627 628 629 630 631 0 0 1 0 778 0 0 0 0 380
////////////////////////////////////////////////////////////////////
//       Class : GeometricBoundingVolume
// Description : This is another abstract class, for a general class
//               of bounding volumes that actually enclose points in
//               3-d space, such as BSP's and bounding spheres.
////////////////////////////////////////////////////////////////////

783 20 FiniteBoundingVolume 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 637 0 4 633 634 635 636 0 0 1 0 782 0 0 0 0 378
////////////////////////////////////////////////////////////////////
//       Class : FiniteBoundingVolume
// Description : A special kind of GeometricBoundingVolume that is
//               known to be finite.  It is possible to query this
//               kind of volume for its minimum and maximum extents.
////////////////////////////////////////////////////////////////////

784 9 Parabolaf 26625 9 Parabolaf 9 Parabolaf 0 0 0 1 638 640 0 8 639 641 642 643 644 645 646 647 0 0 0 0 0 920
// Filename: parabola_src.h
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : Parabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

785 9 Parabolad 26625 9 Parabolad 9 Parabolad 0 0 0 1 648 650 0 8 649 651 652 653 654 655 656 657 0 0 0 0 0 920
// Filename: parabola_src.h
// Created by:  drose (10Oct07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : Parabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

786 11 BoundingBox 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 658 667 0 8 659 660 661 662 663 664 665 666 2 971 972 0 1 0 783 0 0 0 0 416
////////////////////////////////////////////////////////////////////
//       Class : BoundingBox
// Description : An axis-aligned bounding box; that is, a minimum and
//               maximum coordinate triple.
//
//               This box is always axis-aligned.  If you need a more
//               general bounding box, try BoundingHexahedron.
////////////////////////////////////////////////////////////////////

787 18 BoundingHexahedron 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 668 674 0 5 669 670 671 672 673 2 973 974 0 1 0 783 0 0 0 0 556
////////////////////////////////////////////////////////////////////
//       Class : BoundingHexahedron
// Description : This defines a bounding convex hexahedron.  It is
//               typically used to represent a frustum, but may
//               represent any enclosing convex hexahedron, including
//               simple boxes.  However, if all you want is an
//               axis-aligned bounding box, you may be better off with
//               the simpler BoundingBox class.
////////////////////////////////////////////////////////////////////

788 12 BoundingLine 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 675 682 0 6 676 677 678 679 680 681 0 0 1 0 782 0 0 0 0 584
////////////////////////////////////////////////////////////////////
//       Class : BoundingLine
// Description : This funny bounding volume is an infinite line with
//               no thickness and extending to infinity in both
//               directions.
//
//               Note that it *always* extends in both directions,
//               despite the fact that you specify two points to the
//               constructor.  These are not endpoints, they are two
//               arbitrary points on the line.
////////////////////////////////////////////////////////////////////

789 13 BoundingPlane 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 683 689 0 5 684 685 686 687 688 0 0 1 0 782 0 0 0 0 482
////////////////////////////////////////////////////////////////////
//       Class : BoundingPlane
// Description : This funny bounding volume is an infinite plane that
//               divides space into two regions: the part behind the
//               normal, which is "inside" the bounding volume, and
//               the part in front of the normal, which is "outside"
//               the bounding volume.
////////////////////////////////////////////////////////////////////

790 14 BoundingSphere 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 690 697 0 6 691 692 693 694 695 696 0 0 1 0 783 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : BoundingSphere
// Description : This defines a bounding sphere, consisting of a
//               center and a radius.  It is always a sphere, and
//               never an ellipsoid or other quadric.
////////////////////////////////////////////////////////////////////

791 18 OmniBoundingVolume 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 700 702 0 1 701 0 0 1 0 782 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : OmniBoundingVolume
// Description : This is a special kind of GeometricBoundingVolume
//               that fills all of space.
////////////////////////////////////////////////////////////////////

792 8 Mersenne 141313 8 Mersenne 8 Mersenne 0 0 0 1 703 705 0 1 704 0 0 0 0 0 0

793 11 PerlinNoise 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 707 0 1 706 0 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise
// Description : This is the base class for PerlinNoise2 and
//               PerlinNoise3, different dimensions of Perlin noise
//               implementation.  The base class just collects the
//               common functionality.
////////////////////////////////////////////////////////////////////

794 12 PerlinNoise2 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 708 713 0 4 709 710 711 712 0 0 1 0 793 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise2
// Description : This class provides an implementation of Perlin noise
//               for 2 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

795 12 PerlinNoise3 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 714 719 0 4 715 716 717 718 0 0 1 0 793 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise3
// Description : This class provides an implementation of Perlin noise
//               for 3 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

796 19 StackedPerlinNoise2 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 721 727 0 5 722 723 724 725 726 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise2
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

797 19 StackedPerlinNoise3 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 728 734 0 5 729 730 731 732 733 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise3
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

798 12 Triangulator 141313 12 Triangulator 12 Triangulator 0 0 0 1 735 750 0 14 736 737 738 739 740 741 742 743 744 745 746 747 748 749 1 975 0 0 0 0 733
////////////////////////////////////////////////////////////////////
//       Class : Triangulator
// Description : This class can triangulate a convex or concave
//               polygon, even one with holes.  It is adapted from an
//               algorithm published as:
//
//               Narkhede A. and Manocha D., Fast polygon
//               triangulation algorithm based on Seidel's Algorithm,
//               UNC-CH, 1994.
//
//               http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
//
//               It works strictly on 2-d points.  You'll have to
//               convert your polygon into a plane if you have 3-d
//               points.
////////////////////////////////////////////////////////////////////

799 40 ConstPointerToArray< LMatrix3f > const * 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 800 0 0 0 0 0 0 0 0 0 0

800 38 ConstPointerToArray< LMatrix3f > const 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 751 0 0 0 0 0 0 0 0 0 0

801 34 ConstPointerToArray< LMatrix3f > * 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 751 0 0 0 0 0 0 0 0 0 0

802 35 PointerToArray< LMatrix3f > const * 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 803 0 0 0 0 0 0 0 0 0 0

803 33 PointerToArray< LMatrix3f > const 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 773 0 0 0 0 0 0 0 0 0 0

804 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

805 17 LMatrix3f const * 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 806 0 0 0 0 0 0 0 0 0 0

806 15 LMatrix3f const 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 807 0 0 0 0 0 0 0 0 0 0

807 9 LMatrix3f 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 976 977 978 979 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

808 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

809 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

810 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 753 0 0 0 0 0 0 0 0 0 0

811 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

812 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 813 0 0 0 0 0 0 0 0 0 0

813 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 753 0 0 0 0 0 0 0 0 0 0

814 9 ostream * 8576 9 ostream * 9 ostream * 0 0 815 0 0 0 0 0 0 0 0 0 0

815 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

816 40 ConstPointerToArray< LMatrix4f > const * 8576 40 ConstPointerToArray< LMatrix4f > const * 40 ConstPointerToArray< LMatrix4f > const * 0 0 817 0 0 0 0 0 0 0 0 0 0

817 38 ConstPointerToArray< LMatrix4f > const 8832 38 ConstPointerToArray< LMatrix4f > const 38 ConstPointerToArray< LMatrix4f > const 0 0 755 0 0 0 0 0 0 0 0 0 0

818 34 ConstPointerToArray< LMatrix4f > * 8576 34 ConstPointerToArray< LMatrix4f > * 34 ConstPointerToArray< LMatrix4f > * 0 0 755 0 0 0 0 0 0 0 0 0 0

819 35 PointerToArray< LMatrix4f > const * 8576 35 PointerToArray< LMatrix4f > const * 35 PointerToArray< LMatrix4f > const * 0 0 820 0 0 0 0 0 0 0 0 0 0

820 33 PointerToArray< LMatrix4f > const 8832 33 PointerToArray< LMatrix4f > const 33 PointerToArray< LMatrix4f > const 0 0 774 0 0 0 0 0 0 0 0 0 0

821 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 822 0 0 0 0 0 0 0 0 0 0

822 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 823 0 0 0 0 0 0 0 0 0 0

823 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 980 981 982 0 0 0 0 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

824 54 PointerToBase< ReferenceCountedVector< LMatrix4f > > * 8576 54 PointerToBase< ReferenceCountedVector< LMatrix4f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix4f > > * 0 0 757 0 0 0 0 0 0 0 0 0 0

825 60 PointerToBase< ReferenceCountedVector< LMatrix4f > > const * 8576 60 PointerToBase< ReferenceCountedVector< LMatrix4f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix4f > > const * 0 0 826 0 0 0 0 0 0 0 0 0 0

826 58 PointerToBase< ReferenceCountedVector< LMatrix4f > > const 8832 58 PointerToBase< ReferenceCountedVector< LMatrix4f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix4f > > const 0 0 757 0 0 0 0 0 0 0 0 0 0

827 41 ConstPointerToArray< LVecBase2f > const * 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 828 0 0 0 0 0 0 0 0 0 0

828 39 ConstPointerToArray< LVecBase2f > const 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 758 0 0 0 0 0 0 0 0 0 0

829 35 ConstPointerToArray< LVecBase2f > * 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 758 0 0 0 0 0 0 0 0 0 0

830 36 PointerToArray< LVecBase2f > const * 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 831 0 0 0 0 0 0 0 0 0 0

831 34 PointerToArray< LVecBase2f > const 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 775 0 0 0 0 0 0 0 0 0 0

832 18 LVecBase2f const * 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 833 0 0 0 0 0 0 0 0 0 0

833 16 LVecBase2f const 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 834 0 0 0 0 0 0 0 0 0 0

834 10 LVecBase2f 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 805
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

835 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 760 0 0 0 0 0 0 0 0 0 0

836 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 837 0 0 0 0 0 0 0 0 0 0

837 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 760 0 0 0 0 0 0 0 0 0 0

838 41 ConstPointerToArray< LVecBase3f > const * 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 839 0 0 0 0 0 0 0 0 0 0

839 39 ConstPointerToArray< LVecBase3f > const 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 761 0 0 0 0 0 0 0 0 0 0

840 35 ConstPointerToArray< LVecBase3f > * 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 761 0 0 0 0 0 0 0 0 0 0

841 36 PointerToArray< LVecBase3f > const * 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 842 0 0 0 0 0 0 0 0 0 0

842 34 PointerToArray< LVecBase3f > const 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 776 0 0 0 0 0 0 0 0 0 0

843 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 844 0 0 0 0 0 0 0 0 0 0

844 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 845 0 0 0 0 0 0 0 0 0 0

845 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

846 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 763 0 0 0 0 0 0 0 0 0 0

847 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 848 0 0 0 0 0 0 0 0 0 0

848 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 763 0 0 0 0 0 0 0 0 0 0

849 41 ConstPointerToArray< LVecBase4f > const * 8576 41 ConstPointerToArray< LVecBase4f > const * 41 ConstPointerToArray< LVecBase4f > const * 0 0 850 0 0 0 0 0 0 0 0 0 0

850 39 ConstPointerToArray< LVecBase4f > const 8832 39 ConstPointerToArray< LVecBase4f > const 39 ConstPointerToArray< LVecBase4f > const 0 0 764 0 0 0 0 0 0 0 0 0 0

851 35 ConstPointerToArray< LVecBase4f > * 8576 35 ConstPointerToArray< LVecBase4f > * 35 ConstPointerToArray< LVecBase4f > * 0 0 764 0 0 0 0 0 0 0 0 0 0

852 36 PointerToArray< LVecBase4f > const * 8576 36 PointerToArray< LVecBase4f > const * 36 PointerToArray< LVecBase4f > const * 0 0 853 0 0 0 0 0 0 0 0 0 0

853 34 PointerToArray< LVecBase4f > const 8832 34 PointerToArray< LVecBase4f > const 34 PointerToArray< LVecBase4f > const 0 0 777 0 0 0 0 0 0 0 0 0 0

854 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 855 0 0 0 0 0 0 0 0 0 0

855 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 772 0 0 0 0 0 0 0 0 0 0

856 55 PointerToBase< ReferenceCountedVector< LVecBase4f > > * 8576 55 PointerToBase< ReferenceCountedVector< LVecBase4f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase4f > > * 0 0 766 0 0 0 0 0 0 0 0 0 0

857 61 PointerToBase< ReferenceCountedVector< LVecBase4f > > const * 8576 61 PointerToBase< ReferenceCountedVector< LVecBase4f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase4f > > const * 0 0 858 0 0 0 0 0 0 0 0 0 0

858 59 PointerToBase< ReferenceCountedVector< LVecBase4f > > const 8832 59 PointerToBase< ReferenceCountedVector< LVecBase4f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase4f > > const 0 0 766 0 0 0 0 0 0 0 0 0 0

859 10 Frustumd * 8576 10 Frustumd * 10 Frustumd * 0 0 767 0 0 0 0 0 0 0 0 0 0

860 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

861 10 Frustumf * 8576 10 Frustumf * 10 Frustumf * 0 0 768 0 0 0 0 0 0 0 0 0 0

862 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

863 8 Planed * 8576 8 Planed * 8 Planed * 0 0 769 0 0 0 0 0 0 0 0 0 0

864 16 LPoint3d const * 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 865 0 0 0 0 0 0 0 0 0 0

865 14 LPoint3d const 8832 14 LPoint3d const 14 LPoint3d const 0 0 866 0 0 0 0 0 0 0 0 0 0

866 7 Vertexd 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

867 18 LVecBase4d const * 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 868 0 0 0 0 0 0 0 0 0 0

868 16 LVecBase4d const 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 770 0 0 0 0 0 0 0 0 0 0

869 17 LVector3d const * 8576 17 LVector3d const * 17 LVector3d const * 0 0 870 0 0 0 0 0 0 0 0 0 0

870 15 LVector3d const 8832 15 LVector3d const 15 LVector3d const 0 0 871 0 0 0 0 0 0 0 0 0 0

871 7 Normald 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

872 14 Planed const * 8576 14 Planed const * 14 Planed const * 0 0 873 0 0 0 0 0 0 0 0 0 0

873 12 Planed const 8832 12 Planed const 12 Planed const 0 0 769 0 0 0 0 0 0 0 0 0 0

874 17 LMatrix3d const * 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 875 0 0 0 0 0 0 0 0 0 0

875 15 LMatrix3d const 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 876 0 0 0 0 0 0 0 0 0 0

876 9 LMatrix3d 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 983 984 985 986 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

877 17 LMatrix4d const * 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 878 0 0 0 0 0 0 0 0 0 0

878 15 LMatrix4d const 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 879 0 0 0 0 0 0 0 0 0 0

879 9 LMatrix4d 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 987 988 989 0 0 0 0 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

880 11 LMatrix4d * 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 879 0 0 0 0 0 0 0 0 0 0

881 11 LVector3d * 8576 11 LVector3d * 11 LVector3d * 0 0 871 0 0 0 0 0 0 0 0 0 0

882 10 LPoint3d * 8576 10 LPoint3d * 10 LPoint3d * 0 0 866 0 0 0 0 0 0 0 0 0 0

883 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

884 8 Planef * 8576 8 Planef * 8 Planef * 0 0 771 0 0 0 0 0 0 0 0 0 0

885 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 886 0 0 0 0 0 0 0 0 0 0

886 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 887 0 0 0 0 0 0 0 0 0 0

887 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

888 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 889 0 0 0 0 0 0 0 0 0 0

889 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 890 0 0 0 0 0 0 0 0 0 0

890 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

891 14 Planef const * 8576 14 Planef const * 14 Planef const * 0 0 892 0 0 0 0 0 0 0 0 0 0

892 12 Planef const 8832 12 Planef const 12 Planef const 0 0 771 0 0 0 0 0 0 0 0 0 0

893 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 823 0 0 0 0 0 0 0 0 0 0

894 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 890 0 0 0 0 0 0 0 0 0 0

895 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 887 0 0 0 0 0 0 0 0 0 0

896 29 PointerToArray< LMatrix3f > * 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 773 0 0 0 0 0 0 0 0 0 0

897 10 PyObject * 8576 10 PyObject * 10 PyObject * 0 0 898 0 0 0 0 0 0 0 0 0 0

898 8 PyObject 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

899 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 900 0 0 0 0 0 0 0 0 0 0

900 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

901 29 PointerToArray< LMatrix4f > * 8576 29 PointerToArray< LMatrix4f > * 29 PointerToArray< LMatrix4f > * 0 0 774 0 0 0 0 0 0 0 0 0 0

902 30 PointerToArray< LVecBase2f > * 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 775 0 0 0 0 0 0 0 0 0 0

903 30 PointerToArray< LVecBase3f > * 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 776 0 0 0 0 0 0 0 0 0 0

904 30 PointerToArray< LVecBase4f > * 8576 30 PointerToArray< LVecBase4f > * 30 PointerToArray< LVecBase4f > * 0 0 777 0 0 0 0 0 0 0 0 0 0

905 22 BoundingVolume const * 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 906 0 0 0 0 0 0 0 0 0 0

906 20 BoundingVolume const 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 778 0 0 0 0 0 0 0 0 0 0

907 16 BoundingVolume * 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 778 0 0 0 0 0 0 0 0 0 0

908 25 GeometricBoundingVolume * 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 782 0 0 0 0 0 0 0 0 0 0

909 31 GeometricBoundingVolume const * 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 910 0 0 0 0 0 0 0 0 0 0

910 29 GeometricBoundingVolume const 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 782 0 0 0 0 0 0 0 0 0 0

911 28 FiniteBoundingVolume const * 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 912 0 0 0 0 0 0 0 0 0 0

912 26 FiniteBoundingVolume const 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 783 0 0 0 0 0 0 0 0 0 0

913 11 Parabolaf * 8576 11 Parabolaf * 11 Parabolaf * 0 0 784 0 0 0 0 0 0 0 0 0 0

914 17 Parabolaf const * 8576 17 Parabolaf const * 17 Parabolaf const * 0 0 915 0 0 0 0 0 0 0 0 0 0

915 15 Parabolaf const 8832 15 Parabolaf const 15 Parabolaf const 0 0 784 0 0 0 0 0 0 0 0 0 0

916 11 Parabolad * 8576 11 Parabolad * 11 Parabolad * 0 0 785 0 0 0 0 0 0 0 0 0 0

917 18 LVecBase3d const * 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 918 0 0 0 0 0 0 0 0 0 0

918 16 LVecBase3d const 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 919 0 0 0 0 0 0 0 0 0 0

919 9 RGBColord 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

920 17 Parabolad const * 8576 17 Parabolad const * 17 Parabolad const * 0 0 921 0 0 0 0 0 0 0 0 0 0

921 15 Parabolad const 8832 15 Parabolad const 15 Parabolad const 0 0 785 0 0 0 0 0 0 0 0 0 0

922 13 BoundingBox * 8576 13 BoundingBox * 13 BoundingBox * 0 0 786 0 0 0 0 0 0 0 0 0 0

923 19 BoundingBox const * 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 924 0 0 0 0 0 0 0 0 0 0

924 17 BoundingBox const 8832 17 BoundingBox const 17 BoundingBox const 0 0 786 0 0 0 0 0 0 0 0 0 0

925 16 Frustumf const * 8576 16 Frustumf const * 16 Frustumf const * 0 0 926 0 0 0 0 0 0 0 0 0 0

926 14 Frustumf const 8832 14 Frustumf const 14 Frustumf const 0 0 768 0 0 0 0 0 0 0 0 0 0

927 16 CoordinateSystem 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

928 20 BoundingHexahedron * 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 787 0 0 0 0 0 0 0 0 0 0

929 26 BoundingHexahedron const * 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 930 0 0 0 0 0 0 0 0 0 0

930 24 BoundingHexahedron const 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 787 0 0 0 0 0 0 0 0 0 0

931 14 BoundingLine * 8576 14 BoundingLine * 14 BoundingLine * 0 0 788 0 0 0 0 0 0 0 0 0 0

932 20 BoundingLine const * 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 933 0 0 0 0 0 0 0 0 0 0

933 18 BoundingLine const 8832 18 BoundingLine const 18 BoundingLine const 0 0 788 0 0 0 0 0 0 0 0 0 0

934 15 BoundingPlane * 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 789 0 0 0 0 0 0 0 0 0 0

935 21 BoundingPlane const * 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 936 0 0 0 0 0 0 0 0 0 0

936 19 BoundingPlane const 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 789 0 0 0 0 0 0 0 0 0 0

937 16 BoundingSphere * 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 790 0 0 0 0 0 0 0 0 0 0

938 22 BoundingSphere const * 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 939 0 0 0 0 0 0 0 0 0 0

939 20 BoundingSphere const 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 790 0 0 0 0 0 0 0 0 0 0

940 20 OmniBoundingVolume * 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 791 0 0 0 0 0 0 0 0 0 0

941 17 unsigned long int 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

942 10 Mersenne * 8576 10 Mersenne * 10 Mersenne * 0 0 792 0 0 0 0 0 0 0 0 0 0

943 13 PerlinNoise * 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 793 0 0 0 0 0 0 0 0 0 0

944 14 PerlinNoise2 * 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 794 0 0 0 0 0 0 0 0 0 0

945 20 PerlinNoise2 const * 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 946 0 0 0 0 0 0 0 0 0 0

946 18 PerlinNoise2 const 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 794 0 0 0 0 0 0 0 0 0 0

947 18 LVecBase2d const * 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 948 0 0 0 0 0 0 0 0 0 0

948 16 LVecBase2d const 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 949 0 0 0 0 0 0 0 0 0 0

949 10 LVecBase2d 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 805
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

950 14 PerlinNoise3 * 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 795 0 0 0 0 0 0 0 0 0 0

951 20 PerlinNoise3 const * 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 952 0 0 0 0 0 0 0 0 0 0

952 18 PerlinNoise3 const 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 795 0 0 0 0 0 0 0 0 0 0

953 21 StackedPerlinNoise2 * 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 796 0 0 0 0 0 0 0 0 0 0

954 27 StackedPerlinNoise2 const * 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 955 0 0 0 0 0 0 0 0 0 0

955 25 StackedPerlinNoise2 const 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 796 0 0 0 0 0 0 0 0 0 0

956 21 StackedPerlinNoise3 * 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 797 0 0 0 0 0 0 0 0 0 0

957 27 StackedPerlinNoise3 const * 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 958 0 0 0 0 0 0 0 0 0 0

958 25 StackedPerlinNoise3 const 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 797 0 0 0 0 0 0 0 0 0 0

959 14 Triangulator * 8576 14 Triangulator * 14 Triangulator * 0 0 798 0 0 0 0 0 0 0 0 0 0

960 16 LPoint2d const * 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 961 0 0 0 0 0 0 0 0 0 0

961 14 LPoint2d const 8832 14 LPoint2d const 14 LPoint2d const 0 0 962 0 0 0 0 0 0 0 0 0 0

962 9 TexCoordd 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

963 20 Triangulator const * 8576 20 Triangulator const * 20 Triangulator const * 0 0 964 0 0 0 0 0 0 0 0 0 0

964 18 Triangulator const 8832 18 Triangulator const 18 Triangulator const 0 0 798 0 0 0 0 0 0 0 0 0 0

965 11 LMatrix3d * 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 876 0 0 0 0 0 0 0 0 0 0

966 11 LMatrix3f * 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 807 0 0 0 0 0 0 0 0 0 0

967 14 LQuaterniond * 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 968 0 0 0 0 0 0 0 0 0 0

968 12 LQuaterniond 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

969 14 LQuaternionf * 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 970 0 0 0 0 0 0 0 0 0 0

970 12 LQuaternionf 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

0
0
19
971 0 267 10 get_points 14 get_num_points 9 get_point 
972 0 267 10 get_planes 14 get_num_planes 9 get_plane 
973 0 278 10 get_points 14 get_num_points 9 get_point 
974 0 278 10 get_planes 14 get_num_planes 9 get_plane 
975 0 356 12 get_vertices 16 get_num_vertices 10 get_vertex 
976 0 385 8 get_rows 4 size 7 get_row 
977 0 385 8 get_cols 4 size 7 get_col 
978 0 385 9 get_col2s 4 size 8 get_col2 
979 0 385 9 get_row2s 4 size 8 get_row2 
980 0 412 8 get_rows 4 size 7 get_row 
981 0 412 8 get_cols 4 size 7 get_col 
982 0 412 9 get_row3s 4 size 8 get_row3 
983 0 527 8 get_rows 4 size 7 get_row 
984 0 527 8 get_cols 4 size 7 get_col 
985 0 527 9 get_col2s 4 size 8 get_col2 
986 0 527 9 get_row2s 4 size 8 get_row2 
987 0 531 8 get_rows 4 size 7 get_row 
988 0 531 8 get_cols 4 size 7 get_col 
989 0 531 9 get_row3s 4 size 8 get_row3 
