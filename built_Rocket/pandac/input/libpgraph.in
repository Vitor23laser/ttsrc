1687212852
2 2
9 libpgraph 4 nJyo 5 panda 
1546
2178 10 operator < 4 3724 26 TransformState::operator < 0 1 1 1058
// Filename: transformState.I
// Created by:  drose (25Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformState::operator <
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This is the same as sorts_less(), except the
//               uniquify_matrix value is implicit from the Config.prc
//               file.
////////////////////////////////////////////////////////////////////
74
inline bool TransformState::operator <(TransformState const &other) const;

2179 10 sorts_less 4 3724 26 TransformState::sorts_less 0 1 2 696
////////////////////////////////////////////////////////////////////
//     Function: TransformState::sorts_less
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               If uniquify_matrix is true, then matrix-defined
//               TransformStates are also uniqified.  If
//               uniquify_matrix is false, then only component-defined
//               TransformStates are uniquified, which is less
//               expensive.
////////////////////////////////////////////////////////////////////
89
bool TransformState::sorts_less(TransformState const &other, bool uniquify_matrix) const;

2180 8 get_hash 4 3724 24 TransformState::get_hash 0 1 3 268
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
////////////////////////////////////////////////////////////////////
57
inline unsigned int TransformState::get_hash(void) const;

2181 13 make_identity 4 3724 29 TransformState::make_identity 0 1 4 270
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_identity
//       Access: Published, Static
//  Description: Constructs an identity transform.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< TransformState > TransformState::make_identity(void);

2182 12 make_invalid 4 3724 28 TransformState::make_invalid 0 1 5 342
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_invalid
//       Access: Published, Static
//  Description: Constructs an invalid transform; for instance, the
//               result of inverting a singular matrix.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< TransformState > TransformState::make_invalid(void);

2183 8 make_pos 4 3724 24 TransformState::make_pos 0 1 6 306
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
95
static inline ConstPointerTo< TransformState > TransformState::make_pos(LVecBase3f const &pos);

2184 8 make_hpr 4 3724 24 TransformState::make_hpr 0 1 7 306
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
95
static inline ConstPointerTo< TransformState > TransformState::make_hpr(LVecBase3f const &hpr);

2185 9 make_quat 4 3724 25 TransformState::make_quat 0 1 8 307
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_quat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
99
static inline ConstPointerTo< TransformState > TransformState::make_quat(LQuaternionf const &quat);

2186 12 make_pos_hpr 4 3724 28 TransformState::make_pos_hpr 0 1 9 310
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
122
static inline ConstPointerTo< TransformState > TransformState::make_pos_hpr(LVecBase3f const &pos, LVecBase3f const &hpr);

2187 10 make_scale 4 3724 26 TransformState::make_scale 0 2 10 11 618
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
187
static inline ConstPointerTo< TransformState > TransformState::make_scale(float scale);
static inline ConstPointerTo< TransformState > TransformState::make_scale(LVecBase3f const &scale);

2188 10 make_shear 4 3724 26 TransformState::make_shear 0 1 12 308
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
99
static inline ConstPointerTo< TransformState > TransformState::make_shear(LVecBase3f const &shear);

2189 18 make_pos_hpr_scale 4 3724 34 TransformState::make_pos_hpr_scale 0 1 13 316
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
153
static inline ConstPointerTo< TransformState > TransformState::make_pos_hpr_scale(LVecBase3f const &pos, LVecBase3f const &hpr, LVecBase3f const &scale);

2190 19 make_pos_quat_scale 4 3724 35 TransformState::make_pos_quat_scale 0 1 14 317
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
157
static inline ConstPointerTo< TransformState > TransformState::make_pos_quat_scale(LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale);

2191 24 make_pos_hpr_scale_shear 4 3724 40 TransformState::make_pos_hpr_scale_shear 0 1 15 322
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
177
static ConstPointerTo< TransformState > TransformState::make_pos_hpr_scale_shear(LVecBase3f const &pos, LVecBase3f const &hpr, LVecBase3f const &scale, LVecBase3f const &shear);

2192 25 make_pos_quat_scale_shear 4 3724 41 TransformState::make_pos_quat_scale_shear 0 1 16 323
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
181
static ConstPointerTo< TransformState > TransformState::make_pos_quat_scale_shear(LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale, LVecBase3f const &shear);

2193 8 make_mat 4 3724 24 TransformState::make_mat 0 1 17 317
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               transformation matrix.
////////////////////////////////////////////////////////////////////
87
static ConstPointerTo< TransformState > TransformState::make_mat(LMatrix4f const &mat);

2194 10 make_pos2d 4 3724 26 TransformState::make_pos2d 0 1 18 312
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
97
static inline ConstPointerTo< TransformState > TransformState::make_pos2d(LVecBase2f const &pos);

2195 13 make_rotate2d 4 3724 29 TransformState::make_rotate2d 0 1 19 315
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
91
static inline ConstPointerTo< TransformState > TransformState::make_rotate2d(float rotate);

2196 17 make_pos_rotate2d 4 3724 33 TransformState::make_pos_rotate2d 0 1 20 319
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
118
static inline ConstPointerTo< TransformState > TransformState::make_pos_rotate2d(LVecBase2f const &pos, float rotate);

2197 12 make_scale2d 4 3724 28 TransformState::make_scale2d 0 2 21 22 630
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
191
static inline ConstPointerTo< TransformState > TransformState::make_scale2d(float scale);
static inline ConstPointerTo< TransformState > TransformState::make_scale2d(LVecBase2f const &scale);

2198 12 make_shear2d 4 3724 28 TransformState::make_shear2d 0 1 23 314
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
89
static inline ConstPointerTo< TransformState > TransformState::make_shear2d(float shear);

2199 23 make_pos_rotate_scale2d 4 3724 39 TransformState::make_pos_rotate_scale2d 0 1 24 325
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
////////////////////////////////////////////////////////////////////
149
static inline ConstPointerTo< TransformState > TransformState::make_pos_rotate_scale2d(LVecBase2f const &pos, float rotate, LVecBase2f const &scale);

2200 29 make_pos_rotate_scale_shear2d 4 3724 45 TransformState::make_pos_rotate_scale_shear2d 0 1 25 343
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale_shear2d
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified components.
////////////////////////////////////////////////////////////////////
161
static ConstPointerTo< TransformState > TransformState::make_pos_rotate_scale_shear2d(LVecBase2f const &pos, float rotate, LVecBase2f const &scale, float shear);

2201 9 make_mat3 4 3724 25 TransformState::make_mat3 0 1 26 338
////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat3
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified 3x3 transformation matrix.
////////////////////////////////////////////////////////////////////
88
static ConstPointerTo< TransformState > TransformState::make_mat3(LMatrix3f const &mat);

2202 11 is_identity 4 3724 27 TransformState::is_identity 0 1 27 322
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_identity
//       Access: Published
//  Description: Returns true if the transform represents the identity
//               matrix, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool TransformState::is_identity(void) const;

2203 10 is_invalid 4 3724 26 TransformState::is_invalid 0 1 28 411
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_invalid
//       Access: Published
//  Description: Returns true if the transform represents an invalid
//               matrix, for instance the result of inverting a
//               singular matrix, or false if the transform is valid.
////////////////////////////////////////////////////////////////////
51
inline bool TransformState::is_invalid(void) const;

2204 11 is_singular 4 3724 27 TransformState::is_singular 0 1 29 401
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_singular
//       Access: Published
//  Description: Returns true if the transform represents a singular
//               transform (that is, it has a zero scale, and it
//               cannot be inverted), or false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool TransformState::is_singular(void) const;

2205 5 is_2d 4 3724 21 TransformState::is_2d 0 1 30 460
////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_2d
//       Access: Published
//  Description: Returns true if the transform has been constructed
//               entirely using the 2-d transform operations,
//               e.g. make_pos2d(), and therefore operates strictly in
//               two-dimensional space on X and Y only.
////////////////////////////////////////////////////////////////////
46
inline bool TransformState::is_2d(void) const;

2206 14 has_components 4 3724 30 TransformState::has_components 0 1 31 1050
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_components
//       Access: Published
//  Description: Returns true if the transform can be described by
//               separate pos, hpr, and scale components.  Most
//               transforms we use in everyday life can be so
//               described, but some kinds of transforms (for
//               instance, those involving a skew) cannot.
//
//               This is not related to whether the transform was
//               originally described componentwise.  Even a transform
//               that was constructed with a 4x4 may return true here
//               if the matrix is a simple affine matrix with no skew.
//
//               If this returns true, you may safely call get_hpr()
//               and get_scale() to retrieve the components.  (You
//               may always safely call get_pos() whether this returns
//               true or false.)
////////////////////////////////////////////////////////////////////
55
inline bool TransformState::has_components(void) const;

2207 16 components_given 4 3724 32 TransformState::components_given 0 1 32 796
////////////////////////////////////////////////////////////////////
//     Function: TransformState::components_given
//       Access: Published
//  Description: Returns true if the transform was specified
//               componentwise, or false if it was specified with a
//               general 4x4 matrix.  If this is true, the components
//               returned by get_pos() and get_scale() will be exactly
//               those that were set; otherwise, these functions will
//               return computed values.  If this is true, the
//               rotation may have been set either with a hpr trio or
//               with a quaternion; hpr_given() or quat_given() can
//               resolve the difference.
////////////////////////////////////////////////////////////////////
57
inline bool TransformState::components_given(void) const;

2208 9 hpr_given 4 3724 25 TransformState::hpr_given 0 1 33 459
////////////////////////////////////////////////////////////////////
//     Function: TransformState::hpr_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a trio
//               of Euler angles, false otherwise.  If this is true,
//               get_hpr() will be exactly as set; otherwise, it will
//               return a computed value.
////////////////////////////////////////////////////////////////////
50
inline bool TransformState::hpr_given(void) const;

2209 10 quat_given 4 3724 26 TransformState::quat_given 0 1 34 452
////////////////////////////////////////////////////////////////////
//     Function: TransformState::quat_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a 
//               quaternion, false otherwise.  If this is true,
//               get_quat() will be exactly as set; otherwise, it will
//               return a computed value.
////////////////////////////////////////////////////////////////////
51
inline bool TransformState::quat_given(void) const;

2210 7 has_pos 4 3724 23 TransformState::has_pos 0 1 35 450
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_pos
//       Access: Published
//  Description: Returns true if the transform's pos component can be
//               extracted out separately.  This is generally always
//               true, unless the transform is invalid
//               (i.e. is_invalid() returns true).
////////////////////////////////////////////////////////////////////
48
inline bool TransformState::has_pos(void) const;

2211 7 has_hpr 4 3724 23 TransformState::has_hpr 0 1 36 456
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_hpr
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               set of Euler angles.  This is generally true only
//               when has_components() is true.
////////////////////////////////////////////////////////////////////
48
inline bool TransformState::has_hpr(void) const;

2212 8 has_quat 4 3724 24 TransformState::has_quat 0 1 37 448
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_quat
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               quaternion.  This is generally true only when
//               has_components() is true.
////////////////////////////////////////////////////////////////////
49
inline bool TransformState::has_quat(void) const;

2213 9 has_scale 4 3724 25 TransformState::has_scale 0 1 38 399
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_scale
//       Access: Published
//  Description: Returns true if the transform's scale component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
////////////////////////////////////////////////////////////////////
50
inline bool TransformState::has_scale(void) const;

2214 18 has_identity_scale 4 3724 34 TransformState::has_identity_scale 0 1 39 335
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_identity_scale
//       Access: Published
//  Description: Returns true if the scale is uniform 1.0, or false if
//               the scale has some real value.
////////////////////////////////////////////////////////////////////
59
inline bool TransformState::has_identity_scale(void) const;

2215 17 has_uniform_scale 4 3724 33 TransformState::has_uniform_scale 0 1 40 468
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_uniform_scale
//       Access: Published
//  Description: Returns true if the scale is uniform across all three
//               axes (and therefore can be expressed as a single
//               number), or false if the transform has a different
//               scale in different dimensions.
////////////////////////////////////////////////////////////////////
58
inline bool TransformState::has_uniform_scale(void) const;

2216 9 has_shear 4 3724 25 TransformState::has_shear 0 1 41 399
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_shear
//       Access: Published
//  Description: Returns true if the transform's shear component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
////////////////////////////////////////////////////////////////////
50
inline bool TransformState::has_shear(void) const;

2217 17 has_nonzero_shear 4 3724 33 TransformState::has_nonzero_shear 0 1 42 374
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_nonzero_shear
//       Access: Published
//  Description: Returns true if the shear component is non-zero,
//               false if it is zero or if the matrix cannot be
//               decomposed.
////////////////////////////////////////////////////////////////////
58
inline bool TransformState::has_nonzero_shear(void) const;

2218 7 has_mat 4 3724 23 TransformState::has_mat 0 1 43 377
////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_mat
//       Access: Published
//  Description: Returns true if the transform can be described as a
//               matrix.  This is generally always true, unless
//               is_invalid() is true.
////////////////////////////////////////////////////////////////////
48
inline bool TransformState::has_mat(void) const;

2219 7 get_pos 4 3724 23 TransformState::get_pos 0 1 44 341
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos
//       Access: Published
//  Description: Returns the pos component of the transform.  It is an
//               error to call this if has_pos() returned false.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f const &TransformState::get_pos(void) const;

2220 7 get_hpr 4 3724 23 TransformState::get_hpr 0 1 45 396
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hpr
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               trio of Euler angles.  It is an error to call this if
//               has_components() returned false.
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f const &TransformState::get_hpr(void) const;

2221 8 get_quat 4 3724 24 TransformState::get_quat 0 1 46 746
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_quat
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               quaternion.  The return value will be normalized if a
//               normalized quaternion was given to the constructor
//               (or if the quaternion was computed implicitly); it
//               will be non-normalized if a non-normalized quaternion
//               was given to the constructor.  See also
//               get_norm_quat().
//
//               It is an error to call this if has_components()
//               returned false.
////////////////////////////////////////////////////////////////////
64
inline LQuaternionf const &TransformState::get_quat(void) const;

2222 13 get_norm_quat 4 3724 29 TransformState::get_norm_quat 0 1 47 524
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_norm_quat
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               quaternion.  Unlike the result of get_quat(), the
//               return value of this method is guaranteed to be
//               normalized.  It is an error to call this if
//               has_components() returned false.
////////////////////////////////////////////////////////////////////
69
inline LQuaternionf const &TransformState::get_norm_quat(void) const;

2223 9 get_scale 4 3724 25 TransformState::get_scale 0 1 48 369
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale
//       Access: Published
//  Description: Returns the scale component of the transform.  It is an
//               error to call this if has_components() returned
//               false.
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f const &TransformState::get_scale(void) const;

2224 17 get_uniform_scale 4 3724 33 TransformState::get_uniform_scale 0 1 49 400
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_uniform_scale
//       Access: Published
//  Description: Returns the scale component of the transform, as a
//               single number.  It is an error to call this if
//               has_uniform_scale() returned false.
////////////////////////////////////////////////////////////////////
59
inline float TransformState::get_uniform_scale(void) const;

2225 9 get_shear 4 3724 25 TransformState::get_shear 0 1 50 369
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear
//       Access: Published
//  Description: Returns the shear component of the transform.  It is
//               an error to call this if has_components() returned
//               false.
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f const &TransformState::get_shear(void) const;

2226 7 get_mat 4 3724 23 TransformState::get_mat 0 1 51 271
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the transform.
////////////////////////////////////////////////////////////////////
60
inline LMatrix4f const &TransformState::get_mat(void) const;

2227 9 get_pos2d 4 3724 25 TransformState::get_pos2d 0 1 52 375
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos2d
//       Access: Published
//  Description: Returns the pos component of the 2-d transform.  It
//               is an error to call this if has_pos() or is_2d()
//               returned false.
////////////////////////////////////////////////////////////////////
56
inline LVecBase2f TransformState::get_pos2d(void) const;

2228 12 get_rotate2d 4 3724 28 TransformState::get_rotate2d 0 1 53 456
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_rotate2d
//       Access: Published
//  Description: Returns the rotation component of the 2-d transform
//               as an angle in degrees clockwise about the origin.
//               It is an error to call this if has_components() or
//               is_2d() returned false.
////////////////////////////////////////////////////////////////////
54
inline float TransformState::get_rotate2d(void) const;

2229 11 get_scale2d 4 3724 27 TransformState::get_scale2d 0 1 54 386
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale2d
//       Access: Published
//  Description: Returns the scale component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
////////////////////////////////////////////////////////////////////
58
inline LVecBase2f TransformState::get_scale2d(void) const;

2230 11 get_shear2d 4 3724 27 TransformState::get_shear2d 0 1 55 386
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear2d
//       Access: Published
//  Description: Returns the shear component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
////////////////////////////////////////////////////////////////////
53
inline float TransformState::get_shear2d(void) const;

2231 8 get_mat3 4 3724 24 TransformState::get_mat3 0 1 56 370
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat3
//       Access: Published
//  Description: Returns the 3x3 matrix that describes the 2-d
//               transform.  It is an error to call this if is_2d()
//               returned false.
////////////////////////////////////////////////////////////////////
54
inline LMatrix3f TransformState::get_mat3(void) const;

2232 7 set_pos 4 3724 23 TransformState::set_pos 0 1 57 394
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its pos component
//               replaced with the indicated value.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< TransformState > TransformState::set_pos(LVecBase3f const &pos) const;

2233 7 set_hpr 4 3724 23 TransformState::set_hpr 0 1 58 412
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_hpr
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< TransformState > TransformState::set_hpr(LVecBase3f const &hpr) const;

2234 8 set_quat 4 3724 24 TransformState::set_quat 0 1 59 413
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_quat
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< TransformState > TransformState::set_quat(LQuaternionf const &quat) const;

2235 9 set_scale 4 3724 25 TransformState::set_scale 0 1 60 411
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its scale component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< TransformState > TransformState::set_scale(LVecBase3f const &scale) const;

2236 9 set_shear 4 3724 25 TransformState::set_shear 0 1 61 411
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its shear component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< TransformState > TransformState::set_shear(LVecBase3f const &shear) const;

2237 9 set_pos2d 4 3724 25 TransformState::set_pos2d 0 1 62 400
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its pos component
//               replaced with the indicated value.
////////////////////////////////////////////////////////////////////
88
ConstPointerTo< TransformState > TransformState::set_pos2d(LVecBase2f const &pos) const;

2238 12 set_rotate2d 4 3724 28 TransformState::set_rotate2d 0 1 63 421
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_rotate2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its rotation component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
82
ConstPointerTo< TransformState > TransformState::set_rotate2d(float rotate) const;

2239 11 set_scale2d 4 3724 27 TransformState::set_scale2d 0 1 64 417
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its scale component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< TransformState > TransformState::set_scale2d(LVecBase2f const &scale) const;

2240 11 set_shear2d 4 3724 27 TransformState::set_shear2d 0 1 65 417
////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its shear component
//               replaced with the indicated value, if possible.
////////////////////////////////////////////////////////////////////
80
ConstPointerTo< TransformState > TransformState::set_shear2d(float shear) const;

2241 7 compose 4 3724 23 TransformState::compose 0 1 66 723
////////////////////////////////////////////////////////////////////
//     Function: TransformState::compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this TransformState object and
//               the other TransformState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< TransformState > TransformState::compose(TransformState const *other) const;

2242 14 invert_compose 4 3724 30 TransformState::invert_compose 0 1 67 563
////////////////////////////////////////////////////////////////////
//     Function: TransformState::invert_compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
////////////////////////////////////////////////////////////////////
99
ConstPointerTo< TransformState > TransformState::invert_compose(TransformState const *other) const;

2243 11 get_inverse 4 3724 27 TransformState::get_inverse 0 1 68 460
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_inverse
//       Access: Published
//  Description: Returns the inverse of this transform.  If you are
//               going to immediately compose this result with another
//               TransformState, it is faster to do it in one
//               operation with invert_compose().
////////////////////////////////////////////////////////////////////
80
inline ConstPointerTo< TransformState > TransformState::get_inverse(void) const;

2244 10 get_unique 4 3724 26 TransformState::get_unique 0 1 69 619
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique TransformState in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
////////////////////////////////////////////////////////////////////
79
inline ConstPointerTo< TransformState > TransformState::get_unique(void) const;

2245 18 get_geom_rendering 4 3724 34 TransformState::get_geom_rendering 0 1 70 560
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TransformState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.  The RenderState's
//               get_geom_rendering() should already have been
//               applied.
////////////////////////////////////////////////////////////////////
72
inline int TransformState::get_geom_rendering(int geom_rendering) const;

2246 9 cache_ref 4 3724 25 TransformState::cache_ref 0 1 71 278
////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
50
inline void TransformState::cache_ref(void) const;

2247 11 cache_unref 4 3724 27 TransformState::cache_unref 0 1 72 280
////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
52
inline bool TransformState::cache_unref(void) const;

2248 8 node_ref 4 3724 24 TransformState::node_ref 0 1 73 277
////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
49
inline void TransformState::node_ref(void) const;

2249 10 node_unref 4 3724 26 TransformState::node_unref 0 1 74 279
////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
51
inline bool TransformState::node_unref(void) const;

2250 33 get_composition_cache_num_entries 4 3724 49 TransformState::get_composition_cache_num_entries 0 1 75 575
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the composition
//               cache for this TransformState.  This is the number of
//               other TransformStates whose composition with this one
//               has been cached.  This number is not useful for any
//               practical reason other than performance analysis.
////////////////////////////////////////////////////////////////////
73
inline int TransformState::get_composition_cache_num_entries(void) const;

2251 40 get_invert_composition_cache_num_entries 4 3724 56 TransformState::get_invert_composition_cache_num_entries 0 1 76 559
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the
//               invert_composition cache for this TransformState.
//               This is similar to the composition cache, but it
//               records cache entries for the invert_compose()
//               operation.  See get_composition_cache_num_entries().
////////////////////////////////////////////////////////////////////
80
inline int TransformState::get_invert_composition_cache_num_entries(void) const;

2252 26 get_composition_cache_size 4 3724 42 TransformState::get_composition_cache_size 0 1 77 655
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this TransformState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
66
inline int TransformState::get_composition_cache_size(void) const;

2253 28 get_composition_cache_source 4 3724 44 TransformState::get_composition_cache_source 0 1 78 608
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_source
//       Access: Published
//  Description: Returns the source TransformState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//               See get_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
87
inline TransformState const *TransformState::get_composition_cache_source(int n) const;

2254 28 get_composition_cache_result 4 3724 44 TransformState::get_composition_cache_result 0 1 79 707
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_result
//       Access: Published
//  Description: Returns the result TransformState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//
//               In general,
//               a->compose(a->get_composition_cache_source(n)) ==
//               a->get_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
87
inline TransformState const *TransformState::get_composition_cache_result(int n) const;

2255 33 get_invert_composition_cache_size 4 3724 49 TransformState::get_invert_composition_cache_size 0 1 80 669
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this TransformState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_invert_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
73
inline int TransformState::get_invert_composition_cache_size(void) const;

2256 35 get_invert_composition_cache_source 4 3724 51 TransformState::get_invert_composition_cache_source 0 1 81 630
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_source
//       Access: Published
//  Description: Returns the source TransformState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.  See get_invert_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
94
inline TransformState const *TransformState::get_invert_composition_cache_source(int n) const;

2257 35 get_invert_composition_cache_result 4 3724 51 TransformState::get_invert_composition_cache_result 0 1 82 759
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_result
//       Access: Published
//  Description: Returns the result TransformState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.
//
//               In general,
//               a->invert_compose(a->get_invert_composition_cache_source(n))
//               == a->get_invert_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
94
inline TransformState const *TransformState::get_invert_composition_cache_result(int n) const;

2258 21 get_composition_cache 4 3724 37 TransformState::get_composition_cache 0 1 83 734
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache
//       Access: Published
//  Description: Returns a list of 2-tuples that represents the
//               composition cache.  For each tuple in the list, the
//               first element is the source transform, and the second
//               is the result transform.  If both are None, there is
//               no entry in the cache at that slot.
//
//               In general, a->compose(source) == result.
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
60
PyObject *TransformState::get_composition_cache(void) const;

2259 28 get_invert_composition_cache 4 3724 44 TransformState::get_invert_composition_cache 0 1 84 755
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache
//       Access: Published
//  Description: Returns a list of 2-tuples that represents the
//               invert_composition cache.  For each tuple in the list, the
//               first element is the source transform, and the second
//               is the result transform.  If both are None, there is
//               no entry in the cache at that slot.
//
//               In general, a->invert_compose(source) == result.
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
67
PyObject *TransformState::get_invert_composition_cache(void) const;

2260 6 output 4 3724 22 TransformState::output 0 1 85 253
// HAVE_PYTHON

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TransformState::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void TransformState::output(ostream &out) const;

2261 5 write 4 3724 21 TransformState::write 0 1 86 221
////////////////////////////////////////////////////////////////////
//     Function: TransformState::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
void TransformState::write(ostream &out, int indent_level) const;

2262 23 write_composition_cache 4 3724 39 TransformState::write_composition_cache 0 1 87 481
////////////////////////////////////////////////////////////////////
//     Function: TransformState::write_composition_cache
//       Access: Published
//  Description: Writes a brief description of the composition cache
//               and invert composition cache to the indicated
//               ostream.  This is not useful except for performance
//               analysis, to examine the cache structure.
////////////////////////////////////////////////////////////////////
83
void TransformState::write_composition_cache(ostream &out, int indent_level) const;

2263 14 get_num_states 4 3724 30 TransformState::get_num_states 0 1 88 405
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique TransformState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
48
static int TransformState::get_num_states(void);

2264 21 get_num_unused_states 4 3724 37 TransformState::get_num_unused_states 0 1 89 1009
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               TransformState objects, both of which have references
//               held outside the cache, to have the result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base TransformStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" TransformState objects.
////////////////////////////////////////////////////////////////////
55
static int TransformState::get_num_unused_states(void);

2265 11 clear_cache 4 3724 27 TransformState::clear_cache 0 1 90 1021
////////////////////////////////////////////////////////////////////
//     Function: TransformState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed TransformStates.  This
//               makes every TransformState forget what results when
//               it is composed with other TransformStates.
//
//               This will eliminate any TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState map.  It will not
//               eliminate TransformState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of TransformStates
//               freed by this operation.
////////////////////////////////////////////////////////////////////
45
static int TransformState::clear_cache(void);

2266 11 list_cycles 4 3724 27 TransformState::list_cycles 0 1 91 951
////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
////////////////////////////////////////////////////////////////////
54
static void TransformState::list_cycles(ostream &out);

2267 11 list_states 4 3724 27 TransformState::list_states 0 1 92 424
////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_states
//       Access: Published, Static
//  Description: Lists all of the TransformStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
54
static void TransformState::list_states(ostream &out);

2268 15 validate_states 4 3724 31 TransformState::validate_states 0 1 93 586
////////////////////////////////////////////////////////////////////
//     Function: TransformState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const TransformState
//               objects).
////////////////////////////////////////////////////////////////////
50
static bool TransformState::validate_states(void);

2269 10 get_states 4 3724 26 TransformState::get_states 0 1 94 390
////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_states
//       Access: Published, Static
//  Description: Returns a list of all of the TransformState objects
//               in the state cache.  The order of elements in this
//               cache is arbitrary.
////////////////////////////////////////////////////////////////////
50
static PyObject *TransformState::get_states(void);

2270 14 get_class_type 4 3724 30 TransformState::get_class_type 0 1 95 0
55
static TypeHandle TransformState::get_class_type(void);

2271 8 get_slot 4 3726 30 RenderAttribRegistry::get_slot 0 1 96 846
// Filename: renderAttribRegistry.I
// Created by:  drose (13Nov08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot
//       Access: Published
//  Description: Returns the slot number assigned to the indicated
//               TypeHandle, or 0 if no slot number has been assigned.
////////////////////////////////////////////////////////////////////
72
inline int RenderAttribRegistry::get_slot(TypeHandle type_handle) const;

2272 13 get_max_slots 4 3726 35 RenderAttribRegistry::get_max_slots 0 1 97 709
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_max_slots
//       Access: Published
//  Description: Returns the maximum number that any slot number is
//               allowed to grow.  Actually, this number will be one
//               higher than the highest possible slot number.  This
//               puts an upper bound on the number of RenderAttrib
//               slots that may be allocated, and allows other code to
//               define an array of slots.
//
//               This number will not change during the lifetime of
//               the application.
////////////////////////////////////////////////////////////////////
59
inline int RenderAttribRegistry::get_max_slots(void) const;

2273 13 get_num_slots 4 3726 35 RenderAttribRegistry::get_num_slots 0 1 98 390
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_num_slots
//       Access: Published
//  Description: Returns the number of RenderAttrib slots that have
//               been allocated.  This is one more than the highest
//               slot number in use.
////////////////////////////////////////////////////////////////////
59
inline int RenderAttribRegistry::get_num_slots(void) const;

2274 13 get_slot_type 4 3726 35 RenderAttribRegistry::get_slot_type 0 1 99 281
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_type
//       Access: Published
//  Description: Returns the TypeHandle associated with slot n.
////////////////////////////////////////////////////////////////////
70
inline TypeHandle RenderAttribRegistry::get_slot_type(int slot) const;

2275 13 get_slot_sort 4 3726 35 RenderAttribRegistry::get_slot_sort 0 1 100 282
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_sort
//       Access: Published
//  Description: Returns the sort number associated with slot n.
////////////////////////////////////////////////////////////////////
63
inline int RenderAttribRegistry::get_slot_sort(int slot) const;

2276 13 set_slot_sort 4 3726 35 RenderAttribRegistry::set_slot_sort 0 1 101 282
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::set_slot_sort
//       Access: Published
//  Description: Changes the sort number associated with slot n.
////////////////////////////////////////////////////////////////////
61
void RenderAttribRegistry::set_slot_sort(int slot, int sort);

2277 16 get_slot_default 4 3726 38 RenderAttribRegistry::get_slot_default 0 1 102 444
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_default
//       Access: Published
//  Description: Returns the default RenderAttrib object associated
//               with slot n.  This is the attrib that should be
//               applied in the absence of any other attrib of this
//               type.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< RenderAttrib > RenderAttribRegistry::get_slot_default(int slot) const;

2278 20 get_num_sorted_slots 4 3726 42 RenderAttribRegistry::get_num_sorted_slots 0 1 103 314
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_num_sorted_slots
//       Access: Published
//  Description: Returns the number of entries in the sorted_slots
//               list.
////////////////////////////////////////////////////////////////////
66
inline int RenderAttribRegistry::get_num_sorted_slots(void) const;

2279 15 get_sorted_slot 4 3726 37 RenderAttribRegistry::get_sorted_slot 0 1 104 424
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_sorted_slot
//       Access: Published
//  Description: Returns the nth slot in sorted order.  By traversing
//               this list, you will retrieve all the slot numbers in
//               order according to their registered sort value.
////////////////////////////////////////////////////////////////////
62
inline int RenderAttribRegistry::get_sorted_slot(int n) const;

2280 15 get_array_chain 4 3726 37 RenderAttribRegistry::get_array_chain 0 1 105 400
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_array_chain
//       Access: Published
//  Description: Returns the DeletedBufferChain object that may be
//               used to allocated appropriately-sized arrays of
//               RenderState::Attribute objects.
////////////////////////////////////////////////////////////////////
77
inline DeletedBufferChain *RenderAttribRegistry::get_array_chain(void) const;

2281 14 get_global_ptr 4 3726 36 RenderAttribRegistry::get_global_ptr 0 1 106 243
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_global_ptr
//       Access: Published, Static
//  Description:
////////////////////////////////////////////////////////////////////
79
static inline RenderAttribRegistry *RenderAttribRegistry::get_global_ptr(void);

2282 7 compose 4 3727 21 RenderAttrib::compose 0 1 107 1093
// Filename: renderAttrib.I
// Created by:  drose (21Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::compose
//       Access: Published
//  Description: Returns a new RenderAttrib object that represents the
//               composition of this attrib with the other attrib.  In
//               most cases, this is the same as the other attrib; a
//               compose b produces b.  Some kinds of attributes, like
//               a TextureTransform, for instance, might produce a new
//               result: a compose b produces c.
////////////////////////////////////////////////////////////////////
93
inline ConstPointerTo< RenderAttrib > RenderAttrib::compose(RenderAttrib const *other) const;

2283 14 invert_compose 4 3727 28 RenderAttrib::invert_compose 0 1 108 946
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::invert_compose
//       Access: Published
//  Description: Returns a new RenderAttrib object that represents the
//               composition of the inverse of this attrib with the
//               other attrib.  In most cases, this is the same as the
//               other attrib; !a compose b produces b.  Some kinds of
//               attributes, like a TextureTransform, for instance,
//               might produce a new result: !a compose b produces c.
//
//               This is similar to compose() except that the source
//               attrib is inverted first.  This is used to compute
//               the relative attribute for one node as viewed from
//               some other node, which is especially useful for
//               transform-type attributes.
////////////////////////////////////////////////////////////////////
100
inline ConstPointerTo< RenderAttrib > RenderAttrib::invert_compose(RenderAttrib const *other) const;

2284 25 lower_attrib_can_override 4 3727 39 RenderAttrib::lower_attrib_can_override 0 1 109 1472
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::lower_attrib_can_override
//       Access: Public, Virtual
//  Description: Intended to be overridden by derived RenderAttrib
//               types to specify how two consecutive RenderAttrib
//               objects of the same type interact.
//
//               This should return false if a RenderAttrib on a
//               higher node will compose into a RenderAttrib on a
//               lower node that has a higher override value, or true
//               if the lower RenderAttrib will completely replace the
//               state.
//
//               The default behavior is false: normally, a
//               RenderAttrib in the graph cannot completely override
//               a RenderAttrib above it, regardless of its override
//               value--instead, the two attribs are composed.  But
//               for some kinds of RenderAttribs, it is useful to
//               allow this kind of override.
//
//               This method only handles the one special case of a
//               lower RenderAttrib with a higher override value.  If
//               the higher RenderAttrib has a higher override value,
//               it always completely overrides.  And if both
//               RenderAttribs have the same override value, they are
//               always composed.
////////////////////////////////////////////////////////////////////
65
virtual bool RenderAttrib::lower_attrib_can_override(void) const;

2285 10 compare_to 4 3727 24 RenderAttrib::compare_to 0 1 110 671
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderAttribs, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderAttrib
//               class because all equivalent RenderAttrib objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
69
inline int RenderAttrib::compare_to(RenderAttrib const &other) const;

2286 10 get_unique 4 3727 24 RenderAttrib::get_unique 0 1 111 615
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique RenderAttrib in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
////////////////////////////////////////////////////////////////////
75
inline ConstPointerTo< RenderAttrib > RenderAttrib::get_unique(void) const;

2287 6 output 4 3727 20 RenderAttrib::output 0 1 112 229
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void RenderAttrib::output(ostream &out) const;

2288 5 write 4 3727 19 RenderAttrib::write 0 1 113 228
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
71
virtual void RenderAttrib::write(ostream &out, int indent_level) const;

2289 15 get_num_attribs 4 3727 29 RenderAttrib::get_num_attribs 0 1 114 402
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_num_attribs
//       Access: Published, Static
//  Description: Returns the total number of unique RenderAttrib
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
47
static int RenderAttrib::get_num_attribs(void);

2290 12 list_attribs 4 3727 26 RenderAttrib::list_attribs 0 1 115 421
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::list_attribs
//       Access: Published, Static
//  Description: Lists all of the RenderAttribs in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
53
static void RenderAttrib::list_attribs(ostream &out);

2291 16 validate_attribs 4 3727 30 RenderAttrib::validate_attribs 0 1 116 480
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::validate_attribs
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderAttrib objects).
////////////////////////////////////////////////////////////////////
49
static bool RenderAttrib::validate_attribs(void);

2292 8 get_slot 4 3727 22 RenderAttrib::get_slot 0 1 117 0
51
virtual int RenderAttrib::get_slot(void) const = 0;

2293 14 get_class_type 4 3727 28 RenderAttrib::get_class_type 0 1 118 0
53
static TypeHandle RenderAttrib::get_class_type(void);

2294 4 make 4 3731 22 RenderModeAttrib::make 0 3 119 120 121 1219
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RenderModeAttrib object that specifies
//               whether to draw polygons in the normal, filled mode,
//               or wireframe mode, or in some other yet-to-be-defined
//               mode.
//
//               The thickness parameter specifies the thickness to be
//               used for wireframe lines, as well as for ordinary
//               linestrip lines; it also specifies the diameter of
//               points.  (Thick lines are presently only supported in
//               OpenGL; but thick points are supported on either
//               platform.)
//
//               If perspective is true, the point thickness
//               represented is actually a width in 3-d units, and the
//               points should scale according to perspective.  When
//               it is false, the point thickness is actually a width
//               in pixels, and points are a uniform screen size
//               regardless of distance from the camera.
////////////////////////////////////////////////////////////////////
137
static ConstPointerTo< RenderAttrib > RenderModeAttrib::make(RenderModeAttrib::Mode mode, float thickness = (1), bool perspective = (0));

2295 12 make_default 4 3731 30 RenderModeAttrib::make_default 0 1 122 403
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > RenderModeAttrib::make_default(void);

2296 8 get_mode 4 3731 26 RenderModeAttrib::get_mode 0 1 123 250
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
////////////////////////////////////////////////////////////////////
69
inline RenderModeAttrib::Mode RenderModeAttrib::get_mode(void) const;

2297 13 get_thickness 4 3731 31 RenderModeAttrib::get_thickness 0 1 124 517
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_thickness
//       Access: Published
//  Description: Returns the line width or point thickness.  This is
//               only relevant when rendering points or lines, such as
//               when the mode is M_wireframe or M_point (or when
//               rendering actual points or lines primitives in
//               M_polygon mode).
////////////////////////////////////////////////////////////////////
57
inline float RenderModeAttrib::get_thickness(void) const;

2298 15 get_perspective 4 3731 33 RenderModeAttrib::get_perspective 0 1 125 676
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_perspective
//       Access: Published
//  Description: Returns the perspective flag.  When this is true, the
//               point thickness represented by get_thickness() is
//               actually a width in 3-d units, and the points should
//               scale according to perspective.  When it is false,
//               the default, the point thickness is actually a width
//               in pixels, and points are a uniform size regardless
//               of distance from the camera.
////////////////////////////////////////////////////////////////////
58
inline bool RenderModeAttrib::get_perspective(void) const;

2299 18 get_geom_rendering 4 3731 36 RenderModeAttrib::get_geom_rendering 0 1 126 456
////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderModeAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
74
inline int RenderModeAttrib::get_geom_rendering(int geom_rendering) const;

2300 14 get_class_slot 4 3731 32 RenderModeAttrib::get_class_slot 0 1 127 0
50
static int RenderModeAttrib::get_class_slot(void);

2301 14 get_class_type 4 3731 32 RenderModeAttrib::get_class_type 0 1 128 0
57
static TypeHandle RenderModeAttrib::get_class_type(void);

2302 17 ~RenderModeAttrib 4 3731 35 RenderModeAttrib::~RenderModeAttrib 0 0 0
42
RenderModeAttrib::~RenderModeAttrib(void);

2303 4 make 4 3733 21 TexMatrixAttrib::make 0 3 129 130 131 1034
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies
//               no stages at all.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated matrix to the default texture stage.  This
//               interface is deprecated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated transform to the named texture stage.
////////////////////////////////////////////////////////////////////
264
static ConstPointerTo< RenderAttrib > TexMatrixAttrib::make(void);
static ConstPointerTo< RenderAttrib > TexMatrixAttrib::make(LMatrix4f const &mat);
static ConstPointerTo< RenderAttrib > TexMatrixAttrib::make(TextureStage *stage, TransformState const *transform);

2304 12 make_default 4 3733 29 TexMatrixAttrib::make_default 0 1 132 402
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > TexMatrixAttrib::make_default(void);

2305 9 add_stage 4 3733 26 TexMatrixAttrib::add_stage 0 2 133 134 425
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated transform for the given stage.  If
//               this stage already exists, its transform is replaced.
////////////////////////////////////////////////////////////////////
138
ConstPointerTo< RenderAttrib > TexMatrixAttrib::add_stage(TextureStage *stage, TransformState const *transform, int override = (0)) const;

2306 12 remove_stage 4 3733 29 TexMatrixAttrib::remove_stage 0 1 135 337
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated stage removed.
////////////////////////////////////////////////////////////////////
88
ConstPointerTo< RenderAttrib > TexMatrixAttrib::remove_stage(TextureStage *stage) const;

2307 8 is_empty 4 3733 25 TexMatrixAttrib::is_empty 0 1 136 329
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexMatrixAttrib, false if at least one is.
////////////////////////////////////////////////////////////////////
43
bool TexMatrixAttrib::is_empty(void) const;

2308 9 has_stage 4 3733 26 TexMatrixAttrib::has_stage 0 1 137 442
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
////////////////////////////////////////////////////////////////////
59
bool TexMatrixAttrib::has_stage(TextureStage *stage) const;

2309 14 get_num_stages 4 3733 31 TexMatrixAttrib::get_num_stages 0 1 138 313
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_num_stages
//       Access: Published
//  Description: Returns the number of stages that are represented by
//               this attrib.
////////////////////////////////////////////////////////////////////
48
int TexMatrixAttrib::get_num_stages(void) const;

2310 9 get_stage 4 3733 26 TexMatrixAttrib::get_stage 0 1 139 364
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_stage
//       Access: Published
//  Description: Returns the nth stage that is represented by this
//               attrib.  The TextureStages are in no particular
//               order.
////////////////////////////////////////////////////////////////////
54
TextureStage *TexMatrixAttrib::get_stage(int n) const;

2311 7 get_mat 4 3733 24 TexMatrixAttrib::get_mat 0 2 140 141 725
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the default texture stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the indicated texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
////////////////////////////////////////////////////////////////////
124
LMatrix4f const &TexMatrixAttrib::get_mat(void) const;
LMatrix4f const &TexMatrixAttrib::get_mat(TextureStage *stage) const;

2312 13 get_transform 4 3733 30 TexMatrixAttrib::get_transform 0 1 142 405
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_transform
//       Access: Published
//  Description: Returns the transformation associated with
//               the indicated texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< TransformState > TexMatrixAttrib::get_transform(TextureStage *stage) const;

2313 12 get_override 4 3733 29 TexMatrixAttrib::get_override 0 1 143 309
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_override
//       Access: Published
//  Description: Returns the override value associated with the
//               indicated stage.
////////////////////////////////////////////////////////////////////
68
inline int TexMatrixAttrib::get_override(TextureStage *stage) const;

2314 18 get_geom_rendering 4 3733 35 TexMatrixAttrib::get_geom_rendering 0 1 144 454
////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexMatrixAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
73
inline int TexMatrixAttrib::get_geom_rendering(int geom_rendering) const;

2315 14 get_class_slot 4 3733 31 TexMatrixAttrib::get_class_slot 0 1 145 0
49
static int TexMatrixAttrib::get_class_slot(void);

2316 14 get_class_type 4 3733 31 TexMatrixAttrib::get_class_type 0 1 146 0
56
static TypeHandle TexMatrixAttrib::get_class_type(void);

2317 10 operator < 4 3734 23 RenderState::operator < 0 1 147 667
////////////////////////////////////////////////////////////////////
//     Function: RenderState::operator <
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderState
//               class because all equivalent RenderState objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
61
bool RenderState::operator <(RenderState const &other) const;

2318 12 compare_sort 4 3734 25 RenderState::compare_sort 0 1 148 620
////////////////////////////////////////////////////////////////////
//     Function: RenderState::compare_sort
//       Access: Published
//  Description: Returns -1, 0, or 1 according to the relative sorting
//               of these two RenderStates, with regards to rendering
//               performance, so that "heavier" RenderAttribs (as
//               defined by RenderAttribRegistry::get_slot_sort()) are
//               more likely to be grouped together.  This is not
//               related to the sorting order defined by operator <.
////////////////////////////////////////////////////////////////////
62
int RenderState::compare_sort(RenderState const &other) const;

2319 8 get_hash 4 3734 21 RenderState::get_hash 0 1 149 265
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
////////////////////////////////////////////////////////////////////
47
unsigned int RenderState::get_hash(void) const;

2320 8 is_empty 4 3734 21 RenderState::is_empty 0 1 150 760
// Filename: renderState.I
// Created by:  drose (21Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderState::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
////////////////////////////////////////////////////////////////////
46
inline bool RenderState::is_empty(void) const;

2321 17 has_cull_callback 4 3734 30 RenderState::has_cull_callback 0 1 151 371
////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_cull_callback
//       Access: Published
//  Description: Returns true if any of the RenderAttribs in this
//               state request a cull_callback(), false if none of
//               them do.
////////////////////////////////////////////////////////////////////
55
inline bool RenderState::has_cull_callback(void) const;

2322 13 cull_callback 4 3734 26 RenderState::cull_callback 0 1 152 443
////////////////////////////////////////////////////////////////////
//     Function: RenderState::cull_callback
//       Access: Published
//  Description: Calls cull_callback() on each attrib.  If any attrib
//               returns false, interrupts the list and returns false
//               immediately; otherwise, completes the list and
//               returns true.
////////////////////////////////////////////////////////////////////
90
bool RenderState::cull_callback(CullTraverser *trav, CullTraverserData const &data) const;

2323 10 make_empty 4 3734 23 RenderState::make_empty 0 1 153 276
////////////////////////////////////////////////////////////////////
//     Function: RenderState::make_empty
//       Access: Published, Static
//  Description: Returns a RenderState with no attributes set.
////////////////////////////////////////////////////////////////////
67
static ConstPointerTo< RenderState > RenderState::make_empty(void);

2324 17 make_full_default 4 3734 30 RenderState::make_full_default 0 1 154 333
////////////////////////////////////////////////////////////////////
//     Function: RenderState::make_full_default
//       Access: Published, Static
//  Description: Returns a RenderState with all possible attributes
//               set to their default value.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderState > RenderState::make_full_default(void);

2325 4 make 4 3734 17 RenderState::make 0 8 155 156 157 158 159 160 161 162 1363
////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with one attribute set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with two attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with three attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with four attributes set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with n attributes set.
////////////////////////////////////////////////////////////////////
720
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *attrib, int override = (0));
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, int override = (0));
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, int override = (0));
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *attrib1, RenderAttrib const *attrib2, RenderAttrib const *attrib3, RenderAttrib const *attrib4, int override = (0));
static ConstPointerTo< RenderState > RenderState::make(RenderAttrib const *const *attrib, int num_attribs, int override = (0));

2326 7 compose 4 3734 20 RenderState::compose 0 1 163 711
////////////////////////////////////////////////////////////////////
//     Function: RenderState::compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this RenderState object and
//               the other RenderState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
////////////////////////////////////////////////////////////////////
83
ConstPointerTo< RenderState > RenderState::compose(RenderState const *other) const;

2327 14 invert_compose 4 3734 27 RenderState::invert_compose 0 1 164 557
////////////////////////////////////////////////////////////////////
//     Function: RenderState::invert_compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderState > RenderState::invert_compose(RenderState const *other) const;

2328 10 add_attrib 4 3734 23 RenderState::add_attrib 0 2 165 166 505
////////////////////////////////////////////////////////////////////
//     Function: RenderState::add_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced (unless the override is
//               lower).
////////////////////////////////////////////////////////////////////
108
ConstPointerTo< RenderState > RenderState::add_attrib(RenderAttrib const *attrib, int override = (0)) const;

2329 10 set_attrib 4 3734 23 RenderState::set_attrib 0 2 167 168 1060
////////////////////////////////////////////////////////////////////
//     Function: RenderState::set_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced unconditionally.  The
//               override is not changed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::set_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced unconditionally.  The
//               override is also replaced unconditionally.
////////////////////////////////////////////////////////////////////
191
ConstPointerTo< RenderState > RenderState::set_attrib(RenderAttrib const *attrib) const;
ConstPointerTo< RenderState > RenderState::set_attrib(RenderAttrib const *attrib, int override) const;

2330 13 remove_attrib 4 3734 26 RenderState::remove_attrib 0 2 169 170 760
////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the indicated
//               RenderAttrib removed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the indicated
//               RenderAttrib removed.
////////////////////////////////////////////////////////////////////
161
inline ConstPointerTo< RenderState > RenderState::remove_attrib(TypeHandle type) const;
ConstPointerTo< RenderState > RenderState::remove_attrib(int slot) const;

2331 21 adjust_all_priorities 4 3734 34 RenderState::adjust_all_priorities 0 1 171 543
////////////////////////////////////////////////////////////////////
//     Function: RenderState::adjust_all_priorities
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with all attributes'
//               override values incremented (or decremented, if
//               negative) by the indicated amount.  If the override
//               would drop below zero, it is set to zero.
////////////////////////////////////////////////////////////////////
87
ConstPointerTo< RenderState > RenderState::adjust_all_priorities(int adjustment) const;

2332 10 has_attrib 4 3734 23 RenderState::has_attrib 0 2 172 173 634
////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_attrib
//       Access: Published
//  Description: Returns true if an attrib of the indicated type is
//               present, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_attrib
//       Access: Published
//  Description: Returns true if an attrib of the indicated type is
//               present, false otherwise.
////////////////////////////////////////////////////////////////////
112
inline bool RenderState::has_attrib(TypeHandle type) const;
inline bool RenderState::has_attrib(int slot) const;

2333 10 get_attrib 4 3734 23 RenderState::get_attrib 0 2 174 175 739
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published
//  Description: Returns the RenderAttrib with the indicated slot
//               index, or NULL if there is no such RenderAttrib in
//               the state.
////////////////////////////////////////////////////////////////////
142
inline RenderAttrib const *RenderState::get_attrib(TypeHandle type) const;
inline RenderAttrib const *RenderState::get_attrib(int slot) const;

2334 14 get_attrib_def 4 3734 27 RenderState::get_attrib_def 0 1 176 399
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib_def
//       Access: Published
//  Description: Returns the RenderAttrib with the indicated slot
//               index, or the default attrib for that slot if there
//               is no such RenderAttrib in the state.
////////////////////////////////////////////////////////////////////
71
inline RenderAttrib const *RenderState::get_attrib_def(int slot) const;

2335 12 get_override 4 3734 25 RenderState::get_override 0 2 177 178 772
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns its override value if it is found,
//               or 0 if it is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns its override value if it is found,
//               or 0 if it is not.
////////////////////////////////////////////////////////////////////
114
inline int RenderState::get_override(TypeHandle type) const;
inline int RenderState::get_override(int slot) const;

2336 10 get_unique 4 3734 23 RenderState::get_unique 0 1 179 613
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique RenderState in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
////////////////////////////////////////////////////////////////////
73
inline ConstPointerTo< RenderState > RenderState::get_unique(void) const;

2337 9 cache_ref 4 3734 22 RenderState::cache_ref 0 1 180 275
////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
47
inline void RenderState::cache_ref(void) const;

2338 11 cache_unref 4 3734 24 RenderState::cache_unref 0 1 181 277
////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
49
inline bool RenderState::cache_unref(void) const;

2339 8 node_ref 4 3734 21 RenderState::node_ref 0 1 182 274
////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
46
inline void RenderState::node_ref(void) const;

2340 10 node_unref 4 3734 23 RenderState::node_unref 0 1 183 276
////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
////////////////////////////////////////////////////////////////////
48
inline bool RenderState::node_unref(void) const;

2341 33 get_composition_cache_num_entries 4 3734 46 RenderState::get_composition_cache_num_entries 0 1 184 566
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the composition
//               cache for this RenderState.  This is the number of
//               other RenderStates whose composition with this one
//               has been cached.  This number is not useful for any
//               practical reason other than performance analysis.
////////////////////////////////////////////////////////////////////
70
inline int RenderState::get_composition_cache_num_entries(void) const;

2342 40 get_invert_composition_cache_num_entries 4 3734 53 RenderState::get_invert_composition_cache_num_entries 0 1 185 553
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the
//               invert_composition cache for this RenderState.
//               This is similar to the composition cache, but it
//               records cache entries for the invert_compose()
//               operation.  See get_composition_cache_num_entries().
////////////////////////////////////////////////////////////////////
77
inline int RenderState::get_invert_composition_cache_num_entries(void) const;

2343 26 get_composition_cache_size 4 3734 39 RenderState::get_composition_cache_size 0 1 186 649
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this RenderState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
63
inline int RenderState::get_composition_cache_size(void) const;

2344 28 get_composition_cache_source 4 3734 41 RenderState::get_composition_cache_source 0 1 187 602
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_source
//       Access: Published
//  Description: Returns the source RenderState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//               See get_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
81
inline RenderState const *RenderState::get_composition_cache_source(int n) const;

2345 28 get_composition_cache_result 4 3734 41 RenderState::get_composition_cache_result 0 1 188 701
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_result
//       Access: Published
//  Description: Returns the result RenderState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//
//               In general,
//               a->compose(a->get_composition_cache_source(n)) ==
//               a->get_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
81
inline RenderState const *RenderState::get_composition_cache_result(int n) const;

2346 33 get_invert_composition_cache_size 4 3734 46 RenderState::get_invert_composition_cache_size 0 1 189 663
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this RenderState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_invert_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
70
inline int RenderState::get_invert_composition_cache_size(void) const;

2347 35 get_invert_composition_cache_source 4 3734 48 RenderState::get_invert_composition_cache_source 0 1 190 624
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_source
//       Access: Published
//  Description: Returns the source RenderState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.  See get_invert_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
88
inline RenderState const *RenderState::get_invert_composition_cache_source(int n) const;

2348 35 get_invert_composition_cache_result 4 3734 48 RenderState::get_invert_composition_cache_result 0 1 191 753
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_result
//       Access: Published
//  Description: Returns the result RenderState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.
//
//               In general,
//               a->invert_compose(a->get_invert_composition_cache_source(n))
//               == a->get_invert_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
88
inline RenderState const *RenderState::get_invert_composition_cache_result(int n) const;

2349 21 get_composition_cache 4 3734 34 RenderState::get_composition_cache 0 1 192 725
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache
//       Access: Published
//  Description: Returns a list of 2-tuples that represents the
//               composition cache.  For each tuple in the list, the
//               first element is the source render, and the second
//               is the result render.  If both are None, there is
//               no entry in the cache at that slot.
//
//               In general, a->compose(source) == result.
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
57
PyObject *RenderState::get_composition_cache(void) const;

2350 28 get_invert_composition_cache 4 3734 41 RenderState::get_invert_composition_cache 0 1 193 746
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache
//       Access: Published
//  Description: Returns a list of 2-tuples that represents the
//               invert_composition cache.  For each tuple in the list, the
//               first element is the source render, and the second
//               is the result render.  If both are None, there is
//               no entry in the cache at that slot.
//
//               In general, a->invert_compose(source) == result.
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
////////////////////////////////////////////////////////////////////
64
PyObject *RenderState::get_invert_composition_cache(void) const;

2351 6 output 4 3734 19 RenderState::output 0 1 194 259
// HAVE_PYTHON

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: RenderState::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
45
void RenderState::output(ostream &out) const;

2352 5 write 4 3734 18 RenderState::write 0 1 195 227
////////////////////////////////////////////////////////////////////
//     Function: RenderState::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
62
void RenderState::write(ostream &out, int indent_level) const;

2353 16 get_max_priority 4 3734 29 RenderState::get_max_priority 0 1 196 599
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_max_priority
//       Access: Published, Static
//  Description: Returns the maximum priority number (sometimes called
//               override) that may be set on any node.  This may or
//               may not be enforced, but the scene graph code assumes
//               that no priority numbers will be larger than this,
//               and some effects may not work properly if you use a
//               larger number.
////////////////////////////////////////////////////////////////////
47
static int RenderState::get_max_priority(void);

2354 14 get_num_states 4 3734 27 RenderState::get_num_states 0 1 197 399
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
45
static int RenderState::get_num_states(void);

2355 21 get_num_unused_states 4 3734 34 RenderState::get_num_unused_states 0 1 198 990
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               RenderState objects, both of which have references
//               held outside the cache, to have to result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base RenderStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" RenderState objects.
////////////////////////////////////////////////////////////////////
52
static int RenderState::get_num_unused_states(void);

2356 11 clear_cache 4 3734 24 RenderState::clear_cache 0 1 199 997
////////////////////////////////////////////////////////////////////
//     Function: RenderState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed RenderStates.  This
//               makes every RenderState forget what results when
//               it is composed with other RenderStates.
//
//               This will eliminate any RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState map.  It will not
//               eliminate RenderState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of RenderStates
//               freed by this operation.
////////////////////////////////////////////////////////////////////
42
static int RenderState::clear_cache(void);

2357 18 clear_munger_cache 4 3734 31 RenderState::clear_munger_cache 0 1 200 405
////////////////////////////////////////////////////////////////////
//     Function: RenderState::clear_munger_cache
//       Access: Published, Static
//  Description: Completely empties the cache of state + gsg ->
//               munger, for all states and all gsg's.  Normally there
//               is no need to empty this cache.
////////////////////////////////////////////////////////////////////
50
static void RenderState::clear_munger_cache(void);

2358 11 list_cycles 4 3734 24 RenderState::list_cycles 0 1 201 948
////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
////////////////////////////////////////////////////////////////////
51
static void RenderState::list_cycles(ostream &out);

2359 11 list_states 4 3734 24 RenderState::list_states 0 1 202 418
////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
51
static void RenderState::list_states(ostream &out);

2360 15 validate_states 4 3734 28 RenderState::validate_states 0 1 203 580
////////////////////////////////////////////////////////////////////
//     Function: RenderState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const RenderState
//               objects).
////////////////////////////////////////////////////////////////////
47
static bool RenderState::validate_states(void);

2361 10 get_states 4 3734 23 RenderState::get_states 0 1 204 384
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_states
//       Access: Published, Static
//  Description: Returns a list of all of the RenderState objects
//               in the state cache.  The order of elements in this
//               cache is arbitrary.
////////////////////////////////////////////////////////////////////
47
static PyObject *RenderState::get_states(void);

2362 14 get_draw_order 4 3734 27 RenderState::get_draw_order 0 1 205 529
// These methods are intended for use by low-level code, but they're
// also handy enough to expose to high-level users.

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_draw_order
//       Access: Published
//  Description: Returns the draw order indicated by the
//               CullBinAttrib, if any, associated by this state (or 0
//               if there is no CullBinAttrib).  See get_bin_index().
////////////////////////////////////////////////////////////////////
51
inline int RenderState::get_draw_order(void) const;

2363 13 get_bin_index 4 3734 26 RenderState::get_bin_index 0 1 206 642
// These methods are intended for use by low-level code, but they're
// also handy enough to expose to high-level users.

////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_bin_index
//       Access: Published
//  Description: Returns the bin index indicated by the CullBinAttrib,
//               if any, associated by this state (or the default bin
//               index if there is no CullBinAttrib).  This function
//               is provided as an optimization for determining this
//               at render time.
////////////////////////////////////////////////////////////////////
50
inline int RenderState::get_bin_index(void) const;

2364 18 get_geom_rendering 4 3734 31 RenderState::get_geom_rendering 0 1 207 446
////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
62
int RenderState::get_geom_rendering(int geom_rendering) const;

2365 14 get_class_type 4 3734 27 RenderState::get_class_type 0 1 208 0
52
static TypeHandle RenderState::get_class_type(void);

2366 4 make 4 3735 21 AlphaTestAttrib::make 0 1 209 269
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AlphaTestAttrib object.
////////////////////////////////////////////////////////////////////
120
static ConstPointerTo< RenderAttrib > AlphaTestAttrib::make(RenderAttrib::PandaCompareFunc mode, float reference_alpha);

2367 12 make_default 4 3735 29 AlphaTestAttrib::make_default 0 1 210 402
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > AlphaTestAttrib::make_default(void);

2368 19 get_reference_alpha 4 3735 36 AlphaTestAttrib::get_reference_alpha 0 1 211 270
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_reference_alpha
//       Access: Published
//  Description: Returns the alpha reference value.
////////////////////////////////////////////////////////////////////
62
inline float AlphaTestAttrib::get_reference_alpha(void) const;

2369 8 get_mode 4 3735 25 AlphaTestAttrib::get_mode 0 1 212 254
////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_mode
//       Access: Published
//  Description: Returns the alpha write mode.
////////////////////////////////////////////////////////////////////
76
inline RenderAttrib::PandaCompareFunc AlphaTestAttrib::get_mode(void) const;

2370 14 get_class_slot 4 3735 31 AlphaTestAttrib::get_class_slot 0 1 213 0
49
static int AlphaTestAttrib::get_class_slot(void);

2371 14 get_class_type 4 3735 31 AlphaTestAttrib::get_class_type 0 1 214 0
56
static TypeHandle AlphaTestAttrib::get_class_type(void);

2372 16 ~AlphaTestAttrib 4 3735 33 AlphaTestAttrib::~AlphaTestAttrib 0 0 0
40
AlphaTestAttrib::~AlphaTestAttrib(void);

2373 4 make 4 3736 21 AntialiasAttrib::make 0 1 215 1917
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AntialiasAttrib object.
//
//               The mode should be either M_none, M_auto, or a union
//               of any or all of M_point, M_line, M_polygon, and
//               M_multisample.  Also, in addition to the above
//               choices, it may include either of M_better of
//               M_faster to specify a performance/quality tradeoff
//               hint.
//
//               If M_none is specified, no antialiasing is performed.  
//
//               If M_multisample is specified, it means to use the
//               special framebuffer multisample bits for
//               antialiasing, if it is available.  If so, the
//               M_point, M_line, and M_polygon modes are ignored.
//               This advanced antialiasing mode is only available on
//               certain graphics hardware.  If it is not available,
//               the M_multisample bit is ignored (and the other modes
//               may be used instead, if specified).
//
//               M_point, M_line, and/or M_polygon specify
//               per-primitive smoothing.  When enabled, M_point and
//               M_line may force transparency on.  M_polygon requires
//               a frame buffer that includes an alpha channel, and it
//               works best if the primitives are sorted
//               front-to-back.
//
//               If M_auto is specified, M_multisample is selected if
//               it is available, otherwise M_polygon is selected,
//               unless drawing lines or points, in which case M_line
//               or M_point is selected (these two generally produce
//               better results than M_multisample)
////////////////////////////////////////////////////////////////////
85
static ConstPointerTo< RenderAttrib > AntialiasAttrib::make(unsigned short int mode);

2374 12 make_default 4 3736 29 AntialiasAttrib::make_default 0 1 216 402
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > AntialiasAttrib::make_default(void);

2375 8 get_mode 4 3736 25 AntialiasAttrib::get_mode 0 1 217 262
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode
//       Access: Published
//  Description: Returns the specified antialias mode.
////////////////////////////////////////////////////////////////////
64
inline unsigned short int AntialiasAttrib::get_mode(void) const;

2376 13 get_mode_type 4 3736 30 AntialiasAttrib::get_mode_type 0 1 218 465
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_type
//       Access: Published
//  Description: Returns the specified antialias mode, with the
//               quality bits masked out.  This therefore indicates
//               only the requested type of antialiasing: M_none,
//               M_auto, or some specific combination.
////////////////////////////////////////////////////////////////////
69
inline unsigned short int AntialiasAttrib::get_mode_type(void) const;

2377 16 get_mode_quality 4 3736 33 AntialiasAttrib::get_mode_quality 0 1 219 478
////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_quality
//       Access: Published
//  Description: Returns the specified antialias mode, with the type
//               bits masked out.  This therefore indicates only the
//               requested quality settings: one of M_faster,
//               M_better, M_dont_care, or zero (unspecified).
////////////////////////////////////////////////////////////////////
72
inline unsigned short int AntialiasAttrib::get_mode_quality(void) const;

2378 14 get_class_slot 4 3736 31 AntialiasAttrib::get_class_slot 0 1 220 0
49
static int AntialiasAttrib::get_class_slot(void);

2379 14 get_class_type 4 3736 31 AntialiasAttrib::get_class_type 0 1 221 0
56
static TypeHandle AntialiasAttrib::get_class_type(void);

2380 16 ~AntialiasAttrib 4 3736 33 AntialiasAttrib::~AntialiasAttrib 0 0 0
40
AntialiasAttrib::~AntialiasAttrib(void);

2381 10 compare_to 4 3738 24 RenderEffect::compare_to 0 1 222 1159
// Filename: renderEffect.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderEffects, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderEffect
//               class because all equivalent RenderEffect objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
69
inline int RenderEffect::compare_to(RenderEffect const &other) const;

2382 6 output 4 3738 20 RenderEffect::output 0 1 223 229
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void RenderEffect::output(ostream &out) const;

2383 5 write 4 3738 19 RenderEffect::write 0 1 224 228
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
71
virtual void RenderEffect::write(ostream &out, int indent_level) const;

2384 15 get_num_effects 4 3738 29 RenderEffect::get_num_effects 0 1 225 402
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::get_num_effects
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffect
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
47
static int RenderEffect::get_num_effects(void);

2385 12 list_effects 4 3738 26 RenderEffect::list_effects 0 1 226 421
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::list_effects
//       Access: Published, Static
//  Description: Lists all of the RenderEffects in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
53
static void RenderEffect::list_effects(ostream &out);

2386 16 validate_effects 4 3738 30 RenderEffect::validate_effects 0 1 227 480
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::validate_effects
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffect objects).
////////////////////////////////////////////////////////////////////
49
static bool RenderEffect::validate_effects(void);

2387 14 get_class_type 4 3738 28 RenderEffect::get_class_type 0 1 228 0
53
static TypeHandle RenderEffect::get_class_type(void);

2388 10 operator < 4 3739 25 RenderEffects::operator < 0 1 229 674
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::operator <
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderEffects, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderEffects
//               class because all equivalent RenderEffects objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
////////////////////////////////////////////////////////////////////
65
bool RenderEffects::operator <(RenderEffects const &other) const;

2389 8 is_empty 4 3739 23 RenderEffects::is_empty 0 1 230 275
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool RenderEffects::is_empty(void) const;

2390 15 get_num_effects 4 3739 30 RenderEffects::get_num_effects 0 1 231 309
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_effects
//       Access: Published
//  Description: Returns the number of separate effects indicated
//               in the state.
////////////////////////////////////////////////////////////////////
54
inline int RenderEffects::get_num_effects(void) const;

2391 10 get_effect 4 3739 25 RenderEffects::get_effect 0 2 232 233 644
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published
//  Description: Returns the nth effect in the state.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published, Virtual
//  Description: Looks for a RenderEffect of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
////////////////////////////////////////////////////////////////////
136
inline RenderEffect const *RenderEffects::get_effect(int n) const;
RenderEffect const *RenderEffects::get_effect(TypeHandle type) const;

2392 11 find_effect 4 3739 26 RenderEffects::find_effect 0 1 234 378
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::find_effect
//       Access: Published
//  Description: Searches for an effect with the indicated type in
//               the state, and returns its index if it is found, or
//               -1 if it is not.
////////////////////////////////////////////////////////////////////
54
int RenderEffects::find_effect(TypeHandle type) const;

2393 10 make_empty 4 3739 25 RenderEffects::make_empty 0 1 235 277
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make_empty
//       Access: Published, Static
//  Description: Returns a RenderEffects with no effects set.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderEffects > RenderEffects::make_empty(void);

2394 4 make 4 3739 19 RenderEffects::make 0 4 236 237 238 239 1096
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with one effect set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with two effects set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with three effects set.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with four effects set.
////////////////////////////////////////////////////////////////////
528
static ConstPointerTo< RenderEffects > RenderEffects::make(RenderEffect const *effect);
static ConstPointerTo< RenderEffects > RenderEffects::make(RenderEffect const *effect1, RenderEffect const *effect2);
static ConstPointerTo< RenderEffects > RenderEffects::make(RenderEffect const *effect1, RenderEffect const *effect2, RenderEffect const *effect3);
static ConstPointerTo< RenderEffects > RenderEffects::make(RenderEffect const *effect1, RenderEffect const *effect2, RenderEffect const *effect3, RenderEffect const *effect4);

2395 10 add_effect 4 3739 25 RenderEffects::add_effect 0 1 240 461
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::add_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the new RenderEffect
//               added.  If there is already a RenderEffect with the
//               same type, it is replaced.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< RenderEffects > RenderEffects::add_effect(RenderEffect const *effect) const;

2396 13 remove_effect 4 3739 28 RenderEffects::remove_effect 0 1 241 383
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::remove_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the indicated
//               RenderEffect removed.
////////////////////////////////////////////////////////////////////
84
ConstPointerTo< RenderEffects > RenderEffects::remove_effect(TypeHandle type) const;

2397 6 output 4 3739 21 RenderEffects::output 0 1 242 230
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
47
void RenderEffects::output(ostream &out) const;

2398 5 write 4 3739 20 RenderEffects::write 0 1 243 229
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
void RenderEffects::write(ostream &out, int indent_level) const;

2399 14 get_num_states 4 3739 29 RenderEffects::get_num_states 0 1 244 403
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffects
//               objects allocated in the world.  This will go up and
//               down during normal operations.
////////////////////////////////////////////////////////////////////
47
static int RenderEffects::get_num_states(void);

2400 11 list_states 4 3739 26 RenderEffects::list_states 0 1 245 421
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderEffects in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
////////////////////////////////////////////////////////////////////
53
static void RenderEffects::list_states(ostream &out);

2401 15 validate_states 4 3739 30 RenderEffects::validate_states 0 1 246 481
////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffects objects).
////////////////////////////////////////////////////////////////////
49
static bool RenderEffects::validate_states(void);

2402 14 get_class_type 4 3739 29 RenderEffects::get_class_type 0 1 247 0
54
static TypeHandle RenderEffects::get_class_type(void);

2403 23 upcast_to_TypedWritable 12 3740 34 PandaNode::upcast_to_TypedWritable 0 1 421 38
upcast from PandaNode to TypedWritable
56
TypedWritable *PandaNode::upcast_to_TypedWritable(void);

2404 21 downcast_to_PandaNode 12 3741 36 TypedWritable::downcast_to_PandaNode 0 1 422 40
downcast from TypedWritable to PandaNode
54
PandaNode *TypedWritable::downcast_to_PandaNode(void);

2405 17 upcast_to_Namable 12 3740 28 PandaNode::upcast_to_Namable 0 1 423 32
upcast from PandaNode to Namable
44
Namable *PandaNode::upcast_to_Namable(void);

2406 21 downcast_to_PandaNode 12 3742 30 Namable::downcast_to_PandaNode 0 1 424 34
downcast from Namable to PandaNode
48
PandaNode *Namable::downcast_to_PandaNode(void);

2407 24 upcast_to_LinkedListNode 12 3740 35 PandaNode::upcast_to_LinkedListNode 0 1 425 39
upcast from PandaNode to LinkedListNode
58
LinkedListNode *PandaNode::upcast_to_LinkedListNode(void);

2408 21 downcast_to_PandaNode 12 3743 37 LinkedListNode::downcast_to_PandaNode 0 1 426 41
downcast from LinkedListNode to PandaNode
55
PandaNode *LinkedListNode::downcast_to_PandaNode(void);

2409 24 upcast_to_ReferenceCount 12 3740 35 PandaNode::upcast_to_ReferenceCount 0 1 427 39
upcast from PandaNode to ReferenceCount
58
ReferenceCount *PandaNode::upcast_to_ReferenceCount(void);

2410 9 PandaNode 4 3740 20 PandaNode::PandaNode 0 1 248 1769
//
// There are two different interfaces here for making and breaking
// parent-child connections: the fundamental PandaNode interface, via
// add_child() and remove_child() (and related functions), and the
// NodePath support interface, via attach(), detach(), and reparent().
// They both do essentially the same thing, but with slightly
// different inputs.  The PandaNode interfaces try to guess which
// NodePaths should be updated as a result of the scene graph change,
// while the NodePath interfaces already know.
//
// The NodePath support interface functions are strictly called from
// within the NodePath class, and are used to implement
// NodePath::reparent_to() and NodePath::remove_node(), etc.  The
// fundamental interface, on the other hand, is intended to be called
// directly by the user.
//
// The fundamental interface has a slightly lower overhead because it
// does not need to create a NodePathComponent chain where one does
// not already exist; however, the NodePath support interface is more
// useful when the NodePath already does exist, because it ensures
// that the particular NodePath calling it is kept appropriately
// up-to-date.
//
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
55
PandaNode::PandaNode(basic_string< char > const &name);

2411 10 ~PandaNode 4 3740 21 PandaNode::~PandaNode 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
36
virtual PandaNode::~PandaNode(void);

2412 12 combine_with 4 3740 23 PandaNode::combine_with 0 1 249 877
//published so that characters can be combined.

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::combine_with
//       Access: Public, Virtual
//  Description: Collapses this PandaNode with the other PandaNode, if
//               possible, and returns a pointer to the combined
//               PandaNode, or NULL if the two PandaNodes cannot
//               safely be combined.
//
//               The return value may be this, other, or a new
//               PandaNode altogether.
//
//               This function is called from GraphReducer::flatten(),
//               and need not deal with children; its job is just to
//               decide whether to collapse the two PandaNodes and
//               what the collapsed PandaNode should look like.
////////////////////////////////////////////////////////////////////
61
virtual PandaNode *PandaNode::combine_with(PandaNode *other);

2413 9 make_copy 4 3740 20 PandaNode::make_copy 0 1 250 514
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::make_copy
//       Access: Published, Virtual
//  Description: Returns a newly-allocated PandaNode that is a shallow
//               copy of this one.  It will be a different pointer,
//               but its internal data may or may not be shared with
//               that of the original PandaNode.  No children will be
//               copied.
////////////////////////////////////////////////////////////////////
52
virtual PandaNode *PandaNode::make_copy(void) const;

2414 13 copy_subgraph 4 3740 24 PandaNode::copy_subgraph 0 2 251 252 535
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_subgraph
//       Access: Published
//  Description: Allocates and returns a complete copy of this
//               PandaNode and the entire scene graph rooted at this
//               PandaNode.  Some data may still be shared from the
//               original (e.g. vertex index tables), but nothing that
//               will impede normal use of the PandaNode.
////////////////////////////////////////////////////////////////////
105
PointerTo< PandaNode > PandaNode::copy_subgraph(Thread *current_thread = ((get_current_thread()))) const;

2415 8 __copy__ 4 3740 19 PandaNode::__copy__ 0 1 253 613
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::__copy__
//       Access: Published
//  Description: A special Python method that is invoked by
//               copy.copy(node).  Unlike the PandaNode copy
//               constructor, which creates a new node without
//               children, this shares child pointers (essentially
//               making every child an instance).  This is intended to
//               simulate the behavior of copy.copy() for other
//               objects.
////////////////////////////////////////////////////////////////////
55
PointerTo< PandaNode > PandaNode::__copy__(void) const;

2416 12 __deepcopy__ 4 3740 23 PandaNode::__deepcopy__ 0 1 254 428
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::__deepcopy__
//       Access: Published
//  Description: A special Python method that is invoked by
//               copy.deepcopy(node).  This calls copy_subgraph()
//               unless the node is already present in the provided
//               dictionary.
////////////////////////////////////////////////////////////////////
72
PyObject *PandaNode::__deepcopy__(PyObject *self, PyObject *memo) const;

2417 15 get_num_parents 4 3740 26 PandaNode::get_num_parents 0 2 255 256 1023
// Filename: pandaNode.I
// Created by:  drose (20Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_parents
//       Access: Published
//  Description: Returns the number of parent nodes this node has.  If
//               this number is greater than 1, the node has been
//               multiply instanced.  The order of the parent nodes is
//               not meaningful and is not related to the order in
//               which the node was instanced to them.
////////////////////////////////////////////////////////////////////
95
inline int PandaNode::get_num_parents(Thread *current_thread = ((get_current_thread()))) const;

2418 10 get_parent 4 3740 21 PandaNode::get_parent 0 2 257 258 474
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_parent
//       Access: Published
//  Description: Returns the nth parent node of this node.  See
//               get_num_parents().  Also see get_parents(), if your
//               intention is to iterate through the complete list of
//               parents; get_parents() is preferable in this case.
////////////////////////////////////////////////////////////////////
104
inline PandaNode *PandaNode::get_parent(int n, Thread *current_thread = ((get_current_thread()))) const;

2419 11 find_parent 4 3740 22 PandaNode::find_parent 0 2 259 260 325
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_parent
//       Access: Published
//  Description: Returns the index of the indicated parent node, if it
//               is a parent, or -1 if it is not.
////////////////////////////////////////////////////////////////////
108
inline int PandaNode::find_parent(PandaNode *node, Thread *current_thread = ((get_current_thread()))) const;

2420 16 get_num_children 4 3740 27 PandaNode::get_num_children 0 2 261 262 489
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes this node has.  The
//               order of the child nodes *is* meaningful and is based
//               on the sort number that was passed to add_child(),
//               and also on the order in which the nodes were added.
////////////////////////////////////////////////////////////////////
96
inline int PandaNode::get_num_children(Thread *current_thread = ((get_current_thread()))) const;

2421 9 get_child 4 3740 20 PandaNode::get_child 0 2 263 264 476
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child
//       Access: Published
//  Description: Returns the nth child node of this node.  See
//               get_num_children().  Also see get_children(), if your
//               intention is to iterate through the complete list of
//               children; get_children() is preferable in this case.
////////////////////////////////////////////////////////////////////
103
inline PandaNode *PandaNode::get_child(int n, Thread *current_thread = ((get_current_thread()))) const;

2422 14 get_child_sort 4 3740 25 PandaNode::get_child_sort 0 2 265 266 395
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child_sort
//       Access: Published
//  Description: Returns the sort index of the nth child node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_children().
////////////////////////////////////////////////////////////////////
101
inline int PandaNode::get_child_sort(int n, Thread *current_thread = ((get_current_thread()))) const;

2423 10 find_child 4 3740 21 PandaNode::find_child 0 2 267 268 322
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_child
//       Access: Published
//  Description: Returns the index of the indicated child node, if it
//               is a child, or -1 if it is not.
////////////////////////////////////////////////////////////////////
107
inline int PandaNode::find_child(PandaNode *node, Thread *current_thread = ((get_current_thread()))) const;

2424 21 count_num_descendants 4 3740 32 PandaNode::count_num_descendants 0 1 269 299
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::count_num_descendants
//       Access: Published
//  Description: Returns the number of nodes at and below this level.
////////////////////////////////////////////////////////////////////
49
int PandaNode::count_num_descendants(void) const;

2425 9 add_child 4 3740 20 PandaNode::add_child 0 3 270 271 272 567
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_child
//       Access: Published
//  Description: Adds a new child to the node.  The child is added in
//               the relative position indicated by sort; if all
//               children have the same sort index, the child is added
//               at the end.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
////////////////////////////////////////////////////////////////////
116
void PandaNode::add_child(PandaNode *child_node, int sort = (0), Thread *current_thread = ((get_current_thread())));

2426 12 remove_child 4 3740 23 PandaNode::remove_child 0 4 273 274 275 276 736
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the nth child from the node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the indicated child from the node.  Returns
//               true if the child was removed, false if it was not
//               already a child of the node.  This will also
//               successfully remove the child if it had been stashed.
////////////////////////////////////////////////////////////////////
201
void PandaNode::remove_child(int child_index, Thread *current_thread = ((get_current_thread())));
bool PandaNode::remove_child(PandaNode *child_node, Thread *current_thread = ((get_current_thread())));

2427 13 replace_child 4 3740 24 PandaNode::replace_child 0 2 277 278 513
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_child
//       Access: Published
//  Description: Searches for the orig_child node in the node's list
//               of children, and replaces it with the new_child
//               instead.  Returns true if the replacement is made, or
//               false if the node is not a child or if there is some
//               other problem.
////////////////////////////////////////////////////////////////////
126
bool PandaNode::replace_child(PandaNode *orig_child, PandaNode *new_child, Thread *current_thread = ((get_current_thread())));

2428 11 stash_child 4 3740 22 PandaNode::stash_child 0 4 279 280 281 282 1708
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
206
inline bool PandaNode::stash_child(PandaNode *child_node, Thread *current_thread = ((get_current_thread())));
void PandaNode::stash_child(int child_index, Thread *current_thread = ((get_current_thread())));

2429 13 unstash_child 4 3740 24 PandaNode::unstash_child 0 4 283 284 285 286 1640
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
212
inline bool PandaNode::unstash_child(PandaNode *child_node, Thread *current_thread = ((get_current_thread())));
void PandaNode::unstash_child(int stashed_index, Thread *current_thread = ((get_current_thread())));

2430 15 get_num_stashed 4 3740 26 PandaNode::get_num_stashed 0 2 287 288 416
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_stashed
//       Access: Published
//  Description: Returns the number of stashed nodes this node has.
//               These are former children of the node that have been
//               moved to the special stashed list via stash_child().
////////////////////////////////////////////////////////////////////
95
inline int PandaNode::get_num_stashed(Thread *current_thread = ((get_current_thread()))) const;

2431 11 get_stashed 4 3740 22 PandaNode::get_stashed 0 2 289 290 1498
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed
//       Access: Published
//  Description: Returns the nth stashed child of this node.  See
//               get_num_stashed().  Also see get_stashed(), if your
//               intention is to iterate through the complete list of
//               stashed children; get_stashed() is preferable in this
//               case.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed
//       Access: Public
//  Description: Returns an object that can be used to walk through
//               the list of children of the node.  When you intend to
//               visit multiple children, using this is slightly
//               faster than calling get_stashed() directly on the
//               PandaNode, since this object avoids reopening the
//               PipelineCycler each time.
//
//               This object also protects you from self-modifying
//               loops (e.g. adding or removing children during
//               traversal), since a virtual copy of the children is
//               made ahead of time.  The virtual copy is fast--it is
//               a form of copy-on-write, so the list is not actually
//               copied unless it is modified during the traversal.
////////////////////////////////////////////////////////////////////
105
inline PandaNode *PandaNode::get_stashed(int n, Thread *current_thread = ((get_current_thread()))) const;

2432 16 get_stashed_sort 4 3740 27 PandaNode::get_stashed_sort 0 2 291 292 398
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed_sort
//       Access: Published
//  Description: Returns the sort index of the nth stashed node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_stashed().
////////////////////////////////////////////////////////////////////
103
inline int PandaNode::get_stashed_sort(int n, Thread *current_thread = ((get_current_thread()))) const;

2433 12 find_stashed 4 3740 23 PandaNode::find_stashed 0 2 293 294 334
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_stashed
//       Access: Published
//  Description: Returns the index of the indicated stashed node, if
//               it is a stashed child, or -1 if it is not.
////////////////////////////////////////////////////////////////////
109
inline int PandaNode::find_stashed(PandaNode *node, Thread *current_thread = ((get_current_thread()))) const;

2434 11 add_stashed 4 3740 22 PandaNode::add_stashed 0 3 295 296 297 675
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_stashed
//       Access: Published
//  Description: Adds a new child to the node, directly as a stashed
//               child.  The child is not added in the normal sense,
//               but will be revealed if unstash_child() is called on
//               it later.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
118
void PandaNode::add_stashed(PandaNode *child_node, int sort = (0), Thread *current_thread = ((get_current_thread())));

2435 14 remove_stashed 4 3740 25 PandaNode::remove_stashed 0 2 298 299 269
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_stashed
//       Access: Published
//  Description: Removes the nth stashed child from the node.
////////////////////////////////////////////////////////////////////
99
void PandaNode::remove_stashed(int child_index, Thread *current_thread = ((get_current_thread())));

2436 19 remove_all_children 4 3740 30 PandaNode::remove_all_children 0 2 300 301 428
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_all_children
//       Access: Published
//  Description: Removes all the children from the node at once,
//               including stashed children.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
////////////////////////////////////////////////////////////////////
87
void PandaNode::remove_all_children(Thread *current_thread = ((get_current_thread())));

2437 14 steal_children 4 3740 25 PandaNode::steal_children 0 2 302 303 436
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node onto this
//               node.
//
//               Any NodePaths to child nodes of the other node are
//               truncated, rather than moved to the new parent.
////////////////////////////////////////////////////////////////////
100
void PandaNode::steal_children(PandaNode *other, Thread *current_thread = ((get_current_thread())));

2438 13 copy_children 4 3740 24 PandaNode::copy_children 0 2 304 305 329
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_children
//       Access: Published
//  Description: Makes another instance of all the children of the
//               other node, copying them to this node.
////////////////////////////////////////////////////////////////////
99
void PandaNode::copy_children(PandaNode *other, Thread *current_thread = ((get_current_thread())));

2439 10 set_attrib 4 3740 21 PandaNode::set_attrib 0 2 306 307 475
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
75
void PandaNode::set_attrib(RenderAttrib const *attrib, int override = (0));

2440 10 get_attrib 4 3740 21 PandaNode::get_attrib 0 2 308 309 1078
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
////////////////////////////////////////////////////////////////////
138
inline RenderAttrib const *PandaNode::get_attrib(TypeHandle type) const;
inline RenderAttrib const *PandaNode::get_attrib(int slot) const;

2441 10 has_attrib 4 3740 21 PandaNode::has_attrib 0 2 310 311 738
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
108
inline bool PandaNode::has_attrib(TypeHandle type) const;
inline bool PandaNode::has_attrib(int slot) const;

2442 12 clear_attrib 4 3740 23 PandaNode::clear_attrib 0 2 312 313 904
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
////////////////////////////////////////////////////////////////////
93
inline void PandaNode::clear_attrib(TypeHandle type);
void PandaNode::clear_attrib(int slot);

2443 10 set_effect 4 3740 21 PandaNode::set_effect 0 1 314 386
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
55
void PandaNode::set_effect(RenderEffect const *effect);

2444 10 get_effect 4 3740 21 PandaNode::get_effect 0 1 315 338
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
////////////////////////////////////////////////////////////////////
72
inline RenderEffect const *PandaNode::get_effect(TypeHandle type) const;

2445 10 has_effect 4 3740 21 PandaNode::has_effect 0 1 316 365
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
57
inline bool PandaNode::has_effect(TypeHandle type) const;

2446 12 clear_effect 4 3740 23 PandaNode::clear_effect 0 1 317 299
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
////////////////////////////////////////////////////////////////////
46
void PandaNode::clear_effect(TypeHandle type);

2447 9 set_state 4 3740 20 PandaNode::set_state 0 2 318 319 620
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_state
//       Access: Published
//  Description: Sets the complete RenderState that will be applied to
//               all nodes at this level and below.  (The actual state
//               that will be applied to lower nodes is based on the
//               composition of RenderStates from above this node as
//               well).  This completely replaces whatever has been
//               set on this node via repeated calls to set_attrib().
////////////////////////////////////////////////////////////////////
103
void PandaNode::set_state(RenderState const *state, Thread *current_thread = ((get_current_thread())));

2448 9 get_state 4 3740 20 PandaNode::get_state 0 2 320 321 533
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_state
//       Access: Published
//  Description: Returns the complete RenderState that will be applied
//               to all nodes at this level and below, as set on this
//               node.  This returns only the RenderState set on this
//               particular node, and has nothing to do with state
//               that might be inherited from above.
////////////////////////////////////////////////////////////////////
104
inline RenderState const *PandaNode::get_state(Thread *current_thread = ((get_current_thread()))) const;

2449 11 clear_state 4 3740 22 PandaNode::clear_state 0 2 322 323 438
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_state
//       Access: Published
//  Description: Resets this node to leave the render state alone.
//               Nodes at this level and below will once again inherit
//               their render state unchanged from the nodes above
//               this level.
////////////////////////////////////////////////////////////////////
86
inline void PandaNode::clear_state(Thread *current_thread = ((get_current_thread())));

2450 11 set_effects 4 3740 22 PandaNode::set_effects 0 2 324 325 433
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
////////////////////////////////////////////////////////////////////
109
void PandaNode::set_effects(RenderEffects const *effects, Thread *current_thread = ((get_current_thread())));

2451 11 get_effects 4 3740 22 PandaNode::get_effects 0 2 326 327 308
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
////////////////////////////////////////////////////////////////////
108
inline RenderEffects const *PandaNode::get_effects(Thread *current_thread = ((get_current_thread()))) const;

2452 13 clear_effects 4 3740 24 PandaNode::clear_effects 0 2 328 329 267
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
////////////////////////////////////////////////////////////////////
88
inline void PandaNode::clear_effects(Thread *current_thread = ((get_current_thread())));

2453 13 set_transform 4 3740 24 PandaNode::set_transform 0 2 330 331 402
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_transform
//       Access: Published
//  Description: Sets the transform that will be applied to this node
//               and below.  This defines a new coordinate space at
//               this point in the scene graph and below.
////////////////////////////////////////////////////////////////////
114
void PandaNode::set_transform(TransformState const *transform, Thread *current_thread = ((get_current_thread())));

2454 13 get_transform 4 3740 24 PandaNode::get_transform 0 2 332 333 435
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_transform
//       Access: Published
//  Description: Returns the transform that has been set on this
//               particular node.  This is not the net transform from
//               the root, but simply the transform on this particular
//               node.
////////////////////////////////////////////////////////////////////
111
inline TransformState const *PandaNode::get_transform(Thread *current_thread = ((get_current_thread()))) const;

2455 15 clear_transform 4 3740 26 PandaNode::clear_transform 0 2 334 335 303
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_transform
//       Access: Published
//  Description: Resets the transform on this node to the identity
//               transform.
////////////////////////////////////////////////////////////////////
90
inline void PandaNode::clear_transform(Thread *current_thread = ((get_current_thread())));

2456 18 set_prev_transform 4 3740 29 PandaNode::set_prev_transform 0 2 336 337 436
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
////////////////////////////////////////////////////////////////////
119
void PandaNode::set_prev_transform(TransformState const *transform, Thread *current_thread = ((get_current_thread())));

2457 18 get_prev_transform 4 3740 29 PandaNode::get_prev_transform 0 2 338 339 365
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
////////////////////////////////////////////////////////////////////
116
inline TransformState const *PandaNode::get_prev_transform(Thread *current_thread = ((get_current_thread()))) const;

2458 20 reset_prev_transform 4 3740 31 PandaNode::reset_prev_transform 0 2 340 341 444
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_prev_transform
//       Access: Published
//  Description: Resets the transform that represents this node's
//               "previous" position to the same as the current
//               transform.  This is not the same thing as clearing it
//               to identity.
////////////////////////////////////////////////////////////////////
88
void PandaNode::reset_prev_transform(Thread *current_thread = ((get_current_thread())));

2459 24 has_dirty_prev_transform 4 3740 35 PandaNode::has_dirty_prev_transform 0 1 342 533
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_dirty_prev_transform
//       Access: Published
//  Description: Returns true if this node has the
//               _dirty_prev_transform flag set, which indicates its
//               _prev_transform is different from its _transform
//               value (in pipeline stage 0).  In this case, the node
//               will be visited by reset_prev_transform().
////////////////////////////////////////////////////////////////////
60
inline bool PandaNode::has_dirty_prev_transform(void) const;

2460 24 reset_all_prev_transform 4 3740 35 PandaNode::reset_all_prev_transform 0 2 343 344 533
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_all_prev_transform
//       Access: Published, Static
//  Description: Visits all nodes in the world with the
//               _dirty_prev_transform flag--that is, all nodes whose
//               _prev_transform is different from the _transform in
//               pipeline stage 0--and resets the _prev_transform to
//               be the same as _transform.
////////////////////////////////////////////////////////////////////
99
static void PandaNode::reset_all_prev_transform(Thread *current_thread = ((get_current_thread())));

2461 7 set_tag 4 3740 18 PandaNode::set_tag 0 2 345 346 701
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
143
void PandaNode::set_tag(basic_string< char > const &key, basic_string< char > const &value, Thread *current_thread = ((get_current_thread())));

2462 7 get_tag 4 3740 18 PandaNode::get_tag 0 2 347 348 434
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
////////////////////////////////////////////////////////////////////
137
inline basic_string< char > PandaNode::get_tag(basic_string< char > const &key, Thread *current_thread = ((get_current_thread()))) const;

2463 7 has_tag 4 3740 18 PandaNode::has_tag 0 2 349 350 405
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
////////////////////////////////////////////////////////////////////
121
inline bool PandaNode::has_tag(basic_string< char > const &key, Thread *current_thread = ((get_current_thread()))) const;

2464 9 clear_tag 4 3740 20 PandaNode::clear_tag 0 2 351 352 398
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
110
void PandaNode::clear_tag(basic_string< char > const &key, Thread *current_thread = ((get_current_thread())));

2465 14 set_python_tag 4 3740 25 PandaNode::set_python_tag 0 1 353 777
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_python_tag
//       Access: Published
//  Description: Associates an arbitrary Python object with a
//               user-defined key which is stored on the node.  This
//               is similar to set_tag(), except it can store any
//               Python object instead of just a string.  However, the
//               Python object is not recorded to a bam file.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
81
void PandaNode::set_python_tag(basic_string< char > const &key, PyObject *value);

2466 14 get_python_tag 4 3740 25 PandaNode::get_python_tag 0 1 354 407
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_python_tag
//       Access: Published
//  Description: Retrieves the Python object that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns None.
////////////////////////////////////////////////////////////////////
75
PyObject *PandaNode::get_python_tag(basic_string< char > const &key) const;

2467 14 has_python_tag 4 3740 25 PandaNode::has_python_tag 0 1 355 410
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_python_tag
//       Access: Published
//  Description: Returns true if a Python object has been defined on
//               this node for the particular key (even if that object
//               is None), or false if no object has been set.
////////////////////////////////////////////////////////////////////
70
bool PandaNode::has_python_tag(basic_string< char > const &key) const;

2468 16 clear_python_tag 4 3740 27 PandaNode::clear_python_tag 0 1 356 444
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_python_tag
//       Access: Published
//  Description: Removes the Python object defined for this key on
//               this particular node.  After a call to
//               clear_python_tag(), has_python_tag() will return
//               false for the indicated key.
////////////////////////////////////////////////////////////////////
66
void PandaNode::clear_python_tag(basic_string< char > const &key);

2469 8 has_tags 4 3740 19 PandaNode::has_tags 0 1 357 340
// HAVE_PYTHON

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tags
//       Access: Published
//  Description: Returns true if the node has any tags (or any Python
//               tags) at all, false if it has none.
////////////////////////////////////////////////////////////////////
44
inline bool PandaNode::has_tags(void) const;

2470 9 copy_tags 4 3740 20 PandaNode::copy_tags 0 1 358 460
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_tags
//       Access: Published
//  Description: Copies all of the tags stored on the other node onto
//               this node.  If a particular tag exists on both nodes,
//               the contents of this node's value is replaced by that
//               of the other.
////////////////////////////////////////////////////////////////////
44
void PandaNode::copy_tags(PandaNode *other);

2471 9 list_tags 4 3740 20 PandaNode::list_tags 0 2 359 360 660
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::list_tags
//       Access: Published
//  Description: Writes a list of all the tag keys assigned to the
//               node to the indicated stream.  Writes one instance of
//               the separator following each key (but does not write
//               a terminal separator).  The value associated with
//               each key is not written.
//
//               This is mainly for the benefit of the realtime user,
//               to see the list of all of the associated tag keys.
////////////////////////////////////////////////////////////////////
94
void PandaNode::list_tags(ostream &out, basic_string< char > const &separator = ("\n")) const;

2472 12 compare_tags 4 3740 23 PandaNode::compare_tags 0 1 361 643
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::compare_tags
//       Access: Published
//  Description: Returns a number less than 0, 0, or greater than 0,
//               to indicate the similarity of tags between this node
//               and the other one.  If this returns 0, the tags are
//               identical.  If it returns other than 0, then the tags
//               are different; and the nodes may be sorted into a
//               consistent (but arbitrary) ordering based on this
//               number.
////////////////////////////////////////////////////////////////////
58
int PandaNode::compare_tags(PandaNode const *other) const;

2473 19 copy_all_properties 4 3740 30 PandaNode::copy_all_properties 0 1 362 542
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_all_properties
//       Access: Published
//  Description: Copies the TransformState, RenderState,
//               RenderEffects, tags, Python tags, and the show/hide
//               state from the other node onto this one.  Typically
//               this is used to prepare a node to replace another
//               node in the scene graph (also see replace_node()).
////////////////////////////////////////////////////////////////////
54
void PandaNode::copy_all_properties(PandaNode *other);

2474 12 replace_node 4 3740 23 PandaNode::replace_node 0 1 363 976
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_node
//       Access: Published
//  Description: Inserts this node into the scene graph in place of
//               the other one, and removes the other node.  All scene
//               graph attributes (TransformState, RenderState, etc.)
//               are copied to this node.  
//
//               All children are moved to this node, and removed from
//               the old node.  The new node is left in the same place
//               in the old node's parent's list of children.
//
//               Even NodePaths that reference the old node are
//               updated in-place to reference the new node instead.
//
//               This method is intended to be used to replace a node
//               of a given type in the scene graph with a node of a
//               different type.
////////////////////////////////////////////////////////////////////
47
void PandaNode::replace_node(PandaNode *other);

2475 21 set_unexpected_change 4 3740 32 PandaNode::set_unexpected_change 0 1 364 1028
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_unexpected_change
//       Access: Published
//  Description: Sets one or more of the PandaNode::UnexpectedChange
//               bits on, indicating that the corresponding property
//               should not change again on this node.  Once one of
//               these bits has been set, if the property changes, an
//               assertion failure will be raised, which is designed
//               to assist the developer in identifying the
//               troublesome code that modified the property
//               unexpectedly.
//
//               The input parameter is the union of bits that are to
//               be set.  To clear these bits later, use
//               clear_unexpected_change().
//
//               Since this is a developer debugging tool only, this
//               function does nothing in a production (NDEBUG) build.
////////////////////////////////////////////////////////////////////
58
void PandaNode::set_unexpected_change(unsigned int flags);

2476 21 get_unexpected_change 4 3740 32 PandaNode::get_unexpected_change 0 1 365 751
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_unexpected_change
//       Access: Published
//  Description: Returns nonzero if any of the bits in the input
//               parameter are set on this node, or zero if none of
//               them are set.  More specifically, this returns the
//               particular set of bits (masked by the input
//               parameter) that have been set on this node.  See
//               set_unexpected_change().
//
//               Since this is a developer debugging tool only, this
//               function always returns zero in a production (NDEBUG)
//               build.
////////////////////////////////////////////////////////////////////
72
unsigned int PandaNode::get_unexpected_change(unsigned int flags) const;

2477 23 clear_unexpected_change 4 3740 34 PandaNode::clear_unexpected_change 0 1 366 700
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_unexpected_change
//       Access: Published
//  Description: Sets one or more of the PandaNode::UnexpectedChange
//               bits off, indicating that the corresponding property
//               may once again change on this node.  See
//               set_unexpected_change().
//
//               The input parameter is the union of bits that are to
//               be cleared.
//
//               Since this is a developer debugging tool only, this
//               function does nothing in a production (NDEBUG) build.
////////////////////////////////////////////////////////////////////
60
void PandaNode::clear_unexpected_change(unsigned int flags);

2478 15 get_overall_bit 4 3740 26 PandaNode::get_overall_bit 0 1 367 457
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_overall_bit
//       Access: Published, Static
//  Description: Returns the special bit that, when specifically
//               cleared in the node's DrawMask, indicates that the
//               node is hidden to all cameras, regardless of the
//               remaining DrawMask bits.
////////////////////////////////////////////////////////////////////
75
static inline BitMask< unsigned int, 32 > PandaNode::get_overall_bit(void);

2479 19 get_all_camera_mask 4 3740 30 PandaNode::get_all_camera_mask 0 1 368 323
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_all_camera_mask
//       Access: Published, Static
//  Description: Returns a DrawMask that is appropriate for rendering
//               to all cameras.
////////////////////////////////////////////////////////////////////
79
static inline BitMask< unsigned int, 32 > PandaNode::get_all_camera_mask(void);

2480 17 is_overall_hidden 4 3740 28 PandaNode::is_overall_hidden 0 1 369 337
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_overall_hidden
//       Access: Published, Static
//  Description: Returns true if the node has been hidden to all
//               cameras by clearing its overall bit.
////////////////////////////////////////////////////////////////////
53
inline bool PandaNode::is_overall_hidden(void) const;

2481 18 set_overall_hidden 4 3740 29 PandaNode::set_overall_hidden 0 1 370 750
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_overall_hidden
//       Access: Published
//  Description: Sets or clears the hidden flag.  When the hidden flag
//               is true, the node and all of its children are
//               invisible to all cameras, regardless of the setting
//               of any draw masks.  Setting the hidden flag to false
//               restores the previous visibility as established by
//               the draw masks.
//
//               This actually works by twiddling the reserved
//               _overall_bit in the node's draw mask, which has
//               special meaning.
////////////////////////////////////////////////////////////////////
63
inline void PandaNode::set_overall_hidden(bool overall_hidden);

2482 16 adjust_draw_mask 4 3740 27 PandaNode::adjust_draw_mask 0 1 371 1941
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::adjust_draw_mask
//       Access: Published
//  Description: Adjusts the hide/show bits of this particular node.
//
//               These three parameters can be used to adjust the
//               _draw_control_mask and _draw_show_mask independently,
//               which work together to provide per-camera visibility
//               for the node and its descendents.
//
//               _draw_control_mask indicates the bits in
//               _draw_show_mask that are significant.  Each different
//               bit corresponds to a different camera (and these bits
//               are assigned via Camera::set_camera_mask()).
//
//               Where _draw_control_mask has a 1 bit, a 1 bit in
//               _draw_show_mask indicates the node is visible to that
//               camera, and a 0 bit indicates the node is hidden to
//               that camera.  Where _draw_control_mask is 0, the node
//               is hidden only if a parent node is hidden.
//
//               The meaning of the three parameters is as follows:
//
//               * Wherever show_mask is 1, _draw_show_mask and
//               _draw_control_mask will be set 1.  Thus, show_mask
//               indicates the set of cameras to which the node should
//               be shown.
//
//               * Wherever hide_mask is 1, _draw_show_mask will be
//               set 0 and _draw_control_mask will be set 1.  Thus,
//               hide_mask indicates the set of cameras from which the
//               node should be hidden.
//
//               * Wherever clear_mask is 1, _draw_control_mask will
//               be set 0.  Thus, clear_mask indicates the set of
//               cameras from which the hidden state should be
//               inherited from a parent.
////////////////////////////////////////////////////////////////////
151
void PandaNode::adjust_draw_mask(BitMask< unsigned int, 32 > show_mask, BitMask< unsigned int, 32 > hide_mask, BitMask< unsigned int, 32 > clear_mask);

2483 21 get_draw_control_mask 4 3740 32 PandaNode::get_draw_control_mask 0 1 372 347
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in draw_show_mask that are
//               considered meaningful.  See adjust_draw_mask().
////////////////////////////////////////////////////////////////////
80
inline BitMask< unsigned int, 32 > PandaNode::get_draw_control_mask(void) const;

2484 18 get_draw_show_mask 4 3740 29 PandaNode::get_draw_show_mask 0 1 373 321
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_show_mask
//       Access: Published
//  Description: Returns the hide/show bits of this particular node.
//               See adjust_draw_mask().
////////////////////////////////////////////////////////////////////
77
inline BitMask< unsigned int, 32 > PandaNode::get_draw_show_mask(void) const;

2485 25 get_net_draw_control_mask 4 3740 36 PandaNode::get_net_draw_control_mask 0 1 374 681
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in get_net_draw_show_mask()
//               that have been explicitly set via adjust_draw_mask(),
//               rather than implicitly inherited.
//
//               A 1 bit in any position of this mask indicates that
//               (a) this node has renderable children, and (b) some
//               child of this node has made an explicit hide() or
//               show_through() call for the corresponding bit.
////////////////////////////////////////////////////////////////////
77
BitMask< unsigned int, 32 > PandaNode::get_net_draw_control_mask(void) const;

2486 22 get_net_draw_show_mask 4 3740 33 PandaNode::get_net_draw_show_mask 0 1 375 943
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_show_mask
//       Access: Published
//  Description: Returns the union of all draw_show_mask values--of
//               renderable nodes only--at this level and below.  If
//               any bit in this mask is 0, there is no reason to
//               traverse below this node for a camera with the
//               corresponding camera_mask.
//
//               The bits in this mask that do not correspond to a 1
//               bit in the net_draw_control_mask are meaningless (and
//               will be set to 1).  For bits that *do* correspond to
//               a 1 bit in the net_draw_control_mask, a 1 bit
//               indicates that at least one child should be visible,
//               while a 0 bit indicates that all children are hidden.
////////////////////////////////////////////////////////////////////
74
BitMask< unsigned int, 32 > PandaNode::get_net_draw_show_mask(void) const;

2487 21 set_into_collide_mask 4 3740 32 PandaNode::set_into_collide_mask 0 1 376 882
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_into_collide_mask
//       Access: Published
//  Description: Sets the "into" CollideMask.  
//
//               This specifies the set of bits that must be shared
//               with a CollisionNode's "from" CollideMask in order
//               for the CollisionNode to detect a collision with this
//               particular node.
//
//               The actual CollideMask that will be set is masked by
//               the return value from get_legal_collide_mask().
//               Thus, the into_collide_mask cannot be set to anything
//               other than nonzero except for those types of nodes
//               that can be collided into, such as CollisionNodes and
//               GeomNodes.
////////////////////////////////////////////////////////////////////
72
void PandaNode::set_into_collide_mask(BitMask< unsigned int, 32 > mask);

2488 21 get_into_collide_mask 4 3740 32 PandaNode::get_into_collide_mask 0 1 377 278
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_into_collide_mask
//       Access: Published
//  Description: Returns the "into" collide mask for this node.
////////////////////////////////////////////////////////////////////
80
inline BitMask< unsigned int, 32 > PandaNode::get_into_collide_mask(void) const;

2489 22 get_legal_collide_mask 4 3740 33 PandaNode::get_legal_collide_mask 0 1 378 618
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_legal_collide_mask
//       Access: Published, Virtual
//  Description: Returns the subset of CollideMask bits that may be
//               set for this particular type of PandaNode.  For most
//               nodes, this is 0; it doesn't make sense to set a
//               CollideMask for most kinds of nodes.
//
//               For nodes that can be collided with, such as GeomNode
//               and CollisionNode, this returns all bits on.
////////////////////////////////////////////////////////////////////
82
virtual BitMask< unsigned int, 32 > PandaNode::get_legal_collide_mask(void) const;

2490 20 get_net_collide_mask 4 3740 31 PandaNode::get_net_collide_mask 0 2 379 380 346
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_collide_mask
//       Access: Published
//  Description: Returns the union of all into_collide_mask() values
//               set at CollisionNodes at this level and below.
////////////////////////////////////////////////////////////////////
117
BitMask< unsigned int, 32 > PandaNode::get_net_collide_mask(Thread *current_thread = ((get_current_thread()))) const;

2491 19 get_off_clip_planes 4 3740 30 PandaNode::get_off_clip_planes 0 2 381 382 395
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_off_clip_planes
//       Access: Published
//  Description: Returns a ClipPlaneAttrib which represents the union
//               of all of the clip planes that have been turned *off*
//               at this level and below.
////////////////////////////////////////////////////////////////////
119
ConstPointerTo< RenderAttrib > PandaNode::get_off_clip_planes(Thread *current_thread = ((get_current_thread()))) const;

2492 13 prepare_scene 4 3740 24 PandaNode::prepare_scene 0 1 383 849
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::prepare_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at this node,
//               and does whatever initialization is required to
//               render the scene properly with the indicated GSG.  It
//               is not strictly necessary to call this, since the GSG
//               will initialize itself when the scene is rendered,
//               but this may take some of the overhead away from that
//               process.
//
//               In particular, this will ensure that textures within
//               the scene are loaded in texture memory, and display
//               lists are built up from static geometry.
////////////////////////////////////////////////////////////////////
92
void PandaNode::prepare_scene(GraphicsStateGuardianBase *gsg, RenderState const *net_state);

2493 13 is_scene_root 4 3740 24 PandaNode::is_scene_root 0 1 384 431
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_scene_root
//       Access: Published
//  Description: Returns true if this particular node is known to be
//               the render root of some active DisplayRegion
//               associated with the global GraphicsEngine, false
//               otherwise.
////////////////////////////////////////////////////////////////////
42
bool PandaNode::is_scene_root(void) const;

2494 19 is_under_scene_root 4 3740 30 PandaNode::is_under_scene_root 0 1 385 601
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_under_scene_root
//       Access: Published
//  Description: Returns true if this particular node is in a live
//               scene graph: that is, it is a child or descendent of
//               a node that is itself a scene root.  If this is true,
//               this node may potentially be traversed by the render
//               traverser.  Stashed nodes don't count for this
//               purpose, but hidden nodes do.
////////////////////////////////////////////////////////////////////
48
bool PandaNode::is_under_scene_root(void) const;

2495 6 output 4 3740 17 PandaNode::output 0 1 386 226
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
51
virtual void PandaNode::output(ostream &out) const;

2496 5 write 4 3740 16 PandaNode::write 0 1 387 225
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
68
virtual void PandaNode::write(ostream &out, int indent_level) const;

2497 2 ls 4 3740 13 PandaNode::ls 0 1 388 295
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::ls
//       Access: Published
//  Description: Lists all the nodes at and below the current path
//               hierarchically.
////////////////////////////////////////////////////////////////////
64
inline void PandaNode::ls(ostream &out, int indent_level) const;

2498 15 set_bounds_type 4 3740 26 PandaNode::set_bounds_type 0 1 389 1688
// A node has three bounding volumes: an "external" bounding volume
// that represents the node and all of its children, an "internal"
// bounding volume which represents only the node itself (and is
// usually empty, unless a specific node type sets it otherwise),
// and a "user" bounding volume which is specified by the user.
// We define set_bounds() and get_bounds() functions so that
// set_bounds() sets the user bounding volume, while get_bounds()
// returns the external bounding volume.  Although it might seem
// strange and confusing to do this, this is actually the natural
// way the user thinks about nodes and bounding volumes.

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bounds_type
//       Access: Published
//  Description: Specifies the desired type of bounding volume that
//               will be created for this node.  This is normally
//               BoundingVolume::BT_default, which means to set the
//               type according to the config variable "bounds-type".
//
//               If this is BT_sphere or BT_box, a BoundingSphere or
//               BoundingBox is explicitly created.  If it is BT_best,
//               the appropriate type to best enclose the node's
//               children is created.
//
//               This affects the bounding volume returned by
//               get_bounds(), which is not exactly the same bounding
//               volume modified by set_bounds(), because a new
//               bounding volume has to be created that includes this
//               node and all of its children.
////////////////////////////////////////////////////////////////////
72
void PandaNode::set_bounds_type(BoundingVolume::BoundsType bounds_type);

2499 15 get_bounds_type 4 3740 26 PandaNode::get_bounds_type 0 1 390 949
// A node has three bounding volumes: an "external" bounding volume
// that represents the node and all of its children, an "internal"
// bounding volume which represents only the node itself (and is
// usually empty, unless a specific node type sets it otherwise),
// and a "user" bounding volume which is specified by the user.
// We define set_bounds() and get_bounds() functions so that
// set_bounds() sets the user bounding volume, while get_bounds()
// returns the external bounding volume.  Although it might seem
// strange and confusing to do this, this is actually the natural
// way the user thinks about nodes and bounding volumes.

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds_type
//       Access: Published
//  Description: Returns the bounding volume type set with
//               set_bounds_type().
////////////////////////////////////////////////////////////////////
66
BoundingVolume::BoundsType PandaNode::get_bounds_type(void) const;

2500 10 set_bounds 4 3740 21 PandaNode::set_bounds 0 1 391 806
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bounds
//       Access: Published
//  Description: Resets the bounding volume so that it is the
//               indicated volume.  When it is explicitly set, the
//               bounding volume will no longer be automatically
//               computed according to the contents of the node
//               itself, for nodes like GeomNodes and TextNodes that
//               contain substance (but the bounding volume will still
//               be automatically expanded to include its children).
//
//               Call clear_bounds() if you would like to return the
//               bounding volume to its default behavior later.
////////////////////////////////////////////////////////////////////
57
void PandaNode::set_bounds(BoundingVolume const *volume);

2501 9 set_bound 4 3740 20 PandaNode::set_bound 0 1 392 258
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bound
//       Access: Published
//  Description: Deprecated.  Use set_bounds() instead.
////////////////////////////////////////////////////////////////////
56
void PandaNode::set_bound(BoundingVolume const *volume);

2502 12 clear_bounds 4 3740 23 PandaNode::clear_bounds 0 1 393 441
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_bounds
//       Access: Published
//  Description: Reverses the effect of a previous call to
//               set_bounds(), and allows the node's bounding volume
//               to be automatically computed once more based on the
//               contents of the node.
////////////////////////////////////////////////////////////////////
42
inline void PandaNode::clear_bounds(void);

2503 10 get_bounds 4 3740 21 PandaNode::get_bounds 0 4 394 395 396 397 1403
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: Returns the external bounding volume of this node: a
//               bounding volume that contains the user bounding
//               volume, the internal bounding volume, and all of the
//               children's bounding volumes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: This flavor of get_bounds() return the external
//               bounding volume, and also fills in seq with the
//               bounding volume's current sequence number.  When this
//               sequence number changes, it indicates that the
//               bounding volume might have changed, e.g. because some
//               nested child's bounding volume has changed.
//
//               Although this might occasionally increment without
//               changing the bounding volume, the bounding volume
//               will never change without incrementing this counter,
//               so as long as this counter remains unchanged you can
//               be confident the bounding volume is also unchanged.
////////////////////////////////////////////////////////////////////
241
ConstPointerTo< BoundingVolume > PandaNode::get_bounds(Thread *current_thread = ((get_current_thread()))) const;
ConstPointerTo< BoundingVolume > PandaNode::get_bounds(UpdateSeq &seq, Thread *current_thread = ((get_current_thread()))) const;

2504 19 get_nested_vertices 4 3740 30 PandaNode::get_nested_vertices 0 2 398 399 744
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_nested_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this node and all of its descendents.
//
//               This is not necessarily an accurate count of vertices
//               that will actually be rendered, since this will
//               include all vertices of all LOD's, and it will also
//               include hidden nodes.  It may also omit or only
//               approximate certain kinds of dynamic geometry.
//               However, it will not include stashed nodes.
////////////////////////////////////////////////////////////////////
92
int PandaNode::get_nested_vertices(Thread *current_thread = ((get_current_thread()))) const;

2505 19 get_internal_bounds 4 3740 30 PandaNode::get_internal_bounds 0 2 400 401 892
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_bounds
//       Access: Published
//  Description: Returns the node's internal bounding volume.  This is
//               the bounding volume around the node alone, without
//               including children.  If the user has called
//               set_bounds(), it will be the specified bounding
//               volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_bounds
//       Access: Protected
//  Description: Returns the node's internal bounding volume.  This is
//               the bounding volume around the node alone, without
//               including children.
////////////////////////////////////////////////////////////////////
128
inline ConstPointerTo< BoundingVolume > PandaNode::get_internal_bounds(Thread *current_thread = ((get_current_thread()))) const;

2506 21 get_internal_vertices 4 3740 32 PandaNode::get_internal_vertices 0 2 402 403 978
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this particular node alone, not
//               accounting for its children.
//
//               This may not include all vertices for certain dynamic
//               effects.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_vertices
//       Access: Protected
//  Description: Returns the total number of vertices that will be
//               rendered by this particular node alone, not
//               accounting for its children.
//
//               This may not include all vertices for certain dynamic
//               effects.
////////////////////////////////////////////////////////////////////
101
inline int PandaNode::get_internal_vertices(Thread *current_thread = ((get_current_thread()))) const;

2507 17 mark_bounds_stale 4 3740 28 PandaNode::mark_bounds_stale 0 2 404 405 1441
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_bounds_stale
//       Access: Protected
//  Description: Indicates that the bounding volume, or something that
//               influences the bounding volume (or any of the other
//               things stored in CData, like net_collide_mask),
//               may have changed for this node, and that it must be
//               recomputed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_bounds_stale
//       Access: Published
//  Description: Indicates that the bounding volume, or something that
//               influences the bounding volume (or any of the other
//               things stored in CData, like net_collide_mask),
//               may have changed for this node, and that it must be
//               recomputed.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               This method is intended for internal use; usually it
//               is not necessary for a user to call this directly.
//               It will be called automatically by derived classes
//               when appropriate.
////////////////////////////////////////////////////////////////////
91
void PandaNode::mark_bounds_stale(Thread *current_thread = ((get_current_thread()))) const;

2508 26 mark_internal_bounds_stale 4 3740 37 PandaNode::mark_internal_bounds_stale 0 2 406 407 1286
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_internal_bounds_stale
//       Access: Protected
//  Description: Should be called by a derived class to mark the
//               internal bounding volume stale, so that
//               recompute_internal_bounds() will be called when the
//               bounding volume is next requested.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_internal_bounds_stale
//       Access: Published
//  Description: Should be called by a derived class to mark the
//               internal bounding volume stale, so that
//               compute_internal_bounds() will be called when the
//               bounding volume is next requested.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               It is normally not necessary to call this method
//               directly; each node should be responsible for calling
//               it when its internals have changed.
////////////////////////////////////////////////////////////////////
94
void PandaNode::mark_internal_bounds_stale(Thread *current_thread = ((get_current_thread())));

2509 15 is_bounds_stale 4 3740 26 PandaNode::is_bounds_stale 0 1 408 457
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_bounds_stale
//       Access: Published
//  Description: Returns true if the bounding volume of this node is
//                stale and will be implicitly recomputed at the next
//                call to get_bounds(), or false if it is fresh and
//                need not be recomputed.
////////////////////////////////////////////////////////////////////
51
inline bool PandaNode::is_bounds_stale(void) const;

2510 9 set_final 4 3740 20 PandaNode::set_final 0 1 409 995
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_final
//       Access: Published
//  Description: Sets the "final" flag on this PandaNode.  If
//               this is true, than no bounding volume need be tested
//               below it; a positive intersection with this node's
//               bounding volume is deemed to be a positive
//               intersection with all geometry inside.
//
//               This is useful to quickly force a larger bounding
//               volume around a node when the GeomNodes themselves
//               are inaccurate for some reason, without forcing a
//               recompute of every nested bounding volume.  It's also
//               helpful when the bounding volume is tricked by some
//               special properties, like billboards, that may move
//               geometry out of its bounding volume otherwise.
////////////////////////////////////////////////////////////////////
44
inline void PandaNode::set_final(bool flag);

2511 8 is_final 4 3740 19 PandaNode::is_final 0 2 410 411 429
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_final
//       Access: Published
//  Description: Returns the current state of the "final" flag.
//               Initially, this flag is off (false), but it may be
//               changed by an explicit call to set_final().  See
//               set_final().
////////////////////////////////////////////////////////////////////
89
inline bool PandaNode::is_final(Thread *current_thread = ((get_current_thread()))) const;

2512 12 is_geom_node 4 3740 23 PandaNode::is_geom_node 0 1 412 570
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_geom_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from GeomNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(GeomNode::get_class_type()), since this
//               test is so important to rendering.
////////////////////////////////////////////////////////////////////
49
virtual bool PandaNode::is_geom_node(void) const;

2513 11 is_lod_node 4 3740 22 PandaNode::is_lod_node 0 1 413 504
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_lod_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from LODNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(LODNode::get_class_type()).
////////////////////////////////////////////////////////////////////
48
virtual bool PandaNode::is_lod_node(void) const;

2514 8 as_light 4 3740 19 PandaNode::as_light 0 1 414 379
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::as_light
//       Access: Published, Virtual
//  Description: Cross-casts the node to a Light pointer, if it is one
//               of the four kinds of Light nodes, or returns NULL if
//               it is not.
////////////////////////////////////////////////////////////////////
41
virtual Light *PandaNode::as_light(void);

2515 16 is_ambient_light 4 3740 27 PandaNode::is_ambient_light 0 1 415 356
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_ambient_light
//       Access: Published, Virtual
//  Description: Returns true if this is an AmbientLight, false if it
//               is not a light, or it is some other kind of light.
////////////////////////////////////////////////////////////////////
53
virtual bool PandaNode::is_ambient_light(void) const;

2516 14 get_fancy_bits 4 3740 25 PandaNode::get_fancy_bits 0 2 416 417 617
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_fancy_bits
//       Access: Published
//  Description: Returns the union of all of the enum FancyBits values
//               corresponding to the various "fancy" attributes that
//               are set on the node.  If this returns 0, the node has
//               nothing interesting about it.  This is intended to
//               speed traversal by quickly skipping past nodes that
//               don't particularly affect the render state.
////////////////////////////////////////////////////////////////////
94
inline int PandaNode::get_fancy_bits(Thread *current_thread = ((get_current_thread()))) const;

2517 22 decode_from_bam_stream 4 3740 33 PandaNode::decode_from_bam_stream 0 2 418 419 819
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type PandaNode,
//               allowing for easier reference count management.  Note
//               that the caller is still responsible for maintaining
//               the reference count on the return value.
////////////////////////////////////////////////////////////////////
133
static PointerTo< PandaNode > PandaNode::decode_from_bam_stream(basic_string< char > const &data, BamReader *reader = ((void *)(0)));

2518 14 get_class_type 4 3740 25 PandaNode::get_class_type 0 1 420 0
50
static TypeHandle PandaNode::get_class_type(void);

2519 4 make 4 3747 24 TransparencyAttrib::make 0 1 428 275
////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TransparencyAttrib object.
////////////////////////////////////////////////////////////////////
94
static ConstPointerTo< RenderAttrib > TransparencyAttrib::make(TransparencyAttrib::Mode mode);

2520 12 make_default 4 3747 32 TransparencyAttrib::make_default 0 1 429 405
////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
77
static ConstPointerTo< RenderAttrib > TransparencyAttrib::make_default(void);

2521 8 get_mode 4 3747 28 TransparencyAttrib::get_mode 0 1 430 258
////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::get_mode
//       Access: Published
//  Description: Returns the transparency mode.
////////////////////////////////////////////////////////////////////
73
inline TransparencyAttrib::Mode TransparencyAttrib::get_mode(void) const;

2522 14 get_class_slot 4 3747 34 TransparencyAttrib::get_class_slot 0 1 431 0
52
static int TransparencyAttrib::get_class_slot(void);

2523 14 get_class_type 4 3747 34 TransparencyAttrib::get_class_type 0 1 432 0
59
static TypeHandle TransparencyAttrib::get_class_type(void);

2524 19 ~TransparencyAttrib 4 3747 39 TransparencyAttrib::~TransparencyAttrib 0 0 0
46
TransparencyAttrib::~TransparencyAttrib(void);

2525 8 NodePath 4 3749 18 NodePath::NodePath 0 8 433 434 435 436 437 438 439 440 2488
// Filename: nodePath.I
// Created by:  drose (25Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NodePath::Default Constructor
//       Access: Published
//  Description: This constructs an empty NodePath with no nodes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a new NodePath with a single
//               node.  An ordinary, unattached PandaNode is created
//               with the indicated name.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a NodePath for the indicated node.
//               If the node does not have any parents, this creates a
//               singleton NodePath; otherwise, it automatically finds
//               the path from the node to the root.  If the node has
//               multiple paths to the root, one path is chosen
//               arbitrarily and a warning message is printed (but see
//               also NodePath::any_path(), below).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

// ***End temporary transition code for operator bool
////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: Constructs a NodePath with the indicated parent
//               NodePath and child node; the child node must be a
//               stashed or unstashed child of the parent.
////////////////////////////////////////////////////////////////////
415
inline NodePath::NodePath(void);
inline NodePath::NodePath(basic_string< char > const &top_node_name, Thread *current_thread = ((get_current_thread())));
inline NodePath::NodePath(PandaNode *node, Thread *current_thread = ((get_current_thread())));
NodePath::NodePath(NodePath const &parent, PandaNode *child_node, Thread *current_thread = ((get_current_thread())));
inline NodePath::NodePath(NodePath const &copy);

2526 8 any_path 4 3749 18 NodePath::any_path 0 2 441 442 531
////////////////////////////////////////////////////////////////////
//     Function: NodePath::any_path named constructor
//       Access: Published, Static
//  Description: Returns a new NodePath that represents any arbitrary
//               path from the root to the indicated node.  This is
//               the same thing that would be returned by
//               NodePath(node), except that no warning is issued if
//               the path is ambiguous.
////////////////////////////////////////////////////////////////////
110
static inline NodePath NodePath::any_path(PandaNode *node, Thread *current_thread = ((get_current_thread())));

2527 10 operator = 4 3749 20 NodePath::operator = 0 1 443 233
////////////////////////////////////////////////////////////////////
//     Function: NodePath::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void NodePath::operator =(NodePath const &copy);

2528 8 __copy__ 4 3749 18 NodePath::__copy__ 0 1 444 505
////////////////////////////////////////////////////////////////////
//     Function: NodePath::__copy__
//       Access: Published
//  Description: A special Python method that is invoked by
//               copy.copy(node).  Unlike the NodePath copy
//               constructor, this makes a duplicate copy of the
//               underlying PandaNode (but shares children, instead of
//               copying them or omitting them).
////////////////////////////////////////////////////////////////////
40
NodePath NodePath::__copy__(void) const;

2529 12 __deepcopy__ 4 3749 22 NodePath::__deepcopy__ 0 1 445 423
////////////////////////////////////////////////////////////////////
//     Function: NodePath::__deepcopy__
//       Access: Published
//  Description: A special Python method that is invoked by
//               copy.deepcopy(np).  This calls copy_to() unless the
//               NodePath is already present in the provided
//               dictionary.
////////////////////////////////////////////////////////////////////
71
PyObject *NodePath::__deepcopy__(PyObject *self, PyObject *memo) const;

2530 10 __reduce__ 4 3749 20 NodePath::__reduce__ 0 1 446 487
////////////////////////////////////////////////////////////////////
//     Function: NodePath::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
////////////////////////////////////////////////////////////////////
53
PyObject *NodePath::__reduce__(PyObject *self) const;

2531 18 __reduce_persist__ 4 3749 28 NodePath::__reduce_persist__ 0 1 447 704
////////////////////////////////////////////////////////////////////
//     Function: NodePath::__reduce_persist__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This is similar to __reduce__, but it provides
//               additional support for the missing persistent-state
//               object needed to properly support self-referential
//               BAM objects written to the pickle stream.  This hooks
//               into the pickle and cPickle modules implemented in
//               direct/src/stdpy.
////////////////////////////////////////////////////////////////////
80
PyObject *NodePath::__reduce_persist__(PyObject *self, PyObject *pickler) const;

2532 9 not_found 4 3749 19 NodePath::not_found 0 1 448 318
////////////////////////////////////////////////////////////////////
//     Function: NodePath::not_found named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_not_found error type
//               set.
////////////////////////////////////////////////////////////////////
49
static inline NodePath NodePath::not_found(void);

2533 7 removed 4 3749 17 NodePath::removed 0 1 449 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::removed named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_removed error type
//               set.
////////////////////////////////////////////////////////////////////
47
static inline NodePath NodePath::removed(void);

2534 4 fail 4 3749 14 NodePath::fail 0 1 450 308
////////////////////////////////////////////////////////////////////
//     Function: NodePath::fail named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_fail error type
//               set.
////////////////////////////////////////////////////////////////////
44
static inline NodePath NodePath::fail(void);

2535 20 set_max_search_depth 4 3749 30 NodePath::set_max_search_depth 0 1 451 1267
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_max_search_depth
//       Access: Published, Static
//  Description: Certain operations, such as find() or
//               find_all_matches(), require a traversal of the scene
//               graph to search for the target node or nodes.  This
//               traversal does not attempt to detect cycles, so an
//               arbitrary cap is set on the depth of the traversal as
//               a poor man's cycle detection, in the event that a
//               cycle has inadvertently been introduced into the
//               scene graph.
//
//               There may be other reasons you'd want to truncate a
//               search before the bottom of the scene graph has been
//               reached.  In any event, this function sets the limit
//               on the number of levels that a traversal will
//               continue, and hence the maximum length of a path that
//               may be returned by a traversal.
//
//               This is a static method, and so changing this
//               parameter affects all of the NodePaths in the
//               universe.
////////////////////////////////////////////////////////////////////
72
static inline void NodePath::set_max_search_depth(int max_search_depth);

2536 20 get_max_search_depth 4 3749 30 NodePath::get_max_search_depth 0 1 452 336
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_max_search_depth
//       Access: Published, Static
//  Description: Returns the current setting of the search depth
//               limit.  See set_max_search_depth.
////////////////////////////////////////////////////////////////////
55
static inline int NodePath::get_max_search_depth(void);

2537 8 is_empty 4 3749 18 NodePath::is_empty 0 1 453 309
// Methods to query a NodePath's contents.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_empty
//       Access: Published
//  Description: Returns true if the NodePath contains no nodes.
////////////////////////////////////////////////////////////////////
43
inline bool NodePath::is_empty(void) const;

2538 22 operator typecast bool 132 3749 32 NodePath::operator typecast bool 0 1 1126 383
// Methods to query a NodePath's contents.

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator bool
//       Access: Published
//  Description: Returns true if the NodePath is valid (not empty),
//               or false if it contains no nodes.
////////////////////////////////////////////////////////////////////
50
bool NodePath::operator typecast bool(void) const;

2539 12 is_singleton 4 3749 22 NodePath::is_singleton 0 2 454 455 294
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_singleton
//       Access: Published
//  Description: Returns true if the NodePath contains exactly one
//               node.
////////////////////////////////////////////////////////////////////
92
inline bool NodePath::is_singleton(Thread *current_thread = ((get_current_thread()))) const;

2540 13 get_num_nodes 4 3749 23 NodePath::get_num_nodes 0 2 456 457 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_nodes
//       Access: Published
//  Description: Returns the number of nodes in the path.
////////////////////////////////////////////////////////////////////
85
int NodePath::get_num_nodes(Thread *current_thread = ((get_current_thread()))) const;

2541 8 get_node 4 3749 18 NodePath::get_node 0 2 458 459 812
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_node
//       Access: Published
//  Description: Returns the nth node of the path, where 0 is the
//               referenced (bottom) node and get_num_nodes() - 1 is
//               the top node.  This requires iterating through the
//               path.
//
//               Also see node(), which is a convenience function to
//               return the same thing as get_node(0) (since the
//               bottom node is the most important node in the
//               NodePath, and is the one most frequently referenced).
//
//               Note that this function returns the same thing as
//               get_ancestor(index).node().
////////////////////////////////////////////////////////////////////
98
PandaNode *NodePath::get_node(int index, Thread *current_thread = ((get_current_thread()))) const;

2542 12 get_ancestor 4 3749 22 NodePath::get_ancestor 0 2 460 461 531
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_ancestor
//       Access: Published
//  Description: Returns the nth ancestor of the path, where 0 is the
//               NodePath itself and get_num_nodes() - 1 is get_top().
//               This requires iterating through the path.
//
//               Also see get_node(), which returns the same thing as
//               a PandaNode pointer, not a NodePath.
////////////////////////////////////////////////////////////////////
100
NodePath NodePath::get_ancestor(int index, Thread *current_thread = ((get_current_thread()))) const;

2543 14 get_error_type 4 3749 24 NodePath::get_error_type 0 1 462 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_error_type
//       Access: Published
//  Description: If is_empty() is true, this returns a code that
//               represents the reason why the NodePath is empty.
////////////////////////////////////////////////////////////////////
64
inline NodePath::ErrorType NodePath::get_error_type(void) const;

2544 12 get_top_node 4 3749 22 NodePath::get_top_node 0 2 463 464 345
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top_node
//       Access: Published
//  Description: Returns the top node of the path, or NULL if the path
//               is empty.  This requires iterating through the path.
////////////////////////////////////////////////////////////////////
98
inline PandaNode *NodePath::get_top_node(Thread *current_thread = ((get_current_thread()))) const;

2545 7 get_top 4 3749 17 NodePath::get_top 0 2 465 466 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top
//       Access: Published
//  Description: Returns a singleton NodePath that represents the top
//               of the path, or empty NodePath if this path is empty.
////////////////////////////////////////////////////////////////////
84
NodePath NodePath::get_top(Thread *current_thread = ((get_current_thread()))) const;

2546 4 node 4 3749 14 NodePath::node 0 1 467 254
////////////////////////////////////////////////////////////////////
//     Function: NodePath::node
//       Access: Published
//  Description: Returns the referenced node of the path.
////////////////////////////////////////////////////////////////////
45
inline PandaNode *NodePath::node(void) const;

2547 7 get_key 4 3749 17 NodePath::get_key 0 1 468 988
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_key
//       Access: Published
//  Description: Returns an integer that is guaranteed to be the same
//               for all NodePaths that represent the same node
//               instance, and different for all NodePaths that
//               represent a different node instance.  
//
//               The same key will be returned for a particular
//               instance as long as at least one NodePath exists that
//               represents that instance; if all NodePaths for a
//               particular instance destruct and a new one is later
//               created, it may have a different index.  However, a
//               given key will never be reused for a different
//               instance (unless the app has been running long enough
//               that we overflow the integer key value).
////////////////////////////////////////////////////////////////////
41
inline int NodePath::get_key(void) const;

2548 13 is_same_graph 4 3749 23 NodePath::is_same_graph 0 2 469 470 526
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_same_graph
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is parented within the same graph as that of the
//               other NodePath.  This is essentially the same thing
//               as asking whether get_top() of both NodePaths is the
//               same (e.g., both "render").
////////////////////////////////////////////////////////////////////
116
inline bool NodePath::is_same_graph(NodePath const &other, Thread *current_thread = ((get_current_thread()))) const;

2549 14 is_ancestor_of 4 3749 24 NodePath::is_ancestor_of 0 2 471 472 387
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_ancestor_of
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is a parent or other ancestor of the other NodePath,
//               or false if it is not.
////////////////////////////////////////////////////////////////////
117
inline bool NodePath::is_ancestor_of(NodePath const &other, Thread *current_thread = ((get_current_thread()))) const;

2550 19 get_common_ancestor 4 3749 29 NodePath::get_common_ancestor 0 2 473 474 468
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_common_ancestor
//       Access: Published
//  Description: Returns the lowest NodePath that both of these two
//               NodePaths have in common: the first ancestor that
//               both of them share.  If the two NodePaths are
//               unrelated, returns NodePath::not_found().
////////////////////////////////////////////////////////////////////
126
inline NodePath NodePath::get_common_ancestor(NodePath const &other, Thread *current_thread = ((get_current_thread()))) const;

2551 12 get_children 4 3749 22 NodePath::get_children 0 2 475 476 386
// Methods that return collections of NodePaths derived from or
// related to this one.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node.
////////////////////////////////////////////////////////////////////
99
NodePathCollection NodePath::get_children(Thread *current_thread = ((get_current_thread()))) const;

2552 16 get_num_children 4 3749 26 NodePath::get_num_children 0 2 477 478 280
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_children
//       Access: Published
//  Description: Returns the number of children of the referenced node.
////////////////////////////////////////////////////////////////////
95
inline int NodePath::get_num_children(Thread *current_thread = ((get_current_thread()))) const;

2553 9 get_child 4 3749 19 NodePath::get_child 0 2 479 480 305
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_child
//       Access: Published
//  Description: Returns a NodePath representing the nth child of the
//               referenced node.
////////////////////////////////////////////////////////////////////
100
inline NodePath NodePath::get_child(int n, Thread *current_thread = ((get_current_thread()))) const;

2554 20 get_stashed_children 4 3749 30 NodePath::get_stashed_children 0 2 481 482 474
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node that have been stashed.  These children are not
//               normally visible on the node, and do not appear in
//               the list returned by get_children().
////////////////////////////////////////////////////////////////////
107
NodePathCollection NodePath::get_stashed_children(Thread *current_thread = ((get_current_thread()))) const;

2555 21 count_num_descendants 4 3749 31 NodePath::count_num_descendants 0 1 483 283
////////////////////////////////////////////////////////////////////
//     Function: NodePath::count_num_descendants
//       Access: Published
//  Description: Returns the number of nodes at and below this level.
////////////////////////////////////////////////////////////////////
55
inline int NodePath::count_num_descendants(void) const;

2556 10 has_parent 4 3749 20 NodePath::has_parent 0 2 484 485 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_parent
//       Access: Published
//  Description: Returns true if the referenced node has a parent;
//               i.e. the NodePath chain contains at least two nodes.
////////////////////////////////////////////////////////////////////
90
inline bool NodePath::has_parent(Thread *current_thread = ((get_current_thread()))) const;

2557 10 get_parent 4 3749 20 NodePath::get_parent 0 2 486 487 448
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_parent
//       Access: Published
//  Description: Returns the NodePath to the parent of the referenced
//               node: that is, this NodePath, shortened by one node.
//               The parent of a singleton NodePath is defined to be
//               the empty NodePath.
////////////////////////////////////////////////////////////////////
94
inline NodePath NodePath::get_parent(Thread *current_thread = ((get_current_thread()))) const;

2558 8 get_sort 4 3749 18 NodePath::get_sort 0 2 488 489 513
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sort
//       Access: Published
//  Description: Returns the sort value of the referenced node within
//               its parent; that is, the sort number passed on the
//               last reparenting operation for this node.  This will
//               control the position of the node within its parent's
//               list of children.
////////////////////////////////////////////////////////////////////
80
int NodePath::get_sort(Thread *current_thread = ((get_current_thread()))) const;

2559 4 find 4 3749 14 NodePath::find 0 1 490 435
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find
//       Access: Published
//  Description: Searches for a node below the referenced node that
//               matches the indicated string.  Returns the shortest
//               match found, if any, or an empty NodePath if no match
//               can be found.
////////////////////////////////////////////////////////////////////
64
NodePath NodePath::find(basic_string< char > const &path) const;

2560 12 find_path_to 4 3749 22 NodePath::find_path_to 0 1 491 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_path_to
//       Access: Published
//  Description: Searches for the indicated node below this node and
//               returns the shortest NodePath that connects them.
////////////////////////////////////////////////////////////////////
55
NodePath NodePath::find_path_to(PandaNode *node) const;

2561 16 find_all_matches 4 3749 26 NodePath::find_all_matches 0 1 492 419
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with this NodePath and can be extended by
//               path.  The shortest paths will be listed
//               first.
////////////////////////////////////////////////////////////////////
86
NodePathCollection NodePath::find_all_matches(basic_string< char > const &path) const;

2562 17 find_all_paths_to 4 3749 27 NodePath::find_all_paths_to 0 1 493 394
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_paths_to
//       Access: Published
//  Description: Returns the set of all NodePaths that extend from
//               this NodePath down to the indicated node.  The
//               shortest paths will be listed first.
////////////////////////////////////////////////////////////////////
70
NodePathCollection NodePath::find_all_paths_to(PandaNode *node) const;

2563 11 reparent_to 4 3749 21 NodePath::reparent_to 0 3 494 495 496 1025
// Methods that actually move nodes around in the scene graph.  The
// optional "sort" parameter can be used to force a particular
// ordering between sibling nodes, useful when dealing with LOD's
// and similar switch nodes.  If the sort value is the same, nodes
// will be arranged in the order they were added.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::reparent_to
//       Access: Published
//  Description: Removes the referenced node of the NodePath from its
//               current parent and attaches it to the referenced node
//               of the indicated NodePath.  
//
//               If the destination NodePath is empty, this is the
//               same thing as detach_node().
//
//               If the referenced node is already a child of the
//               indicated NodePath (via some other instance), this
//               operation fails and leaves the NodePath detached.
////////////////////////////////////////////////////////////////////
117
void NodePath::reparent_to(NodePath const &other, int sort = (0), Thread *current_thread = ((get_current_thread())));

2564 8 stash_to 4 3749 18 NodePath::stash_to 0 3 497 498 499 441
////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash_to
//       Access: Published
//  Description: Similar to reparent_to(), but the node is added to
//               its new parent's stashed list, so that the result is
//               equivalent to calling reparent_to() immediately
//               followed by stash().
////////////////////////////////////////////////////////////////////
114
void NodePath::stash_to(NodePath const &other, int sort = (0), Thread *current_thread = ((get_current_thread())));

2565 15 wrt_reparent_to 4 3749 25 NodePath::wrt_reparent_to 0 3 500 501 502 514
////////////////////////////////////////////////////////////////////
//     Function: NodePath::wrt_reparent_to
//       Access: Published
//  Description: This functions identically to reparent_to(), except
//               the transform on this node is also adjusted so that
//               the node remains in the same place in world
//               coordinates, even if it is reparented into a
//               different coordinate system.
////////////////////////////////////////////////////////////////////
121
void NodePath::wrt_reparent_to(NodePath const &other, int sort = (0), Thread *current_thread = ((get_current_thread())));

2566 11 instance_to 4 3749 21 NodePath::instance_to 0 3 503 504 505 1455
////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_to
//       Access: Published
//  Description: Adds the referenced node of the NodePath as a child
//               of the referenced node of the indicated other
//               NodePath.  Any other parent-child relations of the
//               node are unchanged; in particular, the node is not
//               removed from its existing parent, if any.
//
//               If the node already had an existing parent, this
//               method will create a new instance of the node within
//               the scene graph.
//
//               This does not change the NodePath itself, but does
//               return a new NodePath that reflects the new instance
//               node.
//
//               If the destination NodePath is empty, this creates a
//               new instance which is not yet parented to any node.
//               A new instance of this sort cannot easily be
//               differentiated from other similar instances, but it
//               is nevertheless a different instance and it will
//               return a different get_id() value.
//
//               If the referenced node is already a child of the
//               indicated NodePath, returns that already-existing
//               instance, unstashing it first if necessary.
////////////////////////////////////////////////////////////////////
127
NodePath NodePath::instance_to(NodePath const &other, int sort = (0), Thread *current_thread = ((get_current_thread()))) const;

2567 19 instance_under_node 4 3749 29 NodePath::instance_under_node 0 3 506 507 508 516
////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_under_node
//       Access: Published
//  Description: Behaves like instance_to(), but implicitly creates a
//               new node to instance the geometry under, and returns a
//               NodePath to that new node.  This allows the
//               programmer to set a unique state and/or transform on
//               this instance.
////////////////////////////////////////////////////////////////////
169
NodePath NodePath::instance_under_node(NodePath const &other, basic_string< char > const &name, int sort = (0), Thread *current_thread = ((get_current_thread()))) const;

2568 7 copy_to 4 3749 17 NodePath::copy_to 0 3 509 510 511 489
////////////////////////////////////////////////////////////////////
//     Function: NodePath::copy_to
//       Access: Published
//  Description: Functions like instance_to(), except a deep
//               copy is made of the referenced node and all of its
//               descendents, which is then parented to the indicated
//               node.  A NodePath to the newly created copy is
//               returned.
////////////////////////////////////////////////////////////////////
123
NodePath NodePath::copy_to(NodePath const &other, int sort = (0), Thread *current_thread = ((get_current_thread()))) const;

2569 15 attach_new_node 4 3749 25 NodePath::attach_new_node 0 6 512 513 514 515 516 517 1179
////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Creates an ordinary PandaNode and attaches it below
//               the current NodePath, returning a new NodePath that
//               references it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Attaches a new node, with or without existing
//               parents, to the scene graph below the referenced node
//               of this NodePath.  This is the preferred way to add
//               nodes to the graph.
//
//               If the node was already a child of the parent, this
//               returns a NodePath to the existing child.
//
//               This does *not* automatically extend the current
//               NodePath to reflect the attachment; however, a
//               NodePath that does reflect this extension is
//               returned.
////////////////////////////////////////////////////////////////////
275
NodePath NodePath::attach_new_node(PandaNode *node, int sort = (0), Thread *current_thread = ((get_current_thread()))) const;
inline NodePath NodePath::attach_new_node(basic_string< char > const &name, int sort = (0), Thread *current_thread = ((get_current_thread()))) const;

2570 11 remove_node 4 3749 21 NodePath::remove_node 0 2 518 519 1171
////////////////////////////////////////////////////////////////////
//     Function: NodePath::remove_node
//       Access: Published
//  Description: Disconnects the referenced node from the scene graph.
//               This will also delete the node if there are no other
//               pointers to it.
//
//               Normally, this should be called only when you are
//               really done with the node.  If you want to remove a
//               node from the scene graph but keep it around for
//               later, you should probably use detach_node() instead.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
////////////////////////////////////////////////////////////////////
78
void NodePath::remove_node(Thread *current_thread = ((get_current_thread())));

2571 11 detach_node 4 3749 21 NodePath::detach_node 0 2 520 521 1153
////////////////////////////////////////////////////////////////////
//     Function: NodePath::detach_node
//       Access: Published
//  Description: Disconnects the referenced node from its parent, but
//               does not immediately delete it.  The NodePath retains
//               a pointer to the node, and becomes a singleton
//               NodePath.
//
//               This should be called to detach a node from the scene
//               graph, with the option of reattaching it later to the
//               same parent or to a different parent.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
////////////////////////////////////////////////////////////////////
78
void NodePath::detach_node(Thread *current_thread = ((get_current_thread())));

2572 6 output 4 3749 16 NodePath::output 0 1 522 389
// Handy ways to look at what's there, and other miscellaneous
// operations.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::output
//       Access: Published
//  Description: Writes a sensible description of the NodePath to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
42
void NodePath::output(ostream &out) const;

2573 2 ls 4 3749 12 NodePath::ls 0 3 523 524 525 532
////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
////////////////////////////////////////////////////////////////////
107
inline void NodePath::ls(void) const;
inline void NodePath::ls(ostream &out, int indent_level = (0)) const;

2574 10 reverse_ls 4 3749 20 NodePath::reverse_ls 0 3 526 527 528 548
////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
////////////////////////////////////////////////////////////////////
122
inline void NodePath::reverse_ls(void) const;
inline int NodePath::reverse_ls(ostream &out, int indent_level = (0)) const;

2575 9 get_state 4 3749 19 NodePath::get_state 0 4 529 530 531 532 703
// Aggregate transform and state information.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the complete state object set on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the state changes that must be made to
//               transition to the render state of this node from the
//               render state of the other node.
////////////////////////////////////////////////////////////////////
227
RenderState const *NodePath::get_state(Thread *current_thread = ((get_current_thread()))) const;
ConstPointerTo< RenderState > NodePath::get_state(NodePath const &other, Thread *current_thread = ((get_current_thread()))) const;

2576 9 set_state 4 3749 19 NodePath::set_state 0 4 533 534 535 536 748
// Aggregate transform and state information.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Changes the complete state object on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Sets the state object on this node, relative to
//               the other node.  This computes a new state object
//               that will have the indicated value when seen from the
//               other node.
////////////////////////////////////////////////////////////////////
235
inline void NodePath::set_state(RenderState const *state, Thread *current_thread = ((get_current_thread())));
void NodePath::set_state(NodePath const &other, RenderState const *state, Thread *current_thread = ((get_current_thread())));

2577 13 get_net_state 4 3749 23 NodePath::get_net_state 0 2 537 538 272
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_state
//       Access: Published
//  Description: Returns the net state on this node from the root.
////////////////////////////////////////////////////////////////////
118
inline ConstPointerTo< RenderState > NodePath::get_net_state(Thread *current_thread = ((get_current_thread()))) const;

2578 10 set_attrib 4 3749 20 NodePath::set_attrib 0 2 539 540 474
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
81
inline void NodePath::set_attrib(RenderAttrib const *attrib, int priority = (0));

2579 10 get_attrib 4 3749 20 NodePath::get_attrib 0 1 541 537
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
////////////////////////////////////////////////////////////////////
71
inline RenderAttrib const *NodePath::get_attrib(TypeHandle type) const;

2580 10 has_attrib 4 3749 20 NodePath::has_attrib 0 1 542 367
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
56
inline bool NodePath::has_attrib(TypeHandle type) const;

2581 12 clear_attrib 4 3749 22 NodePath::clear_attrib 0 1 543 450
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
////////////////////////////////////////////////////////////////////
52
inline void NodePath::clear_attrib(TypeHandle type);

2582 10 set_effect 4 3749 20 NodePath::set_effect 0 1 544 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
////////////////////////////////////////////////////////////////////
61
inline void NodePath::set_effect(RenderEffect const *effect);

2583 10 get_effect 4 3749 20 NodePath::get_effect 0 1 545 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
////////////////////////////////////////////////////////////////////
71
inline RenderEffect const *NodePath::get_effect(TypeHandle type) const;

2584 10 has_effect 4 3749 20 NodePath::has_effect 0 1 546 364
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
////////////////////////////////////////////////////////////////////
56
inline bool NodePath::has_effect(TypeHandle type) const;

2585 12 clear_effect 4 3749 22 NodePath::clear_effect 0 1 547 298
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
////////////////////////////////////////////////////////////////////
52
inline void NodePath::clear_effect(TypeHandle type);

2586 11 set_effects 4 3749 21 NodePath::set_effects 0 1 548 432
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
////////////////////////////////////////////////////////////////////
64
inline void NodePath::set_effects(RenderEffects const *effects);

2587 11 get_effects 4 3749 21 NodePath::get_effects 0 1 549 307
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
////////////////////////////////////////////////////////////////////
62
inline RenderEffects const *NodePath::get_effects(void) const;

2588 13 clear_effects 4 3749 23 NodePath::clear_effects 0 1 550 266
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
////////////////////////////////////////////////////////////////////
42
inline void NodePath::clear_effects(void);

2589 13 get_transform 4 3749 23 NodePath::get_transform 0 4 551 552 553 554 667
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the complete transform object set on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the relative transform to this node from the
//               other node; i.e. the transformation of this node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
241
TransformState const *NodePath::get_transform(Thread *current_thread = ((get_current_thread()))) const;
ConstPointerTo< TransformState > NodePath::get_transform(NodePath const &other, Thread *current_thread = ((get_current_thread()))) const;

2590 15 clear_transform 4 3749 25 NodePath::clear_transform 0 4 555 556 557 558 691
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity,
//               relative to the other node.  This effectively places
//               this node at the same position as the other node.
////////////////////////////////////////////////////////////////////
202
inline void NodePath::clear_transform(Thread *current_thread = ((get_current_thread())));
inline void NodePath::clear_transform(NodePath const &other, Thread *current_thread = ((get_current_thread())));

2591 13 set_transform 4 3749 23 NodePath::set_transform 0 4 559 560 561 562 721
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Changes the complete transform object on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Sets the transform object on this node, relative to
//               the other node.  This computes a new transform object
//               that will have the indicated value when seen from the
//               other node.
////////////////////////////////////////////////////////////////////
257
inline void NodePath::set_transform(TransformState const *transform, Thread *current_thread = ((get_current_thread())));
void NodePath::set_transform(NodePath const &other, TransformState const *transform, Thread *current_thread = ((get_current_thread())));

2592 17 get_net_transform 4 3749 27 NodePath::get_net_transform 0 2 563 564 280
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_transform
//       Access: Published
//  Description: Returns the net transform on this node from the root.
////////////////////////////////////////////////////////////////////
125
inline ConstPointerTo< TransformState > NodePath::get_net_transform(Thread *current_thread = ((get_current_thread()))) const;

2593 18 get_prev_transform 4 3749 28 NodePath::get_prev_transform 0 4 565 566 567 568 823
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the relative "previous" transform to this
//               node from the other node; i.e. the position of this
//               node in the previous frame, as seen by the other node
//               in the previous frame.
////////////////////////////////////////////////////////////////////
251
TransformState const *NodePath::get_prev_transform(Thread *current_thread = ((get_current_thread()))) const;
ConstPointerTo< TransformState > NodePath::get_prev_transform(NodePath const &other, Thread *current_thread = ((get_current_thread()))) const;

2594 18 set_prev_transform 4 3749 28 NodePath::set_prev_transform 0 4 569 570 571 572 898
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the "previous" transform object on this node,
//               relative to the other node.  This computes a new
//               transform object that will have the indicated value
//               when seen from the other node.
////////////////////////////////////////////////////////////////////
267
inline void NodePath::set_prev_transform(TransformState const *transform, Thread *current_thread = ((get_current_thread())));
void NodePath::set_prev_transform(NodePath const &other, TransformState const *transform, Thread *current_thread = ((get_current_thread())));

2595 22 get_net_prev_transform 4 3749 32 NodePath::get_net_prev_transform 0 2 573 574 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_prev_transform
//       Access: Published
//  Description: Returns the net "previous" transform on this node
//               from the root.  See set_prev_transform().
////////////////////////////////////////////////////////////////////
130
inline ConstPointerTo< TransformState > NodePath::get_net_prev_transform(Thread *current_thread = ((get_current_thread()))) const;

2596 7 set_pos 4 3749 17 NodePath::set_pos 0 4 575 576 577 578 2052
// Methods that get and set the matrix transform: pos, hpr, scale,
// in the local coordinate system.

// Methods that get and set the matrix transforms relative to some
// other node in the scene graph.  These perform an implicit wrt().

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
//     See Also: NodePath::set_fluid_pos
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
255
inline void NodePath::set_pos(float x, float y, float z);
void NodePath::set_pos(LVecBase3f const &pos);
inline void NodePath::set_pos(NodePath const &other, float x, float y, float z);
void NodePath::set_pos(NodePath const &other, LVecBase3f const &pos);

2597 5 set_x 4 3749 15 NodePath::set_x 0 2 579 580 0
84
void NodePath::set_x(float x);
void NodePath::set_x(NodePath const &other, float x);

2598 5 set_y 4 3749 15 NodePath::set_y 0 2 581 582 0
84
void NodePath::set_y(float y);
void NodePath::set_y(NodePath const &other, float y);

2599 5 set_z 4 3749 15 NodePath::set_z 0 2 583 584 0
84
void NodePath::set_z(float z);
void NodePath::set_z(NodePath const &other, float z);

2600 13 set_fluid_pos 4 3749 23 NodePath::set_fluid_pos 0 4 585 586 587 588 1737
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
//     See Also: NodePath::set_pos
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
279
inline void NodePath::set_fluid_pos(float x, float y, float z);
void NodePath::set_fluid_pos(LVecBase3f const &pos);
inline void NodePath::set_fluid_pos(NodePath const &other, float x, float y, float z);
void NodePath::set_fluid_pos(NodePath const &other, LVecBase3f const &pos);

2601 11 set_fluid_x 4 3749 21 NodePath::set_fluid_x 0 2 589 590 0
96
void NodePath::set_fluid_x(float x);
void NodePath::set_fluid_x(NodePath const &other, float x);

2602 11 set_fluid_y 4 3749 21 NodePath::set_fluid_y 0 2 591 592 0
96
void NodePath::set_fluid_y(float y);
void NodePath::set_fluid_y(NodePath const &other, float y);

2603 11 set_fluid_z 4 3749 21 NodePath::set_fluid_z 0 2 593 594 0
96
void NodePath::set_fluid_z(float z);
void NodePath::set_fluid_z(NodePath const &other, float z);

2604 7 get_pos 4 3749 17 NodePath::get_pos 0 2 595 596 587
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Retrieves the translation component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Returns the relative position of the referenced node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
96
LPoint3f NodePath::get_pos(void) const;
LPoint3f NodePath::get_pos(NodePath const &other) const;

2605 5 get_x 4 3749 15 NodePath::get_x 0 2 597 598 0
100
inline float NodePath::get_x(void) const;
inline float NodePath::get_x(NodePath const &other) const;

2606 5 get_y 4 3749 15 NodePath::get_y 0 2 599 600 0
100
inline float NodePath::get_y(void) const;
inline float NodePath::get_y(NodePath const &other) const;

2607 5 get_z 4 3749 15 NodePath::get_z 0 2 601 602 0
100
inline float NodePath::get_z(void) const;
inline float NodePath::get_z(NodePath const &other) const;

2608 13 get_pos_delta 4 3749 23 NodePath::get_pos_delta 0 2 603 604 1701
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame, as seen in the indicated node's coordinate
//               space.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
////////////////////////////////////////////////////////////////////
110
LVector3f NodePath::get_pos_delta(void) const;
LVector3f NodePath::get_pos_delta(NodePath const &other) const;

2609 7 set_hpr 4 3749 17 NodePath::set_hpr 0 4 605 606 607 608 1260
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
255
inline void NodePath::set_hpr(float h, float p, float r);
void NodePath::set_hpr(LVecBase3f const &hpr);
inline void NodePath::set_hpr(NodePath const &other, float h, float p, float r);
void NodePath::set_hpr(NodePath const &other, LVecBase3f const &hpr);

2610 5 set_h 4 3749 15 NodePath::set_h 0 2 609 610 0
84
void NodePath::set_h(float h);
void NodePath::set_h(NodePath const &other, float h);

2611 5 set_p 4 3749 15 NodePath::set_p 0 2 611 612 0
84
void NodePath::set_p(float p);
void NodePath::set_p(NodePath const &other, float p);

2612 5 set_r 4 3749 15 NodePath::set_r 0 2 613 614 0
84
void NodePath::set_r(float r);
void NodePath::set_r(NodePath const &other, float r);

2613 7 get_hpr 4 3749 17 NodePath::get_hpr 0 2 615 616 583
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
100
LVecBase3f NodePath::get_hpr(void) const;
LVecBase3f NodePath::get_hpr(NodePath const &other) const;

2614 5 get_h 4 3749 15 NodePath::get_h 0 2 617 618 0
100
inline float NodePath::get_h(void) const;
inline float NodePath::get_h(NodePath const &other) const;

2615 5 get_p 4 3749 15 NodePath::get_p 0 2 619 620 0
100
inline float NodePath::get_p(void) const;
inline float NodePath::get_p(NodePath const &other) const;

2616 5 get_r 4 3749 15 NodePath::get_r 0 2 621 622 0
100
inline float NodePath::get_r(void) const;
inline float NodePath::get_r(NodePath const &other) const;

2617 8 set_quat 4 3749 18 NodePath::set_quat 0 2 623 624 631
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
124
void NodePath::set_quat(LQuaternionf const &quat);
void NodePath::set_quat(NodePath const &other, LQuaternionf const &quat);

2618 8 get_quat 4 3749 18 NodePath::get_quat 0 2 625 626 585
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
106
LQuaternionf NodePath::get_quat(void) const;
LQuaternionf NodePath::get_quat(NodePath const &other) const;

2619 9 set_scale 4 3749 19 NodePath::set_scale 0 6 627 628 629 630 631 632 1570
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
388
inline void NodePath::set_scale(float scale);
inline void NodePath::set_scale(float sx, float sy, float sz);
void NodePath::set_scale(LVecBase3f const &scale);
inline void NodePath::set_scale(NodePath const &other, float scale);
inline void NodePath::set_scale(NodePath const &other, float sx, float sy, float sz);
void NodePath::set_scale(NodePath const &other, LVecBase3f const &scale);

2620 6 set_sx 4 3749 16 NodePath::set_sx 0 2 633 634 0
88
void NodePath::set_sx(float sx);
void NodePath::set_sx(NodePath const &other, float sx);

2621 6 set_sy 4 3749 16 NodePath::set_sy 0 2 635 636 0
88
void NodePath::set_sy(float sy);
void NodePath::set_sy(NodePath const &other, float sy);

2622 6 set_sz 4 3749 16 NodePath::set_sz 0 2 637 638 0
88
void NodePath::set_sz(float sz);
void NodePath::set_sz(NodePath const &other, float sz);

2623 9 get_scale 4 3749 19 NodePath::get_scale 0 2 639 640 578
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Retrieves the scale component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
104
LVecBase3f NodePath::get_scale(void) const;
LVecBase3f NodePath::get_scale(NodePath const &other) const;

2624 6 get_sx 4 3749 16 NodePath::get_sx 0 2 641 642 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the referenced node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
102
inline float NodePath::get_sx(void) const;
inline float NodePath::get_sx(NodePath const &other) const;

2625 6 get_sy 4 3749 16 NodePath::get_sy 0 2 643 644 0
102
inline float NodePath::get_sy(void) const;
inline float NodePath::get_sy(NodePath const &other) const;

2626 6 get_sz 4 3749 16 NodePath::get_sz 0 2 645 646 0
102
inline float NodePath::get_sz(void) const;
inline float NodePath::get_sz(NodePath const &other) const;

2627 9 set_shear 4 3749 19 NodePath::set_shear 0 4 647 648 649 650 1270
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation, rotation, and scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
285
inline void NodePath::set_shear(float shxy, float shxz, float shyz);
void NodePath::set_shear(LVecBase3f const &shear);
inline void NodePath::set_shear(NodePath const &other, float shxy, float shxz, float shyz);
void NodePath::set_shear(NodePath const &other, LVecBase3f const &shear);

2628 8 set_shxy 4 3749 18 NodePath::set_shxy 0 2 651 652 0
96
void NodePath::set_shxy(float shxy);
void NodePath::set_shxy(NodePath const &other, float shxy);

2629 8 set_shxz 4 3749 18 NodePath::set_shxz 0 2 653 654 0
96
void NodePath::set_shxz(float shxz);
void NodePath::set_shxz(NodePath const &other, float shxz);

2630 8 set_shyz 4 3749 18 NodePath::set_shyz 0 2 655 656 0
96
void NodePath::set_shyz(float shyz);
void NodePath::set_shyz(NodePath const &other, float shyz);

2631 9 get_shear 4 3749 19 NodePath::get_shear 0 2 657 658 578
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Retrieves the shear component of the transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the bottom node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
104
LVecBase3f NodePath::get_shear(void) const;
LVecBase3f NodePath::get_shear(NodePath const &other) const;

2632 8 get_shxy 4 3749 18 NodePath::get_shxy 0 2 659 660 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the referenced node
//               as seen from the other node.
////////////////////////////////////////////////////////////////////
106
inline float NodePath::get_shxy(void) const;
inline float NodePath::get_shxy(NodePath const &other) const;

2633 8 get_shxz 4 3749 18 NodePath::get_shxz 0 2 661 662 0
106
inline float NodePath::get_shxz(void) const;
inline float NodePath::get_shxz(NodePath const &other) const;

2634 8 get_shyz 4 3749 18 NodePath::get_shyz 0 2 663 664 0
106
inline float NodePath::get_shyz(void) const;
inline float NodePath::get_shyz(NodePath const &other) const;

2635 11 set_pos_hpr 4 3749 21 NodePath::set_pos_hpr 0 4 665 666 667 668 1308
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
////////////////////////////////////////////////////////////////////
371
inline void NodePath::set_pos_hpr(float x, float y, float z, float h, float p, float r);
void NodePath::set_pos_hpr(LVecBase3f const &pos, LVecBase3f const &hpr);
inline void NodePath::set_pos_hpr(NodePath const &other, float x, float y, float z, float h, float p, float r);
void NodePath::set_pos_hpr(NodePath const &other, LVecBase3f const &pos, LVecBase3f const &hpr);

2636 12 set_pos_quat 4 3749 22 NodePath::set_pos_quat 0 2 669 670 655
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
////////////////////////////////////////////////////////////////////
178
void NodePath::set_pos_quat(LVecBase3f const &pos, LQuaternionf const &quat);
void NodePath::set_pos_quat(NodePath const &other, LVecBase3f const &pos, LQuaternionf const &quat);

2637 13 set_hpr_scale 4 3749 23 NodePath::set_hpr_scale 0 4 671 672 673 674 1612
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
////////////////////////////////////////////////////////////////////
389
inline void NodePath::set_hpr_scale(float h, float p, float r, float sx, float sy, float sz);
void NodePath::set_hpr_scale(LVecBase3f const &hpr, LVecBase3f const &scale);
inline void NodePath::set_hpr_scale(NodePath const &other, float h, float p, float r, float sx, float sy, float sz);
void NodePath::set_hpr_scale(NodePath const &other, LVecBase3f const &hpr, LVecBase3f const &scale);

2638 14 set_quat_scale 4 3749 24 NodePath::set_quat_scale 0 2 675 676 809
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_quat_scale, is the preferred way to update a
//               transform when both quat and scale are to be changed.
////////////////////////////////////////////////////////////////////
186
void NodePath::set_quat_scale(LQuaternionf const &quat, LVecBase3f const &scale);
void NodePath::set_quat_scale(NodePath const &other, LQuaternionf const &quat, LVecBase3f const &scale);

2639 17 set_pos_hpr_scale 4 3749 27 NodePath::set_pos_hpr_scale 0 4 677 678 679 680 1452
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////
505
inline void NodePath::set_pos_hpr_scale(float x, float y, float z, float h, float p, float r, float sx, float sy, float sz);
void NodePath::set_pos_hpr_scale(LVecBase3f const &pos, LVecBase3f const &hpr, LVecBase3f const &scale);
inline void NodePath::set_pos_hpr_scale(NodePath const &other, float x, float y, float z, float h, float p, float r, float sx, float sy, float sz);
void NodePath::set_pos_hpr_scale(NodePath const &other, LVecBase3f const &pos, LVecBase3f const &hpr, LVecBase3f const &scale);

2640 18 set_pos_quat_scale 4 3749 28 NodePath::set_pos_quat_scale 0 2 681 682 743
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
////////////////////////////////////////////////////////////////////
240
void NodePath::set_pos_quat_scale(LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale);
void NodePath::set_pos_quat_scale(NodePath const &other, LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale);

2641 23 set_pos_hpr_scale_shear 4 3749 33 NodePath::set_pos_hpr_scale_shear 0 2 683 684 735
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
294
void NodePath::set_pos_hpr_scale_shear(LVecBase3f const &pos, LVecBase3f const &hpr, LVecBase3f const &scale, LVecBase3f const &shear);
void NodePath::set_pos_hpr_scale_shear(NodePath const &other, LVecBase3f const &pos, LVecBase3f const &hpr, LVecBase3f const &scale, LVecBase3f const &shear);

2642 24 set_pos_quat_scale_shear 4 3749 34 NodePath::set_pos_quat_scale_shear 0 2 685 686 737
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
////////////////////////////////////////////////////////////////////
302
void NodePath::set_pos_quat_scale_shear(LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale, LVecBase3f const &shear);
void NodePath::set_pos_quat_scale_shear(NodePath const &other, LVecBase3f const &pos, LQuaternionf const &quat, LVecBase3f const &scale, LVecBase3f const &shear);

2643 7 set_mat 4 3749 17 NodePath::set_mat 0 2 687 688 640
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Directly sets an arbitrary 4x4 transform matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Converts the indicated matrix from the other's
//               coordinate space to the local coordinate space, and
//               applies it to the node.
////////////////////////////////////////////////////////////////////
114
void NodePath::set_mat(LMatrix4f const &mat);
void NodePath::set_mat(NodePath const &other, LMatrix4f const &mat);

2644 9 clear_mat 4 3749 19 NodePath::clear_mat 0 1 689 294
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_mat
//       Access: Published
//  Description: Completely removes any transform from the referenced
//               node.
////////////////////////////////////////////////////////////////////
38
inline void NodePath::clear_mat(void);

2645 7 has_mat 4 3749 17 NodePath::has_mat 0 1 690 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_mat
//       Access: Published
//  Description: Returns true if a non-identity transform matrix has
//               been applied to the referenced node, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool NodePath::has_mat(void) const;

2646 7 get_mat 4 3749 17 NodePath::get_mat 0 2 691 692 767
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the transform matrix that has been applied to
//               the referenced node, or the identity matrix if no
//               matrix has been applied.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the coordinate
//               space of the bottom node, relative to the other
//               path's bottom node's coordinate space.
////////////////////////////////////////////////////////////////////
112
inline LMatrix4f const &NodePath::get_mat(void) const;
LMatrix4f NodePath::get_mat(NodePath const &other) const;

2647 7 look_at 4 3749 17 NodePath::look_at 0 7 693 694 695 696 697 698 699 1555
////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space.  This
//               will overwrite any previously existing scale on the
//               node, although it will preserve any translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it rotates to
//               face the indicated point in space, which is relative
//               to the other NodePath.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it
//               rotates to face the indicated point in space.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space, which
//               is relative to the other NodePath.
////////////////////////////////////////////////////////////////////
342
inline void NodePath::look_at(float x, float y, float z);
void NodePath::look_at(LPoint3f const &point, LVector3f const &up = ((up())));
inline void NodePath::look_at(NodePath const &other, float x, float y, float z);
void NodePath::look_at(NodePath const &other, LPoint3f const &point = ((Vertexf(0, 0, 0))), LVector3f const &up = ((up())));

2648 8 heads_up 4 3749 18 NodePath::heads_up 0 7 700 701 702 703 704 705 706 1490
////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
////////////////////////////////////////////////////////////////////
346
inline void NodePath::heads_up(float x, float y, float z);
void NodePath::heads_up(LPoint3f const &point, LVector3f const &up = ((up())));
inline void NodePath::heads_up(NodePath const &other, float x, float y, float z);
void NodePath::heads_up(NodePath const &other, LPoint3f const &point = ((Vertexf(0, 0, 0))), LVector3f const &up = ((up())));

2649 18 get_relative_point 4 3749 28 NodePath::get_relative_point 0 1 707 396
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_point
//       Access: Published
//  Description: Given that the indicated point is in the coordinate
//               system of the other node, returns the same point in
//               this node's coordinate system.
////////////////////////////////////////////////////////////////////
92
LPoint3f NodePath::get_relative_point(NodePath const &other, LVecBase3f const &point) const;

2650 19 get_relative_vector 4 3749 29 NodePath::get_relative_vector 0 1 708 399
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_vector
//       Access: Published
//  Description: Given that the indicated vector is in the coordinate
//               system of the other node, returns the same vector in
//               this node's coordinate system.
////////////////////////////////////////////////////////////////////
92
LVector3f NodePath::get_relative_vector(NodePath const &other, LVecBase3f const &vec) const;

2651 12 get_distance 4 3749 22 NodePath::get_distance 0 1 709 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_distance
//       Access: Published
//  Description: Returns the straight-line distance between this
//               referenced node's coordinate frame's origin, and that
//               of the other node's origin.
////////////////////////////////////////////////////////////////////
65
inline float NodePath::get_distance(NodePath const &other) const;

2652 9 set_color 4 3749 19 NodePath::set_color 0 5 710 711 712 713 714 1005
// Methods that affect appearance of geometry: color, texture, etc.
// These affect the state at the bottom level only.

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
////////////////////////////////////////////////////////////////////
158
void NodePath::set_color(float r, float g, float b, float a = (1), int priority = (0));
void NodePath::set_color(LVecBase4f const &color, int priority = (0));

2653 13 set_color_off 4 3749 23 NodePath::set_color_off 0 2 715 716 565
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the geometry color.  This is normally the
//               default, but it may be useful to use this to
//               contradict set_color() at a higher node level (or,
//               with a priority, to override a set_color() at a lower
//               level).
////////////////////////////////////////////////////////////////////
49
void NodePath::set_color_off(int priority = (0));

2654 11 clear_color 4 3749 21 NodePath::clear_color 0 1 717 463
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color
//       Access: Published
//  Description: Completely removes any color adjustment from the node.
//               This allows the natural color of the geometry, or
//               whatever color transitions might be otherwise
//               affecting the geometry, to show instead.
////////////////////////////////////////////////////////////////////
33
void NodePath::clear_color(void);

2655 9 has_color 4 3749 19 NodePath::has_color 0 1 718 312
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color
//       Access: Published
//  Description: Returns true if a color has been applied to the given
//               node, false otherwise.
////////////////////////////////////////////////////////////////////
37
bool NodePath::has_color(void) const;

2656 9 get_color 4 3749 19 NodePath::get_color 0 1 719 329
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color
//       Access: Published
//  Description: Returns the color that has been assigned to the node,
//               or black if no color has been assigned.
////////////////////////////////////////////////////////////////////
43
LVecBase4f NodePath::get_color(void) const;

2657 15 has_color_scale 4 3749 25 NodePath::has_color_scale 0 1 720 453
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color_scale
//       Access: Published
//  Description: Returns true if a color scale has been applied
//               to the referenced node, false otherwise.  It is still
//               possible that color at this node might have been
//               scaled by an ancestor node.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_color_scale(void) const;

2658 17 clear_color_scale 4 3749 27 NodePath::clear_color_scale 0 1 721 499
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color_scale
//       Access: Published
//  Description: Completely removes any color scale from the
//               referenced node.  This is preferable to simply
//               setting the color scale to identity, as it also
//               removes the overhead associated with having a color
//               scale at all.
////////////////////////////////////////////////////////////////////
39
void NodePath::clear_color_scale(void);

2659 15 set_color_scale 4 3749 25 NodePath::set_color_scale 0 4 722 723 724 725 608
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform,
//               leaving translation and rotation untouched.
////////////////////////////////////////////////////////////////////
175
void NodePath::set_color_scale(LVecBase4f const &scale, int priority = (0));
inline void NodePath::set_color_scale(float sx, float sy, float sz, float sa, int priority = (0));

2660 19 compose_color_scale 4 3749 29 NodePath::compose_color_scale 0 4 726 727 728 729 666
////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: multiplies the color scale component of the transform,
//               with previous color scale leaving translation and 
//               rotation untouched.
////////////////////////////////////////////////////////////////////
183
void NodePath::compose_color_scale(LVecBase4f const &scale, int priority = (0));
inline void NodePath::compose_color_scale(float sx, float sy, float sz, float sa, int priority = (0));

2661 19 set_color_scale_off 4 3749 29 NodePath::set_color_scale_off 0 2 730 731 900
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale_off
//       Access: Published
//  Description: Disables any color scale attribute inherited from
//               above.  This is not the same thing as
//               clear_color_scale(), which undoes any previous
//               set_color_scale() operation on this node; rather,
//               this actively disables any set_color_scale() that
//               might be inherited from a parent node.  This also
//               disables set_alpha_scale() at the same time.
//
//               It is legal to specify a new color scale on the same
//               node with a subsequent call to set_color_scale() or
//               set_alpha_scale(); this new scale will apply to lower
//               geometry.
////////////////////////////////////////////////////////////////////
55
void NodePath::set_color_scale_off(int priority = (0));

2662 15 set_alpha_scale 4 3749 25 NodePath::set_alpha_scale 0 2 732 733 435
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_alpha_scale
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//               without (much) affecting the color scale.  Note that
//               any priority specified will also apply to the color
//               scale.
////////////////////////////////////////////////////////////////////
64
void NodePath::set_alpha_scale(float scale, int priority = (0));

2663 19 set_all_color_scale 4 3749 29 NodePath::set_all_color_scale 0 2 734 735 469
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_all_color_scale
//       Access: Published
//  Description: Scales all the color components of the object by the
//               same amount, darkening the object, without (much)
//               affecting alpha.  Note that any priority specified
//               will also apply to the alpha scale.
////////////////////////////////////////////////////////////////////
68
void NodePath::set_all_color_scale(float scale, int priority = (0));

2664 6 set_sr 4 3749 16 NodePath::set_sr 0 1 736 261
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sr
//       Access: Published
//  Description: Sets the red scale component of the transform
////////////////////////////////////////////////////////////////////
39
inline void NodePath::set_sr(float sr);

2665 6 set_sg 4 3749 16 NodePath::set_sg 0 1 737 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sg
//       Access: Published
//  Description: Sets the alpha scale component of the transform
////////////////////////////////////////////////////////////////////
39
inline void NodePath::set_sg(float sg);

2666 6 set_sb 4 3749 16 NodePath::set_sb 0 1 738 262
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sb
//       Access: Published
//  Description: Sets the blue scale component of the transform
////////////////////////////////////////////////////////////////////
39
inline void NodePath::set_sb(float sb);

2667 6 set_sa 4 3749 16 NodePath::set_sa 0 1 739 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sa
//       Access: Published
//  Description: Sets the alpha scale component of the transform
////////////////////////////////////////////////////////////////////
39
inline void NodePath::set_sa(float sa);

2668 15 get_color_scale 4 3749 25 NodePath::get_color_scale 0 1 740 510
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color_scale
//       Access: Published
//  Description: Returns the complete color scale vector that has been
//               applied to this node via a previous call to
//               set_color_scale() and/or set_alpha_scale(), or all
//               1's (identity) if no scale has been applied to this
//               particular node.
////////////////////////////////////////////////////////////////////
56
LVecBase4f const &NodePath::get_color_scale(void) const;

2669 6 get_sr 4 3749 16 NodePath::get_sr 0 1 741 261
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sr
//       Access: Published
//  Description: Gets the red scale component of the transform
////////////////////////////////////////////////////////////////////
42
inline float NodePath::get_sr(void) const;

2670 6 get_sg 4 3749 16 NodePath::get_sg 0 1 742 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sg
//       Access: Published
//  Description: Gets the green scale component of the transform
////////////////////////////////////////////////////////////////////
42
inline float NodePath::get_sg(void) const;

2671 6 get_sb 4 3749 16 NodePath::get_sb 0 1 743 262
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sb
//       Access: Published
//  Description: Gets the blue scale component of the transform
////////////////////////////////////////////////////////////////////
42
inline float NodePath::get_sb(void) const;

2672 6 get_sa 4 3749 16 NodePath::get_sa 0 1 744 263
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sa
//       Access: Published
//  Description: Gets the alpha scale component of the transform
////////////////////////////////////////////////////////////////////
42
inline float NodePath::get_sa(void) const;

2673 9 set_light 4 3749 19 NodePath::set_light 0 2 745 746 593
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light
//       Access: Published
//  Description: Adds the indicated Light or PolylightNode to the list
//               of lights that illuminate geometry at this node and
//               below.  The light itself should be parented into the
//               scene graph elsewhere, to represent the light's
//               position in space; but until set_light() is called it
//               will illuminate no geometry.
////////////////////////////////////////////////////////////////////
68
void NodePath::set_light(NodePath const &light, int priority = (0));

2674 13 set_light_off 4 3749 23 NodePath::set_light_off 0 4 747 748 749 750 1449
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no lights at all.  This is different
//               from not specifying a light; rather, this
//               specifically contradicts set_light() at a higher
//               node level (or, with a priority, overrides a
//               set_light() at a lower level).
//
//               If no lights are in effect on a particular piece of
//               geometry, that geometry is rendered with lighting
//               disabled.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without using the indicated Light.  This is different
//               from not specifying the Light; rather, this
//               specifically contradicts set_light() at a higher node
//               level (or, with a priority, overrides a set_light()
//               at a lower level).
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
////////////////////////////////////////////////////////////////////
122
void NodePath::set_light_off(int priority = (0));
void NodePath::set_light_off(NodePath const &light, int priority = (0));

2675 11 clear_light 4 3749 21 NodePath::clear_light 0 2 751 752 702
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Completely removes any lighting operations that may
//               have been set via set_light() or set_light_off()
//               from this particular node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Removes any reference to the indicated Light or
//               PolylightNode from the NodePath.
////////////////////////////////////////////////////////////////////
84
void NodePath::clear_light(void);
void NodePath::clear_light(NodePath const &light);

2676 9 has_light 4 3749 19 NodePath::has_light 0 1 753 460
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light
//       Access: Published
//  Description: Returns true if the indicated Light or PolylightNode
//               has been specifically enabled on this particular
//               node.  This means that someone called set_light() on
//               this node with the indicated light.
////////////////////////////////////////////////////////////////////
54
bool NodePath::has_light(NodePath const &light) const;

2677 13 has_light_off 4 3749 23 NodePath::has_light_off 0 2 754 755 1022
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if all Lights have been specifically
//               disabled on this particular node.  This means that
//               someone called set_light_off() on this node with no
//               parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if the indicated Light has been
//               specifically disabled on this particular node.  This
//               means that someone called set_light_off() on this
//               node with the indicated light.
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
////////////////////////////////////////////////////////////////////
100
bool NodePath::has_light_off(void) const;
bool NodePath::has_light_off(NodePath const &light) const;

2678 14 set_clip_plane 4 3749 24 NodePath::set_clip_plane 0 2 756 757 609
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane
//       Access: Published
//  Description: Adds the indicated clipping plane to the list of
//               planes that apply to geometry at this node and below.
//               The clipping plane itself, a PlaneNode, should be
//               parented into the scene graph elsewhere, to represent
//               the plane's position in space; but until
//               set_clip_plane() is called it will clip no geometry.
////////////////////////////////////////////////////////////////////
78
void NodePath::set_clip_plane(NodePath const &clip_plane, int priority = (0));

2679 18 set_clip_plane_off 4 3749 28 NodePath::set_clip_plane_off 0 4 758 759 760 761 1434
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no clip_planes at all.  This is different
//               from not specifying a clip_plane; rather, this
//               specifically contradicts set_clip_plane() at a higher
//               node level (or, with a priority, overrides a
//               set_clip_plane() at a lower level).
//
//               If no clip_planes are in effect on a particular piece
//               of geometry, that geometry is rendered without being
//               clipped (other than by the viewing frustum).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without being clipped by the indicated PlaneNode.
//               This is different from not specifying the PlaneNode;
//               rather, this specifically contradicts
//               set_clip_plane() at a higher node level (or, with a
//               priority, overrides a set_clip_plane() at a lower
//               level).
////////////////////////////////////////////////////////////////////
137
void NodePath::set_clip_plane_off(int priority = (0));
void NodePath::set_clip_plane_off(NodePath const &clip_plane, int priority = (0));

2680 16 clear_clip_plane 4 3749 26 NodePath::clear_clip_plane 0 2 762 763 706
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Completely removes any clip planes that may have been
//               set via set_clip_plane() or set_clip_plane_off() from
//               this particular node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Removes any reference to the indicated clipping plane
//               from the NodePath.
////////////////////////////////////////////////////////////////////
99
void NodePath::clear_clip_plane(void);
void NodePath::clear_clip_plane(NodePath const &clip_plane);

2681 14 has_clip_plane 4 3749 24 NodePath::has_clip_plane 0 1 764 467
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically applied to this particular node.  This
//               means that someone called set_clip_plane() on this
//               node with the indicated clip_plane.
////////////////////////////////////////////////////////////////////
64
bool NodePath::has_clip_plane(NodePath const &clip_plane) const;

2682 18 has_clip_plane_off 4 3749 28 NodePath::has_clip_plane_off 0 2 765 766 935
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if all clipping planes have been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with no parameters.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with the indicated clip_plane.
////////////////////////////////////////////////////////////////////
115
bool NodePath::has_clip_plane_off(void) const;
bool NodePath::has_clip_plane_off(NodePath const &clip_plane) const;

2683 11 set_scissor 4 3749 21 NodePath::set_scissor 0 5 767 768 769 770 771 3091
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four coordinates are
//               understood to define a rectangle in screen space.
//               These numbers are relative to the current
//               DisplayRegion, where (0,0) is the lower-left corner
//               of the DisplayRegion, and (1,1) is the upper-right
//               corner.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The two points are understood
//               to be relative to this node.  When these points are
//               projected into screen space, they define the
//               diagonally-opposite points that determine the scissor
//               region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four points are understood
//               to be relative to this node.  When these points are
//               projected into screen space, they define the
//               bounding volume of the scissor region (the scissor
//               region is the smallest onscreen rectangle that
//               encloses all four points).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The two points are understood
//               to be relative to the indicated other node.  When
//               these points are projected into screen space, they
//               define the diagonally-opposite points that determine
//               the scissor region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four points are understood
//               to be relative to the indicated other node.  When
//               these points are projected into screen space, they
//               define the bounding volume of the scissor region (the
//               scissor region is the smallest onscreen rectangle
//               that encloses all four points).
////////////////////////////////////////////////////////////////////
463
void NodePath::set_scissor(float left, float right, float bottom, float top);
void NodePath::set_scissor(LPoint3f const &a, LPoint3f const &b);
void NodePath::set_scissor(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c, LPoint3f const &d);
void NodePath::set_scissor(NodePath const &other, LPoint3f const &a, LPoint3f const &b);
void NodePath::set_scissor(NodePath const &other, LPoint3f const &a, LPoint3f const &b, LPoint3f const &c, LPoint3f const &d);

2684 13 clear_scissor 4 3749 23 NodePath::clear_scissor 0 1 772 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_scissor
//       Access: Published
//  Description: Removes the scissor region that was defined at this
//               node level by a previous call to set_scissor().
////////////////////////////////////////////////////////////////////
35
void NodePath::clear_scissor(void);

2685 11 has_scissor 4 3749 21 NodePath::has_scissor 0 1 773 607
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_scissor
//       Access: Published
//  Description: Returns true if a scissor region was defined at this
//               node by a previous call to set_scissor().  This does
//               not check for scissor regions inherited from a parent
//               class.  It also does not check for the presence of a
//               low-level ScissorAttrib, which is different from the
//               ScissorEffect added by set_scissor.
////////////////////////////////////////////////////////////////////
39
bool NodePath::has_scissor(void) const;

2686 7 set_bin 4 3749 17 NodePath::set_bin 0 2 774 775 1343
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_bin
//       Access: Published
//  Description: Assigns the geometry at this level and below to the
//               named rendering bin.  It is the user's responsibility
//               to ensure that such a bin already exists, either via
//               the cull-bin Configrc variable, or by explicitly
//               creating a GeomBin of the appropriate type at
//               runtime.
//
//               There are two default bins created when Panda is
//               started: "default" and "fixed".  Normally, all
//               geometry is assigned to "default" unless specified
//               otherwise.  This bin renders opaque geometry in
//               state-sorted order, followed by transparent geometry
//               sorted back-to-front.  If any geometry is assigned to
//               "fixed", this will be rendered following all the
//               geometry in "default", in the order specified by
//               draw_order for each piece of geometry so assigned.
//
//               The draw_order parameter is meaningful only for
//               GeomBinFixed type bins, e.g. "fixed".  Other kinds of
//               bins ignore it.
////////////////////////////////////////////////////////////////////
97
void NodePath::set_bin(basic_string< char > const &bin_name, int draw_order, int priority = (0));

2687 9 clear_bin 4 3749 19 NodePath::clear_bin 0 1 776 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_bin
//       Access: Published
//  Description: Completely removes any bin adjustment that may have
//               been set via set_bin() from this particular node.
////////////////////////////////////////////////////////////////////
31
void NodePath::clear_bin(void);

2688 7 has_bin 4 3749 17 NodePath::has_bin 0 1 777 359
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_bin
//       Access: Published
//  Description: Returns true if the node has been assigned to the a
//               particular rendering bin via set_bin(), false
//               otherwise.
////////////////////////////////////////////////////////////////////
35
bool NodePath::has_bin(void) const;

2689 12 get_bin_name 4 3749 22 NodePath::get_bin_name 0 1 778 414
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin that this particular node
//               was assigned to via set_bin(), or the empty string if
//               no bin was assigned.  See set_bin() and has_bin().
////////////////////////////////////////////////////////////////////
56
basic_string< char > NodePath::get_bin_name(void) const;

2690 18 get_bin_draw_order 4 3749 28 NodePath::get_bin_draw_order 0 1 779 444
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_draw_order
//       Access: Published
//  Description: Returns the drawing order associated with the bin
//               that this particular node was assigned to via
//               set_bin(), or 0 if no bin was assigned.  See
//               set_bin() and has_bin().
////////////////////////////////////////////////////////////////////
45
int NodePath::get_bin_draw_order(void) const;

2691 11 set_texture 4 3749 21 NodePath::set_texture 0 4 780 781 782 783 1278
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the convenience single-texture variant of
//               this method; it is now superceded by set_texture()
//               that accepts a stage and texture.  You may use this
//               method if you just want to adjust the default stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
////////////////////////////////////////////////////////////////////
144
void NodePath::set_texture(Texture *tex, int priority = (0));
void NodePath::set_texture(TextureStage *stage, Texture *tex, int priority = (0));

2692 15 set_texture_off 4 3749 25 NodePath::set_texture_off 0 4 784 785 786 787 1182
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////
124
void NodePath::set_texture_off(int priority = (0));
void NodePath::set_texture_off(TextureStage *stage, int priority = (0));

2693 13 clear_texture 4 3749 23 NodePath::clear_texture 0 2 788 789 824
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Completely removes any texture adjustment that may
//               have been set via set_texture() or set_texture_off()
//               from this particular node.  This allows whatever
//               textures might be otherwise affecting the geometry to
//               show instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Removes any reference to the indicated texture stage
//               from the NodePath.
////////////////////////////////////////////////////////////////////
86
void NodePath::clear_texture(void);
void NodePath::clear_texture(TextureStage *stage);

2694 11 has_texture 4 3749 21 NodePath::has_texture 0 2 790 791 1172
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if a texture has been applied to this
//               particular node via set_texture(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               texturing, as there may be a texture in effect from a
//               higher or lower level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               enabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture() on this node with the indicated stage
//               name, or the stage_name is the default stage_name,
//               and someone called set_texture() on this node.
////////////////////////////////////////////////////////////////////
94
bool NodePath::has_texture(void) const;
bool NodePath::has_texture(TextureStage *stage) const;

2695 15 has_texture_off 4 3749 25 NodePath::has_texture_off 0 2 792 793 1184
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node via
//               set_texture_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered untextured, as there may be a
//               texture in effect from a higher or lower level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture_off() on this node with the indicated
//               stage name, or that someone called set_texture_off()
//               on this node to remove all stages.
////////////////////////////////////////////////////////////////////
102
bool NodePath::has_texture_off(void) const;
bool NodePath::has_texture_off(TextureStage *stage) const;

2696 11 get_texture 4 3749 21 NodePath::get_texture 0 2 794 795 1012
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the base-level texture that has been set on
//               this particular node, or NULL if no texture has been
//               set.  This is not necessarily the texture that will
//               be applied to the geometry at or below this level, as
//               another texture at a higher or lower level may
//               override.
//
//               See also find_texture().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the texture that has been set on the
//               indicated stage for this particular node, or NULL if
//               no texture has been set for this stage.
////////////////////////////////////////////////////////////////////
102
Texture *NodePath::get_texture(void) const;
Texture *NodePath::get_texture(TextureStage *stage) const;

2697 10 set_shader 4 3749 20 NodePath::set_shader 0 2 796 797 220
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
void NodePath::set_shader(Shader const *sha, int priority = (0));

2698 14 set_shader_off 4 3749 24 NodePath::set_shader_off 0 2 798 799 224
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_off
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
void NodePath::set_shader_off(int priority = (0));

2699 15 set_shader_auto 4 3749 25 NodePath::set_shader_auto 0 4 800 801 802 803 492
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description: overloaded for auto shader customization
////////////////////////////////////////////////////////////////////
146
void NodePath::set_shader_auto(int priority = (0));
void NodePath::set_shader_auto(BitMask< unsigned int, 32 > shader_switch, int priority = (0));

2700 12 clear_shader 4 3749 22 NodePath::clear_shader 0 1 804 222
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
34
void NodePath::clear_shader(void);

2701 16 set_shader_input 4 3749 26 NodePath::set_shader_input 0 69 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 7066
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
3330
void NodePath::set_shader_input(ShaderInput const *inp);
void NodePath::set_shader_input(InternalName *id, Texture *tex, int priority = (0));
void NodePath::set_shader_input(InternalName *id, NodePath const &np, int priority = (0));
void NodePath::set_shader_input(InternalName *id, PointerToArray< float > const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, PointerToArray< double > const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, PointerToArray< LVecBase4f > const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, PointerToArray< LVecBase3f > const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, PointerToArray< LVecBase2f > const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, PointerToArray< LMatrix4f > const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, PointerToArray< LMatrix3f > const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, LVecBase4f const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, LVecBase3f const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, LVecBase2f const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, LMatrix4f const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, LMatrix3f const &v, int priority = (0));
void NodePath::set_shader_input(InternalName *id, double n1 = (0), double n2 = (0), double n3 = (0), double n4 = (1), int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, Texture *tex, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, NodePath const &np, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, PointerToArray< float > const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, PointerToArray< double > const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, PointerToArray< LVecBase4f > const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, PointerToArray< LVecBase3f > const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, PointerToArray< LVecBase2f > const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, PointerToArray< LMatrix4f > const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, PointerToArray< LMatrix3f > const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, LVecBase4f const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, LVecBase3f const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, LVecBase2f const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, LMatrix4f const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, LMatrix3f const &v, int priority = (0));
void NodePath::set_shader_input(basic_string< char > const &id, double n1 = (0), double n2 = (0), double n3 = (0), double n4 = (1), int priority = (0));

2702 18 clear_shader_input 4 3749 28 NodePath::clear_shader_input 0 2 874 875 458
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
119
void NodePath::clear_shader_input(InternalName *id);
void NodePath::clear_shader_input(basic_string< char > const &id);

2703 18 set_instance_count 4 3749 28 NodePath::set_instance_count 0 1 876 435
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_instance_count
//       Access: Published
//  Description: Sets the geometry instance count, or 0 if
//               geometry instancing should be disabled. Do not
//               confuse with instanceTo which only applies to
//               animation instancing.
////////////////////////////////////////////////////////////////////
54
void NodePath::set_instance_count(int instance_count);

2704 10 get_shader 4 3749 20 NodePath::get_shader 0 1 877 220
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
Shader const *NodePath::get_shader(void) const;

2705 16 get_shader_input 4 3749 26 NodePath::get_shader_input 0 2 878 879 454
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
155
ShaderInput const *NodePath::get_shader_input(InternalName *id) const;
ShaderInput const *NodePath::get_shader_input(basic_string< char > const &id) const;

2706 18 get_instance_count 4 3749 28 NodePath::get_instance_count 0 1 880 323
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_instance_count
//       Access: Published
//  Description: Returns the geometry instance count, or 0 if
//               disabled. See set_instance_count.
////////////////////////////////////////////////////////////////////
51
int const NodePath::get_instance_count(void) const;

2707 17 set_tex_transform 4 3749 27 NodePath::set_tex_transform 0 2 881 882 672
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
////////////////////////////////////////////////////////////////////
198
void NodePath::set_tex_transform(TextureStage *stage, TransformState const *transform);
void NodePath::set_tex_transform(NodePath const &other, TextureStage *stage, TransformState const *transform);

2708 19 clear_tex_transform 4 3749 29 NodePath::clear_tex_transform 0 2 883 884 595
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes all texture matrices from the current node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes the texture matrix on the current node for
//               the given stage.
////////////////////////////////////////////////////////////////////
98
void NodePath::clear_tex_transform(void);
void NodePath::clear_tex_transform(TextureStage *stage);

2709 17 has_tex_transform 4 3749 27 NodePath::has_tex_transform 0 1 885 336
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_transform
//       Access: Published
//  Description: Returns true if there is an explicit texture matrix
//               on the current node for the given stage.
////////////////////////////////////////////////////////////////////
60
bool NodePath::has_tex_transform(TextureStage *stage) const;

2710 17 get_tex_transform 4 3749 27 NodePath::get_tex_transform 0 2 886 887 750
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, or identity transform if there is no
//               explicit transform set for the given stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, relative to the other node.
////////////////////////////////////////////////////////////////////
200
ConstPointerTo< TransformState > NodePath::get_tex_transform(TextureStage *stage) const;
ConstPointerTo< TransformState > NodePath::get_tex_transform(NodePath const &other, TextureStage *stage) const;

2711 14 set_tex_offset 4 3749 24 NodePath::set_tex_offset 0 4 888 889 890 891 1770
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
361
inline void NodePath::set_tex_offset(TextureStage *stage, float u, float v);
inline void NodePath::set_tex_offset(TextureStage *stage, LVecBase2f const &uv);
inline void NodePath::set_tex_offset(NodePath const &other, TextureStage *stage, float u, float v);
inline void NodePath::set_tex_offset(NodePath const &other, TextureStage *stage, LVecBase2f const &uv);

2712 14 set_tex_rotate 4 3749 24 NodePath::set_tex_rotate 0 2 892 893 968
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
158
inline void NodePath::set_tex_rotate(TextureStage *stage, float r);
inline void NodePath::set_tex_rotate(NodePath const &other, TextureStage *stage, float r);

2713 13 set_tex_scale 4 3749 23 NodePath::set_tex_scale 0 10 894 895 896 897 898 899 900 901 902 903 4305
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
920
inline void NodePath::set_tex_scale(TextureStage *stage, float scale);
inline void NodePath::set_tex_scale(TextureStage *stage, float su, float sv);
inline void NodePath::set_tex_scale(TextureStage *stage, LVecBase2f const &scale);
inline void NodePath::set_tex_scale(TextureStage *stage, float su, float sv, float sw);
inline void NodePath::set_tex_scale(TextureStage *stage, LVecBase3f const &scale);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, float scale);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, float su, float sv);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, LVecBase2f const &scale);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, float su, float sv, float sw);
inline void NodePath::set_tex_scale(NodePath const &other, TextureStage *stage, LVecBase3f const &scale);

2714 14 get_tex_offset 4 3749 24 NodePath::get_tex_offset 0 2 904 905 836
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
164
inline LVecBase2f NodePath::get_tex_offset(TextureStage *stage) const;
inline LVecBase2f NodePath::get_tex_offset(NodePath const &other, TextureStage *stage) const;

2715 14 get_tex_rotate 4 3749 24 NodePath::get_tex_rotate 0 2 906 907 840
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
154
inline float NodePath::get_tex_rotate(TextureStage *stage) const;
inline float NodePath::get_tex_rotate(NodePath const &other, TextureStage *stage) const;

2716 13 get_tex_scale 4 3749 23 NodePath::get_tex_scale 0 2 908 909 832
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
////////////////////////////////////////////////////////////////////
162
inline LVecBase2f NodePath::get_tex_scale(TextureStage *stage) const;
inline LVecBase2f NodePath::get_tex_scale(NodePath const &other, TextureStage *stage) const;

2717 11 set_tex_pos 4 3749 21 NodePath::set_tex_pos 0 4 910 911 912 913 1658
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
369
inline void NodePath::set_tex_pos(TextureStage *stage, float u, float v, float w);
inline void NodePath::set_tex_pos(TextureStage *stage, LVecBase3f const &uvw);
inline void NodePath::set_tex_pos(NodePath const &other, TextureStage *stage, float u, float v, float w);
inline void NodePath::set_tex_pos(NodePath const &other, TextureStage *stage, LVecBase3f const &uvw);

2718 11 set_tex_hpr 4 3749 21 NodePath::set_tex_hpr 0 4 914 915 916 917 1794
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
369
inline void NodePath::set_tex_hpr(TextureStage *stage, float h, float p, float r);
inline void NodePath::set_tex_hpr(TextureStage *stage, LVecBase3f const &hpr);
inline void NodePath::set_tex_hpr(NodePath const &other, TextureStage *stage, float h, float p, float r);
inline void NodePath::set_tex_hpr(NodePath const &other, TextureStage *stage, LVecBase3f const &hpr);

2719 11 get_tex_pos 4 3749 21 NodePath::get_tex_pos 0 2 918 919 780
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
158
inline LVecBase3f NodePath::get_tex_pos(TextureStage *stage) const;
inline LVecBase3f NodePath::get_tex_pos(NodePath const &other, TextureStage *stage) const;

2720 11 get_tex_hpr 4 3749 21 NodePath::get_tex_hpr 0 2 920 921 782
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
158
inline LVecBase3f NodePath::get_tex_hpr(TextureStage *stage) const;
inline LVecBase3f NodePath::get_tex_hpr(NodePath const &other, TextureStage *stage) const;

2721 16 get_tex_scale_3d 4 3749 26 NodePath::get_tex_scale_3d 0 2 922 923 788
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
////////////////////////////////////////////////////////////////////
168
inline LVecBase3f NodePath::get_tex_scale_3d(TextureStage *stage) const;
inline LVecBase3f NodePath::get_tex_scale_3d(NodePath const &other, TextureStage *stage) const;

2722 11 set_tex_gen 4 3749 21 NodePath::set_tex_gen 0 6 924 925 926 927 928 929 1397
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.  This version of this
//               method is useful when setting M_light_vector, which
//               requires the name of the texture coordinate set that
//               supplies the tangent and binormal, as well as the
//               specific light to generate coordinates for.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.  This version of this
//               method is useful when setting M_constant, which
//               requires a constant texture coordinate value.
////////////////////////////////////////////////////////////////////
395
void NodePath::set_tex_gen(TextureStage *stage, RenderAttrib::TexGenMode mode, int priority = (0));
void NodePath::set_tex_gen(TextureStage *stage, RenderAttrib::TexGenMode mode, basic_string< char > const &source_name, NodePath const &light, int priority = (0));
void NodePath::set_tex_gen(TextureStage *stage, RenderAttrib::TexGenMode mode, LPoint3f const &constant_value, int priority = (0));

2723 13 clear_tex_gen 4 3749 23 NodePath::clear_tex_gen 0 2 930 931 647
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Removes the texture coordinate generation mode from
//               all texture stages on this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Disables automatic texture coordinate generation for
//               the indicated texture stage.
////////////////////////////////////////////////////////////////////
86
void NodePath::clear_tex_gen(void);
void NodePath::clear_tex_gen(TextureStage *stage);

2724 11 has_tex_gen 4 3749 21 NodePath::has_tex_gen 0 1 932 371
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_gen
//       Access: Published
//  Description: Returns true if there is a mode for automatic texture
//               coordinate generation on the current node for the
//               given stage.
////////////////////////////////////////////////////////////////////
54
bool NodePath::has_tex_gen(TextureStage *stage) const;

2725 11 get_tex_gen 4 3749 21 NodePath::get_tex_gen 0 1 933 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_gen
//       Access: Published
//  Description: Returns the texture coordinate generation mode for
//               the given stage, or M_off if there is no explicit
//               mode set for the given stage.
////////////////////////////////////////////////////////////////////
74
RenderAttrib::TexGenMode NodePath::get_tex_gen(TextureStage *stage) const;

2726 17 get_tex_gen_light 4 3749 27 NodePath::get_tex_gen_light 0 1 934 486
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_gen_light
//       Access: Published
//  Description: Returns the particular Light set for the indicated
//               texgen mode's texture stage, or empty NodePath if no
//               light is set.  This is only meaningful if the texgen
//               mode (returned by get_tex_gen()) is M_light_vector.
////////////////////////////////////////////////////////////////////
64
NodePath NodePath::get_tex_gen_light(TextureStage *stage) const;

2727 17 set_tex_projector 4 3749 27 NodePath::set_tex_projector 0 1 935 674
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_projector
//       Access: Published
//  Description: Establishes a TexProjectorEffect on this node, which
//               can be used to establish projective texturing (but
//               see also the NodePath::project_texture() convenience
//               function), or it can be used to bind this node's
//               texture transform to particular node's position in
//               space, allowing a LerpInterval (for instance) to
//               adjust this node's texture coordinates.
////////////////////////////////////////////////////////////////////
96
void NodePath::set_tex_projector(TextureStage *stage, NodePath const &from, NodePath const &to);

2728 19 clear_tex_projector 4 3749 29 NodePath::clear_tex_projector 0 2 936 937 625
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for the indicated
//               stage from this node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for all stages from
//               this node.
////////////////////////////////////////////////////////////////////
98
void NodePath::clear_tex_projector(TextureStage *stage);
void NodePath::clear_tex_projector(void);

2729 17 has_tex_projector 4 3749 27 NodePath::has_tex_projector 0 1 938 336
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_projector
//       Access: Published
//  Description: Returns true if this node has a TexProjectorEffect
//               for the indicated stage, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool NodePath::has_tex_projector(TextureStage *stage) const;

2730 22 get_tex_projector_from 4 3749 32 NodePath::get_tex_projector_from 0 1 939 510
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
////////////////////////////////////////////////////////////////////
69
NodePath NodePath::get_tex_projector_from(TextureStage *stage) const;

2731 20 get_tex_projector_to 4 3749 30 NodePath::get_tex_projector_to 0 1 940 506
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
////////////////////////////////////////////////////////////////////
67
NodePath NodePath::get_tex_projector_to(TextureStage *stage) const;

2732 15 project_texture 4 3749 25 NodePath::project_texture 0 1 941 440
////////////////////////////////////////////////////////////////////
//     Function: NodePath::project_texture
//       Access: Published
//  Description: A convenience function to enable projective texturing
//               at this node level and below, using the indicated
//               NodePath (which should contain a LensNode) as the
//               projector.
////////////////////////////////////////////////////////////////////
93
void NodePath::project_texture(TextureStage *stage, Texture *tex, NodePath const &projector);

2733 21 clear_project_texture 4 3749 31 NodePath::clear_project_texture 0 1 942 270
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_project_texture
//       Access: Published
//  Description: Undoes the effect of project_texture().
////////////////////////////////////////////////////////////////////
65
inline void NodePath::clear_project_texture(TextureStage *stage);

2734 14 set_normal_map 4 3749 24 NodePath::set_normal_map 0 3 943 944 945 1173
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_normal_map
//       Access: Published
//  Description: A convenience function to set up a normal map on this
//               geometry.  This uses the single highest-priority
//               light on the object only.  It also requires
//               multitexture, and consumes at least two texture
//               stages, in addition to what may already be in use.
//
//               The normal_map parameter is the texture that contains
//               the normal map information (with a 3-d delta vector
//               encoded into the r,g,b of each texel).  texcoord_name is
//               the name of the texture coordinate set that contains
//               the tangent and binormal we wish to use.  If
//               preserve_color is true, then one additional texture
//               stage is consumed to blend in the geometry's original
//               vertex color.
//
//               Only one normal map may be in effect through this
//               interface at any given time.
////////////////////////////////////////////////////////////////////
136
void NodePath::set_normal_map(Texture *normal_map, basic_string< char > const &texcoord_name = ((string())), bool preserve_color = (0));

2735 16 clear_normal_map 4 3749 26 NodePath::clear_normal_map 0 1 946 300
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_normal_map
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_normal_map().
////////////////////////////////////////////////////////////////////
38
void NodePath::clear_normal_map(void);

2736 12 has_texcoord 4 3749 22 NodePath::has_texcoord 0 1 947 467
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texcoord
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that use the named texture
//               coordinate set, false otherwise.  Pass the empty
//               string for the default texture coordinate set.
////////////////////////////////////////////////////////////////////
84
inline bool NodePath::has_texcoord(basic_string< char > const &texcoord_name) const;

2737 17 has_vertex_column 4 3749 27 NodePath::has_vertex_column 0 1 948 598
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_vertex_column
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that contain a reference to the
//               indicated vertex data column name, false otherwise.
//
//               This is particularly useful for testing whether a
//               particular model has a given texture coordinate set
//               (but see has_texcoord()).
////////////////////////////////////////////////////////////////////
65
bool NodePath::has_vertex_column(InternalName const *name) const;

2738 23 find_all_vertex_columns 4 3749 33 NodePath::find_all_vertex_columns 0 2 949 950 810
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below that
//               match the indicated name (which may contain wildcard
//               characters).
////////////////////////////////////////////////////////////////////
167
InternalNameCollection NodePath::find_all_vertex_columns(void) const;
InternalNameCollection NodePath::find_all_vertex_columns(basic_string< char > const &name) const;

2739 18 find_all_texcoords 4 3749 28 NodePath::find_all_texcoords 0 2 951 952 788
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below that match
//               the indicated name (which may contain wildcard
//               characters).
////////////////////////////////////////////////////////////////////
157
InternalNameCollection NodePath::find_all_texcoords(void) const;
InternalNameCollection NodePath::find_all_texcoords(basic_string< char > const &name) const;

2740 12 find_texture 4 3749 22 NodePath::find_texture 0 2 953 954 924
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the texture
//               if it is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that is assigned to the
//               indicated texture stage.  Returns the texture if it
//               is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////
132
Texture *NodePath::find_texture(basic_string< char > const &name) const;
Texture *NodePath::find_texture(TextureStage *stage) const;

2741 17 find_all_textures 4 3749 27 NodePath::find_all_textures 0 3 955 956 957 1097
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures on geometry at
//               this node and below that are assigned to the
//               indicated texture stage.
////////////////////////////////////////////////////////////////////
219
TextureCollection NodePath::find_all_textures(void) const;
TextureCollection NodePath::find_all_textures(basic_string< char > const &name) const;
TextureCollection NodePath::find_all_textures(TextureStage *stage) const;

2742 18 find_texture_stage 4 3749 28 NodePath::find_texture_stage 0 1 958 500
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture_stage
//       Access: Published
//  Description: Returns the first TextureStage found applied to
//               geometry at this node or below that matches the
//               indicated name (which may contain wildcards).
//               Returns the TextureStage if it is found, or NULL if
//               it is not.
////////////////////////////////////////////////////////////////////
83
TextureStage *NodePath::find_texture_stage(basic_string< char > const &name) const;

2743 23 find_all_texture_stages 4 3749 33 NodePath::find_all_texture_stages 0 2 959 960 743
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below that match the indicated name
//               (which may contain wildcard characters).
////////////////////////////////////////////////////////////////////
167
TextureStageCollection NodePath::find_all_texture_stages(void) const;
TextureStageCollection NodePath::find_all_texture_stages(basic_string< char > const &name) const;

2744 20 unify_texture_stages 4 3749 30 NodePath::unify_texture_stages 0 1 961 615
////////////////////////////////////////////////////////////////////
//     Function: NodePath::unify_texture_stages
//       Access: Published
//  Description: Searches through all TextureStages at this node and
//               below.  Any TextureStages that share the same name as
//               the indicated TextureStage object are replaced with
//               this object, thus ensuring that all geometry at this
//               node and below with a particular TextureStage name is
//               using the same TextureStage object.
////////////////////////////////////////////////////////////////////
57
void NodePath::unify_texture_stages(TextureStage *stage);

2745 13 find_material 4 3749 23 NodePath::find_material 0 1 962 471
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_material
//       Access: Published
//  Description: Returns the first material found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the material
//               if it is found, or NULL if it is not.
////////////////////////////////////////////////////////////////////
74
Material *NodePath::find_material(basic_string< char > const &name) const;

2746 18 find_all_materials 4 3749 28 NodePath::find_all_materials 0 2 963 964 725
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
////////////////////////////////////////////////////////////////////
149
MaterialCollection NodePath::find_all_materials(void) const;
MaterialCollection NodePath::find_all_materials(basic_string< char > const &name) const;

2747 12 set_material 4 3749 22 NodePath::set_material 0 2 965 966 486
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated material.
//
//               Previously, this operation made a copy of the
//               material structure, but nowadays it assigns the
//               pointer directly.
////////////////////////////////////////////////////////////////////
63
void NodePath::set_material(Material *tex, int priority = (0));

2748 16 set_material_off 4 3749 26 NodePath::set_material_off 0 2 967 968 567
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no material.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_material() at a higher node level (or, with a
//               priority, to override a set_material() at a lower
//               level).
////////////////////////////////////////////////////////////////////
52
void NodePath::set_material_off(int priority = (0));

2749 14 clear_material 4 3749 24 NodePath::clear_material 0 1 969 369
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_material
//       Access: Published
//  Description: Completely removes any material adjustment that may
//               have been set via set_material() from this particular
//               node.
////////////////////////////////////////////////////////////////////
36
void NodePath::clear_material(void);

2750 12 has_material 4 3749 22 NodePath::has_material 0 1 970 343
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_material
//       Access: Published
//  Description: Returns true if a material has been applied to this
//               particular node via set_material(), false otherwise.
////////////////////////////////////////////////////////////////////
40
bool NodePath::has_material(void) const;

2751 12 get_material 4 3749 22 NodePath::get_material 0 1 971 609
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_material
//       Access: Published
//  Description: Returns the material that has been set on this
//               particular node, or NULL if no material has been set.
//               This is not necessarily the material that will be
//               applied to the geometry at or below this level, as
//               another material at a higher or lower level may
//               override.
//               See also find_material().
////////////////////////////////////////////////////////////////////
57
PointerTo< Material > NodePath::get_material(void) const;

2752 7 set_fog 4 3749 17 NodePath::set_fog 0 2 972 973 310
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated fog.
////////////////////////////////////////////////////////////////////
53
void NodePath::set_fog(Fog *fog, int priority = (0));

2753 11 set_fog_off 4 3749 21 NodePath::set_fog_off 0 2 974 975 547
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no fog.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_fog() at a higher node level (or, with a
//               priority, to override a set_fog() at a lower
//               level).
////////////////////////////////////////////////////////////////////
47
void NodePath::set_fog_off(int priority = (0));

2754 9 clear_fog 4 3749 19 NodePath::clear_fog 0 1 976 491
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_fog
//       Access: Published
//  Description: Completely removes any fog adjustment that may
//               have been set via set_fog() or set_fog_off()
//               from this particular node.  This allows whatever
//               fogs might be otherwise affecting the geometry to
//               show instead.
////////////////////////////////////////////////////////////////////
31
void NodePath::clear_fog(void);

2755 7 has_fog 4 3749 17 NodePath::has_fog 0 1 977 556
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog
//       Access: Published
//  Description: Returns true if a fog has been applied to this
//               particular node via set_fog(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               fog, as there may be a fog in effect from a higher or
//               lower level.
////////////////////////////////////////////////////////////////////
35
bool NodePath::has_fog(void) const;

2756 11 has_fog_off 4 3749 21 NodePath::has_fog_off 0 1 978 579
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog_off
//       Access: Published
//  Description: Returns true if a fog has been specifically
//               disabled on this particular node via
//               set_fog_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered unfogged, as there may be a
//               fog in effect from a higher or lower level.
////////////////////////////////////////////////////////////////////
39
bool NodePath::has_fog_off(void) const;

2757 7 get_fog 4 3749 17 NodePath::get_fog 0 1 979 541
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_fog
//       Access: Published
//  Description: Returns the fog that has been set on this
//               particular node, or NULL if no fog has been set.
//               This is not necessarily the fog that will be
//               applied to the geometry at or below this level, as
//               another fog at a higher or lower level may
//               override.
////////////////////////////////////////////////////////////////////
35
Fog *NodePath::get_fog(void) const;

2758 25 set_render_mode_wireframe 4 3749 35 NodePath::set_render_mode_wireframe 0 2 980 981 345
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_wireframe
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in wireframe mode.
////////////////////////////////////////////////////////////////////
61
void NodePath::set_render_mode_wireframe(int priority = (0));

2759 22 set_render_mode_filled 4 3749 32 NodePath::set_render_mode_filled 0 2 982 983 377
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_filled
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in filled (i.e. not wireframe)
//               mode.
////////////////////////////////////////////////////////////////////
58
void NodePath::set_render_mode_filled(int priority = (0));

2760 25 set_render_mode_thickness 4 3749 35 NodePath::set_render_mode_thickness 0 2 984 985 690
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_thickness
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as thick points (that is, billboarded
//               quads).  The thickness is in pixels, unless
//               set_render_mode_perspective is also true, in which
//               case it is in 3-D units.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
////////////////////////////////////////////////////////////////////
78
void NodePath::set_render_mode_thickness(float thickness, int priority = (0));

2761 27 set_render_mode_perspective 4 3749 37 NodePath::set_render_mode_perspective 0 2 986 987 822
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_perspective
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as perspective sprites (that is, billboarded
//               quads).  The thickness, as specified with
//               set_render_mode_thickness(), is the width of each
//               point in 3-D units, unless it is overridden on a
//               per-vertex basis.  This does not affect geometry
//               other than points.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
////////////////////////////////////////////////////////////////////
81
void NodePath::set_render_mode_perspective(bool perspective, int priority = (0));

2762 15 set_render_mode 4 3749 25 NodePath::set_render_mode 0 2 988 989 407
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in the specified mode and with
//               the indicated line and/or point thickness.
////////////////////////////////////////////////////////////////////
97
void NodePath::set_render_mode(RenderModeAttrib::Mode mode, float thickness, int priority = (0));

2763 17 clear_render_mode 4 3749 27 NodePath::clear_render_mode 0 1 990 420
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_render_mode
//       Access: Published
//  Description: Completely removes any render mode adjustment that
//               may have been set on this node via
//               set_render_mode_wireframe() or
//               set_render_mode_filled().
////////////////////////////////////////////////////////////////////
39
void NodePath::clear_render_mode(void);

2764 15 has_render_mode 4 3749 25 NodePath::has_render_mode 0 1 991 454
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_render_mode
//       Access: Published
//  Description: Returns true if a render mode has been explicitly set
//               on this particular node via set_render_mode() (or
//               set_render_mode_wireframe() or
//               set_render_mode_filled()), false otherwise.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_render_mode(void) const;

2765 15 get_render_mode 4 3749 25 NodePath::get_render_mode 0 1 992 389
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode
//       Access: Published
//  Description: Returns the render mode that has been specifically
//               set on this node via set_render_mode(), or
//               M_unchanged if nothing has been set.
////////////////////////////////////////////////////////////////////
61
RenderModeAttrib::Mode NodePath::get_render_mode(void) const;

2766 25 get_render_mode_thickness 4 3749 35 NodePath::get_render_mode_thickness 0 1 993 401
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode_thickness
//       Access: Published
//  Description: Returns the render mode thickness that has been
//               specifically set on this node via set_render_mode(),
//               or 1.0 if nothing has been set.
////////////////////////////////////////////////////////////////////
54
float NodePath::get_render_mode_thickness(void) const;

2767 27 get_render_mode_perspective 4 3749 37 NodePath::get_render_mode_perspective 0 1 994 387
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode_perspective
//       Access: Published
//  Description: Returns the flag that has been set on this node via
//               set_render_mode_perspective(), or false if no flag
//               has been set.
////////////////////////////////////////////////////////////////////
55
bool NodePath::get_render_mode_perspective(void) const;

2768 13 set_two_sided 4 3749 23 NodePath::set_two_sided 0 2 995 996 511
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_two_sided
//       Access: Published
//  Description: Specifically sets or disables two-sided rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause backfacing polygons to be
//               drawn (in two-sided mode, true) or culled (in
//               one-sided mode, false).
////////////////////////////////////////////////////////////////////
65
void NodePath::set_two_sided(bool two_sided, int priority = (0));

2769 15 clear_two_sided 4 3749 25 NodePath::clear_two_sided 0 1 997 640
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_two_sided
//       Access: Published
//  Description: Completely removes any two-sided adjustment that
//               may have been set on this node via set_two_sided().
//               The geometry at this level and below will
//               subsequently be rendered either two-sided or
//               one-sided, according to whatever other nodes may have
//               had set_two_sided() on it, or according to the
//               initial state otherwise.
////////////////////////////////////////////////////////////////////
37
void NodePath::clear_two_sided(void);

2770 13 has_two_sided 4 3749 23 NodePath::has_two_sided 0 1 998 489
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_two_sided
//       Access: Published
//  Description: Returns true if a two-sided adjustment has been
//               explicitly set on this particular node via
//               set_two_sided().  If this returns true, then
//               get_two_sided() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_two_sided(void) const;

2771 13 get_two_sided 4 3749 23 NodePath::get_two_sided 0 1 999 681
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_two_sided
//       Access: Published
//  Description: Returns true if two-sided rendering has been
//               specifically set on this node via set_two_sided(), or
//               false if one-sided rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_two_sided().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               two-sided, as there may be other nodes that override.
////////////////////////////////////////////////////////////////////
41
bool NodePath::get_two_sided(void) const;

2772 14 set_depth_test 4 3749 24 NodePath::set_depth_test 0 2 1000 1001 511
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_test
//       Access: Published
//  Description: Specifically sets or disables the testing of the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
////////////////////////////////////////////////////////////////////
67
void NodePath::set_depth_test(bool depth_test, int priority = (0));

2773 16 clear_depth_test 4 3749 26 NodePath::clear_depth_test 0 1 1002 345
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_test
//       Access: Published
//  Description: Completely removes any depth-test adjustment that
//               may have been set on this node via set_depth_test().
////////////////////////////////////////////////////////////////////
38
void NodePath::clear_depth_test(void);

2774 14 has_depth_test 4 3749 24 NodePath::has_depth_test 0 1 1003 493
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_test
//       Access: Published
//  Description: Returns true if a depth-test adjustment has been
//               explicitly set on this particular node via
//               set_depth_test().  If this returns true, then
//               get_depth_test() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
42
bool NodePath::has_depth_test(void) const;

2775 14 get_depth_test 4 3749 24 NodePath::get_depth_test 0 1 1004 535
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_test
//       Access: Published
//  Description: Returns true if depth-test rendering has been
//               specifically set on this node via set_depth_test(), or
//               false if depth-test rendering has been specifically
//               disabled.  If nothing has been specifically set,
//               returns true.  See also has_depth_test().
////////////////////////////////////////////////////////////////////
42
bool NodePath::get_depth_test(void) const;

2776 15 set_depth_write 4 3749 25 NodePath::set_depth_write 0 2 1005 1006 512
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_write
//       Access: Published
//  Description: Specifically sets or disables the writing to the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
////////////////////////////////////////////////////////////////////
69
void NodePath::set_depth_write(bool depth_write, int priority = (0));

2777 17 clear_depth_write 4 3749 27 NodePath::clear_depth_write 0 1 1007 348
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_write
//       Access: Published
//  Description: Completely removes any depth-write adjustment that
//               may have been set on this node via set_depth_write().
////////////////////////////////////////////////////////////////////
39
void NodePath::clear_depth_write(void);

2778 15 has_depth_write 4 3749 25 NodePath::has_depth_write 0 1 1008 497
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_write
//       Access: Published
//  Description: Returns true if a depth-write adjustment has been
//               explicitly set on this particular node via
//               set_depth_write().  If this returns true, then
//               get_depth_write() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
43
bool NodePath::has_depth_write(void) const;

2779 15 get_depth_write 4 3749 25 NodePath::get_depth_write 0 1 1009 540
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_write
//       Access: Published
//  Description: Returns true if depth-write rendering has been
//               specifically set on this node via set_depth_write(), or
//               false if depth-write rendering has been specifically
//               disabled.  If nothing has been specifically set,
//               returns true.  See also has_depth_write().
////////////////////////////////////////////////////////////////////
43
bool NodePath::get_depth_write(void) const;

2780 16 set_depth_offset 4 3749 26 NodePath::set_depth_offset 0 2 1010 1011 906
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_offset
//       Access: Published
//  Description: This instructs the graphics driver to apply an
//               offset or bias to the generated depth values for
//               rendered polygons, before they are written to the
//               depth buffer. This can be used to shift polygons
//               forward slightly, to resolve depth conflicts, or
//               self-shadowing artifacts on thin objects.
//               The bias is always an integer number, and each
//               integer increment represents the smallest possible
//               increment in Z that is sufficient to completely
//               resolve two coplanar polygons. Positive numbers
//               are closer towards the camera.
////////////////////////////////////////////////////////////////////
62
void NodePath::set_depth_offset(int bias, int priority = (0));

2781 18 clear_depth_offset 4 3749 28 NodePath::clear_depth_offset 0 1 1012 351
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_offset
//       Access: Published
//  Description: Completely removes any depth-offset adjustment that
//               may have been set on this node via set_depth_offset().
////////////////////////////////////////////////////////////////////
40
void NodePath::clear_depth_offset(void);

2782 16 has_depth_offset 4 3749 26 NodePath::has_depth_offset 0 1 1013 501
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_offset
//       Access: Published
//  Description: Returns true if a depth-offset adjustment has been
//               explicitly set on this particular node via
//               set_depth_offset().  If this returns true, then
//               get_depth_offset() may be called to determine which has
//               been set.
////////////////////////////////////////////////////////////////////
44
bool NodePath::has_depth_offset(void) const;

2783 16 get_depth_offset 4 3749 26 NodePath::get_depth_offset 0 1 1014 335
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_offset
//       Access: Published
//  Description: Returns the depth offset value if it has been
//               specified using set_depth_offset, or 0 if not.
////////////////////////////////////////////////////////////////////
43
int NodePath::get_depth_offset(void) const;

2784 17 do_billboard_axis 4 3749 27 NodePath::do_billboard_axis 0 1 1015 414
////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_axis
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to heads_up().
////////////////////////////////////////////////////////////////////
71
void NodePath::do_billboard_axis(NodePath const &camera, float offset);

2785 22 do_billboard_point_eye 4 3749 32 NodePath::do_billboard_point_eye 0 1 1016 546
////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_eye
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at(),
//               although the point_eye billboard effect cannot be
//               achieved using the ordinary look_at() call.
////////////////////////////////////////////////////////////////////
76
void NodePath::do_billboard_point_eye(NodePath const &camera, float offset);

2786 24 do_billboard_point_world 4 3749 34 NodePath::do_billboard_point_world 0 1 1017 420
////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_world
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at().
////////////////////////////////////////////////////////////////////
78
void NodePath::do_billboard_point_world(NodePath const &camera, float offset);

2787 18 set_billboard_axis 4 3749 28 NodePath::set_billboard_axis 0 3 1018 1019 1020 793
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis,
//               towards a specified "camera" instead of to the
//               viewing camera.
////////////////////////////////////////////////////////////////////
134
inline void NodePath::set_billboard_axis(float offset = (0));
void NodePath::set_billboard_axis(NodePath const &camera, float offset);

2788 23 set_billboard_point_eye 4 3749 33 NodePath::set_billboard_point_eye 0 3 1021 1022 1023 968
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera, towards a specified "camera" instead of to
//               the viewing camera.
////////////////////////////////////////////////////////////////////
144
inline void NodePath::set_billboard_point_eye(float offset = (0));
void NodePath::set_billboard_point_eye(NodePath const &camera, float offset);

2789 25 set_billboard_point_world 4 3749 35 NodePath::set_billboard_point_world 0 3 1024 1025 1026 910
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky, towards a
//               specified "camera" instead of to the viewing camera.
////////////////////////////////////////////////////////////////////
148
inline void NodePath::set_billboard_point_world(float offset = (0));
void NodePath::set_billboard_point_world(NodePath const &camera, float offset);

2790 15 clear_billboard 4 3749 25 NodePath::clear_billboard 0 1 1027 268
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_billboard
//       Access: Published
//  Description: Removes any billboard effect from the node.
////////////////////////////////////////////////////////////////////
37
void NodePath::clear_billboard(void);

2791 13 has_billboard 4 3749 23 NodePath::has_billboard 0 1 1028 298
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_billboard
//       Access: Published
//  Description: Returns true if there is any billboard effect on
//               the node.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_billboard(void) const;

2792 11 set_compass 4 3749 21 NodePath::set_compass 0 2 1029 1030 459
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_compass
//       Access: Published
//  Description: Puts a compass effect on the node, so that it will
//               retain a fixed rotation relative to the reference
//               node (or render if the reference node is empty)
//               regardless of the transforms above it.
////////////////////////////////////////////////////////////////////
63
void NodePath::set_compass(NodePath const &reference = ((())));

2793 13 clear_compass 4 3749 23 NodePath::clear_compass 0 1 1031 264
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_compass
//       Access: Published
//  Description: Removes any compass effect from the node.
////////////////////////////////////////////////////////////////////
35
void NodePath::clear_compass(void);

2794 11 has_compass 4 3749 21 NodePath::has_compass 0 1 1032 294
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_compass
//       Access: Published
//  Description: Returns true if there is any compass effect on
//               the node.
////////////////////////////////////////////////////////////////////
39
bool NodePath::has_compass(void) const;

2795 16 set_transparency 4 3749 26 NodePath::set_transparency 0 2 1033 1034 482
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transparency
//       Access: Published
//  Description: Specifically sets or disables transparent rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause items with a non-1 value
//               for alpha color to be rendered partially transparent.
////////////////////////////////////////////////////////////////////
83
void NodePath::set_transparency(TransparencyAttrib::Mode mode, int priority = (0));

2796 18 clear_transparency 4 3749 28 NodePath::clear_transparency 0 1 1035 578
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transparency
//       Access: Published
//  Description: Completely removes any transparency adjustment that
//               may have been set on this node via set_transparency().
//               The geometry at this level and below will
//               subsequently be rendered either transparent or not,
//               to whatever other nodes may have had
//               set_transparency() on them.
////////////////////////////////////////////////////////////////////
40
void NodePath::clear_transparency(void);

2797 16 has_transparency 4 3749 26 NodePath::has_transparency 0 1 1036 594
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_transparency
//       Access: Published
//  Description: Returns true if a transparent-rendering adjustment
//               has been explicitly set on this particular node via
//               set_transparency().  If this returns true, then
//               get_transparency() may be called to determine whether
//               transparency has been explicitly enabled or
//               explicitly disabled for this node.
////////////////////////////////////////////////////////////////////
44
bool NodePath::has_transparency(void) const;

2798 16 get_transparency 4 3749 26 NodePath::get_transparency 0 1 1037 701
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transparency
//       Access: Published
//  Description: Returns the transparent rendering that has been
//               specifically set on this node via set_transparency(), or
//               M_none if nontransparent rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_transparency().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               transparent, as there may be other nodes that override.
////////////////////////////////////////////////////////////////////
64
TransparencyAttrib::Mode NodePath::get_transparency(void) const;

2799 13 set_antialias 4 3749 23 NodePath::set_antialias 0 2 1038 1039 340
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_antialias
//       Access: Published
//  Description: Specifies the antialiasing type that should be
//               applied at this node and below.  See AntialiasAttrib.
////////////////////////////////////////////////////////////////////
74
void NodePath::set_antialias(unsigned short int mode, int priority = (0));

2800 15 clear_antialias 4 3749 25 NodePath::clear_antialias 0 1 1040 339
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_antialias
//       Access: Published
//  Description: Completely removes any antialias setting that
//               may have been set on this node via set_antialias().
////////////////////////////////////////////////////////////////////
37
void NodePath::clear_antialias(void);

2801 13 has_antialias 4 3749 23 NodePath::has_antialias 0 1 1041 490
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_antialias
//       Access: Published
//  Description: Returns true if an antialias setting has been
//               explicitly mode on this particular node via
//               set_antialias().  If this returns true, then
//               get_antialias() may be called to determine what the
//               setting was.
////////////////////////////////////////////////////////////////////
41
bool NodePath::has_antialias(void) const;

2802 13 get_antialias 4 3749 23 NodePath::get_antialias 0 1 1042 390
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_antialias
//       Access: Published
//  Description: Returns the antialias setting that has been
//               specifically set on this node via set_antialias(), or
//               M_none if no setting has been made.
////////////////////////////////////////////////////////////////////
55
unsigned short int NodePath::get_antialias(void) const;

2803 16 has_audio_volume 4 3749 26 NodePath::has_audio_volume 0 1 1043 457
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_audio_volume
//       Access: Published
//  Description: Returns true if an audio volume has been applied
//               to the referenced node, false otherwise.  It is still
//               possible that volume at this node might have been
//               scaled by an ancestor node.
////////////////////////////////////////////////////////////////////
44
bool NodePath::has_audio_volume(void) const;

2804 18 clear_audio_volume 4 3749 28 NodePath::clear_audio_volume 0 1 1044 504
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_audio_volume
//       Access: Published
//  Description: Completely removes any audio volume from the
//               referenced node.  This is preferable to simply
//               setting the audio volume to identity, as it also
//               removes the overhead associated with having an audio
//               volume at all.
////////////////////////////////////////////////////////////////////
40
void NodePath::clear_audio_volume(void);

2805 16 set_audio_volume 4 3749 26 NodePath::set_audio_volume 0 2 1045 1046 274
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume
//       Access: Published
//  Description: Sets the audio volume component of the transform
////////////////////////////////////////////////////////////////////
66
void NodePath::set_audio_volume(float volume, int priority = (0));

2806 20 set_audio_volume_off 4 3749 30 NodePath::set_audio_volume_off 0 2 1047 1048 787
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume_off
//       Access: Published
//  Description: Disables any audio volume attribute inherited from
//               above.  This is not the same thing as
//               clear_audio_volume(), which undoes any previous
//               set_audio_volume() operation on this node; rather,
//               this actively disables any set_audio_volume() that
//               might be inherited from a parent node.
//
//               It is legal to specify a new volume on the same
//               node with a subsequent call to set_audio_volume();
//               this new scale will apply to lower nodes.
////////////////////////////////////////////////////////////////////
56
void NodePath::set_audio_volume_off(int priority = (0));

2807 16 get_audio_volume 4 3749 26 NodePath::get_audio_volume 0 1 1049 460
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_audio_volume
//       Access: Published
//  Description: Returns the complete audio volume that has been
//               applied to this node via a previous call to
//               set_audio_volume(), or 1. (identity) if no volume has
//               been applied to this particular node.
////////////////////////////////////////////////////////////////////
45
float NodePath::get_audio_volume(void) const;

2808 20 get_net_audio_volume 4 3749 30 NodePath::get_net_audio_volume 0 1 1050 342
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_audio_volume
//       Access: Published
//  Description: Returns the complete audio volume for this node
//               taking highers nodes in the graph into account.
////////////////////////////////////////////////////////////////////
49
float NodePath::get_net_audio_volume(void) const;

2809 21 adjust_all_priorities 4 3749 31 NodePath::adjust_all_priorities 0 1 1051 649
////////////////////////////////////////////////////////////////////
//     Function: NodePath::adjust_all_priorities
//       Access: Published
//  Description: Adds the indicated adjustment amount (which may be
//               negative) to the priority for all transitions on the
//               referenced node, and for all nodes in the subgraph
//               below.  This can be used to force these nodes not to
//               be overridden by a high-level state change above.  If
//               the priority would drop below zero, it is set to
//               zero.
////////////////////////////////////////////////////////////////////
60
inline void NodePath::adjust_all_priorities(int adjustment);

2810 4 show 4 3749 14 NodePath::show 0 2 1052 1053 1081
// Variants on show and hide

// Variants on show and hide

////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Undoes the effect of a previous hide() on this node:
//               makes the referenced node (and the entire subgraph
//               below this node) visible to all cameras.
//
//               This will not reveal the node if a parent node has
//               been hidden.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This undoes the effect of a previous hide() call.  It
//               will not reveal the node if a parent node has been
//               hidden.  However, see show_through().
////////////////////////////////////////////////////////////////////
102
inline void NodePath::show(void);
inline void NodePath::show(BitMask< unsigned int, 32 > camera_mask);

2811 12 show_through 4 3749 22 NodePath::show_through 0 2 1054 1055 1220
////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden, thus "showing through" a
//               parent's hide().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden via the one-parameter
//               hide() method, thus "showing through" a parent's
//               hide().  (However, it will not show through a
//               parent's hide() call if the no-parameter form of
//               hide() was used.)
////////////////////////////////////////////////////////////////////
118
inline void NodePath::show_through(void);
inline void NodePath::show_through(BitMask< unsigned int, 32 > camera_mask);

2812 4 hide 4 3749 14 NodePath::hide 0 2 1056 1057 1139
////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node (and the entire subgraph
//               below this node) invisible to all cameras.  It
//               remains part of the scene graph, its bounding volume
//               still contributes to its parent's bounding volume,
//               and it will still be involved in collision tests.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node invisible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This will also hide any nodes below this node in the
//               scene graph, including those nodes for which show()
//               has been called, but it will not hide descendent
//               nodes for which show_through() has been called.
////////////////////////////////////////////////////////////////////
102
inline void NodePath::hide(void);
inline void NodePath::hide(BitMask< unsigned int, 32 > camera_mask);

2813 9 is_hidden 4 3749 19 NodePath::is_hidden 0 2 1058 1059 380
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_hidden
//       Access: Published
//  Description: Returns true if the referenced node is hidden from
//               the indicated camera(s) either directly, or because
//               some ancestor is hidden.
////////////////////////////////////////////////////////////////////
103
inline bool NodePath::is_hidden(BitMask< unsigned int, 32 > camera_mask = ((get_overall_bit()))) const;

2814 19 get_hidden_ancestor 4 3749 29 NodePath::get_hidden_ancestor 0 3 1060 1061 1062 478
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hidden_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is hidden to the indicated camera(s), or an
//               empty NodePath if no ancestor of the referenced node
//               is hidden (and the node should be visible).
////////////////////////////////////////////////////////////////////
161
NodePath NodePath::get_hidden_ancestor(BitMask< unsigned int, 32 > camera_mask = ((get_overall_bit())), Thread *current_thread = ((get_current_thread()))) const;

2815 5 stash 4 3749 15 NodePath::stash 0 3 1063 1064 1065 819
////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash
//       Access: Published
//  Description: Removes the referenced node (and the entire subgraph
//               below this node) from the scene graph in any normal
//               sense.  The node will no longer be visible and is not
//               tested for collisions; furthermore, no normal scene
//               graph traversal will visit the node.  The node's
//               bounding volume no longer contributes to its parent's
//               bounding volume.
//
//               A stashed node cannot be located by a normal find()
//               operation (although a special find string can still
//               retrieve it).
////////////////////////////////////////////////////////////////////
88
void NodePath::stash(int sort = (0), Thread *current_thread = ((get_current_thread())));

2816 7 unstash 4 3749 17 NodePath::unstash 0 3 1066 1067 1068 425
////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash
//       Access: Published
//  Description: Undoes the effect of a previous stash() on this
//               node: makes the referenced node (and the entire
//               subgraph below this node) once again part of the
//               scene graph.
////////////////////////////////////////////////////////////////////
90
void NodePath::unstash(int sort = (0), Thread *current_thread = ((get_current_thread())));

2817 11 unstash_all 4 3749 21 NodePath::unstash_all 0 2 1069 1070 269
////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash_all
//       Access: Published
//  Description: Unstashes this node and all stashed child nodes.
////////////////////////////////////////////////////////////////////
78
void NodePath::unstash_all(Thread *current_thread = ((get_current_thread())));

2818 10 is_stashed 4 3749 20 NodePath::is_stashed 0 1 1071 337
////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_stashed
//       Access: Published
//  Description: Returns true if the referenced node is stashed either
//               directly, or because some ancestor is stashed.
////////////////////////////////////////////////////////////////////
45
inline bool NodePath::is_stashed(void) const;

2819 20 get_stashed_ancestor 4 3749 30 NodePath::get_stashed_ancestor 0 2 1072 1073 454
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is stashed, or an empty NodePath if no ancestor
//               of the referenced node is stashed (and the node should
//               be visible).
////////////////////////////////////////////////////////////////////
97
NodePath NodePath::get_stashed_ancestor(Thread *current_thread = ((get_current_thread()))) const;

2820 16 get_collide_mask 4 3749 26 NodePath::get_collide_mask 0 1 1074 600
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
////////////////////////////////////////////////////////////////////
74
inline BitMask< unsigned int, 32 > NodePath::get_collide_mask(void) const;

2821 16 set_collide_mask 4 3749 26 NodePath::set_collide_mask 0 3 1075 1076 1077 839
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  If node_type is not TypeHandle::none(), then
//               only nodes matching (or inheriting from) the
//               indicated PandaNode subclass are modified.
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
////////////////////////////////////////////////////////////////////
171
inline void NodePath::set_collide_mask(BitMask< unsigned int, 32 > new_mask, BitMask< unsigned int, 32 > bits_to_change = ((all_on())), TypeHandle node_type = ((none())));

2822 11 operator == 4 3749 21 NodePath::operator == 0 1 1078 390
// Comparison methods

////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator ==
//       Access: Published
//  Description: Returns true if the two paths are equivalent; that
//               is, if they contain the same list of nodes in the same
//               order.
////////////////////////////////////////////////////////////////////
63
inline bool NodePath::operator ==(NodePath const &other) const;

2823 11 operator != 4 3749 21 NodePath::operator != 0 1 1079 293
// Comparison methods

////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator !=
//       Access: Published
//  Description: Returns true if the two paths are not equivalent.
////////////////////////////////////////////////////////////////////
63
inline bool NodePath::operator !=(NodePath const &other) const;

2824 10 operator < 4 3749 20 NodePath::operator < 0 1 1080 521
////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator <
//       Access: Published
//  Description: Returns true if this NodePath sorts before the other
//               one, false otherwise.  The sorting order of two
//               nonequivalent NodePaths is consistent but undefined,
//               and is useful only for storing NodePaths in a sorted
//               container like an STL set.
////////////////////////////////////////////////////////////////////
62
inline bool NodePath::operator <(NodePath const &other) const;

2825 10 compare_to 4 3749 20 NodePath::compare_to 0 1 1081 830
////////////////////////////////////////////////////////////////////
//     Function: NodePath::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this NodePath
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two NodePaths are considered equivalent if they
//               consist of exactly the same list of nodes in the same
//               order.  Otherwise, they are different; different
//               NodePaths will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the NodePaths in a sorted container like an
//               STL set.
////////////////////////////////////////////////////////////////////
61
inline int NodePath::compare_to(NodePath const &other) const;

2826 15 verify_complete 4 3749 25 NodePath::verify_complete 0 2 1082 1083 353
// Miscellaneous

////////////////////////////////////////////////////////////////////
//     Function: NodePath::verify_complete
//       Access: Published
//  Description: Returns true if all of the nodes described in the
//               NodePath are connected, or false otherwise.
////////////////////////////////////////////////////////////////////
88
bool NodePath::verify_complete(Thread *current_thread = ((get_current_thread()))) const;

2827 14 premunge_scene 4 3749 24 NodePath::premunge_scene 0 2 1084 1085 749
////////////////////////////////////////////////////////////////////
//     Function: NodePath::premunge_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and internally adjusts any GeomVertexFormats
//               for optimal rendering on the indicated GSG.  If this
//               step is not done prior to rendering, the formats will
//               be optimized at render time instead, for a small
//               cost.
//
//               It is not normally necessary to do this on a model
//               loaded directly from disk, since the loader will do
//               this by default.
////////////////////////////////////////////////////////////////////
78
void NodePath::premunge_scene(GraphicsStateGuardianBase *gsg = ((void *)(0)));

2828 13 prepare_scene 4 3749 23 NodePath::prepare_scene 0 1 1086 854
////////////////////////////////////////////////////////////////////
//     Function: NodePath::prepare_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and does whatever initialization is required to
//               render the scene properly with the indicated GSG.  It
//               is not strictly necessary to call this, since the GSG
//               will initialize itself when the scene is rendered,
//               but this may take some of the overhead away from that
//               process.
//
//               In particular, this will ensure that textures within
//               the scene are loaded in texture memory, and display
//               lists are built up from static geometry.
////////////////////////////////////////////////////////////////////
61
void NodePath::prepare_scene(GraphicsStateGuardianBase *gsg);

2829 11 show_bounds 4 3749 21 NodePath::show_bounds 0 1 1087 542
////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_bounds
//       Access: Published
//  Description: Causes the bounding volume of the bottom node and all
//               of its descendants (that is, the bounding volume
//               associated with the the bottom arc) to be rendered,
//               if possible.  The rendering method is less than
//               optimal; this is intended primarily for debugging.
////////////////////////////////////////////////////////////////////
33
void NodePath::show_bounds(void);

2830 17 show_tight_bounds 4 3749 27 NodePath::show_tight_bounds 0 1 1088 580
////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_tight_bounds
//       Access: Published
//  Description: Similar to show_bounds(), this draws a bounding box
//               representing the "tight" bounds of this node and all
//               of its descendants.  The bounding box is recomputed
//               every frame by reexamining all of the vertices; this
//               is far from efficient, but this is intended for
//               debugging.
////////////////////////////////////////////////////////////////////
39
void NodePath::show_tight_bounds(void);

2831 11 hide_bounds 4 3749 21 NodePath::hide_bounds 0 1 1089 306
////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide_bounds
//       Access: Published
//  Description: Stops the rendering of the bounding volume begun with
//               show_bounds().
////////////////////////////////////////////////////////////////////
33
void NodePath::hide_bounds(void);

2832 10 get_bounds 4 3749 20 NodePath::get_bounds 0 2 1090 1091 468
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bounds
//       Access: Published
//  Description: Returns a newly-allocated bounding volume containing
//               the bottom node and all of its descendants.  This is
//               the bounding volume on the bottom arc, converted to
//               the local coordinate space of the node.
////////////////////////////////////////////////////////////////////
106
PointerTo< BoundingVolume > NodePath::get_bounds(Thread *current_thread = ((get_current_thread()))) const;

2833 22 force_recompute_bounds 4 3749 32 NodePath::force_recompute_bounds 0 1 1092 890
////////////////////////////////////////////////////////////////////
//     Function: NodePath::force_recompute_bounds
//       Access: Published
//  Description: Forces the recomputing of all the bounding volumes at
//               every node in the subgraph beginning at this node and
//               below.
//
//               This should not normally need to be called, since the
//               bounding volumes are supposed to be recomputed
//               automatically when necessary.  It may be useful when
//               debugging, to verify that the bounding volumes have
//               not become inadvertently stale; it may also be useful
//               to force animated characters to update their bounding
//               volumes (which does not presently happen
//               automatically).
////////////////////////////////////////////////////////////////////
44
void NodePath::force_recompute_bounds(void);

2834 12 write_bounds 4 3749 22 NodePath::write_bounds 0 1 1093 385
////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bounds
//       Access: Published
//  Description: Writes a description of the bounding volume
//               containing the bottom node and all of its descendants
//               to the indicated output stream.
////////////////////////////////////////////////////////////////////
48
void NodePath::write_bounds(ostream &out) const;

2835 17 calc_tight_bounds 4 3749 27 NodePath::calc_tight_bounds 0 2 1094 1095 672
////////////////////////////////////////////////////////////////////
//     Function: NodePath::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               Geoms at this NodePath's bottom node and below.  This
//               is a tight bounding box; it will generally be tighter
//               than the bounding volume returned by get_bounds()
//               (but it is more expensive to compute).
//
//               The return value is true if any points are within the
//               bounding volume, or false if none are.
////////////////////////////////////////////////////////////////////
132
bool NodePath::calc_tight_bounds(LPoint3f &min_point, LPoint3f &max_point, Thread *current_thread = ((get_current_thread()))) const;

2836 13 flatten_light 4 3749 23 NodePath::flatten_light 0 1 1096 1286
//  void analyze() const;

////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_light
//       Access: Published
//  Description: Lightly flattens out the hierarchy below this node by
//               applying transforms, colors, and texture matrices
//               from the nodes onto the vertices, but does not remove
//               any nodes.
//
//               This can result in improved rendering performance
//               because there will be fewer transforms in the
//               resulting scene graph, but the number of nodes will
//               remain the same.
//
//               In particular, any NodePaths that reference nodes
//               within this hierarchy will not be damaged.  However,
//               since this operation will remove transforms from the
//               scene graph, it may be dangerous to apply to nodes
//               where you expect to dynamically modify the transform,
//               or where you expect the geometry to remain in a
//               particular local coordinate system.
//
//               The return value is always 0, since flatten_light
//               does not remove any nodes.
////////////////////////////////////////////////////////////////////
34
int NodePath::flatten_light(void);

2837 14 flatten_medium 4 3749 24 NodePath::flatten_medium 0 1 1097 836
////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_medium
//       Access: Published
//  Description: A more thorough flattening than flatten_light(), this
//               first applies all the transforms, colors, and texture
//               matrices from the nodes onto the vertices, and then
//               removes unneeded grouping nodes--nodes that have
//               exactly one child, for instance, but have no special
//               properties in themselves.
//
//               This results in improved performance over
//               flatten_light() because the number of nodes in the
//               scene graph is reduced.
//
//               The return value is the number of nodes removed.
////////////////////////////////////////////////////////////////////
35
int NodePath::flatten_medium(void);

2838 14 flatten_strong 4 3749 24 NodePath::flatten_strong 0 1 1098 1005
////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_strong
//       Access: Published
//  Description: The strongest possible flattening.  This first
//               applies all of the transforms to the vertices, as in
//               flatten_medium(), but then it will combine sibling
//               nodes together when possible, in addition to removing
//               unnecessary parent-child nodes.  This can result in
//               substantially fewer nodes, but any nicely-grouped
//               hierachical bounding volumes may be lost.
//
//               It is generally a good idea to apply this kind of
//               flattening only to nodes that will be culled largely
//               as a single unit, like a car.  Applying this to an
//               entire scene may result in overall poorer performance
//               because of less-effective culling.
////////////////////////////////////////////////////////////////////
35
int NodePath::flatten_strong(void);

2839 20 apply_texture_colors 4 3749 30 NodePath::apply_texture_colors 0 1 1099 1105
////////////////////////////////////////////////////////////////////
//     Function: NodePath::apply_texture_colors
//       Access: Published
//  Description: Removes textures from Geoms at this node and below by
//               applying the texture colors to the vertices.  This is
//               primarily useful to simplify a low-LOD model.  The
//               texture colors are replaced by flat colors that
//               approximate the original textures.
//
//               Only the bottommost texture on each Geom is used (if
//               there is more than one), and it is applied as if it
//               were M_modulate, and WM_repeat, regardless of its
//               actual settings.  If the texture has a
//               simple_ram_image, this may be used if the main image
//               isn't resident.
//
//               After this call, there will be no texturing specified
//               at this level and below.  Of course, there might
//               still be texturing inherited from above.
////////////////////////////////////////////////////////////////////
42
void NodePath::apply_texture_colors(void);

2840 17 clear_model_nodes 4 3749 27 NodePath::clear_model_nodes 0 1 1100 604
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_model_nodes
//       Access: Published
//  Description: Recursively walks through the scene graph at this
//               level and below, looking for ModelNodes, and calls
//               model_node->set_preserve_transform(PT_drop_node) on
//               each one.  This allows a subsequent call to
//               flatten_strong() to eliminate all of the ModelNodes.
//
//               Returns the number of ModelNodes found.
////////////////////////////////////////////////////////////////////
45
inline int NodePath::clear_model_nodes(void);

2841 7 set_tag 4 3749 17 NodePath::set_tag 0 1 1101 700
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
////////////////////////////////////////////////////////////////////
98
inline void NodePath::set_tag(basic_string< char > const &key, basic_string< char > const &value);

2842 7 get_tag 4 3749 17 NodePath::get_tag 0 1 1102 458
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.  See also get_net_tag().
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > NodePath::get_tag(basic_string< char > const &key) const;

2843 7 has_tag 4 3749 17 NodePath::has_tag 0 1 1103 445
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//               See also has_net_tag().
////////////////////////////////////////////////////////////////////
69
inline bool NodePath::has_tag(basic_string< char > const &key) const;

2844 9 clear_tag 4 3749 19 NodePath::clear_tag 0 1 1104 397
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
////////////////////////////////////////////////////////////////////
65
inline void NodePath::clear_tag(basic_string< char > const &key);

2845 11 get_net_tag 4 3749 21 NodePath::get_net_tag 0 1 1105 519
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_tag
//       Access: Published
//  Description: Returns the tag value that has been defined on this
//               node, or the nearest ancestor node, for the indicated
//               key.  If no value has been defined for the indicated
//               key on any ancestor node, returns the empty string.
//               See also get_tag().
////////////////////////////////////////////////////////////////////
89
inline basic_string< char > NodePath::get_net_tag(basic_string< char > const &key) const;

2846 11 has_net_tag 4 3749 21 NodePath::has_net_tag 0 1 1106 390
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_net_tag
//       Access: Published
//  Description: Returns true if the indicated tag value has been
//               defined on this node or on any ancestor node, or
//               false otherwise.  See also has_tag().
////////////////////////////////////////////////////////////////////
73
inline bool NodePath::has_net_tag(basic_string< char > const &key) const;

2847 12 find_net_tag 4 3749 22 NodePath::find_net_tag 0 1 1107 471
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_net_tag
//       Access: Published
//  Description: Returns the lowest ancestor of this node that
//               contains a tag definition with the indicated key, if
//               any, or an empty NodePath if no ancestor of this node
//               contains this tag definition.  See set_tag().
////////////////////////////////////////////////////////////////////
71
NodePath NodePath::find_net_tag(basic_string< char > const &key) const;

2848 14 set_python_tag 4 3749 24 NodePath::set_python_tag 0 1 1108 716
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_python_tag
//       Access: Published
//  Description: Associates an arbitrary Python object with a
//               user-defined key which is stored on the node.  This
//               object has no meaning to Panda; but it is stored
//               indefinitely on the node until it is requested again.
//
//               Each unique key stores a different Python object.
//               There is no effective limit on the number of
//               different keys that may be stored or on the nature of
//               any one key's object.
////////////////////////////////////////////////////////////////////
87
inline void NodePath::set_python_tag(basic_string< char > const &key, PyObject *value);

2849 14 get_python_tag 4 3749 24 NodePath::get_python_tag 0 1 1109 455
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_python_tag
//       Access: Published
//  Description: Retrieves the Python object that was previously
//               set on this node for the particular key, if any.  If
//               no object has been previously set, returns None.
//               See also get_net_python_tag().
////////////////////////////////////////////////////////////////////
81
inline PyObject *NodePath::get_python_tag(basic_string< char > const &key) const;

2850 14 has_python_tag 4 3749 24 NodePath::has_python_tag 0 1 1110 468
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_python_tag
//       Access: Published
//  Description: Returns true if a Python object has been defined on
//               this node for the particular key (even if that value
//               is the empty string), or false if no value has been
//               set.  See also has_net_python_tag().
////////////////////////////////////////////////////////////////////
76
inline bool NodePath::has_python_tag(basic_string< char > const &key) const;

2851 16 clear_python_tag 4 3749 26 NodePath::clear_python_tag 0 1 1111 443
////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_python_tag
//       Access: Published
//  Description: Removes the Python object defined for this key on this
//               particular node.  After a call to clear_python_tag(),
//               has_python_tag() will return false for the indicated
//               key.
////////////////////////////////////////////////////////////////////
72
inline void NodePath::clear_python_tag(basic_string< char > const &key);

2852 18 get_net_python_tag 4 3749 28 NodePath::get_net_python_tag 0 1 1112 525
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_python_tag
//       Access: Published
//  Description: Returns the Python object that has been defined on
//               this node, or the nearest ancestor node, for the
//               indicated key.  If no value has been defined for the
//               indicated key on any ancestor node, returns None.
//               See also get_python_tag().
////////////////////////////////////////////////////////////////////
85
inline PyObject *NodePath::get_net_python_tag(basic_string< char > const &key) const;

2853 18 has_net_python_tag 4 3749 28 NodePath::has_net_python_tag 0 1 1113 408
////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_net_python_tag
//       Access: Published
//  Description: Returns true if the indicated Python object has been
//               defined on this node or on any ancestor node, or
//               false otherwise.  See also has_python_tag().
////////////////////////////////////////////////////////////////////
80
inline bool NodePath::has_net_python_tag(basic_string< char > const &key) const;

2854 19 find_net_python_tag 4 3749 29 NodePath::find_net_python_tag 0 1 1114 485
////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_net_python_tag
//       Access: Published
//  Description: Returns the lowest ancestor of this node that
//               contains a tag definition with the indicated key, if
//               any, or an empty NodePath if no ancestor of this node
//               contains this tag definition.  See set_python_tag().
////////////////////////////////////////////////////////////////////
78
NodePath NodePath::find_net_python_tag(basic_string< char > const &key) const;

2855 9 list_tags 4 3749 19 NodePath::list_tags 0 1 1115 420
// HAVE_PYTHON

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePath::list_tags
//       Access: Published
//  Description: Lists the tags to the nout stream, one per line.  See
//               PandaNode::list_tags() for a variant that allows you
//               to specify the output stream.
////////////////////////////////////////////////////////////////////
44
inline void NodePath::list_tags(void) const;

2856 8 set_name 4 3749 18 NodePath::set_name 0 1 1116 258
////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_name
//       Access: Published
//  Description: Changes the name of the referenced node.
////////////////////////////////////////////////////////////////////
65
inline void NodePath::set_name(basic_string< char > const &name);

2857 8 get_name 4 3749 18 NodePath::get_name 0 1 1117 258
////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_name
//       Access: Published
//  Description: Returns the name of the referenced node.
////////////////////////////////////////////////////////////////////
59
inline basic_string< char > NodePath::get_name(void) const;

2858 14 write_bam_file 4 3749 24 NodePath::write_bam_file 0 1 1118 519
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bam_file
//       Access: Published
//  Description: Writes the contents of this node and below out to a
//               bam file with the indicated filename.  This file may
//               then be read in again, as is, at some later point.
//               Returns true if successful, false on some kind of
//               error.
////////////////////////////////////////////////////////////////////
74
bool NodePath::write_bam_file(basic_string< char > const &filename) const;

2859 16 write_bam_stream 4 3749 26 NodePath::write_bam_stream 0 1 1119 314
////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bam_stream
//       Access: Published
//  Description: Writes the contents of this node and below out to the
//               indicated stream.
////////////////////////////////////////////////////////////////////
52
bool NodePath::write_bam_stream(ostream &out) const;

2860 20 encode_to_bam_stream 4 3749 30 NodePath::encode_to_bam_stream 0 3 1120 1121 1122 2177
////////////////////////////////////////////////////////////////////
//     Function: NodePath::encode_to_bam_stream
//       Access: Published
//  Description: Converts the NodePath object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.  This is similar to write_bam_stream().
//
//               This method is used by __reduce__ to handle streaming
//               of NodePaths to a pickle file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePath::encode_to_bam_stream
//       Access: Published
//  Description: Converts the NodePath object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               If the BamWriter is NULL, this behaves the same way
//               as NodePath::write_bam_stream() and
//               PandaNode::encode_to_bam_stream(), in the sense that
//               it only writes this node and all nodes below it.
//
//               However, if the BamWriter is not NULL, it behaves
//               very differently.  In this case, it encodes the
//               *entire graph* of all nodes connected to the
//               NodePath, including all parent nodes and siblings.
//               This is necessary for correct streaming of related
//               NodePaths and restoration of instances, etc., but it
//               does mean you must detach() a node before writing it
//               if you want to limit the nodes that get written.
//
//               This method is used by __reduce__ to handle streaming
//               of NodePaths to a pickle file.  The BamWriter case is
//               used by the direct.stdpy.pickle module, while the
//               saner, non-BamWriter case is used when the standard
//               pickle module calls this function.
////////////////////////////////////////////////////////////////////
177
inline basic_string< char > NodePath::encode_to_bam_stream(void) const;
bool NodePath::encode_to_bam_stream(basic_string< char > &data, BamWriter *writer = ((void *)(0))) const;

2861 22 decode_from_bam_stream 4 3749 32 NodePath::decode_from_bam_stream 0 2 1123 1124 439
////////////////////////////////////////////////////////////////////
//     Function: NodePath::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and
//               returns the NodePath on that string.  Returns NULL on
//               error.
////////////////////////////////////////////////////////////////////
118
static NodePath NodePath::decode_from_bam_stream(basic_string< char > const &data, BamReader *reader = ((void *)(0)));

2862 14 get_class_type 4 3749 24 NodePath::get_class_type 0 1 1125 0
49
static TypeHandle NodePath::get_class_type(void);

2863 9 ~NodePath 4 3749 19 NodePath::~NodePath 0 0 0
26
NodePath::~NodePath(void);

2864 34 py_decode_NodePath_from_bam_stream 1 0 34 py_decode_NodePath_from_bam_stream 0 1 2176 319
////////////////////////////////////////////////////////////////////
//     Function: py_decode_NodePath_from_bam_stream
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
////////////////////////////////////////////////////////////////////
78
NodePath py_decode_NodePath_from_bam_stream(basic_string< char > const &data);

2865 42 py_decode_NodePath_from_bam_stream_persist 1 0 42 py_decode_NodePath_from_bam_stream_persist 0 1 2177 327
////////////////////////////////////////////////////////////////////
//     Function: py_decode_NodePath_from_bam_stream_persist
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
////////////////////////////////////////////////////////////////////
107
NodePath py_decode_NodePath_from_bam_stream_persist(PyObject *unpickler, basic_string< char > const &data);

2866 8 add_node 4 3751 28 AttribNodeRegistry::add_node 0 1 1127 919
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::add_node
//       Access: Published
//  Description: Adds the indicated NodePath to the registry.  The
//               name and type of the node are noted at the time of
//               this call; if the name changes later, it will not
//               update the registry index.
//
//               The NodePath must reference some kind of an attribute
//               node, such as a LightNode or a PlaneNode.  When bam
//               files that reference an attribute node of the same
//               type and the same name are loaded, they will quietly
//               be redirected to reference this NodePath.
//
//               If there is already a node matching the indicated
//               name and type, it will be replaced.
////////////////////////////////////////////////////////////////////
63
void AttribNodeRegistry::add_node(NodePath const &attrib_node);

2867 11 remove_node 4 3751 31 AttribNodeRegistry::remove_node 0 2 1128 1129 901
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::remove_node
//       Access: Published
//  Description: Removes the indicated NodePath from the registry.
//               The name of the node must not have changed since the
//               matching call to add_node(), or it will not be
//               successfully removed.
//
//               Returns true if the NodePath is found and removed,
//               false if it is not found (for instance, because the
//               name has changed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::remove_node
//       Access: Published
//  Description: Removes the nth node from the registry.
////////////////////////////////////////////////////////////////////
111
bool AttribNodeRegistry::remove_node(NodePath const &attrib_node);
void AttribNodeRegistry::remove_node(int n);

2868 11 lookup_node 4 3751 31 AttribNodeRegistry::lookup_node 0 1 1130 480
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::lookup_node
//       Access: Published
//  Description: Looks up the indicated NodePath in the registry.  If
//               there is a node already in the registry with the
//               matching name and type, returns that NodePath
//               instead; otherwise, returns the original NodePath.
////////////////////////////////////////////////////////////////////
74
NodePath AttribNodeRegistry::lookup_node(NodePath const &orig_node) const;

2869 13 get_num_nodes 4 3751 33 AttribNodeRegistry::get_num_nodes 0 1 1131 283
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_num_nodes
//       Access: Published
//  Description: Returns the total number of nodes in the registry.
////////////////////////////////////////////////////////////////////
50
int AttribNodeRegistry::get_num_nodes(void) const;

2870 8 get_node 4 3751 28 AttribNodeRegistry::get_node 0 1 1132 278
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node
//       Access: Published
//  Description: Returns the nth NodePath recorded in the registry.
////////////////////////////////////////////////////////////////////
51
NodePath AttribNodeRegistry::get_node(int n) const;

2871 13 get_node_type 4 3751 33 AttribNodeRegistry::get_node_type 0 1 1133 312
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node_type
//       Access: Published
//  Description: Returns the type of the nth node, as recorded in the
//               registry.
////////////////////////////////////////////////////////////////////
58
TypeHandle AttribNodeRegistry::get_node_type(int n) const;

2872 13 get_node_name 4 3751 33 AttribNodeRegistry::get_node_name 0 1 1134 520
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node_name
//       Access: Published
//  Description: Returns the name of the nth node, as recorded in the
//               registry.  This will be the node name as it was at
//               the time the node was recorded; if the node has
//               changed names since then, this will still return the
//               original name.
////////////////////////////////////////////////////////////////////
68
basic_string< char > AttribNodeRegistry::get_node_name(int n) const;

2873 9 find_node 4 3751 29 AttribNodeRegistry::find_node 0 2 1135 1136 920
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::find_node
//       Access: Published
//  Description: Returns the index number of the indicated NodePath in
//               the registry (assuming its name hasn't changed since
//               it was recorded in the registry), or -1 if the
//               NodePath cannot be found (for instance, because its
//               name has changed).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::find_node
//       Access: Published
//  Description: Returns the index number of the node with the
//               indicated type and name in the registry, or -1 if
//               there is no such node in the registry.
////////////////////////////////////////////////////////////////////
161
int AttribNodeRegistry::find_node(NodePath const &attrib_node) const;
int AttribNodeRegistry::find_node(TypeHandle type, basic_string< char > const &name) const;

2874 5 clear 4 3751 25 AttribNodeRegistry::clear 0 1 1137 261
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::clear
//       Access: Published
//  Description: Removes all nodes from the registry.
////////////////////////////////////////////////////////////////////
37
void AttribNodeRegistry::clear(void);

2875 6 output 4 3751 26 AttribNodeRegistry::output 0 1 1138 226
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
void AttribNodeRegistry::output(ostream &out) const;

2876 5 write 4 3751 25 AttribNodeRegistry::write 0 1 1139 225
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
void AttribNodeRegistry::write(ostream &out) const;

2877 14 get_global_ptr 4 3751 34 AttribNodeRegistry::get_global_ptr 0 1 1140 736
// Filename: attribNodeRegistry.I
// Created by:  drose (07Jul07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: 
////////////////////////////////////////////////////////////////////
75
static inline AttribNodeRegistry *AttribNodeRegistry::get_global_ptr(void);

2878 19 ~AttribNodeRegistry 4 3751 39 AttribNodeRegistry::~AttribNodeRegistry 0 0 0
46
AttribNodeRegistry::~AttribNodeRegistry(void);

2879 13 make_identity 4 3752 32 AudioVolumeAttrib::make_identity 0 1 1141 283
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs an identity audio volume attrib.
////////////////////////////////////////////////////////////////////
77
static ConstPointerTo< RenderAttrib > AudioVolumeAttrib::make_identity(void);

2880 4 make 4 3752 23 AudioVolumeAttrib::make 0 1 1142 359
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AudioVolumeAttrib object that indicates
//               audio volume should be scaled by the indicated factor.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > AudioVolumeAttrib::make(float volume);

2881 8 make_off 4 3752 27 AudioVolumeAttrib::make_off 0 1 1143 482
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new AudioVolumeAttrib object that ignores
//               any AudioVolumeAttrib inherited from above.  You may
//               also specify an additional volume scale to apply to
//               geometry below (using set_volume()).
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > AudioVolumeAttrib::make_off(void);

2882 12 make_default 4 3752 31 AudioVolumeAttrib::make_default 0 1 1144 404
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > AudioVolumeAttrib::make_default(void);

2883 6 is_off 4 3752 25 AudioVolumeAttrib::is_off 0 1 1145 529
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::is_off
//       Access: Published
//  Description: Returns true if the AudioVolumeAttrib will ignore any
//               color scales inherited from above, false otherwise.
//               This is not the same thing as !has_scale(); a
//               AudioVolumeAttrib may have the "off" flag set and also
//               have another scale specified.
////////////////////////////////////////////////////////////////////
50
inline bool AudioVolumeAttrib::is_off(void) const;

2884 10 has_volume 4 3752 29 AudioVolumeAttrib::has_volume 0 1 1146 408
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::has_volume
//       Access: Published
//  Description: Returns true if the AudioVolumeAttrib has a
//               non-identity volume, false otherwise (in which case it
//               might be an off attrib or an identity attrib).
////////////////////////////////////////////////////////////////////
54
inline bool AudioVolumeAttrib::has_volume(void) const;

2885 10 get_volume 4 3752 29 AudioVolumeAttrib::get_volume 0 1 1147 272
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::get_volume
//       Access: Published
//  Description: Returns the volume to be applied to sounds.
////////////////////////////////////////////////////////////////////
55
inline float AudioVolumeAttrib::get_volume(void) const;

2886 10 set_volume 4 3752 29 AudioVolumeAttrib::set_volume 0 1 1148 350
////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::set_volume
//       Access: Published
//  Description: Returns a new AudioVolumeAttrib, just like this one, but
//               with the volume changed to the indicated value.
////////////////////////////////////////////////////////////////////
81
ConstPointerTo< RenderAttrib > AudioVolumeAttrib::set_volume(float volume) const;

2887 14 get_class_slot 4 3752 33 AudioVolumeAttrib::get_class_slot 0 1 1149 0
51
static int AudioVolumeAttrib::get_class_slot(void);

2888 14 get_class_type 4 3752 33 AudioVolumeAttrib::get_class_type 0 1 1150 0
58
static TypeHandle AudioVolumeAttrib::get_class_type(void);

2889 18 ~AudioVolumeAttrib 4 3752 37 AudioVolumeAttrib::~AudioVolumeAttrib 0 0 0
44
AudioVolumeAttrib::~AudioVolumeAttrib(void);

2890 4 make 4 3753 23 AuxBitplaneAttrib::make 0 2 1151 1152 558
////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a default AuxBitplaneAttrib object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a specified AuxBitplaneAttrib object.
////////////////////////////////////////////////////////////////////
144
static ConstPointerTo< RenderAttrib > AuxBitplaneAttrib::make(void);
static ConstPointerTo< RenderAttrib > AuxBitplaneAttrib::make(int outputs);

2891 12 make_default 4 3753 31 AuxBitplaneAttrib::make_default 0 1 1153 404
////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > AuxBitplaneAttrib::make_default(void);

2892 11 get_outputs 4 3753 30 AuxBitplaneAttrib::get_outputs 0 1 1154 272
////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::get_outputs
//       Access: Published
//  Description: Returns the AuxBitplaneAttrib output bits.
////////////////////////////////////////////////////////////////////
54
inline int AuxBitplaneAttrib::get_outputs(void) const;

2893 14 get_class_slot 4 3753 33 AuxBitplaneAttrib::get_class_slot 0 1 1155 0
51
static int AuxBitplaneAttrib::get_class_slot(void);

2894 14 get_class_type 4 3753 33 AuxBitplaneAttrib::get_class_type 0 1 1156 0
58
static TypeHandle AuxBitplaneAttrib::get_class_type(void);

2895 18 ~AuxBitplaneAttrib 4 3753 37 AuxBitplaneAttrib::~AuxBitplaneAttrib 0 0 0
44
AuxBitplaneAttrib::~AuxBitplaneAttrib(void);

2896 12 set_duration 4 3755 26 AuxSceneData::set_duration 0 1 1157 402
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_duration
//       Access: Public
//  Description: Specifies the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
////////////////////////////////////////////////////////////////////
56
inline void AuxSceneData::set_duration(double duration);

2897 12 get_duration 4 3755 26 AuxSceneData::get_duration 0 1 1158 400
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_duration
//       Access: Public
//  Description: Returns the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
////////////////////////////////////////////////////////////////////
53
inline double AuxSceneData::get_duration(void) const;

2898 20 set_last_render_time 4 3755 34 AuxSceneData::set_last_render_time 0 1 1159 345
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_last_render_time
//       Access: Public
//  Description: Should be called with the current frame_time each
//               time the AuxSceneData is used during traversal.
////////////////////////////////////////////////////////////////////
67
inline void AuxSceneData::set_last_render_time(double render_time);

2899 20 get_last_render_time 4 3755 34 AuxSceneData::get_last_render_time 0 1 1160 346
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_last_render_time
//       Access: Public
//  Description: Returns the last time this object was used during
//               traversal (according to set_last_render_time()).
////////////////////////////////////////////////////////////////////
61
inline double AuxSceneData::get_last_render_time(void) const;

2900 19 get_expiration_time 4 3755 33 AuxSceneData::get_expiration_time 0 1 1161 379
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_expiration_time
//       Access: Public
//  Description: Returns the frame_time at which this AuxSceneData
//               object is currently scheduled to be removed from the
//               scene graph.
////////////////////////////////////////////////////////////////////
60
inline double AuxSceneData::get_expiration_time(void) const;

2901 6 output 4 3755 20 AuxSceneData::output 0 1 1162 229
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
54
virtual void AuxSceneData::output(ostream &out) const;

2902 5 write 4 3755 19 AuxSceneData::write 0 2 1163 1164 228
////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::write
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
77
virtual void AuxSceneData::write(ostream &out, int indent_level = (0)) const;

2903 14 get_class_type 4 3755 28 AuxSceneData::get_class_type 0 1 1165 0
53
static TypeHandle AuxSceneData::get_class_type(void);

2904 13 ~AuxSceneData 4 3755 27 AuxSceneData::~AuxSceneData 0 0 0
34
AuxSceneData::~AuxSceneData(void);

2905 7 BamFile 4 3757 16 BamFile::BamFile 0 1 1166 216
////////////////////////////////////////////////////////////////////
//     Function: BamFile::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
23
BamFile::BamFile(void);

2906 8 ~BamFile 4 3757 17 BamFile::~BamFile 0 0 215
////////////////////////////////////////////////////////////////////
//     Function: BamFile::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
24
BamFile::~BamFile(void);

2907 9 open_read 4 3757 18 BamFile::open_read 0 5 1167 1168 1169 1170 1171 725
////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated filename for reading.
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated stream for reading.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
199
bool BamFile::open_read(Filename const &bam_filename, bool report_errors = (1));
bool BamFile::open_read(istream &in, basic_string< char > const &bam_filename = ("stream"), bool report_errors = (1));

2908 11 read_object 4 3757 20 BamFile::read_object 0 1 1172 592
////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_object
//       Access: Public
//  Description: Reads and returns the next object from the Bam file,
//               or NULL if the end of the file has been reached, or
//               if there is an error condition.  Use is_eof() to
//               differentiate these two cases.
//
//               The pointers returned by this method will not be
//               valid for use until resolve() is subsequently called.
////////////////////////////////////////////////////////////////////
42
TypedWritable *BamFile::read_object(void);

2909 6 is_eof 4 3757 15 BamFile::is_eof 0 1 1173 370
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_eof
//       Access: Public
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
////////////////////////////////////////////////////////////////////
33
bool BamFile::is_eof(void) const;

2910 7 resolve 4 3757 16 BamFile::resolve 0 1 1174 650
////////////////////////////////////////////////////////////////////
//     Function: BamFile::resolve
//       Access: Public
//  Description: This must be called after one or more objects have
//               been read via calls to read_object() in order to
//               resolve all internal pointer references in the
//               objects read and make all the pointers valid.  It
//               returns true if all objects are successfully
//               resolved, or false if some have not been (in which
//               case you must call resolve() again later).
////////////////////////////////////////////////////////////////////
28
bool BamFile::resolve(void);

2911 9 read_node 4 3757 18 BamFile::read_node 0 2 1175 1176 1170
////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_node
//       Access: Public
//  Description: Although the bam file format is general enough to
//               store a list of objects of arbitrary type, bam files
//               on disk usually contain just one object, a PandaNode
//               that is the root of a scene graph.  (Bam files that
//               store other kinds of things are usually given the
//               extension "boo", for "binary other objects", to
//               differentiate them from the normal scene graph type
//               file.)
//
//               This is a convenience method for when you believe you
//               are reading a scene graph bam file.  It reads the one
//               PandaNode and returns it.  It also calls resolve() to
//               fully resolve the object, since we expect this will
//               be the only object in the file.
//
//               If the bam file contains something other than a
//               PandaNode, an error is printed and NULL is returned.
////////////////////////////////////////////////////////////////////
68
PointerTo< PandaNode > BamFile::read_node(bool report_errors = (1));

2912 10 open_write 4 3757 19 BamFile::open_write 0 5 1177 1178 1179 1180 1181 838
////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated file for writing.  If
//               another file by the same name already exists, it will
//               be silently removed.  Returns true if successful,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated stream for writing.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
202
bool BamFile::open_write(Filename const &bam_filename, bool report_errors = (1));
bool BamFile::open_write(ostream &out, basic_string< char > const &bam_filename = ("stream"), bool report_errors = (1));

2913 12 write_object 4 3757 21 BamFile::write_object 0 1 1182 324
////////////////////////////////////////////////////////////////////
//     Function: BamFile::write_object
//       Access: Public
//  Description: Writes the indicated object to the Bam file.  Returns
//               true if successful, false on error.
////////////////////////////////////////////////////////////////////
56
bool BamFile::write_object(TypedWritable const *object);

2914 5 close 4 3757 14 BamFile::close 0 1 1183 245
////////////////////////////////////////////////////////////////////
//     Function: BamFile::close
//       Access: Public
//  Description: Closes the input or output stream.
////////////////////////////////////////////////////////////////////
26
void BamFile::close(void);

2915 13 is_valid_read 4 3757 22 BamFile::is_valid_read 0 1 1184 846
// Filename: bamFile.I
// Created by:  drose (02Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_read
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               reading with no errors so far detected, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool BamFile::is_valid_read(void) const;

2916 14 is_valid_write 4 3757 23 BamFile::is_valid_write 0 1 1185 364
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_write
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               writing with no errors so far detected, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
48
inline bool BamFile::is_valid_write(void) const;

2917 18 get_file_major_ver 4 3757 27 BamFile::get_file_major_ver 0 1 1186 426
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_major_ver
//       Access: Public
//  Description: Returns the major version number of the file
//               currently being read, or the system current major
//               version number if no file is currently open for
//               reading.
////////////////////////////////////////////////////////////////////
38
int BamFile::get_file_major_ver(void);

2918 18 get_file_minor_ver 4 3757 27 BamFile::get_file_minor_ver 0 1 1187 426
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_minor_ver
//       Access: Public
//  Description: Returns the minor version number of the file
//               currently being read, or the system current minor
//               version number if no file is currently open for
//               reading.
////////////////////////////////////////////////////////////////////
38
int BamFile::get_file_minor_ver(void);

2919 15 get_file_endian 4 3757 24 BamFile::get_file_endian 0 1 1188 326
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_endian
//       Access: Public
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read or written.
////////////////////////////////////////////////////////////////////
57
BamEnums::BamEndian BamFile::get_file_endian(void) const;

2920 21 get_current_major_ver 4 3757 30 BamFile::get_current_major_ver 0 1 1189 386
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_major_ver
//       Access: Public
//  Description: Returns the system current major version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
////////////////////////////////////////////////////////////////////
41
int BamFile::get_current_major_ver(void);

2921 21 get_current_minor_ver 4 3757 30 BamFile::get_current_minor_ver 0 1 1190 386
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_minor_ver
//       Access: Public
//  Description: Returns the system current minor version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
////////////////////////////////////////////////////////////////////
41
int BamFile::get_current_minor_ver(void);

2922 10 get_reader 4 3757 19 BamFile::get_reader 0 1 1191 370
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_reader
//       Access: Public
//  Description: Returns the BamReader in charge of performing the
//               read operations.  This will return NULL unless
//               open_read() was called.
////////////////////////////////////////////////////////////////////
37
BamReader *BamFile::get_reader(void);

2923 10 get_writer 4 3757 19 BamFile::get_writer 0 1 1192 372
////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_writer
//       Access: Public
//  Description: Returns the BamWriter in charge of performing the
//               write operations.  This will return NULL unless
//               open_write() was called.
////////////////////////////////////////////////////////////////////
37
BamWriter *BamFile::get_writer(void);

2924 4 make 4 3759 21 BillboardEffect::make 0 1 1193 316
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make
//       Access: Published, Static
//  Description: Constructs a new BillboardEffect object with the
//               indicated properties.
////////////////////////////////////////////////////////////////////
196
static ConstPointerTo< RenderEffect > BillboardEffect::make(LVector3f const &up_vector, bool eye_relative, bool axial_rotate, float offset, NodePath const &look_at, LPoint3f const &look_at_point);

2925 9 make_axis 4 3759 26 BillboardEffect::make_axis 0 1 1194 316
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_axis
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               axis-rotating billboard.
////////////////////////////////////////////////////////////////////
78
static inline ConstPointerTo< RenderEffect > BillboardEffect::make_axis(void);

2926 14 make_point_eye 4 3759 31 BillboardEffect::make_point_eye 0 1 1195 335
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_eye
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               eye-relative point-rotating billboard.
////////////////////////////////////////////////////////////////////
83
static inline ConstPointerTo< RenderEffect > BillboardEffect::make_point_eye(void);

2927 16 make_point_world 4 3759 33 BillboardEffect::make_point_world 0 1 1196 339
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_world
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               world-relative point-rotating billboard.
////////////////////////////////////////////////////////////////////
85
static inline ConstPointerTo< RenderEffect > BillboardEffect::make_point_world(void);

2928 6 is_off 4 3759 23 BillboardEffect::is_off 0 1 1197 625
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::is_off
//       Access: Published
//  Description: Returns true if the BillboardEffect is an 'off'
//               BillboardEffect, indicating that it does not enable
//               billboarding.  This kind of BillboardEffect isn't
//               particularly useful and isn't normally created or
//               stored in the graph; it might be implicitly
//               discovered as the result of a
//               NodePath::get_rel_state().
////////////////////////////////////////////////////////////////////
48
inline bool BillboardEffect::is_off(void) const;

2929 13 get_up_vector 4 3759 30 BillboardEffect::get_up_vector 0 1 1198 281
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_up_vector
//       Access: Published
//  Description: Returns the up vector in effect for this billboard.
////////////////////////////////////////////////////////////////////
67
inline LVector3f const &BillboardEffect::get_up_vector(void) const;

2930 16 get_eye_relative 4 3759 33 BillboardEffect::get_eye_relative 0 1 1199 387
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_eye_relative
//       Access: Published
//  Description: Returns true if this billboard interprets the up
//               vector relative to the camera, or false if it is
//               relative to the world.
////////////////////////////////////////////////////////////////////
58
inline bool BillboardEffect::get_eye_relative(void) const;

2931 16 get_axial_rotate 4 3759 33 BillboardEffect::get_axial_rotate 0 1 1200 395
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_axial_rotate
//       Access: Published
//  Description: Returns true if this billboard rotates only around
//               the axis of the up vector, or false if it rotates
//               freely in three dimensions.
////////////////////////////////////////////////////////////////////
58
inline bool BillboardEffect::get_axial_rotate(void) const;

2932 10 get_offset 4 3759 27 BillboardEffect::get_offset 0 1 1201 465
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_offset
//       Access: Published
//  Description: Returns the distance toward the camera (or the
//               look_at_point) the billboard is moved towards, after
//               rotating.  This can be used to ensure the billboard
//               is not obscured by nearby geometry.
////////////////////////////////////////////////////////////////////
53
inline float BillboardEffect::get_offset(void) const;

2933 11 get_look_at 4 3759 28 BillboardEffect::get_look_at 0 1 1202 450
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at
//       Access: Published
//  Description: Returns the node this billboard will rotate to look
//               towards.  If this is empty, it means the billboard
//               will rotate towards the current camera node, wherever
//               that might be.
////////////////////////////////////////////////////////////////////
64
inline NodePath const &BillboardEffect::get_look_at(void) const;

2934 17 get_look_at_point 4 3759 34 BillboardEffect::get_look_at_point 0 1 1203 386
////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at_point
//       Access: Published
//  Description: Returns the point, relative to the look_at node,
//               towards which the billboard will rotate.  Normally
//               this is (0, 0, 0).
////////////////////////////////////////////////////////////////////
70
inline LPoint3f const &BillboardEffect::get_look_at_point(void) const;

2935 14 get_class_type 4 3759 31 BillboardEffect::get_class_type 0 1 1204 0
56
static TypeHandle BillboardEffect::get_class_type(void);

2936 16 ~BillboardEffect 4 3759 33 BillboardEffect::~BillboardEffect 0 0 0
40
BillboardEffect::~BillboardEffect(void);

2937 8 LensNode 4 3760 18 LensNode::LensNode 0 2 1205 1206 447
////////////////////////////////////////////////////////////////////
//     Function: LensNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LensNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
81
LensNode::LensNode(basic_string< char > const &name, Lens *lens = ((void *)(0)));

2938 9 copy_lens 4 3760 19 LensNode::copy_lens 0 2 1207 1208 1159
// Filename: lensNode.I
// Created by:  drose (26Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LensNode::copy_lens
//       Access: Published
//  Description: Sets up the LensNode using a copy of the
//               indicated Lens.  If the original Lens is
//               changed or destroyed, this LensNode is not
//               affected.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LensNode::copy_lens
//       Access: Published
//  Description: Copies the indicated lens into the specified slot.
////////////////////////////////////////////////////////////////////
112
inline void LensNode::copy_lens(Lens const &lens);
inline void LensNode::copy_lens(int index, Lens const &lens);

2939 8 set_lens 4 3760 18 LensNode::set_lens 0 2 1209 1210 990
////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens
//       Access: Published
//  Description: Sets up the LensNode using this particular Lens
//               pointer.  If the lens is subsequently modified, the
//               LensNode properties immediately reflect the change.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens
//       Access: Published
//  Description: Sets the indicated lens.  Although a LensNode
//               normally holds only one lens, it may optionally
//               include multiple lenses, each with a different index
//               number.  The different lenses may be referenced by
//               index number on the DisplayRegion.  Adding a new lens
//               automatically makes it active.
////////////////////////////////////////////////////////////////////
91
inline void LensNode::set_lens(Lens *lens);
void LensNode::set_lens(int index, Lens *lens);

2940 8 get_lens 4 3760 18 LensNode::get_lens 0 2 1211 1212 443
////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens
//       Access: Published
//  Description: Returns a pointer to the particular Lens
//               associated with this LensNode, or NULL if there is
//               not yet a Lens associated.  If an index number is
//               specified, returns the nth lens.
////////////////////////////////////////////////////////////////////
55
inline Lens *LensNode::get_lens(int index = (0)) const;

2941 15 set_lens_active 4 3760 25 LensNode::set_lens_active 0 1 1213 536
////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens_active
//       Access: Published
//  Description: Sets the active flag for the nth lens.  When a lens
//               is inactive, it is not used for rendering, and any
//               DisplayRegions associated with it are implicitly
//               inactive as well.  Returns true if the flag is
//               changed, false if it already had this value.
////////////////////////////////////////////////////////////////////
55
bool LensNode::set_lens_active(int index, bool active);

2942 15 get_lens_active 4 3760 25 LensNode::get_lens_active 0 1 1214 266
////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens_active
//       Access: Published
//  Description: Returns the active flag for the nth lens.
////////////////////////////////////////////////////////////////////
55
inline bool LensNode::get_lens_active(int index) const;

2943 13 activate_lens 4 3760 23 LensNode::activate_lens 0 1 1215 294
////////////////////////////////////////////////////////////////////
//     Function: LensNode::activate_lens
//       Access: Published
//  Description: An alternate way to call set_lens_active(index,
//               true).
////////////////////////////////////////////////////////////////////
47
inline bool LensNode::activate_lens(int index);

2944 15 deactivate_lens 4 3760 25 LensNode::deactivate_lens 0 1 1216 297
////////////////////////////////////////////////////////////////////
//     Function: LensNode::deactivate_lens
//       Access: Published
//  Description: An alternate way to call set_lens_active(index,
//               false).
////////////////////////////////////////////////////////////////////
49
inline bool LensNode::deactivate_lens(int index);

2945 10 is_in_view 4 3760 20 LensNode::is_in_view 0 2 1217 1218 750
////////////////////////////////////////////////////////////////////
//     Function: LensNode::is_in_view
//       Access: Published
//  Description: Returns true if the given point is within the bounds
//               of the lens of the LensNode (i.e. if the camera can
//               see the point).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LensNode::is_in_view
//       Access: Published
//  Description: Returns true if the given point is within the bounds
//               of the lens of the LensNode (i.e. if the camera can
//               see the point).
////////////////////////////////////////////////////////////////////
113
inline bool LensNode::is_in_view(LPoint3f const &pos);
bool LensNode::is_in_view(int index, LPoint3f const &pos);

2946 12 show_frustum 4 3760 22 LensNode::show_frustum 0 1 1219 391
////////////////////////////////////////////////////////////////////
//     Function: LensNode::show_frustum
//       Access: Published
//  Description: Enables the drawing of the lens's frustum to aid in
//               visualization.  This actually creates a GeomNode
//               which is parented to the LensNode.
////////////////////////////////////////////////////////////////////
34
void LensNode::show_frustum(void);

2947 12 hide_frustum 4 3760 22 LensNode::hide_frustum 0 1 1220 306
////////////////////////////////////////////////////////////////////
//     Function: LensNode::hide_frustum
//       Access: Published
//  Description: Disables the drawing of the lens's frustum to aid in
//               visualization.
////////////////////////////////////////////////////////////////////
34
void LensNode::hide_frustum(void);

2948 14 get_class_type 4 3760 24 LensNode::get_class_type 0 1 1221 0
49
static TypeHandle LensNode::get_class_type(void);

2949 9 ~LensNode 4 3760 19 LensNode::~LensNode 0 0 0
26
LensNode::~LensNode(void);

2950 6 Camera 4 3761 14 Camera::Camera 0 3 1222 1223 1224 443
////////////////////////////////////////////////////////////////////
//     Function: Camera::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Camera::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
125
Camera::Camera(basic_string< char > const &name, Lens *lens = ((new PerspectiveLens())));
Camera::Camera(Camera const &copy);

2951 10 set_active 4 3761 18 Camera::set_active 0 1 1225 810
// Filename: camera.I
// Created by:  drose (26Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_active
//       Access: Published
//  Description: Sets the active flag on the camera.  When the camera
//               is not active, nothing will be rendered.
////////////////////////////////////////////////////////////////////
44
inline void Camera::set_active(bool active);

2952 9 is_active 4 3761 17 Camera::is_active 0 1 1226 295
////////////////////////////////////////////////////////////////////
//     Function: Camera::is_active
//       Access: Published
//  Description: Returns the current setting of the active flag on the
//               camera.
////////////////////////////////////////////////////////////////////
42
inline bool Camera::is_active(void) const;

2953 9 set_scene 4 3761 17 Camera::set_scene 0 1 1227 801
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_scene
//       Access: Published
//  Description: Sets the scene that will be rendered by the camera.
//               This is normally the root node of a scene graph,
//               typically a node called 'render', although it could
//               represent the root of any subgraph.
//
//               Note that the use of this method is now deprecated.
//               In the absence of an explicit scene set on the
//               camera, the camera will render whatever scene it is
//               parented into.  This is the preferred way to specify
//               the scene, since it is the more intuitive mechanism.
////////////////////////////////////////////////////////////////////
53
inline void Camera::set_scene(NodePath const &scene);

2954 9 get_scene 4 3761 17 Camera::get_scene 0 1 1228 306
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_scene
//       Access: Published
//  Description: Returns the scene that will be rendered by the
//               camera.  See set_scene().
////////////////////////////////////////////////////////////////////
53
inline NodePath const &Camera::get_scene(void) const;

2955 23 get_num_display_regions 4 3761 31 Camera::get_num_display_regions 0 1 1229 313
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_num_display_regions
//       Access: Published
//  Description: Returns the number of display regions associated with
//               the camera.
////////////////////////////////////////////////////////////////////
55
inline int Camera::get_num_display_regions(void) const;

2956 18 get_display_region 4 3761 26 Camera::get_display_region 0 1 1230 301
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_display_region
//       Access: Published
//  Description: Returns the nth display region associated with the
//               camera.
////////////////////////////////////////////////////////////////////
66
inline DisplayRegionBase *Camera::get_display_region(int n) const;

2957 15 set_camera_mask 4 3761 23 Camera::set_camera_mask 0 1 1231 717
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_camera_mask
//       Access: Published
//  Description: Changes the set of bits that represent the subset of
//               the scene graph the camera will render.
//
//               During the cull traversal, a node is not visited if
//               none of its draw mask bits intersect with the
//               camera's camera mask bits.  These masks can be used
//               to selectively hide and show different parts of the
//               scene graph from different cameras that are otherwise
//               viewing the same scene.
////////////////////////////////////////////////////////////////////
70
inline void Camera::set_camera_mask(BitMask< unsigned int, 32 > mask);

2958 15 get_camera_mask 4 3761 23 Camera::get_camera_mask 0 1 1232 373
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_camera_mask
//       Access: Published
//  Description: Returns the set of bits that represent the subset of
//               the scene graph the camera will render.  See
//               set_camera_mask().
////////////////////////////////////////////////////////////////////
71
inline BitMask< unsigned int, 32 > Camera::get_camera_mask(void) const;

2959 15 set_cull_center 4 3761 23 Camera::set_cull_center 0 1 1233 606
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_cull_center
//       Access: Published
//  Description: Specifies the point from which the culling operations
//               are performed.  Normally, this is the same as the
//               camera, and that is the default if this is not
//               specified; but it may sometimes be useful to perform
//               the culling from some other viewpoint, particularly
//               when you are debugging the culling itself.
////////////////////////////////////////////////////////////////////
65
inline void Camera::set_cull_center(NodePath const &cull_center);

2960 15 get_cull_center 4 3761 23 Camera::get_cull_center 0 1 1234 396
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_cull_center
//       Access: Published
//  Description: Returns the point from which the culling operations
//               will be performed, if it was set by
//               set_cull_center(), or the empty NodePath otherwise.
////////////////////////////////////////////////////////////////////
59
inline NodePath const &Camera::get_cull_center(void) const;

2961 14 set_lod_center 4 3761 22 Camera::set_lod_center 0 1 1235 680
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_lod_center
//       Access: Published
//  Description: Specifies the point from which the LOD distances
//               are measured.  Normally, this is the same as the
//               camera, and that is the default if this is not
//               specified; but it may sometimes be useful to perform
//               the distance test from some other viewpoint.  This
//               may be used, for instance, to reduce LOD popping when
//               the camera rotates in a small circle about an avatar.
////////////////////////////////////////////////////////////////////
63
inline void Camera::set_lod_center(NodePath const &lod_center);

2962 14 get_lod_center 4 3761 22 Camera::get_lod_center 0 1 1236 388
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_lod_center
//       Access: Published
//  Description: Returns the point from which the LOD distances will
//               be measured, if it was set by set_lod_center(), or
//               the empty NodePath otherwise.
////////////////////////////////////////////////////////////////////
58
inline NodePath const &Camera::get_lod_center(void) const;

2963 17 set_initial_state 4 3761 25 Camera::set_initial_state 0 1 1237 374
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_initial_state
//       Access: Published
//  Description: Sets the initial state which is applied to all nodes
//               in the scene, as if it were set at the top of the
//               scene graph.
////////////////////////////////////////////////////////////////////
64
inline void Camera::set_initial_state(RenderState const *state);

2964 17 get_initial_state 4 3761 25 Camera::get_initial_state 0 1 1238 317
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_initial_state
//       Access: Published
//  Description: Returns the initial state as set by a previous call
//               to set_initial_state().
////////////////////////////////////////////////////////////////////
75
inline ConstPointerTo< RenderState > Camera::get_initial_state(void) const;

2965 17 set_tag_state_key 4 3761 25 Camera::set_tag_state_key 0 1 1239 477
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state_key
//       Access: Published
//  Description: Sets the tag key which, when encountered as a tag on
//               nodes in the scene graph, causes this Camera to apply
//               an arbitrary state transition based on the value of
//               the tag (as specified to set_tag_state()).
////////////////////////////////////////////////////////////////////
81
inline void Camera::set_tag_state_key(basic_string< char > const &tag_state_key);

2966 17 get_tag_state_key 4 3761 25 Camera::get_tag_state_key 0 1 1240 311
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state_key
//       Access: Published
//  Description: Returns the tag key as set by a previous call to
//               set_tag_state_key().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &Camera::get_tag_state_key(void) const;

2967 13 set_tag_state 4 3761 21 Camera::set_tag_state 0 1 1241 959
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state
//       Access: Published
//  Description: Associates a particular state transition with the
//               indicated tag value.  When a node is encountered
//               during traversal with the tag key specified by
//               set_tag_state_key(), if the value of that tag matches
//               tag_state, then the indicated state is applied to
//               this node--but only when it is rendered by this
//               camera.
//
//               This can be used to apply special effects to nodes
//               when they are rendered by certain cameras.  It is
//               particularly useful for multipass rendering, in which
//               specialty cameras might be needed to render the scene
//               with a particular set of effects.
////////////////////////////////////////////////////////////////////
92
void Camera::set_tag_state(basic_string< char > const &tag_state, RenderState const *state);

2968 15 clear_tag_state 4 3761 23 Camera::clear_tag_state 0 1 1242 314
////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_tag_state
//       Access: Published
//  Description: Removes the association established by a previous
//               call to set_tag_state().
////////////////////////////////////////////////////////////////////
68
void Camera::clear_tag_state(basic_string< char > const &tag_state);

2969 13 has_tag_state 4 3761 21 Camera::has_tag_state 0 1 1243 343
////////////////////////////////////////////////////////////////////
//     Function: Camera::has_tag_state
//       Access: Published
//  Description: Returns true if set_tag_state() has previously been
//               called with the indicated tag state, false otherwise.
////////////////////////////////////////////////////////////////////
72
bool Camera::has_tag_state(basic_string< char > const &tag_state) const;

2970 13 get_tag_state 4 3761 21 Camera::get_tag_state 0 1 1244 402
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state
//       Access: Published
//  Description: Returns the state associated with the indicated tag
//               state by a previous call to set_tag_state(), or the
//               empty state if nothing has been associated.
////////////////////////////////////////////////////////////////////
97
ConstPointerTo< RenderState > Camera::get_tag_state(basic_string< char > const &tag_state) const;

2971 18 set_aux_scene_data 4 3761 26 Camera::set_aux_scene_data 0 1 1245 403
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_aux_scene_data
//       Access: Published
//  Description: Associates the indicated AuxSceneData object with the
//               given NodePath, possibly replacing a previous
//               data defined for the same NodePath, if any.
////////////////////////////////////////////////////////////////////
79
void Camera::set_aux_scene_data(NodePath const &node_path, AuxSceneData *data);

2972 20 clear_aux_scene_data 4 3761 28 Camera::clear_aux_scene_data 0 1 1246 401
////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_aux_scene_data
//       Access: Published
//  Description: Removes the AuxSceneData associated with the
//               indicated NodePath.  Returns true if it is removed
//               successfully, false if it was already gone.
////////////////////////////////////////////////////////////////////
61
bool Camera::clear_aux_scene_data(NodePath const &node_path);

2973 18 get_aux_scene_data 4 3761 26 Camera::get_aux_scene_data 0 1 1247 341
////////////////////////////////////////////////////////////////////
//     Function: Camera::get_aux_scene_data
//       Access: Published
//  Description: Returns the AuxSceneData associated with the
//               indicated NodePath, or NULL if nothing is associated.
////////////////////////////////////////////////////////////////////
74
AuxSceneData *Camera::get_aux_scene_data(NodePath const &node_path) const;

2974 19 list_aux_scene_data 4 3761 27 Camera::list_aux_scene_data 0 1 1248 298
////////////////////////////////////////////////////////////////////
//     Function: Camera::list_aux_scene_data
//       Access: Published
//  Description: Outputs all of the NodePaths and AuxSceneDatas in
//               use.
////////////////////////////////////////////////////////////////////
53
void Camera::list_aux_scene_data(ostream &out) const;

2975 22 cleanup_aux_scene_data 4 3761 30 Camera::cleanup_aux_scene_data 0 2 1249 1250 443
////////////////////////////////////////////////////////////////////
//     Function: Camera::cleanup_aux_scene_data
//       Access: Published
//  Description: Walks through the list of currently-assigned
//               AuxSceneData objects and releases any that are
//               past their expiration times.  Returns the number of
//               elements released.
////////////////////////////////////////////////////////////////////
86
int Camera::cleanup_aux_scene_data(Thread *current_thread = ((get_current_thread())));

2976 14 get_class_type 4 3761 22 Camera::get_class_type 0 1 1251 0
47
static TypeHandle Camera::get_class_type(void);

2977 9 PlaneNode 4 3762 20 PlaneNode::PlaneNode 0 2 1252 1253 446
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
85
PlaneNode::PlaneNode(basic_string< char > const &name, Planef const &plane = ((())));

2978 9 set_plane 4 3762 20 PlaneNode::set_plane 0 1 1254 289
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_plane
//       Access: Public
//  Description: Sets the particular plane represented by the
//               PlaneNode.
////////////////////////////////////////////////////////////////////
54
inline void PlaneNode::set_plane(Planef const &plane);

2979 9 get_plane 4 3762 20 PlaneNode::get_plane 0 1 1255 264
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_plane
//       Access: Public
//  Description: Returns the plane represented by the PlaneNode.
////////////////////////////////////////////////////////////////////
54
inline Planef const &PlaneNode::get_plane(void) const;

2980 13 set_viz_scale 4 3762 24 PlaneNode::set_viz_scale 0 1 1256 339
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_viz_scale
//       Access: Public
//  Description: Specifies the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
////////////////////////////////////////////////////////////////////
54
inline void PlaneNode::set_viz_scale(float viz_scale);

2981 13 get_viz_scale 4 3762 24 PlaneNode::get_viz_scale 0 1 1257 337
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_viz_scale
//       Access: Public
//  Description: Returns the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
////////////////////////////////////////////////////////////////////
50
inline float PlaneNode::get_viz_scale(void) const;

2982 12 set_priority 4 3762 23 PlaneNode::set_priority 0 1 1258 784
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_priority
//       Access: Published
//  Description: Changes the relative importance of this PlaneNode
//               (when it is used as a clip plane) relative to the
//               other clip planes that are applied simultaneously.
//
//               The priority number is used to decide which of the
//               requested clip planes are to be activated when more
//               clip planes are requested than the hardware will
//               support.  The highest-priority n planes are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
////////////////////////////////////////////////////////////////////
50
inline void PlaneNode::set_priority(int priority);

2983 12 get_priority 4 3762 23 PlaneNode::get_priority 0 1 1259 314
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_priority
//       Access: Published
//  Description: Returns the priority associated with this clip
//               plane.  See set_priority().
////////////////////////////////////////////////////////////////////
47
inline int PlaneNode::get_priority(void) const;

2984 15 set_clip_effect 4 3762 26 PlaneNode::set_clip_effect 0 1 1260 755
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_clip_effect
//       Access: Published
//  Description: Specifies the sort of things this plane will actually
//               clip (when it is used as a clip plane).  This is a
//               bitmask union of ClipEffect values.  If it includes
//               CE_visible, then it will clip visible geometry; if it
//               includes CE_collision, then it will clip collision
//               polygons.  If it includes neither bit, it will still
//               affect culling, but objects will either be wholly
//               behind the clipping plane, or wholly present.
////////////////////////////////////////////////////////////////////
56
inline void PlaneNode::set_clip_effect(int clip_effect);

2985 15 get_clip_effect 4 3762 26 PlaneNode::get_clip_effect 0 1 1261 315
////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_clip_effect
//       Access: Published
//  Description: Returns the clip_effect bits for this clip plane.
//               See set_clip_effect().
////////////////////////////////////////////////////////////////////
50
inline int PlaneNode::get_clip_effect(void) const;

2986 14 get_class_type 4 3762 25 PlaneNode::get_class_type 0 1 1262 0
50
static TypeHandle PlaneNode::get_class_type(void);

2987 10 ~PlaneNode 4 3762 21 PlaneNode::~PlaneNode 0 0 0
28
PlaneNode::~PlaneNode(void);

2988 4 make 4 3764 21 ClipPlaneAttrib::make 0 5 1263 1264 1265 1266 1267 2253
// The following is the new, more general interface to the
// ClipPlaneAttrib.

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that enables (or
//               disables, according to op) the indicated plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that does
//               nothing.
////////////////////////////////////////////////////////////////////
623
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(ClipPlaneAttrib::Operation op, PlaneNode *plane);
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(ClipPlaneAttrib::Operation op, PlaneNode *plane1, PlaneNode *plane2);
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(ClipPlaneAttrib::Operation op, PlaneNode *plane1, PlaneNode *plane2, PlaneNode *plane3);
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(ClipPlaneAttrib::Operation op, PlaneNode *plane1, PlaneNode *plane2, PlaneNode *plane3, PlaneNode *plane4);
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make(void);

2989 12 make_default 4 3764 29 ClipPlaneAttrib::make_default 0 1 1268 402
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make_default(void);

2990 13 get_operation 4 3764 30 ClipPlaneAttrib::get_operation 0 1 1269 900
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the ClipPlaneAttrib.
//               If this is O_set, the planes listed here completely
//               replace any planes that were already on.  If this is
//               O_add, the planes here are added to the set of of
//               planes that were already on, and if O_remove, the
//               planes here are removed from the set of planes that
//               were on.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
70
ClipPlaneAttrib::Operation ClipPlaneAttrib::get_operation(void) const;

2991 14 get_num_planes 4 3764 31 ClipPlaneAttrib::get_num_planes 0 1 1270 530
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_planes
//       Access: Published
//  Description: Returns the number of planes listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
48
int ClipPlaneAttrib::get_num_planes(void) const;

2992 9 get_plane 4 3764 26 ClipPlaneAttrib::get_plane 0 1 1271 518
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_plane
//       Access: Published
//  Description: Returns the nth plane listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
51
PlaneNode *ClipPlaneAttrib::get_plane(int n) const;

2993 9 has_plane 4 3764 26 ClipPlaneAttrib::has_plane 0 1 1272 566
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_plane
//       Access: Published
//  Description: Returns true if the indicated plane is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
////////////////////////////////////////////////////////////////////
56
bool ClipPlaneAttrib::has_plane(PlaneNode *plane) const;

2994 9 add_plane 4 3764 26 ClipPlaneAttrib::add_plane 0 1 1273 467
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes.
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
////////////////////////////////////////////////////////////////////
82
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::add_plane(PlaneNode *plane) const;

2995 12 remove_plane 4 3764 29 ClipPlaneAttrib::remove_plane 0 1 1274 497
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes.
//
//               This method is now deprecated.  Use remove_on_plane()
//               or remove_off_plane() instead.
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::remove_plane(PlaneNode *plane) const;

2996 12 make_all_off 4 3764 29 ClipPlaneAttrib::make_all_off 0 1 1275 430
// The following is the new, more general interface to the
// ClipPlaneAttrib.

////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that disables 
//               all planes (and hence disables clipping).
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > ClipPlaneAttrib::make_all_off(void);

2997 17 get_num_on_planes 4 3764 34 ClipPlaneAttrib::get_num_on_planes 0 1 1276 314
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_on_planes
//       Access: Published
//  Description: Returns the number of planes that are enabled by
//               the attribute.
////////////////////////////////////////////////////////////////////
58
inline int ClipPlaneAttrib::get_num_on_planes(void) const;

2998 12 get_on_plane 4 3764 29 ClipPlaneAttrib::get_on_plane 0 1 1277 317
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_on_plane
//       Access: Published
//  Description: Returns the nth plane enabled by the attribute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
59
inline NodePath ClipPlaneAttrib::get_on_plane(int n) const;

2999 12 has_on_plane 4 3764 29 ClipPlaneAttrib::has_on_plane 0 1 1278 324
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_on_plane
//       Access: Published
//  Description: Returns true if the indicated plane is enabled by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
71
inline bool ClipPlaneAttrib::has_on_plane(NodePath const &plane) const;

3000 18 get_num_off_planes 4 3764 35 ClipPlaneAttrib::get_num_off_planes 0 1 1279 316
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_off_planes
//       Access: Published
//  Description: Returns the number of planes that are disabled by
//               the attribute.
////////////////////////////////////////////////////////////////////
59
inline int ClipPlaneAttrib::get_num_off_planes(void) const;

3001 13 get_off_plane 4 3764 30 ClipPlaneAttrib::get_off_plane 0 1 1280 332
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_off_plane
//       Access: Published
//  Description: Returns the nth plane disabled by the attribute,
//               sorted in arbitrary (pointer) order.
////////////////////////////////////////////////////////////////////
60
inline NodePath ClipPlaneAttrib::get_off_plane(int n) const;

3002 13 has_off_plane 4 3764 30 ClipPlaneAttrib::has_off_plane 0 1 1281 326
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_off_plane
//       Access: Published
//  Description: Returns true if the indicated plane is disabled by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
72
inline bool ClipPlaneAttrib::has_off_plane(NodePath const &plane) const;

3003 11 has_all_off 4 3764 28 ClipPlaneAttrib::has_all_off 0 1 1282 328
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib disables all planes
//               (although it may also enable some).
////////////////////////////////////////////////////////////////////
53
inline bool ClipPlaneAttrib::has_all_off(void) const;

3004 11 is_identity 4 3764 28 ClipPlaneAttrib::is_identity 0 1 1283 333
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of planes in use.
////////////////////////////////////////////////////////////////////
53
inline bool ClipPlaneAttrib::is_identity(void) const;

3005 12 add_on_plane 4 3764 29 ClipPlaneAttrib::add_on_plane 0 1 1284 394
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               enabled by this attrib.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::add_on_plane(NodePath const &plane) const;

3006 15 remove_on_plane 4 3764 32 ClipPlaneAttrib::remove_on_plane 0 1 1285 401
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes enabled by this attrib.
////////////////////////////////////////////////////////////////////
93
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::remove_on_plane(NodePath const &plane) const;

3007 13 add_off_plane 4 3764 30 ClipPlaneAttrib::add_off_plane 0 1 1286 396
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               disabled by this attrib.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::add_off_plane(NodePath const &plane) const;

3008 16 remove_off_plane 4 3764 33 ClipPlaneAttrib::remove_off_plane 0 1 1287 403
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes disabled by this attrib.
////////////////////////////////////////////////////////////////////
94
ConstPointerTo< RenderAttrib > ClipPlaneAttrib::remove_off_plane(NodePath const &plane) const;

3009 13 filter_to_max 4 3764 30 ClipPlaneAttrib::filter_to_max 0 1 1288 477
////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new ClipPlaneAttrib, very much like this one,
//               but with the number of on_planes reduced to be no
//               more than max_clip_planes.  The number of off_planes in
//               the new ClipPlaneAttrib is undefined.
////////////////////////////////////////////////////////////////////
92
ConstPointerTo< ClipPlaneAttrib > ClipPlaneAttrib::filter_to_max(int max_clip_planes) const;

3010 14 get_class_slot 4 3764 31 ClipPlaneAttrib::get_class_slot 0 1 1289 0
49
static int ClipPlaneAttrib::get_class_slot(void);

3011 14 get_class_type 4 3764 31 ClipPlaneAttrib::get_class_type 0 1 1290 0
56
static TypeHandle ClipPlaneAttrib::get_class_type(void);

3012 16 ~ClipPlaneAttrib 4 3764 33 ClipPlaneAttrib::~ClipPlaneAttrib 0 0 0
40
ClipPlaneAttrib::~ClipPlaneAttrib(void);

3013 11 make_vertex 4 3766 24 ColorAttrib::make_vertex 0 1 1291 379
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_vertex
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered according to its own
//               vertex color.
////////////////////////////////////////////////////////////////////
69
static ConstPointerTo< RenderAttrib > ColorAttrib::make_vertex(void);

3014 9 make_flat 4 3766 22 ColorAttrib::make_flat 0 1 1292 349
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_flat
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered in the indicated color.
////////////////////////////////////////////////////////////////////
86
static ConstPointerTo< RenderAttrib > ColorAttrib::make_flat(LVecBase4f const &color);

3015 8 make_off 4 3766 21 ColorAttrib::make_off 0 1 1293 334
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered in white.
////////////////////////////////////////////////////////////////////
66
static ConstPointerTo< RenderAttrib > ColorAttrib::make_off(void);

3016 12 make_default 4 3766 25 ColorAttrib::make_default 0 1 1294 398
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
70
static ConstPointerTo< RenderAttrib > ColorAttrib::make_default(void);

3017 14 get_color_type 4 3766 27 ColorAttrib::get_color_type 0 1 1295 648
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color_type
//       Access: Published
//  Description: Returns the type of color specified by this
//               ColorAttrib.  The options are:
//
//                 T_vertex - use the vertex color specified in the
//                 geometry itself.
//
//                 T_flat - use the color specified in this
//                 ColorAttrib for all geometry.  You can get this
//                 color via get_color().
//
//                 T_off - use the color white.
////////////////////////////////////////////////////////////////////
65
inline ColorAttrib::Type ColorAttrib::get_color_type(void) const;

3018 9 get_color 4 3766 22 ColorAttrib::get_color 0 1 1296 391
////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color
//       Access: Published
//  Description: If the type is T_flat or T_off, this returns the
//               color that will be applied to geometry.  If the type
//               is T_vertex, this is meaningless.
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f const &ColorAttrib::get_color(void) const;

3019 14 get_class_slot 4 3766 27 ColorAttrib::get_class_slot 0 1 1297 0
45
static int ColorAttrib::get_class_slot(void);

3020 14 get_class_type 4 3766 27 ColorAttrib::get_class_type 0 1 1298 0
52
static TypeHandle ColorAttrib::get_class_type(void);

3021 12 ~ColorAttrib 4 3766 25 ColorAttrib::~ColorAttrib 0 0 0
32
ColorAttrib::~ColorAttrib(void);

3022 8 make_off 4 3768 26 ColorBlendAttrib::make_off 0 1 1299 396
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that
//               disables special-effect blending, allowing normal
//               transparency to be used instead.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make_off(void);

3023 4 make 4 3768 22 ColorBlendAttrib::make 0 3 1300 1301 1302 779
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object.  This
//               constructor is deprecated; use the one below, which
//               takes three or four parameters, instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that enables
//               special-effect blending.  This supercedes
//               transparency.
////////////////////////////////////////////////////////////////////
277
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make(ColorBlendAttrib::Mode mode);
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make(ColorBlendAttrib::Mode mode, ColorBlendAttrib::Operand a, ColorBlendAttrib::Operand b, LVecBase4f const &color = ((zero())));

3024 12 make_default 4 3768 30 ColorBlendAttrib::make_default 0 1 1303 403
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > ColorBlendAttrib::make_default(void);

3025 8 get_mode 4 3768 26 ColorBlendAttrib::get_mode 0 1 1304 254
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_mode
//       Access: Published
//  Description: Returns the colorBlend mode.
////////////////////////////////////////////////////////////////////
69
inline ColorBlendAttrib::Mode ColorBlendAttrib::get_mode(void) const;

3026 13 get_operand_a 4 3768 31 ColorBlendAttrib::get_operand_a 0 1 1305 278
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_a
//       Access: Published
//  Description: Returns the multiplier for the first component.
////////////////////////////////////////////////////////////////////
77
inline ColorBlendAttrib::Operand ColorBlendAttrib::get_operand_a(void) const;

3027 13 get_operand_b 4 3768 31 ColorBlendAttrib::get_operand_b 0 1 1306 279
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_b
//       Access: Published
//  Description: Returns the multiplier for the second component.
////////////////////////////////////////////////////////////////////
77
inline ColorBlendAttrib::Operand ColorBlendAttrib::get_operand_b(void) const;

3028 9 get_color 4 3768 27 ColorBlendAttrib::get_color 0 1 1307 281
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_color
//       Access: Published
//  Description: Returns the constant color associated with the attrib.
////////////////////////////////////////////////////////////////////
58
inline LVecBase4f ColorBlendAttrib::get_color(void) const;

3029 23 involves_constant_color 4 3768 41 ColorBlendAttrib::involves_constant_color 0 2 1308 1309 678
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               constant color, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               constant color, false otherwise.
////////////////////////////////////////////////////////////////////
163
inline bool ColorBlendAttrib::involves_constant_color(void) const;
static inline bool ColorBlendAttrib::involves_constant_color(ColorBlendAttrib::Operand operand);

3030 20 involves_color_scale 4 3768 38 ColorBlendAttrib::involves_color_scale 0 2 1310 1311 680
////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               color scale attrib, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               color scale attrib, false otherwise.
////////////////////////////////////////////////////////////////////
157
inline bool ColorBlendAttrib::involves_color_scale(void) const;
static inline bool ColorBlendAttrib::involves_color_scale(ColorBlendAttrib::Operand operand);

3031 14 get_class_slot 4 3768 32 ColorBlendAttrib::get_class_slot 0 1 1312 0
50
static int ColorBlendAttrib::get_class_slot(void);

3032 14 get_class_type 4 3768 32 ColorBlendAttrib::get_class_type 0 1 1313 0
57
static TypeHandle ColorBlendAttrib::get_class_type(void);

3033 17 ~ColorBlendAttrib 4 3768 35 ColorBlendAttrib::~ColorBlendAttrib 0 0 0
42
ColorBlendAttrib::~ColorBlendAttrib(void);

3034 13 make_identity 4 3771 31 ColorScaleAttrib::make_identity 0 1 1314 275
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs an identity scale attrib.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make_identity(void);

3035 4 make 4 3771 22 ColorScaleAttrib::make 0 1 1315 353
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that indicates
//               geometry should be scaled by the indicated factor.
////////////////////////////////////////////////////////////////////
86
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make(LVecBase4f const &scale);

3036 8 make_off 4 3771 26 ColorScaleAttrib::make_off 0 1 1316 477
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that ignores
//               any ColorScaleAttrib inherited from above.  You may
//               also specify an additional color scale to apply to
//               geometry below (using set_scale()).
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make_off(void);

3037 12 make_default 4 3771 30 ColorScaleAttrib::make_default 0 1 1317 403
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > ColorScaleAttrib::make_default(void);

3038 6 is_off 4 3771 24 ColorScaleAttrib::is_off 0 1 1318 526
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_off
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib will ignore any
//               color scales inherited from above, false otherwise.
//               This is not the same thing as !has_scale(); a
//               ColorScaleAttrib may have the "off" flag set and also
//               have another scale specified.
////////////////////////////////////////////////////////////////////
49
inline bool ColorScaleAttrib::is_off(void) const;

3039 11 is_identity 4 3771 29 ColorScaleAttrib::is_identity 0 1 1319 377
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_identity
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib is an identity
//               attrib, false if it is either an off attrib or it has
//               a scale.
////////////////////////////////////////////////////////////////////
54
inline bool ColorScaleAttrib::is_identity(void) const;

3040 9 has_scale 4 3771 27 ColorScaleAttrib::has_scale 0 1 1320 404
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale, false otherwise (in which case it
//               might be an off attrib or an identity attrib).
////////////////////////////////////////////////////////////////////
52
inline bool ColorScaleAttrib::has_scale(void) const;

3041 13 has_rgb_scale 4 3771 31 ColorScaleAttrib::has_rgb_scale 0 1 1321 386
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_rgb_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale in the RGB components (ignoring
//               alpha), or false otherwise.
////////////////////////////////////////////////////////////////////
56
inline bool ColorScaleAttrib::has_rgb_scale(void) const;

3042 15 has_alpha_scale 4 3771 33 ColorScaleAttrib::has_alpha_scale 0 1 1322 387
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_alpha_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale in the alpha component (ignoring
//               RGB), or false otherwise.
////////////////////////////////////////////////////////////////////
58
inline bool ColorScaleAttrib::has_alpha_scale(void) const;

3043 9 get_scale 4 3771 27 ColorScaleAttrib::get_scale 0 1 1323 269
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::get_scale
//       Access: Published
//  Description: Returns the scale to be applied to colors.
////////////////////////////////////////////////////////////////////
65
inline LVecBase4f const &ColorScaleAttrib::get_scale(void) const;

3044 9 set_scale 4 3771 27 ColorScaleAttrib::set_scale 0 1 1324 346
////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::set_scale
//       Access: Published
//  Description: Returns a new ColorScaleAttrib, just like this one, but
//               with the scale changed to the indicated value.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > ColorScaleAttrib::set_scale(LVecBase4f const &scale) const;

3045 14 get_class_slot 4 3771 32 ColorScaleAttrib::get_class_slot 0 1 1325 0
50
static int ColorScaleAttrib::get_class_slot(void);

3046 14 get_class_type 4 3771 32 ColorScaleAttrib::get_class_type 0 1 1326 0
57
static TypeHandle ColorScaleAttrib::get_class_type(void);

3047 17 ~ColorScaleAttrib 4 3771 35 ColorScaleAttrib::~ColorScaleAttrib 0 0 0
42
ColorScaleAttrib::~ColorScaleAttrib(void);

3048 4 make 4 3772 22 ColorWriteAttrib::make 0 1 1327 271
////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorWriteAttrib object.
////////////////////////////////////////////////////////////////////
84
static ConstPointerTo< RenderAttrib > ColorWriteAttrib::make(unsigned int channels);

3049 12 make_default 4 3772 30 ColorWriteAttrib::make_default 0 1 1328 403
////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > ColorWriteAttrib::make_default(void);

3050 12 get_channels 4 3772 30 ColorWriteAttrib::get_channels 0 1 1329 314
////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::get_channels
//       Access: Published
//  Description: Returns the mask of color channels that are enabled
//               by this attrib.
////////////////////////////////////////////////////////////////////
63
inline unsigned int ColorWriteAttrib::get_channels(void) const;

3051 14 get_class_slot 4 3772 32 ColorWriteAttrib::get_class_slot 0 1 1330 0
50
static int ColorWriteAttrib::get_class_slot(void);

3052 14 get_class_type 4 3772 32 ColorWriteAttrib::get_class_type 0 1 1331 0
57
static TypeHandle ColorWriteAttrib::get_class_type(void);

3053 17 ~ColorWriteAttrib 4 3772 35 ColorWriteAttrib::~ColorWriteAttrib 0 0 0
42
ColorWriteAttrib::~ColorWriteAttrib(void);

3054 4 make 4 3774 19 CompassEffect::make 0 2 1332 1333 660
////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::make
//       Access: Published, Static
//  Description: Constructs a new CompassEffect object.  If the
//               reference is an empty NodePath, it means the
//               CompassEffect is relative to the root of the scene
//               graph; otherwise, it's relative to the indicated
//               node.  The properties bitmask specifies the set of
//               properties that the compass node inherits from the
//               reference instead of from its parent.
////////////////////////////////////////////////////////////////////
111
static ConstPointerTo< RenderEffect > CompassEffect::make(NodePath const &reference, int properties = (P_rot));

3055 13 get_reference 4 3774 28 CompassEffect::get_reference 0 1 1334 398
////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::get_reference
//       Access: Published
//  Description: Returns the reference node from which the
//               CompassEffect inherits its transform.  If this is
//               empty, it means the root of the scene graph.
////////////////////////////////////////////////////////////////////
64
inline NodePath const &CompassEffect::get_reference(void) const;

3056 14 get_properties 4 3774 29 CompassEffect::get_properties 0 1 1335 398
////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::get_properties
//       Access: Published
//  Description: 
//               Returns the bitmask of properties that this
//               CompassEffect object inherits from its reference node
//               (or from the root).
////////////////////////////////////////////////////////////////////
53
inline int CompassEffect::get_properties(void) const;

3057 14 get_class_type 4 3774 29 CompassEffect::get_class_type 0 1 1336 0
54
static TypeHandle CompassEffect::get_class_type(void);

3058 14 ~CompassEffect 4 3774 29 CompassEffect::~CompassEffect 0 0 0
36
CompassEffect::~CompassEffect(void);

3059 13 ~CullBinEnums 4 3776 27 CullBinEnums::~CullBinEnums 0 0 0
34
CullBinEnums::~CullBinEnums(void);

3060 4 make 4 3778 19 CullBinAttrib::make 0 1 1337 589
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullBinAttrib assigning geometry
//               into the named bin.  If the bin name is the empty
//               string, the default bin is used.
//
//               The draw_order specifies further ordering information
//               which is relevant only to certain kinds of bins (in
//               particular CullBinFixed type bins).
////////////////////////////////////////////////////////////////////
112
static ConstPointerTo< RenderAttrib > CullBinAttrib::make(basic_string< char > const &bin_name, int draw_order);

3061 12 make_default 4 3778 27 CullBinAttrib::make_default 0 1 1338 400
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > CullBinAttrib::make_default(void);

3062 12 get_bin_name 4 3778 27 CullBinAttrib::get_bin_name 0 1 1339 373
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin this attribute specifies.
//               If this is the empty string, it refers to the default
//               bin.
////////////////////////////////////////////////////////////////////
75
inline basic_string< char > const &CullBinAttrib::get_bin_name(void) const;

3063 14 get_draw_order 4 3778 29 CullBinAttrib::get_draw_order 0 1 1340 448
////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_draw_order
//       Access: Published
//  Description: Returns the draw order this attribute specifies.
//               Some bins (in particular, CullBinFixed bins) use this
//               to further specify the order in which objects should
//               be rendered.
////////////////////////////////////////////////////////////////////
53
inline int CullBinAttrib::get_draw_order(void) const;

3064 14 get_class_slot 4 3778 29 CullBinAttrib::get_class_slot 0 1 1341 0
47
static int CullBinAttrib::get_class_slot(void);

3065 14 get_class_type 4 3778 29 CullBinAttrib::get_class_type 0 1 1342 0
54
static TypeHandle CullBinAttrib::get_class_type(void);

3066 14 ~CullBinAttrib 4 3778 29 CullBinAttrib::~CullBinAttrib 0 0 0
36
CullBinAttrib::~CullBinAttrib(void);

3067 7 add_bin 4 3779 23 CullBinManager::add_bin 0 1 1343 507
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::add_bin
//       Access: Published
//  Description: Defines a new bin with the indicated name, and
//               returns the new bin_index.  If there is already a bin
//               with the same name returns its bin_index if it had
//               the same properties; otherwise, reports an error and
//               returns -1.
////////////////////////////////////////////////////////////////////
100
int CullBinManager::add_bin(basic_string< char > const &name, CullBinEnums::BinType type, int sort);

3068 10 remove_bin 4 3779 26 CullBinManager::remove_bin 0 1 1344 663
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::remove_bin
//       Access: Published
//  Description: Permanently removes the indicated bin.  This
//               operation is not protected from the pipeline and will
//               disturb whatever is currently rendering in draw.  You
//               should not call this during the normal course of
//               rendering a frame; it is intended only as an aid to
//               development, to allow the developer to interactively
//               fiddle with the set of bins.
////////////////////////////////////////////////////////////////////
47
void CullBinManager::remove_bin(int bin_index);

3069 12 get_num_bins 4 3779 28 CullBinManager::get_num_bins 0 1 1345 268
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_num_bins
//       Access: Published
//  Description: Returns the number of bins in the world.
////////////////////////////////////////////////////////////////////
52
inline int CullBinManager::get_num_bins(void) const;

3070 7 get_bin 4 3779 23 CullBinManager::get_bin 0 1 1346 511
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin
//       Access: Published
//  Description: Returns the bin_index of the nth bin in the set,
//               where n is a number between 0 and get_num_bins().
//               This returns the list of bin_index numbers, in sorted
//               order (that is, in the order in which the bins should
//               be rendered).
////////////////////////////////////////////////////////////////////
48
inline int CullBinManager::get_bin(int n) const;

3071 8 find_bin 4 3779 24 CullBinManager::find_bin 0 1 1347 336
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::find_bin
//       Access: Published
//  Description: Returns the bin_index associated with the bin of the
//               given name, or -1 if no bin has that name.
////////////////////////////////////////////////////////////////////
69
int CullBinManager::find_bin(basic_string< char > const &name) const;

3072 12 get_bin_name 4 3779 28 CullBinManager::get_bin_name 0 1 1348 458
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).  The bin's name may not be changed
//               during the life of the bin.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > CullBinManager::get_bin_name(int bin_index) const;

3073 12 get_bin_type 4 3779 28 CullBinManager::get_bin_type 0 2 1349 1350 677
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               name.
////////////////////////////////////////////////////////////////////
178
inline CullBinEnums::BinType CullBinManager::get_bin_type(int bin_index) const;
inline CullBinEnums::BinType CullBinManager::get_bin_type(basic_string< char > const &name) const;

3074 12 set_bin_type 4 3779 28 CullBinManager::set_bin_type 0 2 1351 1352 995
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               name.
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
////////////////////////////////////////////////////////////////////
188
inline void CullBinManager::set_bin_type(int bin_index, CullBinEnums::BinType type);
inline void CullBinManager::set_bin_type(basic_string< char > const &name, CullBinEnums::BinType type);

3075 12 get_bin_sort 4 3779 28 CullBinManager::get_bin_sort 0 2 1353 1354 1055
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////
142
inline int CullBinManager::get_bin_sort(int bin_index) const;
inline int CullBinManager::get_bin_sort(basic_string< char > const &name) const;

3076 12 set_bin_sort 4 3779 28 CullBinManager::set_bin_sort 0 2 1355 1356 1055
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
////////////////////////////////////////////////////////////////////
152
inline void CullBinManager::set_bin_sort(int bin_index, int sort);
inline void CullBinManager::set_bin_sort(basic_string< char > const &name, int sort);

3077 14 get_bin_active 4 3779 30 CullBinManager::get_bin_active 0 2 1357 1358 921
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////
148
inline bool CullBinManager::get_bin_active(int bin_index) const;
inline bool CullBinManager::get_bin_active(basic_string< char > const &name) const;

3078 14 set_bin_active 4 3779 30 CullBinManager::set_bin_active 0 2 1359 1360 921
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
////////////////////////////////////////////////////////////////////
162
inline void CullBinManager::set_bin_active(int bin_index, bool active);
inline void CullBinManager::set_bin_active(basic_string< char > const &name, bool active);

3079 5 write 4 3779 21 CullBinManager::write 0 1 1361 221
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void CullBinManager::write(ostream &out) const;

3080 14 get_global_ptr 4 3779 30 CullBinManager::get_global_ptr 0 1 1362 311
////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global CullBinManager
//               object.
////////////////////////////////////////////////////////////////////
60
static CullBinManager *CullBinManager::get_global_ptr(void);

3081 4 make 4 3780 20 CullFaceAttrib::make 0 2 1363 1364 739
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that specifies
//               how to cull geometry.  By Panda convention, vertices
//               are ordered counterclockwise when seen from the
//               front, so the M_cull_clockwise will cull backfacing
//               polygons.
//
//               M_cull_unchanged is an identity attrib; if this is
//               applied to vertices without any other intervening
//               attrib, it is the same as applying the default
//               attrib.
////////////////////////////////////////////////////////////////////
107
static ConstPointerTo< RenderAttrib > CullFaceAttrib::make(CullFaceAttrib::Mode mode = (M_cull_clockwise));

3082 12 make_reverse 4 3780 28 CullFaceAttrib::make_reverse 0 1 1365 529
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make_reverse
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that reverses
//               the effects of any other CullFaceAttrib objects in
//               the scene graph.  M_cull_clockwise will be treated as
//               M_cull_counter_clockwise, and vice-versa.
//               M_cull_none is unchanged.
////////////////////////////////////////////////////////////////////
73
static ConstPointerTo< RenderAttrib > CullFaceAttrib::make_reverse(void);

3083 12 make_default 4 3780 28 CullFaceAttrib::make_default 0 1 1366 401
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
73
static ConstPointerTo< RenderAttrib > CullFaceAttrib::make_default(void);

3084 15 get_actual_mode 4 3780 31 CullFaceAttrib::get_actual_mode 0 1 1367 382
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_actual_mode
//       Access: Published
//  Description: Returns the actual culling mode, without considering
//               the effects of the reverse flag.  See also
//               get_effective_mode().
////////////////////////////////////////////////////////////////////
72
inline CullFaceAttrib::Mode CullFaceAttrib::get_actual_mode(void) const;

3085 11 get_reverse 4 3780 27 CullFaceAttrib::get_reverse 0 1 1368 608
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_reverse
//       Access: Published
//  Description: Returns the 'reverse' flag.  If this is true, the
//               actual cull direction (clockwise
//               vs. counterclockwise) is the reverse of what is
//               specified here.  This allows support for
//               make_reverse(), which defines a CullFaceAttrib that
//               reverses whatever the sense of culling would have
//               been.
////////////////////////////////////////////////////////////////////
52
inline bool CullFaceAttrib::get_reverse(void) const;

3086 18 get_effective_mode 4 3780 34 CullFaceAttrib::get_effective_mode 0 1 1369 487
////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_effective_mode
//       Access: Published
//  Description: Returns the effective culling mode.  This is the same
//               as the actual culling mode, unless the reverse flag
//               is set, which swaps CW for CCW and vice-versa.  Also,
//               M_cull_unchanged is mapped to M_cull_none.
////////////////////////////////////////////////////////////////////
68
CullFaceAttrib::Mode CullFaceAttrib::get_effective_mode(void) const;

3087 14 get_class_slot 4 3780 30 CullFaceAttrib::get_class_slot 0 1 1370 0
48
static int CullFaceAttrib::get_class_slot(void);

3088 14 get_class_type 4 3780 30 CullFaceAttrib::get_class_type 0 1 1371 0
55
static TypeHandle CullFaceAttrib::get_class_type(void);

3089 15 ~CullFaceAttrib 4 3780 31 CullFaceAttrib::~CullFaceAttrib 0 0 0
38
CullFaceAttrib::~CullFaceAttrib(void);

3090 8 GeomNode 4 3782 18 GeomNode::GeomNode 0 1 1372 447
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeomNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
53
GeomNode::GeomNode(basic_string< char > const &name);

3091 13 set_preserved 4 3782 23 GeomNode::set_preserved 0 1 1373 850
// Filename: geomNode.I
// Created by:  drose (23Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_preserved
//       Access: Published
//  Description: Sets the "preserved" flag.  When this is true, the
//               GeomNode will be left untouched by any flatten
//               operations.
////////////////////////////////////////////////////////////////////
48
inline void GeomNode::set_preserved(bool value);

3092 13 get_preserved 4 3782 23 GeomNode::get_preserved 0 1 1374 369
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_preserved
//       Access: Published
//  Description: Returns the "preserved" flag.  When this is true, the
//               GeomNode will be left untouched by any flatten
//               operations.
////////////////////////////////////////////////////////////////////
48
inline bool GeomNode::get_preserved(void) const;

3093 13 get_num_geoms 4 3782 23 GeomNode::get_num_geoms 0 1 1375 263
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_num_geoms
//       Access: Published
//  Description: Returns the number of geoms in the node.
////////////////////////////////////////////////////////////////////
47
inline int GeomNode::get_num_geoms(void) const;

3094 8 get_geom 4 3782 18 GeomNode::get_geom 0 1 1376 438
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom
//       Access: Published
//  Description: Returns the nth geom of the node.  This object should
//               not be modified, since the same object might be
//               shared between multiple different GeomNodes, but see
//               modify_geom().
////////////////////////////////////////////////////////////////////
62
inline ConstPointerTo< Geom > GeomNode::get_geom(int n) const;

3095 11 modify_geom 4 3782 21 GeomNode::modify_geom 0 1 1377 1031
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::modify_geom
//       Access: Published
//  Description: Returns the nth geom of the node, suitable for
//               modifying it.  If the nth Geom has multiple reference
//               counts to it, reassigns it to an identical copy
//               first, and returns the new copy--this provides a
//               "copy on write" that ensures that the Geom that is
//               returned is unique to this GeomNode and is not shared
//               with any other GeomNodes.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
////////////////////////////////////////////////////////////////////
54
inline PointerTo< Geom > GeomNode::modify_geom(int n);

3096 14 get_geom_state 4 3782 24 GeomNode::get_geom_state 0 1 1378 585
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom_state
//       Access: Published
//  Description: Returns the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
////////////////////////////////////////////////////////////////////
64
inline RenderState const *GeomNode::get_geom_state(int n) const;

3097 14 set_geom_state 4 3782 24 GeomNode::set_geom_state 0 1 1379 965
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom_state
//       Access: Published
//  Description: Changes the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
////////////////////////////////////////////////////////////////////
70
inline void GeomNode::set_geom_state(int n, RenderState const *state);

3098 8 add_geom 4 3782 18 GeomNode::add_geom 0 2 1380 1381 432
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geom
//       Access: Published
//  Description: Adds a new Geom to the node.  The geom is given the
//               indicated state (which may be
//               RenderState::make_empty(), to completely inherit its
//               state from the scene graph).
////////////////////////////////////////////////////////////////////
81
void GeomNode::add_geom(Geom *geom, RenderState const *state = ((make_empty())));

3099 14 add_geoms_from 4 3782 24 GeomNode::add_geoms_from 0 1 1382 336
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geoms_from
//       Access: Published
//  Description: Copies the Geoms (and their associated RenderStates)
//               from the indicated GeomNode into this one.
////////////////////////////////////////////////////////////////////
53
void GeomNode::add_geoms_from(GeomNode const *other);

3100 8 set_geom 4 3782 18 GeomNode::set_geom 0 1 1383 708
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom
//       Access: Public
//  Description: Replaces the nth Geom of the node with a new pointer.
//               There must already be a Geom in this slot.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
////////////////////////////////////////////////////////////////////
43
void GeomNode::set_geom(int n, Geom *geom);

3101 11 remove_geom 4 3782 21 GeomNode::remove_geom 0 1 1384 256
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_geom
//       Access: Published
//  Description: Removes the nth geom from the node.
////////////////////////////////////////////////////////////////////
41
inline void GeomNode::remove_geom(int n);

3102 16 remove_all_geoms 4 3782 26 GeomNode::remove_all_geoms 0 1 1385 270
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_all_geoms
//       Access: Published
//  Description: Removes all the geoms from the node at once.
////////////////////////////////////////////////////////////////////
45
inline void GeomNode::remove_all_geoms(void);

3103 11 check_valid 4 3782 21 GeomNode::check_valid 0 1 1386 453
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::check_valid
//       Access: Published
//  Description: Verifies that the each Geom within the GeomNode
//               reference vertices that actually exist within its
//               GeomVertexData.  Returns true if the GeomNode appears
//               to be valid, false otherwise.
////////////////////////////////////////////////////////////////////
39
bool GeomNode::check_valid(void) const;

3104 9 decompose 4 3782 19 GeomNode::decompose 0 1 1387 755
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::decompose
//       Access: Published
//  Description: Calls decompose() on each Geom with the GeomNode.
//               This decomposes higher-order primitive types, like
//               triangle strips, into lower-order types like indexed
//               triangles.  Normally there is no reason to do this,
//               but it can be useful as an early preprocessing step,
//               to allow a later call to unify() to proceed more
//               quickly.
//
//               See also SceneGraphReducer::decompose(), which is the
//               normal way this is called.
////////////////////////////////////////////////////////////////////
31
void GeomNode::decompose(void);

3105 5 unify 4 3782 15 GeomNode::unify 0 1 1388 1354
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::unify
//       Access: Published
//  Description: Attempts to unify all of the Geoms contained within
//               this node into a single Geom, or at least as few
//               Geoms as possible.  In turn, the individual
//               GeomPrimitives contained within each resulting Geom
//               are also unified.  The goal is to reduce the number
//               of GeomPrimitives within the node as far as possible.
//               This may result in composite primitives, such as
//               triangle strips and triangle fans, being decomposed
//               into triangles.  See also Geom::unify().
//
//               max_indices represents the maximum number of indices
//               that will be put in any one GeomPrimitive.  If
//               preserve_order is true, then the primitives will not
//               be reordered during the operation, even if this
//               results in a suboptimal result.
//
//               In order for this to be successful, the primitives
//               must reference the same GeomVertexData, have the same
//               fundamental primitive type, and have compatible shade
//               models.
////////////////////////////////////////////////////////////////////
59
void GeomNode::unify(int max_indices, bool preserve_order);

3106 11 write_geoms 4 3782 21 GeomNode::write_geoms 0 1 1389 294
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_geoms
//       Access: Published
//  Description: Writes a short description of all the Geoms in the
//               node.
////////////////////////////////////////////////////////////////////
65
void GeomNode::write_geoms(ostream &out, int indent_level) const;

3107 13 write_verbose 4 3782 23 GeomNode::write_verbose 0 1 1390 299
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_verbose
//       Access: Published
//  Description: Writes a detailed description of all the Geoms in the
//               node.
////////////////////////////////////////////////////////////////////
67
void GeomNode::write_verbose(ostream &out, int indent_level) const;

3108 24 get_default_collide_mask 4 3782 34 GeomNode::get_default_collide_mask 0 1 1391 323
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_default_collide_mask
//       Access: Published, Static
//  Description: Returns the default into_collide_mask assigned to new
//               GeomNodes.
////////////////////////////////////////////////////////////////////
83
static inline BitMask< unsigned int, 32 > GeomNode::get_default_collide_mask(void);

3109 14 get_class_type 4 3782 24 GeomNode::get_class_type 0 1 1392 0
49
static TypeHandle GeomNode::get_class_type(void);

3110 18 set_display_region 4 3783 30 SceneSetup::set_display_region 0 1 1393 273
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_display_region
//       Access: Published
//  Description: Specifies the display region for the scene.
////////////////////////////////////////////////////////////////////
74
inline void SceneSetup::set_display_region(DisplayRegion *display_region);

3111 18 get_display_region 4 3783 30 SceneSetup::get_display_region 0 1 1394 271
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_display_region
//       Access: Published
//  Description: Returns the display region for the scene.
////////////////////////////////////////////////////////////////////
65
inline DisplayRegion *SceneSetup::get_display_region(void) const;

3112 17 set_viewport_size 4 3783 29 SceneSetup::set_viewport_size 0 1 1395 309
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_viewport_size
//       Access: Published
//  Description: Specifies the size of the viewport (display region),
//               in pixels.
////////////////////////////////////////////////////////////////////
65
inline void SceneSetup::set_viewport_size(int width, int height);

3113 18 get_viewport_width 4 3783 30 SceneSetup::get_viewport_width 0 1 1396 308
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_viewport_width
//       Access: Published
//  Description: Returns the width of the viewport (display region) in
//               pixels.
////////////////////////////////////////////////////////////////////
54
inline int SceneSetup::get_viewport_width(void) const;

3114 19 get_viewport_height 4 3783 31 SceneSetup::get_viewport_height 0 1 1397 310
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_viewport_height
//       Access: Published
//  Description: Returns the height of the viewport (display region) in
//               pixels.
////////////////////////////////////////////////////////////////////
55
inline int SceneSetup::get_viewport_height(void) const;

3115 14 set_scene_root 4 3783 26 SceneSetup::set_scene_root 0 1 1398 263
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_scene_root
//       Access: Published
//  Description: Specifies the root node of the scene.
////////////////////////////////////////////////////////////////////
67
inline void SceneSetup::set_scene_root(NodePath const &scene_root);

3116 14 get_scene_root 4 3783 26 SceneSetup::get_scene_root 0 1 1399 261
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_scene_root
//       Access: Published
//  Description: Returns the root node of the scene.
////////////////////////////////////////////////////////////////////
62
inline NodePath const &SceneSetup::get_scene_root(void) const;

3117 15 set_camera_path 4 3783 27 SceneSetup::set_camera_path 0 1 1400 264
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_path
//       Access: Published
//  Description: Specifies the NodePath to the camera.
////////////////////////////////////////////////////////////////////
69
inline void SceneSetup::set_camera_path(NodePath const &camera_path);

3118 15 get_camera_path 4 3783 27 SceneSetup::get_camera_path 0 1 1401 262
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_path
//       Access: Published
//  Description: Returns the NodePath to the camera.
////////////////////////////////////////////////////////////////////
63
inline NodePath const &SceneSetup::get_camera_path(void) const;

3119 15 set_camera_node 4 3783 27 SceneSetup::set_camera_node 0 1 1402 273
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_node
//       Access: Published
//  Description: Specifies the camera used to render the scene.
////////////////////////////////////////////////////////////////////
61
inline void SceneSetup::set_camera_node(Camera *camera_node);

3120 15 get_camera_node 4 3783 27 SceneSetup::get_camera_node 0 1 1403 271
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_node
//       Access: Published
//  Description: Returns the camera used to render the scene.
////////////////////////////////////////////////////////////////////
55
inline Camera *SceneSetup::get_camera_node(void) const;

3121 8 set_lens 4 3783 20 SceneSetup::set_lens 0 1 1404 269
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_lens
//       Access: Published
//  Description: Indicates the particular Lens used for rendering.
////////////////////////////////////////////////////////////////////
51
inline void SceneSetup::set_lens(Lens const *lens);

3122 8 get_lens 4 3783 20 SceneSetup::get_lens 0 1 1405 267
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_lens
//       Access: Published
//  Description: Returns the particular Lens used for rendering.
////////////////////////////////////////////////////////////////////
52
inline Lens const *SceneSetup::get_lens(void) const;

3123 12 set_inverted 4 3783 24 SceneSetup::set_inverted 0 1 1406 477
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
////////////////////////////////////////////////////////////////////
52
inline void SceneSetup::set_inverted(bool inverted);

3124 12 get_inverted 4 3783 24 SceneSetup::get_inverted 0 1 1407 434
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.
////////////////////////////////////////////////////////////////////
49
inline bool SceneSetup::get_inverted(void) const;

3125 15 get_cull_center 4 3783 27 SceneSetup::get_cull_center 0 1 1408 469
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cull_center
//       Access: Published
//  Description: Returns the point from which the culling operations
//               will be performed.  This is normally the camera, but
//               if camera->set_cull_center() has been specified, it
//               will be that special node instead.
////////////////////////////////////////////////////////////////////
63
inline NodePath const &SceneSetup::get_cull_center(void) const;

3126 17 set_initial_state 4 3783 29 SceneSetup::set_initial_state 0 1 1409 378
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_initial_state
//       Access: Published
//  Description: Sets the initial state which is applied to all nodes
//               in the scene, as if it were set at the top of the
//               scene graph.
////////////////////////////////////////////////////////////////////
76
inline void SceneSetup::set_initial_state(RenderState const *initial_state);

3127 17 get_initial_state 4 3783 29 SceneSetup::get_initial_state 0 1 1410 321
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_initial_state
//       Access: Published
//  Description: Returns the initial state as set by a previous call
//               to set_initial_state().
////////////////////////////////////////////////////////////////////
68
inline RenderState const *SceneSetup::get_initial_state(void) const;

3128 20 set_camera_transform 4 3783 32 SceneSetup::set_camera_transform 0 1 1411 316
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_transform
//       Access: Published
//  Description: Specifies the position of the camera relative to the
//               starting node.
////////////////////////////////////////////////////////////////////
85
inline void SceneSetup::set_camera_transform(TransformState const *camera_transform);

3129 20 get_camera_transform 4 3783 32 SceneSetup::get_camera_transform 0 1 1412 314
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_transform
//       Access: Published
//  Description: Returns the position of the camera relative to the
//               starting node.
////////////////////////////////////////////////////////////////////
74
inline TransformState const *SceneSetup::get_camera_transform(void) const;

3130 19 set_world_transform 4 3783 31 SceneSetup::set_world_transform 0 1 1413 378
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_world_transform
//       Access: Published
//  Description: Specifies the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
////////////////////////////////////////////////////////////////////
83
inline void SceneSetup::set_world_transform(TransformState const *world_transform);

3131 19 get_world_transform 4 3783 31 SceneSetup::get_world_transform 0 1 1414 376
////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_world_transform
//       Access: Published
//  Description: Returns the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
////////////////////////////////////////////////////////////////////
73
inline TransformState const *SceneSetup::get_world_transform(void) const;

3132 11 ~SceneSetup 4 3783 23 SceneSetup::~SceneSetup 0 0 0
30
SceneSetup::~SceneSetup(void);

3133 13 CullTraverser 4 3784 28 CullTraverser::CullTraverser 0 2 1415 1416 459
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
92
CullTraverser::CullTraverser(void);
CullTraverser::CullTraverser(CullTraverser const &copy);

3134 7 get_gsg 4 3784 22 CullTraverser::get_gsg 0 1 1417 755
// Filename: cullTraverser.I
// Created by:  drose (23Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_gsg
//       Access: Published
//  Description: Returns the GraphicsStateGuardian in effect.
////////////////////////////////////////////////////////////////////
69
inline GraphicsStateGuardianBase *CullTraverser::get_gsg(void) const;

3135 18 get_current_thread 4 3784 33 CullTraverser::get_current_thread 0 1 1418 340
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_current_thread
//       Access: Published
//  Description: Returns the currently-executing thread object, as
//               passed to the CullTraverser constructor.
////////////////////////////////////////////////////////////////////
61
inline Thread *CullTraverser::get_current_thread(void) const;

3136 9 set_scene 4 3784 24 CullTraverser::set_scene 0 1 1419 388
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_scene
//       Access: Published, Virtual
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.
////////////////////////////////////////////////////////////////////
122
virtual void CullTraverser::set_scene(SceneSetup *scene_setup, GraphicsStateGuardianBase *gsg, bool dr_incomplete_render);

3137 9 get_scene 4 3784 24 CullTraverser::get_scene 0 1 1420 254
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_scene
//       Access: Published
//  Description: Returns the SceneSetup object.
////////////////////////////////////////////////////////////////////
56
inline SceneSetup *CullTraverser::get_scene(void) const;

3138 17 has_tag_state_key 4 3784 32 CullTraverser::has_tag_state_key 0 1 1421 349
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::has_tag_state_key
//       Access: Published
//  Description: Returns true if a nonempty tag state key has been
//               specified for the scene's camera, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool CullTraverser::has_tag_state_key(void) const;

3139 17 get_tag_state_key 4 3784 32 CullTraverser::get_tag_state_key 0 1 1422 330
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_tag_state_key
//       Access: Published
//  Description: Returns the tag state key that has been specified for
//               the scene's camera, if any.
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > const &CullTraverser::get_tag_state_key(void) const;

3140 15 set_camera_mask 4 3784 30 CullTraverser::set_camera_mask 0 1 1423 571
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_camera_mask
//       Access: Published
//  Description: Changes the visibility mask for the camera viewing
//               the scene.  This is normally set automatically
//               at the time setup_scene() is called; you should
//               change this only if you want to render some set of
//               objects different from what the camera normally would
//               draw.
////////////////////////////////////////////////////////////////////
91
inline void CullTraverser::set_camera_mask(BitMask< unsigned int, 32 > const &camera_mask);

3141 15 get_camera_mask 4 3784 30 CullTraverser::get_camera_mask 0 1 1424 309
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_camera_mask
//       Access: Published
//  Description: Returns the visibility mask from the camera viewing
//               the scene.
////////////////////////////////////////////////////////////////////
85
inline BitMask< unsigned int, 32 > const &CullTraverser::get_camera_mask(void) const;

3142 20 get_camera_transform 4 3784 35 CullTraverser::get_camera_transform 0 1 1425 317
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_camera_transform
//       Access: Published
//  Description: Returns the position of the camera relative to the
//               starting node.
////////////////////////////////////////////////////////////////////
77
inline TransformState const *CullTraverser::get_camera_transform(void) const;

3143 19 get_world_transform 4 3784 34 CullTraverser::get_world_transform 0 1 1426 689
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_world_transform
//       Access: Published
//  Description: Returns the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
//
//               Note that this value is always the position of the
//               starting node, not the current node, even if it is
//               sampled during a traversal.  To get the transform of
//               the current node use
//               CullTraverserData::get_modelview_transform().
////////////////////////////////////////////////////////////////////
76
inline TransformState const *CullTraverser::get_world_transform(void) const;

3144 17 get_initial_state 4 3784 32 CullTraverser::get_initial_state 0 1 1427 401
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_initial_state
//       Access: Published
//  Description: Returns the initial RenderState at the top of the
//               scene graph we are traversing, or the empty state if
//               the initial state was never set.
////////////////////////////////////////////////////////////////////
71
inline RenderState const *CullTraverser::get_initial_state(void) const;

3145 23 get_depth_offset_decals 4 3784 38 CullTraverser::get_depth_offset_decals 0 1 1428 324
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_depth_offset_decals
//       Access: Published
//  Description: Returns the depth_offset_decals flag.  See
//               set_depth_offset_decals().
////////////////////////////////////////////////////////////////////
63
inline bool CullTraverser::get_depth_offset_decals(void) const;

3146 16 set_view_frustum 4 3784 31 CullTraverser::set_view_frustum 0 1 1429 405
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_view_frustum
//       Access: Published
//  Description: Specifies the bounding volume that corresponds to the
//               view frustum.  Any primitives that fall entirely
//               outside of this volume are not drawn.
////////////////////////////////////////////////////////////////////
83
inline void CullTraverser::set_view_frustum(GeometricBoundingVolume *view_frustum);

3147 16 get_view_frustum 4 3784 31 CullTraverser::get_view_frustum 0 1 1430 764
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_view_frustum
//       Access: Published
//  Description: Returns the bounding volume that corresponds to the
//               view frustum, or NULL if the view frustum is not in
//               use or has not been set.
//
//               Note that the view frustum returned here is always in
//               the coordinate space of the starting node, not the
//               current node, even if it is sampled during a
//               traversal.  To get the view frustum in the current
//               node's coordinate space, check in the current
//               CullTraverserData.
////////////////////////////////////////////////////////////////////
76
inline GeometricBoundingVolume *CullTraverser::get_view_frustum(void) const;

3148 16 set_cull_handler 4 3784 31 CullTraverser::set_cull_handler 0 1 1431 349
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_cull_handler
//       Access: Published
//  Description: Specifies the object that will receive the culled
//               Geoms.  This must be set before calling traverse().
////////////////////////////////////////////////////////////////////
71
inline void CullTraverser::set_cull_handler(CullHandler *cull_handler);

3149 16 get_cull_handler 4 3784 31 CullTraverser::get_cull_handler 0 1 1432 302
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_cull_handler
//       Access: Published
//  Description: Returns the object that will receive the culled
//               Geoms.
////////////////////////////////////////////////////////////////////
64
inline CullHandler *CullTraverser::get_cull_handler(void) const;

3150 18 set_portal_clipper 4 3784 33 CullTraverser::set_portal_clipper 0 1 1433 345
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_portal_clipper
//       Access: Published
//  Description: Specifies _portal_clipper object pointer that 
//               subsequent traverse() or traverse_below may use.
////////////////////////////////////////////////////////////////////
77
inline void CullTraverser::set_portal_clipper(PortalClipper *portal_clipper);

3151 18 get_portal_clipper 4 3784 33 CullTraverser::get_portal_clipper 0 1 1434 268
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_portal_clipper
//       Access: Published
//  Description: Returns the _portal_clipper pointer
////////////////////////////////////////////////////////////////////
68
inline PortalClipper *CullTraverser::get_portal_clipper(void) const;

3152 31 get_effective_incomplete_render 4 3784 46 CullTraverser::get_effective_incomplete_render 0 1 1435 666
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_effective_incomplete_render
//       Access: Published
//  Description: Returns true if the cull traversal is effectively in
//               incomplete_render state, considering both the GSG's
//               incomplete_render and the current DisplayRegion's
//               incomplete_render flags.  This returns the flag
//               during the cull traversal; see
//               GSG::get_effective_incomplete_render() for this same
//               flag during the draw traversal.
////////////////////////////////////////////////////////////////////
71
inline bool CullTraverser::get_effective_incomplete_render(void) const;

3153 8 traverse 4 3784 23 CullTraverser::traverse 0 2 1436 1437 671
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse
//       Access: Published
//  Description: Begins the traversal from the indicated node.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse
//       Access: Published
//  Description: Traverses from the next node with the given
//               data, which has been constructed with the node but
//               has not yet been converted into the node's space.
////////////////////////////////////////////////////////////////////
106
void CullTraverser::traverse(NodePath const &root);
void CullTraverser::traverse(CullTraverserData &data);

3154 14 traverse_below 4 3784 29 CullTraverser::traverse_below 0 1 1438 390
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse_below
//       Access: Published, Virtual
//  Description: Traverses all the children of the indicated node,
//               with the given data, which has been converted into
//               the node's space.
////////////////////////////////////////////////////////////////////
68
virtual void CullTraverser::traverse_below(CullTraverserData &data);

3155 12 end_traverse 4 3784 27 CullTraverser::end_traverse 0 1 1439 397
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::end_traverse
//       Access: Published, Virtual
//  Description: Should be called when the traverser has finished
//               traversing its scene, this gives it a chance to do
//               any necessary finalization.
////////////////////////////////////////////////////////////////////
47
virtual void CullTraverser::end_traverse(void);

3156 11 flush_level 4 3784 26 CullTraverser::flush_level 0 1 1440 284
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::flush_level
//       Access: Published, Static
//  Description: Flushes the PStatCollectors used during traversal.
////////////////////////////////////////////////////////////////////
52
static inline void CullTraverser::flush_level(void);

3157 20 draw_bounding_volume 4 3784 35 CullTraverser::draw_bounding_volume 0 1 1441 320
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::draw_bounding_volume
//       Access: Published
//  Description: Draws an appropriate visualization of the indicated
//               bounding volume.
////////////////////////////////////////////////////////////////////
148
void CullTraverser::draw_bounding_volume(BoundingVolume const *vol, TransformState const *net_transform, TransformState const *modelview_transform);

3158 14 get_class_type 4 3784 29 CullTraverser::get_class_type 0 1 1442 0
54
static TypeHandle CullTraverser::get_class_type(void);

3159 14 ~CullTraverser 4 3784 29 CullTraverser::~CullTraverser 0 0 0
36
CullTraverser::~CullTraverser(void);

3160 18 ~CullTraverserData 4 3785 37 CullTraverserData::~CullTraverserData 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::Destructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline CullTraverserData::~CullTraverserData(void);

3161 4 node 4 3785 23 CullTraverserData::node 0 1 1443 260
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::node
//       Access: Published
//  Description: Returns the node traversed to so far.
////////////////////////////////////////////////////////////////////
54
inline PandaNode *CullTraverserData::node(void) const;

3162 23 get_modelview_transform 4 3785 42 CullTraverserData::get_modelview_transform 0 1 1444 344
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_modelview_transform
//       Access: Published
//  Description: Returns the modelview transform: the relative
//               transform from the camera to the model.
////////////////////////////////////////////////////////////////////
109
ConstPointerTo< TransformState > CullTraverserData::get_modelview_transform(CullTraverser const *trav) const;

3163 17 get_net_transform 4 3785 36 CullTraverserData::get_net_transform 0 1 1445 352
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_net_transform
//       Access: Published
//  Description: Returns the net transform: the relative transform
//               from root of the scene graph to the current node.
////////////////////////////////////////////////////////////////////
99
inline TransformState const *CullTraverserData::get_net_transform(CullTraverser const *trav) const;

3164 10 is_in_view 4 3785 29 CullTraverserData::is_in_view 0 1 1446 529
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::is_in_view
//       Access: Published
//  Description: Returns true if the current node is within the view
//               frustum, false otherwise.  If the node's bounding
//               volume falls completely within the view frustum, this
//               will also reset the view frustum pointer, saving some
//               work for future nodes.
////////////////////////////////////////////////////////////////////
90
inline bool CullTraverserData::is_in_view(BitMask< unsigned int, 32 > const &camera_mask);

3165 19 is_this_node_hidden 4 3785 38 CullTraverserData::is_this_node_hidden 0 1 1447 523
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::is_this_node_hidden
//       Access: Published
//  Description: Returns true if this particular node is hidden, even
//               though we might be traversing past this node to find
//               a child node that has had show_through() called for
//               it.  If this returns true, the node should not be
//               rendered.
////////////////////////////////////////////////////////////////////
84
inline bool CullTraverserData::is_this_node_hidden(CullTraverser const *trav) const;

3166 25 apply_transform_and_state 4 3785 44 CullTraverserData::apply_transform_and_state 0 2 1448 1449 814
////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::apply_transform_and_state
//       Access: Published
//  Description: Applies the transform and state from the current
//               node onto the current data.  This also evaluates
//               billboards, etc.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::apply_transform_and_state
//       Access: Published
//  Description: Applies the indicated transform and state changes
//               (e.g. as extracted from a node) onto the current
//               data.  This also evaluates billboards, etc.
////////////////////////////////////////////////////////////////////
317
void CullTraverserData::apply_transform_and_state(CullTraverser *trav);
void CullTraverserData::apply_transform_and_state(CullTraverser *trav, ConstPointerTo< TransformState > node_transform, ConstPointerTo< RenderState > node_state, ConstPointerTo< RenderEffects > node_effects, RenderAttrib const *off_clip_planes);

3167 9 make_next 4 3786 21 CullResult::make_next 0 1 1450 440
////////////////////////////////////////////////////////////////////
//     Function: CullResult::make_next
//       Access: Published
//  Description: Returns a newly-allocated CullResult object that
//               contains a copy of just the subset of the data from
//               this CullResult object that is worth keeping around
//               for next frame.
////////////////////////////////////////////////////////////////////
58
PointerTo< CullResult > CullResult::make_next(void) const;

3168 7 get_bin 4 3786 19 CullResult::get_bin 0 1 1451 505
////////////////////////////////////////////////////////////////////
//     Function: CullResult::get_bin
//       Access: Public
//  Description: Returns the CullBin associated with the indicated
//               bin_index, or NULL if the bin_index is invalid.  If
//               there is the first time this bin_index has been
//               requested for this CullResult, creates a new CullBin
//               object on the fly.
////////////////////////////////////////////////////////////////////
51
inline CullBin *CullResult::get_bin(int bin_index);

3169 10 add_object 4 3786 22 CullResult::add_object 0 1 1452 394
////////////////////////////////////////////////////////////////////
//     Function: CullResult::add_object
//       Access: Published
//  Description: Adds the indicated CullableObject to the appropriate
//               bin.  The bin becomes the owner of the object
//               pointer, and will eventually delete it.
////////////////////////////////////////////////////////////////////
84
void CullResult::add_object(CullableObject *object, CullTraverser const *traverser);

3170 11 finish_cull 4 3786 23 CullResult::finish_cull 0 1 1453 493
////////////////////////////////////////////////////////////////////
//     Function: CullResult::finish_cull
//       Access: Published
//  Description: Called after all the geoms have been added, this
//               indicates that the cull process is finished for this
//               frame and gives the bins a chance to do any
//               post-processing (like sorting) before moving on to
//               draw.
////////////////////////////////////////////////////////////////////
78
void CullResult::finish_cull(SceneSetup *scene_setup, Thread *current_thread);

3171 4 draw 4 3786 16 CullResult::draw 0 1 1454 291
////////////////////////////////////////////////////////////////////
//     Function: CullResult::draw
//       Access: Published
//  Description: Asks all the bins to draw themselves in the correct
//               order.
////////////////////////////////////////////////////////////////////
46
void CullResult::draw(Thread *current_thread);

3172 17 make_result_graph 4 3786 29 CullResult::make_result_graph 0 1 1455 865
////////////////////////////////////////////////////////////////////
//     Function: CullResult::make_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the cull.  This will be a
//               hierarchy of nodes, one node for each bin, each of
//               which will in term be a parent of a number of
//               GeomNodes, representing the geometry drawn in each
//               bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself.  For the low-level cull
//               result, use draw() to efficiently draw the culled
//               scene.
////////////////////////////////////////////////////////////////////
59
PointerTo< PandaNode > CullResult::make_result_graph(void);

3173 4 make 4 3787 17 DecalEffect::make 0 1 1456 261
////////////////////////////////////////////////////////////////////
//     Function: DecalEffect::make
//       Access: Published, Static
//  Description: Constructs a new DecalEffect object.
////////////////////////////////////////////////////////////////////
62
static ConstPointerTo< RenderEffect > DecalEffect::make(void);

3174 14 get_class_type 4 3787 27 DecalEffect::get_class_type 0 1 1457 0
52
static TypeHandle DecalEffect::get_class_type(void);

3175 12 ~DecalEffect 4 3787 25 DecalEffect::~DecalEffect 0 0 0
32
DecalEffect::~DecalEffect(void);

3176 4 make 4 3788 23 DepthOffsetAttrib::make 0 2 1458 1459 403
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthOffsetAttrib object that
//               indicates the relative amount of bias to write to the
//               depth buffer for subsequent geometry.
////////////////////////////////////////////////////////////////////
80
static ConstPointerTo< RenderAttrib > DepthOffsetAttrib::make(int offset = (1));

3177 12 make_default 4 3788 31 DepthOffsetAttrib::make_default 0 1 1460 404
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
76
static ConstPointerTo< RenderAttrib > DepthOffsetAttrib::make_default(void);

3178 10 get_offset 4 3788 29 DepthOffsetAttrib::get_offset 0 1 1461 281
////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::get_offset
//       Access: Published
//  Description: Returns the depth offset represented by this attrib.
////////////////////////////////////////////////////////////////////
53
inline int DepthOffsetAttrib::get_offset(void) const;

3179 14 get_class_slot 4 3788 33 DepthOffsetAttrib::get_class_slot 0 1 1462 0
51
static int DepthOffsetAttrib::get_class_slot(void);

3180 14 get_class_type 4 3788 33 DepthOffsetAttrib::get_class_type 0 1 1463 0
58
static TypeHandle DepthOffsetAttrib::get_class_type(void);

3181 18 ~DepthOffsetAttrib 4 3788 37 DepthOffsetAttrib::~DepthOffsetAttrib 0 0 0
44
DepthOffsetAttrib::~DepthOffsetAttrib(void);

3182 4 make 4 3789 21 DepthTestAttrib::make 0 1 1464 269
////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthTestAttrib object.
////////////////////////////////////////////////////////////////////
97
static ConstPointerTo< RenderAttrib > DepthTestAttrib::make(RenderAttrib::PandaCompareFunc mode);

3183 12 make_default 4 3789 29 DepthTestAttrib::make_default 0 1 1465 402
////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > DepthTestAttrib::make_default(void);

3184 8 get_mode 4 3789 25 DepthTestAttrib::get_mode 0 1 1466 254
////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
////////////////////////////////////////////////////////////////////
76
inline RenderAttrib::PandaCompareFunc DepthTestAttrib::get_mode(void) const;

3185 14 get_class_slot 4 3789 31 DepthTestAttrib::get_class_slot 0 1 1467 0
49
static int DepthTestAttrib::get_class_slot(void);

3186 14 get_class_type 4 3789 31 DepthTestAttrib::get_class_type 0 1 1468 0
56
static TypeHandle DepthTestAttrib::get_class_type(void);

3187 16 ~DepthTestAttrib 4 3789 33 DepthTestAttrib::~DepthTestAttrib 0 0 0
40
DepthTestAttrib::~DepthTestAttrib(void);

3188 4 make 4 3790 22 DepthWriteAttrib::make 0 1 1469 271
////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthWriteAttrib object.
////////////////////////////////////////////////////////////////////
90
static ConstPointerTo< RenderAttrib > DepthWriteAttrib::make(DepthWriteAttrib::Mode mode);

3189 12 make_default 4 3790 30 DepthWriteAttrib::make_default 0 1 1470 403
////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > DepthWriteAttrib::make_default(void);

3190 8 get_mode 4 3790 26 DepthWriteAttrib::get_mode 0 1 1471 255
////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
////////////////////////////////////////////////////////////////////
69
inline DepthWriteAttrib::Mode DepthWriteAttrib::get_mode(void) const;

3191 14 get_class_slot 4 3790 32 DepthWriteAttrib::get_class_slot 0 1 1472 0
50
static int DepthWriteAttrib::get_class_slot(void);

3192 14 get_class_type 4 3790 32 DepthWriteAttrib::get_class_type 0 1 1473 0
57
static TypeHandle DepthWriteAttrib::get_class_type(void);

3193 17 ~DepthWriteAttrib 4 3790 35 DepthWriteAttrib::~DepthWriteAttrib 0 0 0
42
DepthWriteAttrib::~DepthWriteAttrib(void);

3194 19 EventStorePandaNode 4 3792 40 EventStorePandaNode::EventStorePandaNode 0 1 1474 727
// Filename: eventStorePandaNode.I
// Created by:  drose (13Sep06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EventStorePandaNode::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
inline EventStorePandaNode::EventStorePandaNode(PandaNode const *value);

3195 9 set_value 4 3792 30 EventStorePandaNode::set_value 0 1 1475 413
////////////////////////////////////////////////////////////////////
//     Function: EventStorePandaNode::set_value
//       Access: Published
//  Description: Changes the value stored in the parameter.  It is
//               dangerous to do this for a parameter already added to
//               an event, since the parameters may be shared.
////////////////////////////////////////////////////////////////////
67
inline void EventStorePandaNode::set_value(PandaNode const *value);

3196 9 get_value 4 3792 30 EventStorePandaNode::get_value 0 1 1476 274
////////////////////////////////////////////////////////////////////
//     Function: EventStorePandaNode::get_value
//       Access: Published
//  Description: Retrieves the value stored in the parameter.
////////////////////////////////////////////////////////////////////
61
inline PandaNode *EventStorePandaNode::get_value(void) const;

3197 14 get_class_type 4 3792 35 EventStorePandaNode::get_class_type 0 1 1477 0
60
static TypeHandle EventStorePandaNode::get_class_type(void);

3198 3 Fog 4 3794 8 Fog::Fog 0 1 1478 437
////////////////////////////////////////////////////////////////////
//     Function: Fog::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
43
Fog::Fog(basic_string< char > const &name);

3199 8 get_mode 4 3794 13 Fog::get_mode 0 1 1479 691
// Filename: fog.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline Fog::Mode Fog::get_mode(void) const;

3200 8 set_mode 4 3794 13 Fog::set_mode 0 1 1480 934
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_mode
//       Access: Published
//  Description: Specifies the computation that is used to determine
//               the fog effect.  If this is M_linear, then the fog
//               will range from linearly from the onset point to the
//               opaque point (or for the distances specified in
//               set_linear_range), and the fog object should be
//               parented into the scene graph, or to the camera.
//
//               If this is anything else, the onset point and opaque
//               point are not used, and the fog effect is based on
//               the value specified to set_exp_density(), and it
//               doesn't matter to which node the fog object is
//               parented, or if it is parented anywhere at all.
////////////////////////////////////////////////////////////////////
42
inline void Fog::set_mode(Fog::Mode mode);

3201 9 get_color 4 3794 14 Fog::get_color 0 1 1481 243
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_color
//       Access: Published
//  Description: Returns the color of the fog.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f const &Fog::get_color(void) const;

3202 9 set_color 4 3794 14 Fog::set_color 0 2 1482 1483 533
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.  The alpha component is
//               not used.
////////////////////////////////////////////////////////////////////
107
inline void Fog::set_color(float r, float g, float b);
inline void Fog::set_color(LVecBase4f const &color);

3203 16 set_linear_range 4 3794 21 Fog::set_linear_range 0 1 1484 711
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_range
//       Access: Published
//  Description: Specifies the effects of the fog in linear distance
//               units.  This is only used if the mode is M_linear.
//
//               This specifies a fog that begins at distance onset
//               units from the origin, and becomes totally opaque at
//               distance opaque units from the origin, along the
//               forward axis (usually Y).
//
//               This function also implicitly sets the mode the
//               M_linear, if it is not already set.
////////////////////////////////////////////////////////////////////
61
inline void Fog::set_linear_range(float onset, float opaque);

3204 22 get_linear_onset_point 4 3794 27 Fog::get_linear_onset_point 0 1 1485 338
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_onset_point
//       Access: Published
//  Description: Returns the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
////////////////////////////////////////////////////////////////////
63
inline LPoint3f const &Fog::get_linear_onset_point(void) const;

3205 22 set_linear_onset_point 4 3794 27 Fog::set_linear_onset_point 0 2 1486 1487 682
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
////////////////////////////////////////////////////////////////////
144
inline void Fog::set_linear_onset_point(float x, float y, float z);
inline void Fog::set_linear_onset_point(LPoint3f const &linear_onset_point);

3206 23 get_linear_opaque_point 4 3794 28 Fog::get_linear_opaque_point 0 1 1488 379
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_opaque_point
//       Access: Published
//  Description: Returns the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
////////////////////////////////////////////////////////////////////
64
inline LPoint3f const &Fog::get_linear_opaque_point(void) const;

3207 23 set_linear_opaque_point 4 3794 28 Fog::set_linear_opaque_point 0 2 1489 1490 764
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
////////////////////////////////////////////////////////////////////
147
inline void Fog::set_linear_opaque_point(LPoint3f const &linear_opaque_point);
inline void Fog::set_linear_opaque_point(float x, float y, float z);

3208 19 set_linear_fallback 4 3794 24 Fog::set_linear_fallback 0 1 1491 2210
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_fallback
//       Access: Published
//  Description: Fog effects are traditionally defined in
//               camera-relative space, but the Panda Fog node has a
//               special mode in which it can define a linear fog
//               effect in an arbitrary coordinate space.
//
//               This is done by specifying 3-d onset and opaque
//               points, and parenting the Fog object somewhere within
//               the scene graph.  In this mode, the fog will be
//               rendered as if it extended along the vector from the
//               onset point to the opaque point, in 3-d space.
//
//               However, the underlying fog effect supported by
//               hardware is generally only one-dimensional, and must
//               be rendered based on linear distance from the camera
//               plane.  Thus, this in-the-world effect is most
//               effective when the fog vector from onset point to
//               opaque point is most nearly parallel to the camera's
//               eye vector.
//
//               As the angle between the fog vector and the eye
//               vector increases, the accuracy of the effect
//               diminishes, up to a complete breakdown of the effect
//               at a 90 degree angle.
//
//               This function exists to define the workaround to this
//               problem.  The linear fallback parameters given here
//               specify how the fog should be rendered when the
//               parameters are exceeded in this way.
//
//               The angle parameter is the minimum angle, in degrees,
//               of the fog vector to the eye vector, at which the
//               fallback effect should be employed.  The onset and
//               opaque parameters specify the camera-relative onset
//               and opaque distances to pass to the rendering
//               hardware when employing the fallback effect.  This
//               supercedes the 3-d onset point and opaque points.
////////////////////////////////////////////////////////////////////
77
inline void Fog::set_linear_fallback(float angle, float onset, float opaque);

3209 15 get_exp_density 4 3794 20 Fog::get_exp_density 0 1 1492 362
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_exp_density
//       Access: Published
//  Description: Returns the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
////////////////////////////////////////////////////////////////////
46
inline float Fog::get_exp_density(void) const;

3210 15 set_exp_density 4 3794 20 Fog::set_exp_density 0 1 1493 489
////////////////////////////////////////////////////////////////////
//     Function: Fog::set_exp_density
//       Access: Published
//  Description: Sets the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
//
//               If the mode is currently set to M_linear, this
//               function implicitly sets it to M_exponential.
////////////////////////////////////////////////////////////////////
52
inline void Fog::set_exp_density(float exp_density);

3211 14 get_class_type 4 3794 19 Fog::get_class_type 0 1 1494 0
44
static TypeHandle Fog::get_class_type(void);

3212 4 make 4 3796 15 FogAttrib::make 0 1 1495 329
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering the indicated fog onto geometry.
////////////////////////////////////////////////////////////////////
64
static ConstPointerTo< RenderAttrib > FogAttrib::make(Fog *fog);

3213 8 make_off 4 3796 19 FogAttrib::make_off 0 1 1496 317
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering unfogd geometry.
////////////////////////////////////////////////////////////////////
64
static ConstPointerTo< RenderAttrib > FogAttrib::make_off(void);

3214 12 make_default 4 3796 23 FogAttrib::make_default 0 1 1497 396
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
68
static ConstPointerTo< RenderAttrib > FogAttrib::make_default(void);

3215 6 is_off 4 3796 17 FogAttrib::is_off 0 1 1498 325
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::is_off
//       Access: Published
//  Description: Returns true if the FogAttrib is an 'off' FogAttrib,
//               indicating that it should disable fog.
////////////////////////////////////////////////////////////////////
42
inline bool FogAttrib::is_off(void) const;

3216 7 get_fog 4 3796 18 FogAttrib::get_fog 0 1 1499 356
////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::get_fog
//       Access: Published
//  Description: If the FogAttrib is not an 'off' FogAttrib,
//               returns the fog that is associated.  Otherwise,
//               return NULL.
////////////////////////////////////////////////////////////////////
43
inline Fog *FogAttrib::get_fog(void) const;

3217 14 get_class_slot 4 3796 25 FogAttrib::get_class_slot 0 1 1500 0
43
static int FogAttrib::get_class_slot(void);

3218 14 get_class_type 4 3796 25 FogAttrib::get_class_type 0 1 1501 0
50
static TypeHandle FogAttrib::get_class_type(void);

3219 10 ~FogAttrib 4 3796 21 FogAttrib::~FogAttrib 0 0 0
28
FogAttrib::~FogAttrib(void);

3220 10 get_object 4 3797 32 GeomDrawCallbackData::get_object 0 1 1502 312
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_object
//       Access: Published
//  Description: Returns a pointer to the particular object that is
//               being drawn.
////////////////////////////////////////////////////////////////////
68
inline CullableObject *GeomDrawCallbackData::get_object(void) const;

3221 7 get_gsg 4 3797 29 GeomDrawCallbackData::get_gsg 0 1 1503 266
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_gsg
//       Access: Published
//  Description: Returns a pointer to the current GSG.
////////////////////////////////////////////////////////////////////
76
inline GraphicsStateGuardianBase *GeomDrawCallbackData::get_gsg(void) const;

3222 9 get_force 4 3797 31 GeomDrawCallbackData::get_force 0 1 1504 525
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_force
//       Access: Published
//  Description: Returns true if any required data should be forced
//               into memory if necessary to render the object, or
//               false if the object should be omitted if some of the
//               data is not available (at least until the data
//               becomes available later).
////////////////////////////////////////////////////////////////////
56
inline bool GeomDrawCallbackData::get_force(void) const;

3223 14 set_lost_state 4 3797 36 GeomDrawCallbackData::set_lost_state 0 1 1505 807
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::set_lost_state
//       Access: Published
//  Description: Sets the lost_state flag.  If this is true, the
//               callback does not have to be quite so careful to
//               clean up after itself; Panda will assume that the
//               graphics state is in an unknown state after the
//               callback has finished, and will issue all the
//               necessary calls to restore it.  If this is false,
//               Panda will assume the callback will leave the
//               graphics state exactly as it came in, and won't
//               bother to try to restore it.  The default is true.
////////////////////////////////////////////////////////////////////
66
inline void GeomDrawCallbackData::set_lost_state(bool lost_state);

3224 14 get_lost_state 4 3797 36 GeomDrawCallbackData::get_lost_state 0 1 1506 287
////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_lost_state
//       Access: Published
//  Description: Returns the lost_state flag.  See set_lost_state().
////////////////////////////////////////////////////////////////////
61
inline bool GeomDrawCallbackData::get_lost_state(void) const;

3225 14 get_class_type 4 3797 36 GeomDrawCallbackData::get_class_type 0 1 1507 0
61
static TypeHandle GeomDrawCallbackData::get_class_type(void);

3226 21 ~GeomDrawCallbackData 4 3797 43 GeomDrawCallbackData::~GeomDrawCallbackData 0 0 0
50
GeomDrawCallbackData::~GeomDrawCallbackData(void);

3227 22 InternalNameCollection 4 3799 46 InternalNameCollection::InternalNameCollection 0 2 1508 1509 475
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
137
InternalNameCollection::InternalNameCollection(void);
InternalNameCollection::InternalNameCollection(InternalNameCollection const &copy);

3228 10 operator = 4 3799 34 InternalNameCollection::operator = 0 1 1510 247
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
void InternalNameCollection::operator =(InternalNameCollection const &copy);

3229 23 ~InternalNameCollection 4 3799 47 InternalNameCollection::~InternalNameCollection 0 0 731
// Filename: internalNameCollection.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline InternalNameCollection::~InternalNameCollection(void);

3230 8 add_name 4 3799 32 InternalNameCollection::add_name 0 1 1511 274
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_name
//       Access: Published
//  Description: Adds a new InternalName to the collection.
////////////////////////////////////////////////////////////////////
58
void InternalNameCollection::add_name(InternalName *name);

3231 11 remove_name 4 3799 35 InternalNameCollection::remove_name 0 1 1512 410
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_name
//       Access: Published
//  Description: Removes the indicated InternalName from the collection.
//               Returns true if the name was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
61
bool InternalNameCollection::remove_name(InternalName *name);

3232 14 add_names_from 4 3799 38 InternalNameCollection::add_names_from 0 1 1513 480
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_names_from
//       Access: Published
//  Description: Adds all the InternalNames indicated in the other
//               collection to this name.  The other names are simply
//               appended to the end of the names in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
81
void InternalNameCollection::add_names_from(InternalNameCollection const &other);

3233 17 remove_names_from 4 3799 41 InternalNameCollection::remove_names_from 0 1 1514 343
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_names_from
//       Access: Published
//  Description: Removes from this collection all of the InternalNames
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
84
void InternalNameCollection::remove_names_from(InternalNameCollection const &other);

3234 22 remove_duplicate_names 4 3799 46 InternalNameCollection::remove_duplicate_names 0 1 1515 485
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_duplicate_names
//       Access: Published
//  Description: Removes any duplicate entries of the same InternalNames
//               on this collection.  If a InternalName appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
58
void InternalNameCollection::remove_duplicate_names(void);

3235 8 has_name 4 3799 32 InternalNameCollection::has_name 0 1 1516 336
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::has_name
//       Access: Published
//  Description: Returns true if the indicated InternalName appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
64
bool InternalNameCollection::has_name(InternalName *name) const;

3236 5 clear 4 3799 29 InternalNameCollection::clear 0 1 1517 275
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::clear
//       Access: Published
//  Description: Removes all InternalNames from the collection.
////////////////////////////////////////////////////////////////////
41
void InternalNameCollection::clear(void);

3237 13 get_num_names 4 3799 37 InternalNameCollection::get_num_names 0 1 1518 291
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_num_names
//       Access: Published
//  Description: Returns the number of InternalNames in the collection.
////////////////////////////////////////////////////////////////////
54
int InternalNameCollection::get_num_names(void) const;

3238 8 get_name 4 3799 32 InternalNameCollection::get_name 0 1 1519 279
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_name
//       Access: Published
//  Description: Returns the nth InternalName in the collection.
////////////////////////////////////////////////////////////////////
64
InternalName *InternalNameCollection::get_name(int index) const;

3239 11 operator [] 4 3799 35 InternalNameCollection::operator [] 0 1 1520 399
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::operator []
//       Access: Published
//  Description: Returns the nth InternalName in the collection.  This is
//               the same as get_name(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
67
InternalName *InternalNameCollection::operator [](int index) const;

3240 4 size 4 3799 28 InternalNameCollection::size 0 1 1521 335
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::size
//       Access: Published
//  Description: Returns the number of names in the collection.  This
//               is the same thing as get_num_names().
////////////////////////////////////////////////////////////////////
45
int InternalNameCollection::size(void) const;

3241 11 operator += 4 3799 35 InternalNameCollection::operator += 0 1 1522 283
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
85
inline void InternalNameCollection::operator +=(InternalNameCollection const &other);

3242 10 operator + 4 3799 34 InternalNameCollection::operator + 0 1 1523 332
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::operator +
//       Access: Published
//  Description: Returns a InternalNameCollection representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
108
inline InternalNameCollection InternalNameCollection::operator +(InternalNameCollection const &other) const;

3243 6 output 4 3799 30 InternalNameCollection::output 0 1 1524 344
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               InternalNameCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
56
void InternalNameCollection::output(ostream &out) const;

3244 5 write 4 3799 29 InternalNameCollection::write 0 2 1525 1526 348
////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               InternalNameCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
79
void InternalNameCollection::write(ostream &out, int indent_level = (0)) const;

3245 24 upcast_to_ReferenceCount 12 3800 31 Light::upcast_to_ReferenceCount 0 1 1535 35
upcast from Light to ReferenceCount
54
ReferenceCount *Light::upcast_to_ReferenceCount(void);

3246 6 ~Light 4 3800 13 Light::~Light 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: Light::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
28
virtual Light::~Light(void);

3247 7 as_node 4 3800 14 Light::as_node 0 1 1527 0
44
virtual PandaNode *Light::as_node(void) = 0;

3248 16 is_ambient_light 4 3800 23 Light::is_ambient_light 0 1 1528 330
////////////////////////////////////////////////////////////////////
//     Function: Light::is_ambient_light
//       Access: Published, Virtual
//  Description: Returns true if this is an AmbientLight, false if it
//               is some other kind of light.
////////////////////////////////////////////////////////////////////
49
virtual bool Light::is_ambient_light(void) const;

3249 9 get_color 4 3800 16 Light::get_color 0 1 1529 253
////////////////////////////////////////////////////////////////////
//     Function: Light::get_color
//       Access: Published
//  Description: Returns the basic color of the light.
////////////////////////////////////////////////////////////////////
54
inline LVecBase4f const &Light::get_color(void) const;

3250 9 set_color 4 3800 16 Light::set_color 0 1 1530 250
////////////////////////////////////////////////////////////////////
//     Function: Light::set_color
//       Access: Published
//  Description: Sets the basic color of the light.
////////////////////////////////////////////////////////////////////
54
inline void Light::set_color(LVecBase4f const &color);

3251 12 set_priority 4 3800 19 Light::set_priority 0 1 1531 740
////////////////////////////////////////////////////////////////////
//     Function: Light::set_priority
//       Access: Published
//  Description: Changes the relative importance of this light
//               relative to the other lights that are applied
//               simultaneously.
//
//               The priority number is used to decide which of the
//               requested lights are to be selected for rendering
//               when more lights are requested than the hardware will
//               support.  The highest-priority n lights are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
////////////////////////////////////////////////////////////////////
46
inline void Light::set_priority(int priority);

3252 12 get_priority 4 3800 19 Light::get_priority 0 1 1532 305
////////////////////////////////////////////////////////////////////
//     Function: Light::get_priority
//       Access: Published
//  Description: Returns the priority associated with this light.  See
//               set_priority().
////////////////////////////////////////////////////////////////////
43
inline int Light::get_priority(void) const;

3253 18 get_class_priority 4 3800 25 Light::get_class_priority 0 1 1533 0
54
virtual int Light::get_class_priority(void) const = 0;

3254 14 get_class_type 4 3800 21 Light::get_class_type 0 1 1534 0
46
static TypeHandle Light::get_class_type(void);

3255 4 make 4 3801 17 LightAttrib::make 0 5 1536 1537 1538 1539 1540 2205
// The following is the new, more general interface to the
// LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicated light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that does
//               nothing.
////////////////////////////////////////////////////////////////////
547
static ConstPointerTo< RenderAttrib > LightAttrib::make(LightAttrib::Operation op, Light *light);
static ConstPointerTo< RenderAttrib > LightAttrib::make(LightAttrib::Operation op, Light *light1, Light *light2);
static ConstPointerTo< RenderAttrib > LightAttrib::make(LightAttrib::Operation op, Light *light1, Light *light2, Light *light3);
static ConstPointerTo< RenderAttrib > LightAttrib::make(LightAttrib::Operation op, Light *light1, Light *light2, Light *light3, Light *light4);
static ConstPointerTo< RenderAttrib > LightAttrib::make(void);

3256 12 make_default 4 3801 25 LightAttrib::make_default 0 1 1541 398
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
70
static ConstPointerTo< RenderAttrib > LightAttrib::make_default(void);

3257 13 get_operation 4 3801 26 LightAttrib::get_operation 0 1 1542 888
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the LightAttrib.
//               If this is O_set, the lights listed here completely
//               replace any lights that were already on.  If this is
//               O_add, the lights here are added to the set of of
//               lights that were already on, and if O_remove, the
//               lights here are removed from the set of lights that
//               were on.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
62
LightAttrib::Operation LightAttrib::get_operation(void) const;

3258 14 get_num_lights 4 3801 27 LightAttrib::get_num_lights 0 1 1543 522
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_lights
//       Access: Published
//  Description: Returns the number of lights listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
44
int LightAttrib::get_num_lights(void) const;

3259 9 get_light 4 3801 22 LightAttrib::get_light 0 1 1544 510
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_light
//       Access: Published
//  Description: Returns the nth light listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
43
Light *LightAttrib::get_light(int n) const;

3260 9 has_light 4 3801 22 LightAttrib::has_light 0 1 1545 558
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
////////////////////////////////////////////////////////////////////
48
bool LightAttrib::has_light(Light *light) const;

3261 9 add_light 4 3801 22 LightAttrib::add_light 0 1 1546 459
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights.
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
////////////////////////////////////////////////////////////////////
74
ConstPointerTo< RenderAttrib > LightAttrib::add_light(Light *light) const;

3262 12 remove_light 4 3801 25 LightAttrib::remove_light 0 1 1547 489
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights.
//
//               This method is now deprecated.  Use remove_on_light()
//               or remove_off_light() instead.
////////////////////////////////////////////////////////////////////
77
ConstPointerTo< RenderAttrib > LightAttrib::remove_light(Light *light) const;

3263 12 make_all_off 4 3801 25 LightAttrib::make_all_off 0 1 1548 418
// The following is the new, more general interface to the
// LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns off
//               all lights (and hence disables lighting).
////////////////////////////////////////////////////////////////////
70
static ConstPointerTo< RenderAttrib > LightAttrib::make_all_off(void);

3264 17 get_num_on_lights 4 3801 30 LightAttrib::get_num_on_lights 0 1 1549 312
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_on_lights
//       Access: Published
//  Description: Returns the number of lights that are turned on by
//               the attribute.
////////////////////////////////////////////////////////////////////
54
inline int LightAttrib::get_num_on_lights(void) const;

3265 12 get_on_light 4 3801 25 LightAttrib::get_on_light 0 1 1550 315
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_on_light
//       Access: Published
//  Description: Returns the nth light turned on by the attribute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
55
inline NodePath LightAttrib::get_on_light(int n) const;

3266 12 has_on_light 4 3801 25 LightAttrib::has_on_light 0 1 1551 322
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_on_light
//       Access: Published
//  Description: Returns true if the indicated light is turned on by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
67
inline bool LightAttrib::has_on_light(NodePath const &light) const;

3267 18 get_num_off_lights 4 3801 31 LightAttrib::get_num_off_lights 0 1 1552 314
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_off_lights
//       Access: Published
//  Description: Returns the number of lights that are turned off by
//               the attribute.
////////////////////////////////////////////////////////////////////
55
inline int LightAttrib::get_num_off_lights(void) const;

3268 13 get_off_light 4 3801 26 LightAttrib::get_off_light 0 1 1553 330
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_off_light
//       Access: Published
//  Description: Returns the nth light turned off by the attribute,
//               sorted in arbitrary (pointer) order.
////////////////////////////////////////////////////////////////////
56
inline NodePath LightAttrib::get_off_light(int n) const;

3269 13 has_off_light 4 3801 26 LightAttrib::has_off_light 0 1 1554 324
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_off_light
//       Access: Published
//  Description: Returns true if the indicated light is turned off by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool LightAttrib::has_off_light(NodePath const &light) const;

3270 11 has_all_off 4 3801 24 LightAttrib::has_all_off 0 1 1555 326
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all lights
//               (although it may also turn some on).
////////////////////////////////////////////////////////////////////
49
inline bool LightAttrib::has_all_off(void) const;

3271 11 is_identity 4 3801 24 LightAttrib::is_identity 0 1 1556 329
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of lights in use.
////////////////////////////////////////////////////////////////////
49
inline bool LightAttrib::is_identity(void) const;

3272 12 add_on_light 4 3801 25 LightAttrib::add_on_light 0 1 1557 388
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned on by this attrib.
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< RenderAttrib > LightAttrib::add_on_light(NodePath const &light) const;

3273 15 remove_on_light 4 3801 28 LightAttrib::remove_on_light 0 1 1558 395
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned on by this attrib.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< RenderAttrib > LightAttrib::remove_on_light(NodePath const &light) const;

3274 13 add_off_light 4 3801 26 LightAttrib::add_off_light 0 1 1559 390
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned off by this attrib.
////////////////////////////////////////////////////////////////////
87
ConstPointerTo< RenderAttrib > LightAttrib::add_off_light(NodePath const &light) const;

3275 16 remove_off_light 4 3801 29 LightAttrib::remove_off_light 0 1 1560 397
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned off by this attrib.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > LightAttrib::remove_off_light(NodePath const &light) const;

3276 13 filter_to_max 4 3801 26 LightAttrib::filter_to_max 0 1 1561 705
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new LightAttrib, very much like this one,
//               but with the number of on_lights reduced to be no
//               more than max_lights.  The number of off_lights in
//               the new LightAttrib is undefined.
//
//               The number of AmbientLights is not included in the
//               count.  All AmbientLights in the original attrib are
//               always included in the result, regardless of the
//               value of max_lights.
////////////////////////////////////////////////////////////////////
79
ConstPointerTo< LightAttrib > LightAttrib::filter_to_max(int max_lights) const;

3277 24 get_most_important_light 4 3801 37 LightAttrib::get_most_important_light 0 1 1562 477
////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_most_important_light
//       Access: Public
//  Description: Returns the most important light (that is, the light
//               with the highest priority) in the LightAttrib,
//               excluding any ambient lights.  Returns an empty
//               NodePath if no non-ambient lights are found.
////////////////////////////////////////////////////////////////////
59
NodePath LightAttrib::get_most_important_light(void) const;

3278 14 get_class_slot 4 3801 27 LightAttrib::get_class_slot 0 1 1563 0
45
static int LightAttrib::get_class_slot(void);

3279 14 get_class_type 4 3801 27 LightAttrib::get_class_type 0 1 1564 0
52
static TypeHandle LightAttrib::get_class_type(void);

3280 12 ~LightAttrib 4 3801 25 LightAttrib::~LightAttrib 0 0 0
32
LightAttrib::~LightAttrib(void);

3281 12 make_default 4 3803 29 LightRampAttrib::make_default 0 1 1565 408
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_default
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This
//               is the standard OpenGL lighting ramp, which clamps
//               the final light total to the 0-1 range.
////////////////////////////////////////////////////////////////////
74
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_default(void);

3282 13 make_identity 4 3803 30 LightRampAttrib::make_identity 0 1 1566 424
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This
//               differs from the usual OpenGL lighting model in that
//               it does not clamp the final lighting total to (0,1).
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_identity(void);

3283 21 make_single_threshold 4 3803 38 LightRampAttrib::make_single_threshold 0 1 1567 624
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_single_threshold
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This 
//               causes the luminance of the diffuse lighting
//               contribution to be quantized using a single threshold:
//
//               if (original_luminance > threshold0) {
//                 luminance = level0;
//               } else {
//                 luminance = 0.0;
//               }
//               
////////////////////////////////////////////////////////////////////
104
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_single_threshold(float thresh0, float lev0);

3284 21 make_double_threshold 4 3803 38 LightRampAttrib::make_double_threshold 0 1 1568 707
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_double_threshold
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This 
//               causes the luminance of the diffuse lighting
//               contribution to be quantized using two thresholds:
//
//               if (original_luminance > threshold1) {
//                 luminance = level1;
//               } else if (original_luminance > threshold0) {
//                 luminance = level0;
//               } else {
//                 luminance = 0.0;
//               }
//
////////////////////////////////////////////////////////////////////
131
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_double_threshold(float thresh0, float lev0, float thresh1, float lev1);

3285 9 make_hdr0 4 3803 26 LightRampAttrib::make_hdr0 0 1 1569 1206
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr0
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR0 tone mapping operator 'steals'
//               one quarter of that contrast to represent brightnesses in
//               the range 1-infinity.
//
//               FINAL_RGB = (RGB^3 + RGB^2 + RGB) / (RGB^3 + RGB^2 + RGB + 1)
//
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_hdr0(void);

3286 9 make_hdr1 4 3803 26 LightRampAttrib::make_hdr1 0 1 1570 1188
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr1
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR1 tone mapping operator 'steals'
//               one third of that contrast to represent brightnesses in
//               the range 1-infinity.
//
//               FINAL_RGB = (RGB^2 + RGB) / (RGB^2 + RGB + 1)
//
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_hdr1(void);

3287 9 make_hdr2 4 3803 26 LightRampAttrib::make_hdr2 0 1 1571 1171
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr2
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR2 tone mapping operator 'steals'
//               one half of that contrast to represent brightnesses in
//               the range 1-infinity.
//
//               FINAL_RGB = (RGB) / (RGB + 1)
//
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > LightRampAttrib::make_hdr2(void);

3288 8 get_mode 4 3803 25 LightRampAttrib::get_mode 0 1 1572 258
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_mode
//       Access: Published
//  Description: Returns the LightRampAttrib mode.
////////////////////////////////////////////////////////////////////
76
inline LightRampAttrib::LightRampMode LightRampAttrib::get_mode(void) const;

3289 9 get_level 4 3803 26 LightRampAttrib::get_level 0 1 1573 257
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_level
//       Access: Published
//  Description: Returns the nth lighting level.
////////////////////////////////////////////////////////////////////
53
inline float LightRampAttrib::get_level(int n) const;

3290 13 get_threshold 4 3803 30 LightRampAttrib::get_threshold 0 1 1574 262
////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_threshold
//       Access: Published
//  Description: Returns the nth threshold level.
////////////////////////////////////////////////////////////////////
57
inline float LightRampAttrib::get_threshold(int n) const;

3291 14 get_class_slot 4 3803 31 LightRampAttrib::get_class_slot 0 1 1575 0
49
static int LightRampAttrib::get_class_slot(void);

3292 14 get_class_type 4 3803 31 LightRampAttrib::get_class_type 0 1 1576 0
56
static TypeHandle LightRampAttrib::get_class_type(void);

3293 16 ~LightRampAttrib 4 3803 33 LightRampAttrib::~LightRampAttrib 0 0 0
40
LightRampAttrib::~LightRampAttrib(void);

3294 29 upcast_to_TypedReferenceCount 12 3805 37 Loader::upcast_to_TypedReferenceCount 0 1 1594 41
upcast from Loader to TypedReferenceCount
65
TypedReferenceCount *Loader::upcast_to_TypedReferenceCount(void);

3295 18 downcast_to_Loader 12 3756 39 TypedReferenceCount::downcast_to_Loader 0 1 1595 43
downcast from TypedReferenceCount to Loader
54
Loader *TypedReferenceCount::downcast_to_Loader(void);

3296 17 upcast_to_Namable 12 3805 25 Loader::upcast_to_Namable 0 1 1596 29
upcast from Loader to Namable
41
Namable *Loader::upcast_to_Namable(void);

3297 18 downcast_to_Loader 12 3742 27 Namable::downcast_to_Loader 0 1 1597 31
downcast from Namable to Loader
42
Loader *Namable::downcast_to_Loader(void);

3298 7 Results 4 3806 24 Loader::Results::Results 0 2 1598 1599 942
// Filename: loader.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
100
inline Loader::Results::Results(void);
inline Loader::Results::Results(Loader::Results const &copy);

3299 10 operator = 4 3806 27 Loader::Results::operator = 0 1 1600 240
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void Loader::Results::operator =(Loader::Results const &copy);

3300 8 ~Results 4 3806 25 Loader::Results::~Results 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline Loader::Results::~Results(void);

3301 5 clear 4 3806 22 Loader::Results::clear 0 1 1601 258
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::clear
//       Access: Published
//  Description: Removes all the files from the list.
////////////////////////////////////////////////////////////////////
41
inline void Loader::Results::clear(void);

3302 13 get_num_files 4 3806 30 Loader::Results::get_num_files 0 1 1602 277
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_num_files
//       Access: Published
//  Description: Returns the number of files on the result list.
////////////////////////////////////////////////////////////////////
54
inline int Loader::Results::get_num_files(void) const;

3303 8 get_file 4 3806 25 Loader::Results::get_file 0 1 1603 265
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file
//       Access: Published
//  Description: Returns the nth file on the result list.
////////////////////////////////////////////////////////////////////
62
inline Filename const &Loader::Results::get_file(int n) const;

3304 13 get_file_type 4 3806 30 Loader::Results::get_file_type 0 1 1604 304
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file_type
//       Access: Published
//  Description: Returns the file type of the nth file on the result
//               list.
////////////////////////////////////////////////////////////////////
67
inline LoaderFileType *Loader::Results::get_file_type(int n) const;

3305 6 Loader 4 3805 14 Loader::Loader 0 2 1577 1578 218
////////////////////////////////////////////////////////////////////
//     Function: Loader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
Loader::Loader(basic_string< char > const &name = ("loader"));

3306 16 set_task_manager 4 3805 24 Loader::set_task_manager 0 1 1579 362
////////////////////////////////////////////////////////////////////
//     Function: Loader::set_task_manager
//       Access: Published
//  Description: Specifies the task manager that is used for
//               asynchronous loads.  The default is the global task
//               manager.
////////////////////////////////////////////////////////////////////
69
inline void Loader::set_task_manager(AsyncTaskManager *task_manager);

3307 16 get_task_manager 4 3805 24 Loader::get_task_manager 0 1 1580 302
////////////////////////////////////////////////////////////////////
//     Function: Loader::get_task_manager
//       Access: Published
//  Description: Returns the task manager that is used for
//               asynchronous loads.
////////////////////////////////////////////////////////////////////
62
inline AsyncTaskManager *Loader::get_task_manager(void) const;

3308 14 set_task_chain 4 3805 22 Loader::set_task_chain 0 1 1581 372
////////////////////////////////////////////////////////////////////
//     Function: Loader::set_task_chain
//       Access: Published
//  Description: Specifies the task chain that is used for
//               asynchronous loads.  The default is the initial name
//               of the Loader object.
////////////////////////////////////////////////////////////////////
75
inline void Loader::set_task_chain(basic_string< char > const &task_chain);

3309 14 get_task_chain 4 3805 22 Loader::get_task_chain 0 1 1582 298
////////////////////////////////////////////////////////////////////
//     Function: Loader::get_task_chain
//       Access: Published
//  Description: Returns the task chain that is used for
//               asynchronous loads.
////////////////////////////////////////////////////////////////////
70
inline basic_string< char > const &Loader::get_task_chain(void) const;

3310 12 stop_threads 4 3805 20 Loader::stop_threads 0 1 1583 265
////////////////////////////////////////////////////////////////////
//     Function: Loader::stop_threads
//       Access: Published
//  Description: Stop any threads used for asynchronous loads.
////////////////////////////////////////////////////////////////////
39
inline void Loader::stop_threads(void);

3311 6 remove 4 3805 14 Loader::remove 0 1 1584 321
////////////////////////////////////////////////////////////////////
//     Function: Loader::remove
//       Access: Published
//  Description: Removes a pending asynchronous load request.  Returns
//               true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
44
inline bool Loader::remove(AsyncTask *task);

3312 9 load_sync 4 3805 17 Loader::load_sync 0 2 1585 1586 455
////////////////////////////////////////////////////////////////////
//     Function: Loader::load_sync
//       Access: Published
//  Description: Loads the file immediately, waiting for it to
//               complete.
//
//               If search is true, the file is searched for along the
//               model path; otherwise, only the exact filename is
//               loaded.
////////////////////////////////////////////////////////////////////
119
inline PointerTo< PandaNode > Loader::load_sync(Filename const &filename, LoaderOptions const &options = ((()))) const;

3313 18 make_async_request 4 3805 26 Loader::make_async_request 0 2 1587 1588 346
////////////////////////////////////////////////////////////////////
//     Function: Loader::make_async_request
//       Access: Published
//  Description: Returns a new AsyncTask object suitable for adding to
//               load_async() to start an asynchronous model load.
////////////////////////////////////////////////////////////////////
115
PointerTo< AsyncTask > Loader::make_async_request(Filename const &filename, LoaderOptions const &options = ((())));

3314 10 load_async 4 3805 18 Loader::load_async 0 1 1589 915
////////////////////////////////////////////////////////////////////
//     Function: Loader::load_async
//       Access: Published
//  Description: Begins an asynchronous load request.  To use this
//               call, first create a new ModelLoadRequest object with
//               the filename you wish to load, and then add that
//               object to the Loader with load_async.  This function
//               will return immediately, and the model will be loaded
//               in the background.
//
//               To determine when the model has completely loaded,
//               you may poll request->is_ready() from time to time,
//               or set the done_event on the request object and
//               listen for that event.  When the model is ready, you
//               may retrieve it via request->get_model().
////////////////////////////////////////////////////////////////////
51
inline void Loader::load_async(AsyncTask *request);

3315 15 load_bam_stream 4 3805 23 Loader::load_bam_stream 0 1 1590 335
////////////////////////////////////////////////////////////////////
//     Function: Loader::load_bam_stream
//       Access: Published
//  Description: Attempts to read a bam file from the indicated stream
//               and return the scene graph defined there.
////////////////////////////////////////////////////////////////////
60
PointerTo< PandaNode > Loader::load_bam_stream(istream &in);

3316 6 output 4 3805 14 Loader::output 0 1 1591 223
////////////////////////////////////////////////////////////////////
//     Function: Loader::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
48
virtual void Loader::output(ostream &out) const;

3317 14 get_global_ptr 4 3805 22 Loader::get_global_ptr 0 1 1592 344
////////////////////////////////////////////////////////////////////
//     Function: Loader::get_global_ptr
//       Access: Published
//  Description: Returns a pointer to the global Loader.  This is the
//               Loader that most code should use for loading models.
////////////////////////////////////////////////////////////////////
51
static inline Loader *Loader::get_global_ptr(void);

3318 14 get_class_type 4 3805 22 Loader::get_class_type 0 1 1593 0
47
static TypeHandle Loader::get_class_type(void);

3319 7 ~Loader 4 3805 15 Loader::~Loader 0 0 0
22
Loader::~Loader(void);

3320 8 get_name 4 3807 24 LoaderFileType::get_name 0 1 1605 0
70
virtual basic_string< char > LoaderFileType::get_name(void) const = 0;

3321 13 get_extension 4 3807 29 LoaderFileType::get_extension 0 1 1606 0
75
virtual basic_string< char > LoaderFileType::get_extension(void) const = 0;

3322 25 get_additional_extensions 4 3807 41 LoaderFileType::get_additional_extensions 0 1 1607 416
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_additional_extensions
//       Access: Published, Virtual
//  Description: Returns a space-separated list of extension, in
//               addition to the one returned by get_extension(), that
//               are recognized by this loader.
////////////////////////////////////////////////////////////////////
83
virtual basic_string< char > LoaderFileType::get_additional_extensions(void) const;

3323 19 supports_compressed 4 3807 35 LoaderFileType::supports_compressed 0 1 1608 389
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::supports_compressed
//       Access: Published, Virtual
//  Description: Returns true if this file type can transparently load
//               compressed files (with a .pz extension), false
//               otherwise.
////////////////////////////////////////////////////////////////////
61
virtual bool LoaderFileType::supports_compressed(void) const;

3324 20 get_allow_disk_cache 4 3807 36 LoaderFileType::get_allow_disk_cache 0 1 1609 402
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_allow_disk_cache
//       Access: Published, Virtual
//  Description: Returns true if the loader flags allow retrieving the
//               model from the on-disk bam cache (if it is enabled),
//               false otherwise.
////////////////////////////////////////////////////////////////////
86
virtual bool LoaderFileType::get_allow_disk_cache(LoaderOptions const &options) const;

3325 19 get_allow_ram_cache 4 3807 35 LoaderFileType::get_allow_ram_cache 0 1 1610 381
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_allow_ram_cache
//       Access: Published
//  Description: Returns true if the loader flags allow retrieving the
//               model from the in-memory ModelPool cache, false
//               otherwise.
////////////////////////////////////////////////////////////////////
85
virtual bool LoaderFileType::get_allow_ram_cache(LoaderOptions const &options) const;

3326 14 get_class_type 4 3807 30 LoaderFileType::get_class_type 0 1 1611 0
55
static TypeHandle LoaderFileType::get_class_type(void);

3327 23 ~LoaderFileTypeRegistry 4 3809 47 LoaderFileTypeRegistry::~LoaderFileTypeRegistry 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
LoaderFileTypeRegistry::~LoaderFileTypeRegistry(void);

3328 13 get_num_types 4 3809 37 LoaderFileTypeRegistry::get_num_types 0 1 1612 282
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
////////////////////////////////////////////////////////////////////
54
int LoaderFileTypeRegistry::get_num_types(void) const;

3329 8 get_type 4 3809 32 LoaderFileTypeRegistry::get_type 0 1 1613 264
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
////////////////////////////////////////////////////////////////////
62
LoaderFileType *LoaderFileTypeRegistry::get_type(int n) const;

3330 23 get_type_from_extension 4 3809 47 LoaderFileTypeRegistry::get_type_from_extension 0 1 1614 430
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Determines the type of the file based on the indicated
//               extension (without a leading dot).  Returns NULL if
//               the extension matches no known file types.
////////////////////////////////////////////////////////////////////
103
LoaderFileType *LoaderFileTypeRegistry::get_type_from_extension(basic_string< char > const &extension);

3331 5 write 4 3809 29 LoaderFileTypeRegistry::write 0 2 1615 1616 329
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported file types to the
//               indicated output stream, one per line.
////////////////////////////////////////////////////////////////////
79
void LoaderFileTypeRegistry::write(ostream &out, int indent_level = (0)) const;

3332 14 get_global_ptr 4 3809 38 LoaderFileTypeRegistry::get_global_ptr 0 1 1617 325
////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global LoaderFileTypeRegistry
//               object.
////////////////////////////////////////////////////////////////////
76
static LoaderFileTypeRegistry *LoaderFileTypeRegistry::get_global_ptr(void);

3333 4 make 4 3810 20 MaterialAttrib::make 0 1 1618 344
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering the indicated material onto geometry.
////////////////////////////////////////////////////////////////////
79
static ConstPointerTo< RenderAttrib > MaterialAttrib::make(Material *material);

3334 8 make_off 4 3810 24 MaterialAttrib::make_off 0 1 1619 332
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering unmateriald geometry.
////////////////////////////////////////////////////////////////////
69
static ConstPointerTo< RenderAttrib > MaterialAttrib::make_off(void);

3335 12 make_default 4 3810 28 MaterialAttrib::make_default 0 1 1620 401
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
73
static ConstPointerTo< RenderAttrib > MaterialAttrib::make_default(void);

3336 6 is_off 4 3810 22 MaterialAttrib::is_off 0 1 1621 374
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::is_off
//       Access: Published
//  Description: Returns true if the MaterialAttrib is an 'off'
//               MaterialAttrib, indicating that it should disable
//               the use of materials.
////////////////////////////////////////////////////////////////////
47
inline bool MaterialAttrib::is_off(void) const;

3337 12 get_material 4 3810 28 MaterialAttrib::get_material 0 1 1622 381
////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::get_material
//       Access: Published
//  Description: If the MaterialAttrib is not an 'off' MaterialAttrib,
//               returns the material that is associated.  Otherwise,
//               return NULL.
////////////////////////////////////////////////////////////////////
58
inline Material *MaterialAttrib::get_material(void) const;

3338 14 get_class_slot 4 3810 30 MaterialAttrib::get_class_slot 0 1 1623 0
48
static int MaterialAttrib::get_class_slot(void);

3339 14 get_class_type 4 3810 30 MaterialAttrib::get_class_type 0 1 1624 0
55
static TypeHandle MaterialAttrib::get_class_type(void);

3340 15 ~MaterialAttrib 4 3810 31 MaterialAttrib::~MaterialAttrib 0 0 0
38
MaterialAttrib::~MaterialAttrib(void);

3341 18 MaterialCollection 4 3811 38 MaterialCollection::MaterialCollection 0 2 1625 1626 467
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
117
MaterialCollection::MaterialCollection(void);
MaterialCollection::MaterialCollection(MaterialCollection const &copy);

3342 10 operator = 4 3811 30 MaterialCollection::operator = 0 1 1627 243
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
void MaterialCollection::operator =(MaterialCollection const &copy);

3343 19 ~MaterialCollection 4 3811 39 MaterialCollection::~MaterialCollection 0 0 723
// Filename: materialCollection.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline MaterialCollection::~MaterialCollection(void);

3344 12 add_material 4 3811 32 MaterialCollection::add_material 0 1 1628 270
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_material
//       Access: Published
//  Description: Adds a new Material to the collection.
////////////////////////////////////////////////////////////////////
63
void MaterialCollection::add_material(Material *node_material);

3345 15 remove_material 4 3811 35 MaterialCollection::remove_material 0 1 1629 410
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_material
//       Access: Published
//  Description: Removes the indicated Material from the collection.
//               Returns true if the material was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
66
bool MaterialCollection::remove_material(Material *node_material);

3346 18 add_materials_from 4 3811 38 MaterialCollection::add_materials_from 0 1 1630 488
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_materials_from
//       Access: Published
//  Description: Adds all the Materials indicated in the other
//               collection to this material.  The other materials are simply
//               appended to the end of the materials in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
77
void MaterialCollection::add_materials_from(MaterialCollection const &other);

3347 21 remove_materials_from 4 3811 41 MaterialCollection::remove_materials_from 0 1 1631 339
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_materials_from
//       Access: Published
//  Description: Removes from this collection all of the Materials
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
80
void MaterialCollection::remove_materials_from(MaterialCollection const &other);

3348 26 remove_duplicate_materials 4 3811 46 MaterialCollection::remove_duplicate_materials 0 1 1632 477
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_duplicate_materials
//       Access: Published
//  Description: Removes any duplicate entries of the same Materials
//               on this collection.  If a Material appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
58
void MaterialCollection::remove_duplicate_materials(void);

3349 12 has_material 4 3811 32 MaterialCollection::has_material 0 1 1633 332
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::has_material
//       Access: Published
//  Description: Returns true if the indicated Material appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
64
bool MaterialCollection::has_material(Material *material) const;

3350 5 clear 4 3811 25 MaterialCollection::clear 0 1 1634 267
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::clear
//       Access: Published
//  Description: Removes all Materials from the collection.
////////////////////////////////////////////////////////////////////
37
void MaterialCollection::clear(void);

3351 13 find_material 4 3811 33 MaterialCollection::find_material 0 1 1635 376
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::find_material
//       Access: Published
//  Description: Returns the material in the collection with the
//               indicated name, if any, or NULL if no material has
//               that name.
////////////////////////////////////////////////////////////////////
84
Material *MaterialCollection::find_material(basic_string< char > const &name) const;

3352 17 get_num_materials 4 3811 37 MaterialCollection::get_num_materials 0 1 1636 287
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_num_materials
//       Access: Published
//  Description: Returns the number of Materials in the collection.
////////////////////////////////////////////////////////////////////
54
int MaterialCollection::get_num_materials(void) const;

3353 12 get_material 4 3811 32 MaterialCollection::get_material 0 1 1637 275
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_material
//       Access: Published
//  Description: Returns the nth Material in the collection.
////////////////////////////////////////////////////////////////////
60
Material *MaterialCollection::get_material(int index) const;

3354 11 operator [] 4 3811 31 MaterialCollection::operator [] 0 1 1638 395
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::operator []
//       Access: Published
//  Description: Returns the nth Material in the collection.  This is
//               the same as get_material(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
59
Material *MaterialCollection::operator [](int index) const;

3355 4 size 4 3811 24 MaterialCollection::size 0 1 1639 339
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::size
//       Access: Published
//  Description: Returns the number of materials in the collection.  This
//               is the same thing as get_num_materials().
////////////////////////////////////////////////////////////////////
41
int MaterialCollection::size(void) const;

3356 11 operator += 4 3811 31 MaterialCollection::operator += 0 1 1640 279
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
77
inline void MaterialCollection::operator +=(MaterialCollection const &other);

3357 10 operator + 4 3811 30 MaterialCollection::operator + 0 1 1641 324
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::operator +
//       Access: Published
//  Description: Returns a MaterialCollection representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
96
inline MaterialCollection MaterialCollection::operator +(MaterialCollection const &other) const;

3358 6 output 4 3811 26 MaterialCollection::output 0 1 1642 336
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               MaterialCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
52
void MaterialCollection::output(ostream &out) const;

3359 5 write 4 3811 25 MaterialCollection::write 0 2 1643 1644 340
////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               MaterialCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
75
void MaterialCollection::write(ostream &out, int indent_level = (0)) const;

3360 19 ModelFlattenRequest 4 3812 40 ModelFlattenRequest::ModelFlattenRequest 0 1 1645 851
// Filename: modelFlattenRequest.I
// Created by:  drose (30Mar07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::Constructor
//       Access: Published
//  Description: Create a new ModelFlattenRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
////////////////////////////////////////////////////////////////////
65
inline ModelFlattenRequest::ModelFlattenRequest(PandaNode *orig);

3361 8 get_orig 4 3812 29 ModelFlattenRequest::get_orig 0 1 1646 268
////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::get_orig
//       Access: Published
//  Description: Returns the original, unflattened node.
////////////////////////////////////////////////////////////////////
60
inline PandaNode *ModelFlattenRequest::get_orig(void) const;

3362 8 is_ready 4 3812 29 ModelFlattenRequest::is_ready 0 1 1647 420
////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the model loaded by calling get_result().
////////////////////////////////////////////////////////////////////
54
inline bool ModelFlattenRequest::is_ready(void) const;

3363 9 get_model 4 3812 30 ModelFlattenRequest::get_model 0 1 1648 348
////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::get_model
//       Access: Published
//  Description: Returns the flattened copy of the model.  It is an
//               error to call this unless is_ready() returns true.
////////////////////////////////////////////////////////////////////
61
inline PandaNode *ModelFlattenRequest::get_model(void) const;

3364 14 get_class_type 4 3812 35 ModelFlattenRequest::get_class_type 0 1 1649 0
60
static TypeHandle ModelFlattenRequest::get_class_type(void);

3365 20 ~ModelFlattenRequest 4 3812 41 ModelFlattenRequest::~ModelFlattenRequest 0 0 0
48
ModelFlattenRequest::~ModelFlattenRequest(void);

3366 16 ModelLoadRequest 4 3814 34 ModelLoadRequest::ModelLoadRequest 0 1 1650 350
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::Constructor
//       Access: Published
//  Description: Create a new ModelLoadRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
////////////////////////////////////////////////////////////////////
141
ModelLoadRequest::ModelLoadRequest(basic_string< char > const &name, Filename const &filename, LoaderOptions const &options, Loader *loader);

3367 12 get_filename 4 3814 30 ModelLoadRequest::get_filename 0 1 1651 811
// Filename: modelLoadRequest.I
// Created by:  drose (29Aug06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_filename
//       Access: Published
//  Description: Returns the filename associated with this
//               asynchronous ModelLoadRequest.
////////////////////////////////////////////////////////////////////
66
inline Filename const &ModelLoadRequest::get_filename(void) const;

3368 11 get_options 4 3814 29 ModelLoadRequest::get_options 0 1 1652 323
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_options
//       Access: Published
//  Description: Returns the LoaderOptions associated with this
//               asynchronous ModelLoadRequest.
////////////////////////////////////////////////////////////////////
70
inline LoaderOptions const &ModelLoadRequest::get_options(void) const;

3369 10 get_loader 4 3814 28 ModelLoadRequest::get_loader 0 1 1653 322
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_loader
//       Access: Published
//  Description: Returns the Loader object associated with this
//               asynchronous ModelLoadRequest.
////////////////////////////////////////////////////////////////////
56
inline Loader *ModelLoadRequest::get_loader(void) const;

3370 8 is_ready 4 3814 26 ModelLoadRequest::is_ready 0 1 1654 416
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the model loaded by calling get_model().
////////////////////////////////////////////////////////////////////
51
inline bool ModelLoadRequest::is_ready(void) const;

3371 9 get_model 4 3814 27 ModelLoadRequest::get_model 0 1 1655 410
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_model
//       Access: Published
//  Description: Returns the model that was loaded asynchronously, if
//               any, or NULL if there was an error.  It is an error
//               to call this unless is_ready() returns true.
////////////////////////////////////////////////////////////////////
58
inline PandaNode *ModelLoadRequest::get_model(void) const;

3372 14 get_class_type 4 3814 32 ModelLoadRequest::get_class_type 0 1 1656 0
57
static TypeHandle ModelLoadRequest::get_class_type(void);

3373 17 ~ModelLoadRequest 4 3814 35 ModelLoadRequest::~ModelLoadRequest 0 0 0
42
ModelLoadRequest::~ModelLoadRequest(void);

3374 9 ModelNode 4 3815 20 ModelNode::ModelNode 0 1 1657 931
// Filename: modelNode.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
62
inline ModelNode::ModelNode(basic_string< char > const &name);

3375 22 set_preserve_transform 4 3815 33 ModelNode::set_preserve_transform 0 1 1658 1760
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_transform
//       Access: Public
//  Description: Sets the preserve_transform flag.  This restricts the
//               ability of a flatten operation to affect the
//               transform stored on this node, and/or the node
//               itself.  In the order from weakest to strongest
//               restrictions, the possible flags are:
//
//               PT_drop_node - This node should be removed at the
//               next flatten call.
//
//               PT_none - The transform may be adjusted at will.  The
//               node itself will not be removed.  This is the
//               default.
//
//               PT_net - Preserve the net transform from the root,
//               but it's acceptable to modify the local transform
//               stored on this particular node if necessary, so long
//               as the net transform is not changed.  This eliminates
//               the need to drop an extra transform on the node
//               above.
//
//               PT_local - The local (and net) transform should not
//               be changed in any way.  If necessary, an extra
//               transform will be left on the node above to guarantee
//               this.  This is a stronger restriction than PT_net.
//
//               PT_no_touch - The local transform will not be
//               changed, the node will not be removed, and
//               furthermore any flatten operation will not continue
//               below this node--this node and all descendents are
//               protected from the effects of flatten.
////////////////////////////////////////////////////////////////////
95
inline void ModelNode::set_preserve_transform(ModelNode::PreserveTransform preserve_transform);

3376 22 get_preserve_transform 4 3815 33 ModelNode::get_preserve_transform 0 1 1659 337
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_transform
//       Access: Public
//  Description: Returns the current setting of the preserve_transform
//               flag.  See set_preserve_transform().
////////////////////////////////////////////////////////////////////
82
inline ModelNode::PreserveTransform ModelNode::get_preserve_transform(void) const;

3377 23 set_preserve_attributes 4 3815 34 ModelNode::set_preserve_attributes 0 1 1660 591
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_attributes
//       Access: Public
//  Description: Sets the preserve_attributes flag.  This restricts the
//               ability of a flatten operation to affect the
//               render attributes stored on this node.
//
//               The value should be the union of bits from
//               SceneGraphReducer::AttribTypes that represent the
//               attributes that should *not* be changed.
////////////////////////////////////////////////////////////////////
64
inline void ModelNode::set_preserve_attributes(int attrib_mask);

3378 23 get_preserve_attributes 4 3815 34 ModelNode::get_preserve_attributes 0 1 1661 340
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_attributes
//       Access: Public
//  Description: Returns the current setting of the preserve_attributes
//               flag.  See set_preserve_attributes().
////////////////////////////////////////////////////////////////////
58
inline int ModelNode::get_preserve_attributes(void) const;

3379 19 set_transform_limit 4 3815 30 ModelNode::set_transform_limit 0 1 1662 0
49
void ModelNode::set_transform_limit(float limit);

3380 14 get_class_type 4 3815 25 ModelNode::get_class_type 0 1 1663 0
50
static TypeHandle ModelNode::get_class_type(void);

3381 10 ~ModelNode 4 3815 21 ModelNode::~ModelNode 0 0 0
28
ModelNode::~ModelNode(void);

3382 9 ModelRoot 4 3817 20 ModelRoot::ModelRoot 0 1 1664 934
// Filename: modelRoot.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
62
inline ModelRoot::ModelRoot(basic_string< char > const &name);

3383 19 get_model_ref_count 4 3817 30 ModelRoot::get_model_ref_count 0 1 1665 654
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_model_ref_count
//       Access: Published
//  Description: Returns the number of copies that exist of this
//               particular ModelRoot node.  Each time
//               ModelRoot::copy_subgraph() or make_copy() is called
//               (or some other copying mechanism, such as
//               NodePath.copy_to(), is used), this count will
//               increment by one in all copies; when one of the
//               copies is destructed, this count will decrement.
////////////////////////////////////////////////////////////////////
54
inline int ModelRoot::get_model_ref_count(void) const;

3384 12 get_fullpath 4 3817 23 ModelRoot::get_fullpath 0 1 1666 463
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_fullpath
//       Access: Published
//  Description: Returns the full pathname of the model represented by
//               this node, as found on disk.  This is mainly useful
//               for reference purposes, but is also used to index the
//               ModelRoot into the ModelPool.
////////////////////////////////////////////////////////////////////
59
inline Filename const &ModelRoot::get_fullpath(void) const;

3385 12 set_fullpath 4 3817 23 ModelRoot::set_fullpath 0 1 1667 714
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_fullpath
//       Access: Published
//  Description: Sets the full pathname of the model represented by
//               this node, as found on disk.  This is mainly useful
//               for reference purposes, but is also used to index the
//               ModelRoot into the ModelPool.
//
//               This is normally set automatically when a model is
//               loaded, and should not be set directly by the user.
//               If you change this on a loaded model, then
//               ModelPool::release_model() may fail.
////////////////////////////////////////////////////////////////////
62
inline void ModelRoot::set_fullpath(Filename const &fullpath);

3386 14 ModelReference 4 3818 41 ModelRoot::ModelReference::ModelReference 0 1 1671 237
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::ModelReference::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline ModelRoot::ModelReference::ModelReference(void);

3387 15 ~ModelReference 4 3818 42 ModelRoot::ModelReference::~ModelReference 0 0 0
49
ModelRoot::ModelReference::~ModelReference(void);

3388 13 get_reference 4 3817 24 ModelRoot::get_reference 0 1 1668 604
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_reference
//       Access: Published
//  Description: Returns the pointer that represents the object shared
//               between all copies of this ModelRoot.  Since there's
//               not much associated with this object other than a
//               reference count, normally there's not much reason to
//               get the pointer (though it may be compared
//               pointerwise with other ModelRoot objects).
////////////////////////////////////////////////////////////////////
71
inline ModelRoot::ModelReference *ModelRoot::get_reference(void) const;

3389 13 set_reference 4 3817 24 ModelRoot::set_reference 0 1 1669 469
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_reference
//       Access: Published
//  Description: Changes the pointer that represents the object shared
//               between all copies of this ModelRoot.  This will
//               disassociate this ModelRoot from all of its copies.
//               Normally, there's no reason to do this.
////////////////////////////////////////////////////////////////////
62
void ModelRoot::set_reference(ModelRoot::ModelReference *ref);

3390 14 get_class_type 4 3817 25 ModelRoot::get_class_type 0 1 1670 0
50
static TypeHandle ModelRoot::get_class_type(void);

3391 10 ~ModelRoot 4 3817 21 ModelRoot::~ModelRoot 0 0 0
28
ModelRoot::~ModelRoot(void);

3392 9 has_model 4 3819 20 ModelPool::has_model 0 1 1672 791
// Filename: modelPool.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::has_model
//       Access: Public, Static
//  Description: Returns true if the model has ever been loaded,
//               false otherwise.
////////////////////////////////////////////////////////////////////
66
static inline bool ModelPool::has_model(Filename const &filename);

3393 12 verify_model 4 3819 23 ModelPool::verify_model 0 1 1673 593
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::verify_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_model() with the same model name will
//               return a valid Node pointer.
////////////////////////////////////////////////////////////////////
69
static inline bool ModelPool::verify_model(Filename const &filename);

3394 10 load_model 4 3819 21 ModelPool::load_model 0 2 1674 1675 528
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::load_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns the new model.
//               If a model with the same filename was previously
//               loaded, returns that one instead.  If the model
//               file cannot be found, returns NULL.
////////////////////////////////////////////////////////////////////
112
static inline ModelRoot *ModelPool::load_model(Filename const &filename, LoaderOptions const &options = ((())));

3395 9 add_model 4 3819 20 ModelPool::add_model 0 2 1676 1677 1015
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::add_model
//       Access: Public, Static
//  Description: Adds the indicated already-loaded model to the
//               pool.  The model will always replace any
//               previously-loaded model in the pool that had the
//               same filename.
//
//               This two-parameter version of this method is
//               deprecated; use the one-parameter add_model(model)
//               instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelPool::add_model
//       Access: Public, Static
//  Description: Adds the indicated already-loaded model to the
//               pool.  The model will always replace any
//               previously-loaded model in the pool that had the
//               same filename.
////////////////////////////////////////////////////////////////////
143
static inline void ModelPool::add_model(Filename const &filename, ModelRoot *model);
static inline void ModelPool::add_model(ModelRoot *model);

3396 13 release_model 4 3819 24 ModelPool::release_model 0 2 1678 1679 1391
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_model
//       Access: Public, Static
//  Description: Removes the indicated model from the pool,
//               indicating it will never be loaded again; the model
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every model
//               every loaded, and models will never be freed.
//
//               This version of this method is deprecated; use
//               release_model(model) instead.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_model
//       Access: Public, Static
//  Description: Removes the indicated model from the pool,
//               indicating it will never be loaded again; the model
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every model
//               every loaded, and models will never be freed.
//
//               The model's get_fullpath() value should not have been
//               changed during its lifetime, or this function may
//               fail to locate it in the pool.
////////////////////////////////////////////////////////////////////
133
static inline void ModelPool::release_model(Filename const &filename);
static inline void ModelPool::release_model(ModelRoot *model);

3397 18 release_all_models 4 3819 29 ModelPool::release_all_models 0 1 1680 324
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_all_models
//       Access: Public, Static
//  Description: Releases all models in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
55
static inline void ModelPool::release_all_models(void);

3398 15 garbage_collect 4 3819 26 ModelPool::garbage_collect 0 1 1681 469
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those models in the pool that have a
//               reference count of exactly 1; i.e. only those
//               models that are not being used outside of the pool.
//               Returns the number of models released.
////////////////////////////////////////////////////////////////////
51
static inline int ModelPool::garbage_collect(void);

3399 13 list_contents 4 3819 24 ModelPool::list_contents 0 2 1682 1683 590
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModelPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the model pool to cout.
////////////////////////////////////////////////////////////////////
109
static inline void ModelPool::list_contents(ostream &out);
static inline void ModelPool::list_contents(void);

3400 5 write 4 3819 16 ModelPool::write 0 1 1684 348
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::write
//       Access: Published, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
//               Helps with debugging.
////////////////////////////////////////////////////////////////////
43
static void ModelPool::write(ostream &out);

3401 10 ~ModelPool 4 3819 21 ModelPool::~ModelPool 0 0 0
28
ModelPool::~ModelPool(void);

3402 18 NodePathCollection 4 3820 38 NodePathCollection::NodePathCollection 0 3 1685 1686 1687 927
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Constructor
//       Access: Published
//  Description: This special constructor accepts a Python list of
//               NodePaths.  Since this constructor accepts a generic
//               PyObject *, it should be the last constructor listed
//               in the class record.
////////////////////////////////////////////////////////////////////
193
NodePathCollection::NodePathCollection(void);
NodePathCollection::NodePathCollection(NodePathCollection const &copy);
NodePathCollection::NodePathCollection(PyObject *self, PyObject *sequence);

3403 10 operator = 4 3820 30 NodePathCollection::operator = 0 1 1688 243
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
void NodePathCollection::operator =(NodePathCollection const &copy);

3404 19 ~NodePathCollection 4 3820 39 NodePathCollection::~NodePathCollection 0 0 723
// Filename: nodePathCollection.I
// Created by:  drose (06Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline NodePathCollection::~NodePathCollection(void);

3405 10 __reduce__ 4 3820 30 NodePathCollection::__reduce__ 0 1 1689 328
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
63
PyObject *NodePathCollection::__reduce__(PyObject *self) const;

3406 8 add_path 4 3820 28 NodePathCollection::add_path 0 1 1690 281
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_path
//       Access: Published
//  Description: Adds a new NodePath to the collection.
////////////////////////////////////////////////////////////////////
61
void NodePathCollection::add_path(NodePath const &node_path);

3407 11 remove_path 4 3820 31 NodePathCollection::remove_path 0 1 1691 402
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_path
//       Access: Published
//  Description: Removes the indicated NodePath from the collection.
//               Returns true if the path was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
64
bool NodePathCollection::remove_path(NodePath const &node_path);

3408 14 add_paths_from 4 3820 34 NodePathCollection::add_paths_from 0 1 1692 472
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_paths_from
//       Access: Published
//  Description: Adds all the NodePaths indicated in the other
//               collection to this path.  The other paths are simply
//               appended to the end of the paths in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
73
void NodePathCollection::add_paths_from(NodePathCollection const &other);

3409 17 remove_paths_from 4 3820 37 NodePathCollection::remove_paths_from 0 1 1693 335
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_paths_from
//       Access: Published
//  Description: Removes from this collection all of the NodePaths
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
76
void NodePathCollection::remove_paths_from(NodePathCollection const &other);

3410 22 remove_duplicate_paths 4 3820 42 NodePathCollection::remove_duplicate_paths 0 1 1694 473
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_duplicate_paths
//       Access: Published
//  Description: Removes any duplicate entries of the same NodePaths
//               on this collection.  If a NodePath appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
54
void NodePathCollection::remove_duplicate_paths(void);

3411 8 has_path 4 3820 28 NodePathCollection::has_path 0 1 1695 328
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::has_path
//       Access: Published
//  Description: Returns true if the indicated NodePath appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
62
bool NodePathCollection::has_path(NodePath const &path) const;

3412 5 clear 4 3820 25 NodePathCollection::clear 0 1 1696 267
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::clear
//       Access: Published
//  Description: Removes all NodePaths from the collection.
////////////////////////////////////////////////////////////////////
37
void NodePathCollection::clear(void);

3413 8 is_empty 4 3820 28 NodePathCollection::is_empty 0 1 1697 319
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no NodePaths in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
46
bool NodePathCollection::is_empty(void) const;

3414 13 get_num_paths 4 3820 33 NodePathCollection::get_num_paths 0 1 1698 283
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_num_paths
//       Access: Published
//  Description: Returns the number of NodePaths in the collection.
////////////////////////////////////////////////////////////////////
50
int NodePathCollection::get_num_paths(void) const;

3415 8 get_path 4 3820 28 NodePathCollection::get_path 0 1 1699 271
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_path
//       Access: Published
//  Description: Returns the nth NodePath in the collection.
////////////////////////////////////////////////////////////////////
55
NodePath NodePathCollection::get_path(int index) const;

3416 11 operator [] 4 3820 31 NodePathCollection::operator [] 0 1 1700 391
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::operator []
//       Access: Published
//  Description: Returns the nth NodePath in the collection.  This is
//               the same as get_path(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
58
NodePath NodePathCollection::operator [](int index) const;

3417 4 size 4 3820 24 NodePathCollection::size 0 1 1701 331
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::size
//       Access: Published
//  Description: Returns the number of paths in the collection.  This
//               is the same thing as get_num_paths().
////////////////////////////////////////////////////////////////////
41
int NodePathCollection::size(void) const;

3418 11 operator += 4 3820 31 NodePathCollection::operator += 0 1 1702 279
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
77
inline void NodePathCollection::operator +=(NodePathCollection const &other);

3419 10 operator + 4 3820 30 NodePathCollection::operator + 0 1 1703 324
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::operator +
//       Access: Published
//  Description: Returns a NodePathCollection representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
96
inline NodePathCollection NodePathCollection::operator +(NodePathCollection const &other) const;

3420 6 append 4 3820 26 NodePathCollection::append 0 1 1704 449
// Method names to satisfy Python's conventions.

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::append
//       Access: Published
//  Description: Adds a new NodePath to the collection.  This method
//               duplicates the add_path() method; it is provided to
//               satisfy Python's naming convention.
////////////////////////////////////////////////////////////////////
66
inline void NodePathCollection::append(NodePath const &node_path);

3421 6 extend 4 3820 26 NodePathCollection::extend 0 1 1705 452
// Method names to satisfy Python's conventions.

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::extend
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//               This method duplicates the += operator; it is
//               provided to satisfy Python's naming convention.
////////////////////////////////////////////////////////////////////
72
inline void NodePathCollection::extend(NodePathCollection const &other);

3422 2 ls 4 3820 22 NodePathCollection::ls 0 3 1706 1707 1708 728
// Handy operations on many NodePaths at once.

// Handy operations on many NodePaths at once.

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
////////////////////////////////////////////////////////////////////
120
inline void NodePathCollection::ls(void) const;
void NodePathCollection::ls(ostream &out, int indent_level = (0)) const;

3423 16 find_all_matches 4 3820 36 NodePathCollection::find_all_matches 0 1 1709 447
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with any NodePath in this collection and can be
//               extended by path.  The shortest paths will be listed
//               first.
////////////////////////////////////////////////////////////////////
96
NodePathCollection NodePathCollection::find_all_matches(basic_string< char > const &path) const;

3424 11 reparent_to 4 3820 31 NodePathCollection::reparent_to 0 1 1710 316
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node.
////////////////////////////////////////////////////////////////////
60
void NodePathCollection::reparent_to(NodePath const &other);

3425 15 wrt_reparent_to 4 3820 35 NodePathCollection::wrt_reparent_to 0 1 1711 402
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::wrt_reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node, adjusting each transform so as not to
//               move in world coordinates.
////////////////////////////////////////////////////////////////////
64
void NodePathCollection::wrt_reparent_to(NodePath const &other);

3426 4 show 4 3820 24 NodePathCollection::show 0 1 1712 262
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Shows all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
36
void NodePathCollection::show(void);

3427 4 hide 4 3820 24 NodePathCollection::hide 0 1 1713 262
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Hides all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
36
void NodePathCollection::hide(void);

3428 5 stash 4 3820 25 NodePathCollection::stash 0 1 1714 265
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::stash
//       Access: Published
//  Description: Stashes all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
37
void NodePathCollection::stash(void);

3429 7 unstash 4 3820 27 NodePathCollection::unstash 0 1 1715 269
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::unstash
//       Access: Published
//  Description: Unstashes all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
39
void NodePathCollection::unstash(void);

3430 6 detach 4 3820 26 NodePathCollection::detach 0 1 1716 267
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::detach
//       Access: Published
//  Description: Detaches all NodePaths in the collection.
////////////////////////////////////////////////////////////////////
38
void NodePathCollection::detach(void);

3431 16 get_collide_mask 4 3820 36 NodePathCollection::get_collide_mask 0 1 1717 610
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
////////////////////////////////////////////////////////////////////
77
BitMask< unsigned int, 32 > NodePathCollection::get_collide_mask(void) const;

3432 16 set_collide_mask 4 3820 36 NodePathCollection::set_collide_mask 0 3 1718 1719 1720 694
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  Only nodes 
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
////////////////////////////////////////////////////////////////////
174
void NodePathCollection::set_collide_mask(BitMask< unsigned int, 32 > new_mask, BitMask< unsigned int, 32 > bits_to_change = ((all_on())), TypeHandle node_type = ((none())));

3433 11 set_texture 4 3820 31 NodePathCollection::set_texture 0 4 1721 1722 1723 1724 1355
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the deprecated single-texture variant of this
//               method; it is now superceded by set_texture() that
//               accepts a stage and texture.  However, this method
//               may be used in the presence of multitexture if you
//               just want to adjust the default stage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
////////////////////////////////////////////////////////////////////
164
void NodePathCollection::set_texture(Texture *tex, int priority = (0));
void NodePathCollection::set_texture(TextureStage *stage, Texture *tex, int priority = (0));

3434 15 set_texture_off 4 3820 35 NodePathCollection::set_texture_off 0 4 1725 1726 1727 1728 1202
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
////////////////////////////////////////////////////////////////////
144
void NodePathCollection::set_texture_off(int priority = (0));
void NodePathCollection::set_texture_off(TextureStage *stage, int priority = (0));

3435 9 set_color 4 3820 29 NodePathCollection::set_color 0 5 1729 1730 1731 1732 1733 536
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
////////////////////////////////////////////////////////////////////
185
inline void NodePathCollection::set_color(float r, float g, float b, float a = (1), int priority = (0));
void NodePathCollection::set_color(LVecBase4f const &color, int priority = (0));

3436 15 set_color_scale 4 3820 35 NodePathCollection::set_color_scale 0 5 1734 1735 1736 1737 1738 696
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
////////////////////////////////////////////////////////////////////
197
inline void NodePathCollection::set_color_scale(float r, float g, float b, float a = (1), int priority = (0));
void NodePathCollection::set_color_scale(LVecBase4f const &scale, int priority = (0));

3437 19 compose_color_scale 4 3820 39 NodePathCollection::compose_color_scale 0 5 1739 1740 1741 1742 1743 818
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
////////////////////////////////////////////////////////////////////
205
inline void NodePathCollection::compose_color_scale(float r, float g, float b, float a = (1), int priority = (0));
void NodePathCollection::compose_color_scale(LVecBase4f const &scale, int priority = (0));

3438 10 set_attrib 4 3820 30 NodePathCollection::set_attrib 0 2 1744 1745 504
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_attrib
//       Access: Published
//  Description: Applies the indicated RenderAttrib to all NodePaths
//               in the collection.  An effort is made to apply the
//               attrib to many NodePaths as quickly as possible;
//               redundant RenderState compositions are not
//               duplicated.
////////////////////////////////////////////////////////////////////
84
void NodePathCollection::set_attrib(RenderAttrib const *attrib, int priority = (0));

3439 6 output 4 3820 26 NodePathCollection::output 0 1 1746 336
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               NodePathCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
52
void NodePathCollection::output(ostream &out) const;

3440 5 write 4 3820 25 NodePathCollection::write 0 2 1747 1748 340
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               NodePathCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
75
void NodePathCollection::write(ostream &out, int indent_level = (0)) const;

3441 4 make 4 3821 19 TextureAttrib::make 0 2 1749 1750 1089
// These methods are used to create a simple, single-textured layer.
// For multitexture, use the multitexture interfaces, further below.

// The following methods define the new multitexture mode for
// TextureAttrib.  Each TextureAttrib can add or remove individual
// texture stages from the complete set of textures that are to be
// applied; this is similar to the mechanism of LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering the indicated texture onto geometry, using
//               the default TextureStage.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that does
//               nothing.
////////////////////////////////////////////////////////////////////
137
static ConstPointerTo< RenderAttrib > TextureAttrib::make(Texture *tex);
static ConstPointerTo< RenderAttrib > TextureAttrib::make(void);

3442 8 make_off 4 3821 23 TextureAttrib::make_off 0 1 1751 468
// These methods are used to create a simple, single-textured layer.
// For multitexture, use the multitexture interfaces, further below.

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering untextured geometry.
////////////////////////////////////////////////////////////////////
68
static ConstPointerTo< RenderAttrib > TextureAttrib::make_off(void);

3443 12 make_default 4 3821 27 TextureAttrib::make_default 0 1 1752 400
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > TextureAttrib::make_default(void);

3444 6 is_off 4 3821 21 TextureAttrib::is_off 0 1 1753 679
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_off
//       Access: Published
//  Description: Returns true if the TextureAttrib is an 'off'
//               TextureAttrib, indicating that it should disable
//               texturing.
//
//               If multitexture is in effect, a TextureAttrib may not
//               be strictly "on" or "off"; therefore, to get a more
//               precise answer to this question, you should consider
//               using has_all_off() or get_num_off_stages() or
//               has_off_stage() instead.
////////////////////////////////////////////////////////////////////
46
inline bool TextureAttrib::is_off(void) const;

3445 11 get_texture 4 3821 26 TextureAttrib::get_texture 0 1 1754 386
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_texture
//       Access: Published
//  Description: If the TextureAttrib is not an 'off' TextureAttrib,
//               returns the base-level texture that is associated.
//               Otherwise, return NULL.
////////////////////////////////////////////////////////////////////
55
inline Texture *TextureAttrib::get_texture(void) const;

3446 12 make_all_off 4 3821 27 TextureAttrib::make_all_off 0 1 1755 605
// The following methods define the new multitexture mode for
// TextureAttrib.  Each TextureAttrib can add or remove individual
// texture stages from the complete set of textures that are to be
// applied; this is similar to the mechanism of LightAttrib.

////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that turns off
//               all stages (and hence disables texturing).
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > TextureAttrib::make_all_off(void);

3447 17 get_num_on_stages 4 3821 32 TextureAttrib::get_num_on_stages 0 1 1756 314
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_on_stages
//       Access: Published
//  Description: Returns the number of stages that are turned on by
//               the attribute.
////////////////////////////////////////////////////////////////////
56
inline int TextureAttrib::get_num_on_stages(void) const;

3448 12 get_on_stage 4 3821 27 TextureAttrib::get_on_stage 0 1 1757 317
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_stage
//       Access: Published
//  Description: Returns the nth stage turned on by the attribute,
//               sorted in render order.
////////////////////////////////////////////////////////////////////
62
inline TextureStage *TextureAttrib::get_on_stage(int n) const;

3449 20 get_num_on_ff_stages 4 3821 35 TextureAttrib::get_num_on_ff_stages 0 1 1758 410
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_on_ff_stages
//       Access: Published
//  Description: Returns the number of on-stages that are relevant
//               to the classic fixed function pipeline.  This excludes 
//               texture stages such as normal maps.
////////////////////////////////////////////////////////////////////
59
inline int TextureAttrib::get_num_on_ff_stages(void) const;

3450 15 get_on_ff_stage 4 3821 30 TextureAttrib::get_on_ff_stage 0 1 1759 480
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_render_ff_stage
//       Access: Published
//  Description: Returns the nth stage turned on by the attribute,
//               sorted in render order, including only those relevant
//               to the classic fixed function pipeline.  This excludes 
//               texture stages such as normal maps.
////////////////////////////////////////////////////////////////////
65
inline TextureStage *TextureAttrib::get_on_ff_stage(int n) const;

3451 15 get_ff_tc_index 4 3821 30 TextureAttrib::get_ff_tc_index 0 1 1760 610
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_ff_tc_index
//       Access: Published
//  Description: For each TextureStage listed in get_on_ff_stage(),
//               this returns a unique index number for the texture
//               coordinate name used by that TextureStage.  It is
//               guaranteed to remain the same index number for each
//               texcoord name (for a given set of TextureStages),
//               even if the texture render order changes.
////////////////////////////////////////////////////////////////////
55
inline int TextureAttrib::get_ff_tc_index(int n) const;

3452 12 has_on_stage 4 3821 27 TextureAttrib::has_on_stage 0 1 1761 324
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_on_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned on by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
67
inline bool TextureAttrib::has_on_stage(TextureStage *stage) const;

3453 14 get_on_texture 4 3821 29 TextureAttrib::get_on_texture 0 1 1762 339
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_texture
//       Access: Published
//  Description: Returns the texture associated with the indicated
//               stage, or NULL if no texture is associated.
////////////////////////////////////////////////////////////////////
73
inline Texture *TextureAttrib::get_on_texture(TextureStage *stage) const;

3454 21 get_on_stage_override 4 3821 36 TextureAttrib::get_on_stage_override 0 1 1763 316
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_stage_override
//       Access: Published
//  Description: Returns the override value associated with the
//               indicated stage.
////////////////////////////////////////////////////////////////////
75
inline int TextureAttrib::get_on_stage_override(TextureStage *stage) const;

3455 13 find_on_stage 4 3821 28 TextureAttrib::find_on_stage 0 1 1764 390
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::find_on_stage
//       Access: Published
//  Description: Returns the index number of the indicated
//               TextureStage within the list of on_stages, or -1 if
//               the indicated stage is not listed.
////////////////////////////////////////////////////////////////////
66
int TextureAttrib::find_on_stage(TextureStage const *stage) const;

3456 18 get_num_off_stages 4 3821 33 TextureAttrib::get_num_off_stages 0 1 1765 316
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_off_stages
//       Access: Published
//  Description: Returns the number of stages that are turned off by
//               the attribute.
////////////////////////////////////////////////////////////////////
57
inline int TextureAttrib::get_num_off_stages(void) const;

3457 13 get_off_stage 4 3821 28 TextureAttrib::get_off_stage 0 1 1766 332
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_off_stage
//       Access: Published
//  Description: Returns the nth stage turned off by the attribute,
//               sorted in arbitrary (pointer) order.
////////////////////////////////////////////////////////////////////
63
inline TextureStage *TextureAttrib::get_off_stage(int n) const;

3458 13 has_off_stage 4 3821 28 TextureAttrib::has_off_stage 0 1 1767 326
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_off_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned off by
//               the attrib, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool TextureAttrib::has_off_stage(TextureStage *stage) const;

3459 11 has_all_off 4 3821 26 TextureAttrib::has_all_off 0 1 1768 328
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all stages
//               (although it may also turn some on).
////////////////////////////////////////////////////////////////////
51
inline bool TextureAttrib::has_all_off(void) const;

3460 11 is_identity 4 3821 26 TextureAttrib::is_identity 0 1 1769 331
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of stages in use.
////////////////////////////////////////////////////////////////////
51
inline bool TextureAttrib::is_identity(void) const;

3461 12 add_on_stage 4 3821 27 TextureAttrib::add_on_stage 0 2 1770 1771 392
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned on by this attrib.
////////////////////////////////////////////////////////////////////
120
ConstPointerTo< RenderAttrib > TextureAttrib::add_on_stage(TextureStage *stage, Texture *tex, int override = (0)) const;

3462 15 remove_on_stage 4 3821 30 TextureAttrib::remove_on_stage 0 1 1772 399
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned on by this attrib.
////////////////////////////////////////////////////////////////////
89
ConstPointerTo< RenderAttrib > TextureAttrib::remove_on_stage(TextureStage *stage) const;

3463 13 add_off_stage 4 3821 28 TextureAttrib::add_off_stage 0 2 1773 1774 394
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned off by this attrib.
////////////////////////////////////////////////////////////////////
107
ConstPointerTo< RenderAttrib > TextureAttrib::add_off_stage(TextureStage *stage, int override = (0)) const;

3464 16 remove_off_stage 4 3821 31 TextureAttrib::remove_off_stage 0 1 1775 401
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned off by this attrib.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > TextureAttrib::remove_off_stage(TextureStage *stage) const;

3465 20 unify_texture_stages 4 3821 35 TextureAttrib::unify_texture_stages 0 1 1776 451
////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::unify_texture_stages
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with any included TextureAttribs that happen to have
//               the same name as the given object replaced with the
//               object.
////////////////////////////////////////////////////////////////////
94
ConstPointerTo< RenderAttrib > TextureAttrib::unify_texture_stages(TextureStage *stage) const;

3466 14 get_class_slot 4 3821 29 TextureAttrib::get_class_slot 0 1 1777 0
47
static int TextureAttrib::get_class_slot(void);

3467 14 get_class_type 4 3821 29 TextureAttrib::get_class_type 0 1 1778 0
54
static TypeHandle TextureAttrib::get_class_type(void);

3468 14 ~TextureAttrib 4 3821 29 TextureAttrib::~TextureAttrib 0 0 0
36
TextureAttrib::~TextureAttrib(void);

3469 4 make 4 3822 18 TexGenAttrib::make 0 2 1779 1780 612
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates no stages at
//               all.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates just the
//               indicated stage.
////////////////////////////////////////////////////////////////////
173
static ConstPointerTo< RenderAttrib > TexGenAttrib::make(void);
static ConstPointerTo< RenderAttrib > TexGenAttrib::make(TextureStage *stage, RenderAttrib::TexGenMode mode);

3470 12 make_default 4 3822 26 TexGenAttrib::make_default 0 1 1781 399
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > TexGenAttrib::make_default(void);

3471 9 add_stage 4 3822 23 TexGenAttrib::add_stage 0 3 1782 1783 1784 1581
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
//
//               This variant also accepts source_name and light,
//               which are only meaningful if mode is M_light_vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
//
//               This variant also accepts constant_value, which is
//               only meaningful if mode is M_constant.
////////////////////////////////////////////////////////////////////
437
ConstPointerTo< RenderAttrib > TexGenAttrib::add_stage(TextureStage *stage, RenderAttrib::TexGenMode mode) const;
ConstPointerTo< RenderAttrib > TexGenAttrib::add_stage(TextureStage *stage, RenderAttrib::TexGenMode mode, basic_string< char > const &source_name, NodePath const &light) const;
ConstPointerTo< RenderAttrib > TexGenAttrib::add_stage(TextureStage *stage, RenderAttrib::TexGenMode mode, LPoint3f const &constant_value) const;

3472 12 remove_stage 4 3822 26 TexGenAttrib::remove_stage 0 1 1785 331
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated stage removed.
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< RenderAttrib > TexGenAttrib::remove_stage(TextureStage *stage) const;

3473 8 is_empty 4 3822 22 TexGenAttrib::is_empty 0 1 1786 323
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexGenAttrib, false if at least one is.
////////////////////////////////////////////////////////////////////
40
bool TexGenAttrib::is_empty(void) const;

3474 9 has_stage 4 3822 23 TexGenAttrib::has_stage 0 1 1787 400
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a mode associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return M_off).
////////////////////////////////////////////////////////////////////
56
bool TexGenAttrib::has_stage(TextureStage *stage) const;

3475 8 get_mode 4 3822 22 TexGenAttrib::get_mode 0 1 1788 384
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_mode
//       Access: Published
//  Description: Returns the generation mode associated with
//               the named texture stage, or M_off if
//               nothing is associated with the indicated stage.
////////////////////////////////////////////////////////////////////
75
RenderAttrib::TexGenMode TexGenAttrib::get_mode(TextureStage *stage) const;

3476 22 has_gen_texcoord_stage 4 3822 36 TexGenAttrib::has_gen_texcoord_stage 0 1 1789 477
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::has_gen_texcoord_stage
//       Access: Published
//  Description: Returns true if the indicated TextureStage will have
//               texture coordinates generated for it automatically
//               (and thus there is no need to upload the texture
//               coordinates encoded in the vertices).
////////////////////////////////////////////////////////////////////
69
bool TexGenAttrib::has_gen_texcoord_stage(TextureStage *stage) const;

3477 15 get_source_name 4 3822 29 TexGenAttrib::get_source_name 0 1 1790 644
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_source_name
//       Access: Published
//  Description: Returns the source name associated with the named
//               texture stage, or the empty string if no name is
//               associated with the indicated stage.  This is only
//               meaningful if the mode is M_light_vector, in which
//               case it indicates the name of the source texture
//               coordinate set from which the tangent and binormal
//               are derived.
////////////////////////////////////////////////////////////////////
78
basic_string< char > TexGenAttrib::get_source_name(TextureStage *stage) const;

3478 9 get_light 4 3822 23 TexGenAttrib::get_light 0 1 1791 462
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_light
//       Access: Published
//  Description: Returns the Light associated with the named texture
//               stage, or the empty NodePath if no light is
//               associated with the indicated stage.  This is only
//               meaningful if the mode is M_light_vector.
////////////////////////////////////////////////////////////////////
60
NodePath TexGenAttrib::get_light(TextureStage *stage) const;

3479 18 get_constant_value 4 3822 32 TexGenAttrib::get_constant_value 0 1 1792 385
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_constant_value
//       Access: Published
//  Description: Returns the constant value associated with the named
//               texture stage.  This is only meaningful if the mode
//               is M_constant.
////////////////////////////////////////////////////////////////////
76
LPoint3f const &TexGenAttrib::get_constant_value(TextureStage *stage) const;

3480 18 get_geom_rendering 4 3822 32 TexGenAttrib::get_geom_rendering 0 1 1793 448
////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexGenAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
////////////////////////////////////////////////////////////////////
70
inline int TexGenAttrib::get_geom_rendering(int geom_rendering) const;

3481 14 get_class_slot 4 3822 28 TexGenAttrib::get_class_slot 0 1 1794 0
46
static int TexGenAttrib::get_class_slot(void);

3482 14 get_class_type 4 3822 28 TexGenAttrib::get_class_type 0 1 1795 0
53
static TypeHandle TexGenAttrib::get_class_type(void);

3483 13 PolylightNode 4 3823 28 PolylightNode::PolylightNode 0 1 1796 303
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::Constructor
//       Access: Published
//  Description: Use PolylightNode() to construct a new
//               PolylightNode object.
////////////////////////////////////////////////////////////////////
63
PolylightNode::PolylightNode(basic_string< char > const &name);

3484 6 enable 4 3823 21 PolylightNode::enable 0 1 1797 238
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::enable
//       Access: Published
//  Description: Enable this light
////////////////////////////////////////////////////////////////////
40
inline void PolylightNode::enable(void);

3485 7 disable 4 3823 22 PolylightNode::disable 0 1 1798 240
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::disable
//       Access: Published
//  Description: Disable this light
////////////////////////////////////////////////////////////////////
41
inline void PolylightNode::disable(void);

3486 7 set_pos 4 3823 22 PolylightNode::set_pos 0 2 1799 1800 496
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
////////////////////////////////////////////////////////////////////
119
inline void PolylightNode::set_pos(LVecBase3f position);
inline void PolylightNode::set_pos(float x, float y, float z);

3487 7 get_pos 4 3823 22 PolylightNode::get_pos 0 1 1801 252
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_pos
//       Access: Published
//  Description: Returns position as a LPoint3f
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f PolylightNode::get_pos(void) const;

3488 9 set_color 4 3823 24 PolylightNode::set_color 0 2 1802 1803 524
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 3 floats between 0 and 1
////////////////////////////////////////////////////////////////////
120
inline void PolylightNode::set_color(LVecBase4f color);
inline void PolylightNode::set_color(float r, float g, float b);

3489 9 get_color 4 3823 24 PolylightNode::get_color 0 1 1804 259
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color
//       Access: Published
//  Description: Returns the light's color as Colorf
////////////////////////////////////////////////////////////////////
55
inline LVecBase4f PolylightNode::get_color(void) const;

3490 20 get_color_scenegraph 4 3823 35 PolylightNode::get_color_scenegraph 0 1 1805 443
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color_scenegraph
//       Access: Published
//  Description: This differs from get_color in that when applying
//               the light color we need to make sure that a color
//               flattening external to the PolylightNode is not 
//               ignored.
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f PolylightNode::get_color_scenegraph(void) const;

3491 10 set_radius 4 3823 25 PolylightNode::set_radius 0 1 1806 265
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_radius
//       Access: Published
//  Description: Set radius of the spherical light volume
////////////////////////////////////////////////////////////////////
47
inline void PolylightNode::set_radius(float r);

3492 10 get_radius 4 3823 25 PolylightNode::get_radius 0 1 1807 265
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_radius
//       Access: Published
//  Description: Get radius of the spherical light volume
////////////////////////////////////////////////////////////////////
51
inline float PolylightNode::get_radius(void) const;

3493 15 set_attenuation 4 3823 30 PolylightNode::set_attenuation 0 1 1808 267
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_attenuation
//       Access: Published
//  Description: Set ALINEAR or AQUADRATIC attenuation
////////////////////////////////////////////////////////////////////
81
inline bool PolylightNode::set_attenuation(PolylightNode::Attenuation_Type type);

3494 15 get_attenuation 4 3823 30 PolylightNode::get_attenuation 0 1 1809 274
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_attenuation
//       Access: Published
//  Description: Get "linear" or "quadratic" attenuation type
////////////////////////////////////////////////////////////////////
82
inline PolylightNode::Attenuation_Type PolylightNode::get_attenuation(void) const;

3495 6 set_a0 4 3823 21 PolylightNode::set_a0 0 1 1810 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a0
//       Access: Published
//  Description: Set the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
44
inline void PolylightNode::set_a0(float a0);

3496 6 set_a1 4 3823 21 PolylightNode::set_a1 0 1 1811 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a1
//       Access: Published
//  Description: Set the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
44
inline void PolylightNode::set_a1(float a1);

3497 6 set_a2 4 3823 21 PolylightNode::set_a2 0 1 1812 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a2
//       Access: Published
//  Description: Set the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
44
inline void PolylightNode::set_a2(float a2);

3498 6 get_a0 4 3823 21 PolylightNode::get_a0 0 1 1813 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a0
//       Access: Published
//  Description: Get the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
47
inline float PolylightNode::get_a0(void) const;

3499 6 get_a1 4 3823 21 PolylightNode::get_a1 0 1 1814 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a1
//       Access: Published
//  Description: Get the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
47
inline float PolylightNode::get_a1(void) const;

3500 6 get_a2 4 3823 21 PolylightNode::get_a2 0 1 1815 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a2
//       Access: Published
//  Description: Get the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
////////////////////////////////////////////////////////////////////
47
inline float PolylightNode::get_a2(void) const;

3501 10 flicker_on 4 3823 25 PolylightNode::flicker_on 0 1 1816 332
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_on
//       Access: Published
//  Description: Set flickering to true so at every loop this light's
//               color is varied based on flicker_type
////////////////////////////////////////////////////////////////////
44
inline void PolylightNode::flicker_on(void);

3502 11 flicker_off 4 3823 26 PolylightNode::flicker_off 0 1 1817 245
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_off
//       Access: Published
//  Description: Turn flickering off
////////////////////////////////////////////////////////////////////
45
inline void PolylightNode::flicker_off(void);

3503 13 is_flickering 4 3823 28 PolylightNode::is_flickering 0 1 1818 261
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_flickering
//       Access: Published
//  Description: Check is this light is flickering
////////////////////////////////////////////////////////////////////
53
inline bool PolylightNode::is_flickering(void) const;

3504 16 set_flicker_type 4 3823 31 PolylightNode::set_flicker_type 0 1 1819 446
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_flicker_type
//       Access: Published
//  Description: Flicker type can be FRANDOM or FSIN
//               At a later point there might be a FCUSTOM
//               Custom flicker will be a set of fix points recorded
//               by animating the light's intensity
////////////////////////////////////////////////////////////////////
78
inline bool PolylightNode::set_flicker_type(PolylightNode::Flicker_Type type);

3505 16 get_flicker_type 4 3823 31 PolylightNode::get_flicker_type 0 1 1820 254
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_flicker_type
//       Access: Published
//  Description: Returns FRANDOM or FSIN
////////////////////////////////////////////////////////////////////
79
inline PolylightNode::Flicker_Type PolylightNode::get_flicker_type(void) const;

3506 10 set_offset 4 3823 25 PolylightNode::set_offset 0 1 1821 387
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_offset
//       Access: Published
//  Description: Set the offset value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is added to the variation
////////////////////////////////////////////////////////////////////
52
inline void PolylightNode::set_offset(float offset);

3507 10 get_offset 4 3823 25 PolylightNode::get_offset 0 1 1822 304
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_offset
//       Access: Published
//  Description: Get the offset value for the random and sin
//               flicker variations
////////////////////////////////////////////////////////////////////
51
inline float PolylightNode::get_offset(void) const;

3508 9 set_scale 4 3823 24 PolylightNode::set_scale 0 1 1823 392
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_scale
//       Access: Published
//  Description: Set the scale value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is multiplied with the variation
////////////////////////////////////////////////////////////////////
50
inline void PolylightNode::set_scale(float scale);

3509 9 get_scale 4 3823 24 PolylightNode::get_scale 0 1 1824 302
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_scale
//       Access: Published
//  Description: Get the scale value for the random and sin
//               flicker variations
////////////////////////////////////////////////////////////////////
50
inline float PolylightNode::get_scale(void) const;

3510 13 set_step_size 4 3823 28 PolylightNode::set_step_size 0 1 1825 381
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_step_size
//       Access: Published
//  Description: Set the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
////////////////////////////////////////////////////////////////////
53
inline void PolylightNode::set_step_size(float step);

3511 13 get_step_size 4 3823 28 PolylightNode::get_step_size 0 1 1826 381
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_step_size
//       Access: Published
//  Description: Get the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
////////////////////////////////////////////////////////////////////
54
inline float PolylightNode::get_step_size(void) const;

3512 8 set_freq 4 3823 23 PolylightNode::set_freq 0 1 1827 251
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_freq
//       Access: Published
//  Description: Set frequency of sin flicker
////////////////////////////////////////////////////////////////////
45
inline void PolylightNode::set_freq(float f);

3513 8 get_freq 4 3823 23 PolylightNode::get_freq 0 1 1828 251
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_freq
//       Access: Published
//  Description: Get frequency of sin flicker
////////////////////////////////////////////////////////////////////
49
inline float PolylightNode::get_freq(void) const;

3514 11 operator == 4 3823 26 PolylightNode::operator == 0 1 1829 848
// Comparison methods

// Filename: PolylightNodeEffect.I
// Created by:  sshodhan (02Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::operator ==
//       Access: Published
//  Description: Returns true if the two lights are equivalent
//               that is, all their properties are same
////////////////////////////////////////////////////////////////////
73
inline bool PolylightNode::operator ==(PolylightNode const &other) const;

3515 11 operator != 4 3823 26 PolylightNode::operator != 0 1 1830 299
// Comparison methods

////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::operator !=
//       Access: Published
//  Description: Returns true if the two lights are not equivalent.
////////////////////////////////////////////////////////////////////
73
inline bool PolylightNode::operator !=(PolylightNode const &other) const;

3516 10 operator < 4 3823 25 PolylightNode::operator < 0 1 1831 541
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::operator <
//       Access: Published
//  Description: Returns true if this PolylightNode sorts before the other
//               one, false otherwise.  The sorting order of two
//               nonequivalent PolylightNodes is consistent but undefined,
//               and is useful only for storing PolylightNodes in a sorted
//               container like an STL set.
////////////////////////////////////////////////////////////////////
72
inline bool PolylightNode::operator <(PolylightNode const &other) const;

3517 10 compare_to 4 3823 25 PolylightNode::compare_to 0 1 1832 832
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this PolylightNode
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two PolylightNodes are considered equivalent if they
//               consist of exactly the same properties
//               Otherwise, they are different; different
//               PolylightNodes will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the PolylightNodes in a sorted container like an
//               STL set.
////////////////////////////////////////////////////////////////////
64
int PolylightNode::compare_to(PolylightNode const &other) const;

3518 10 is_enabled 4 3823 25 PolylightNode::is_enabled 0 1 1833 259
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_enabled
//       Access: Published
//  Description: Is this light is enabled/disabled?
////////////////////////////////////////////////////////////////////
50
inline bool PolylightNode::is_enabled(void) const;

3519 14 get_class_type 4 3823 29 PolylightNode::get_class_type 0 1 1834 0
54
static TypeHandle PolylightNode::get_class_type(void);

3520 14 ~PolylightNode 4 3823 29 PolylightNode::~PolylightNode 0 0 0
36
PolylightNode::~PolylightNode(void);

3521 4 make 4 3826 21 PolylightEffect::make 0 3 1835 1836 1837 811
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
////////////////////////////////////////////////////////////////////
374
static ConstPointerTo< RenderEffect > PolylightEffect::make(void);
static ConstPointerTo< RenderEffect > PolylightEffect::make(float weight, PolylightEffect::ContribType contrib, LPoint3f effect_center);
static ConstPointerTo< RenderEffect > PolylightEffect::make(float weight, PolylightEffect::ContribType contrib, LPoint3f effect_center, vector< NodePath > const &lights);

3522 9 add_light 4 3826 26 PolylightEffect::add_light 0 1 1838 308
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::add_light
//       Access: Published
//  Description: Add a PolylightNode object to this effect and return
//               a new effect
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderEffect > PolylightEffect::add_light(NodePath const &newlight) const;

3523 12 remove_light 4 3826 29 PolylightEffect::remove_light 0 1 1839 308
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::remove_light
//       Access: Published
//  Description: Remove a light from this effect. Return the new updated
//               effect
////////////////////////////////////////////////////////////////////
93
ConstPointerTo< RenderEffect > PolylightEffect::remove_light(NodePath const &newlight) const;

3524 10 set_weight 4 3826 27 PolylightEffect::set_weight 0 1 1840 517
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_weight
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
////////////////////////////////////////////////////////////////////
74
ConstPointerTo< RenderEffect > PolylightEffect::set_weight(float w) const;

3525 11 set_contrib 4 3826 28 PolylightEffect::set_contrib 0 1 1841 524
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_contrib
//       Access: Published
//  Description: Set Contrib Type and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
////////////////////////////////////////////////////////////////////
98
ConstPointerTo< RenderEffect > PolylightEffect::set_contrib(PolylightEffect::ContribType c) const;

3526 17 set_effect_center 4 3826 34 PolylightEffect::set_effect_center 0 1 1842 524
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_effect_center
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
////////////////////////////////////////////////////////////////////
85
ConstPointerTo< RenderEffect > PolylightEffect::set_effect_center(LPoint3f ec) const;

3527 10 get_weight 4 3826 27 PolylightEffect::get_weight 0 1 1843 247
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_weight
//       Access: Published
//  Description: Get the weight value
////////////////////////////////////////////////////////////////////
53
inline float PolylightEffect::get_weight(void) const;

3528 11 get_contrib 4 3826 28 PolylightEffect::get_contrib 0 1 1844 257
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_contrib
//       Access: Published
//  Description: Returns CT_all or CT_proximal
////////////////////////////////////////////////////////////////////
77
inline PolylightEffect::ContribType PolylightEffect::get_contrib(void) const;

3529 17 get_effect_center 4 3826 34 PolylightEffect::get_effect_center 0 1 1845 272
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_effect_center
//       Access: Published
//  Description: Return the value of the _effect_center
////////////////////////////////////////////////////////////////////
63
inline LPoint3f PolylightEffect::get_effect_center(void) const;

3530 9 has_light 4 3826 26 PolylightEffect::has_light 0 1 1846 329
////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               PolylightEffect, false otherwise.
////////////////////////////////////////////////////////////////////
61
bool PolylightEffect::has_light(NodePath const &light) const;

3531 14 get_class_type 4 3826 31 PolylightEffect::get_class_type 0 1 1847 0
56
static TypeHandle PolylightEffect::get_class_type(void);

3532 16 ~PolylightEffect 4 3826 33 PolylightEffect::~PolylightEffect 0 0 0
40
PolylightEffect::~PolylightEffect(void);

3533 9 get_blank 4 3828 22 ShaderInput::get_blank 0 1 1878 371
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_blank
//       Access: Public, Static
//  Description: Returns a static ShaderInput object with
//               name NULL, priority zero, type INVALID, and
//               all value-fields cleared.
////////////////////////////////////////////////////////////////////
55
static ShaderInput const *ShaderInput::get_blank(void);

3534 11 ShaderInput 4 3828 24 ShaderInput::ShaderInput 0 30 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 3388
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
1487
inline ShaderInput::ShaderInput(InternalName *id, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, NodePath const &np, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, Texture *tex, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, PointerToArray< float > const &ptr, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, PointerToArray< double > const &ptr, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, PointerToArray< LVecBase4f > const &ptr, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, PointerToArray< LVecBase3f > const &ptr, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, PointerToArray< LVecBase2f > const &ptr, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, PointerToArray< LMatrix4f > const &ptr, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, PointerToArray< LMatrix3f > const &ptr, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, LVecBase4f const &vec, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, LVecBase3f const &vec, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, LVecBase2f const &vec, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, LMatrix4f const &mat, int priority = (0));
inline ShaderInput::ShaderInput(InternalName *id, LMatrix3f const &mat, int priority = (0));

3535 8 get_name 4 3828 21 ShaderInput::get_name 0 1 1879 221
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_name
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline InternalName *ShaderInput::get_name(void) const;

3536 14 get_value_type 4 3828 27 ShaderInput::get_value_type 0 1 1880 227
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_value_type
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline int ShaderInput::get_value_type(void) const;

3537 12 get_priority 4 3828 25 ShaderInput::get_priority 0 1 1881 225
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_priority
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
inline int ShaderInput::get_priority(void) const;

3538 11 get_texture 4 3828 24 ShaderInput::get_texture 0 1 1882 224
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_texture
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline Texture *ShaderInput::get_texture(void) const;

3539 12 get_nodepath 4 3828 25 ShaderInput::get_nodepath 0 1 1883 225
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_nodepath
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline NodePath const &ShaderInput::get_nodepath(void) const;

3540 10 get_vector 4 3828 23 ShaderInput::get_vector 0 1 1884 223
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_vector
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline LVector4f const &ShaderInput::get_vector(void) const;

3541 7 get_ptr 4 3828 20 ShaderInput::get_ptr 0 1 1885 220
////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_ptr
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline Shader::ShaderPtrData const &ShaderInput::get_ptr(void) const;

3542 14 get_class_type 4 3828 27 ShaderInput::get_class_type 0 1 1886 0
52
static TypeHandle ShaderInput::get_class_type(void);

3543 4 make 4 3830 18 ShaderAttrib::make 0 1 1887 297
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object with nothing
//               set.
////////////////////////////////////////////////////////////////////
63
static ConstPointerTo< RenderAttrib > ShaderAttrib::make(void);

3544 8 make_off 4 3830 22 ShaderAttrib::make_off 0 1 1888 383
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object that disables
//               the use of shaders (it does not clear out all shader
//               data, however.)
////////////////////////////////////////////////////////////////////
67
static ConstPointerTo< RenderAttrib > ShaderAttrib::make_off(void);

3545 12 make_default 4 3830 26 ShaderAttrib::make_default 0 1 1889 399
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
71
static ConstPointerTo< RenderAttrib > ShaderAttrib::make_default(void);

3546 10 has_shader 4 3830 24 ShaderAttrib::has_shader 0 1 1890 336
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::has_shader
//       Access: Published
//  Description: If true, the shader field of this attribute overrides
//               the shader field of the parent attribute.
////////////////////////////////////////////////////////////////////
49
inline bool ShaderAttrib::has_shader(void) const;

3547 11 auto_shader 4 3830 25 ShaderAttrib::auto_shader 0 1 1891 387
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_shader
//       Access: Published
//  Description: If true, then this ShaderAttrib does not contain an
//               explicit shader - instead, it requests the automatic
//               generation of a shader.
////////////////////////////////////////////////////////////////////
50
inline bool ShaderAttrib::auto_shader(void) const;

3548 19 get_shader_priority 4 3830 33 ShaderAttrib::get_shader_priority 0 1 1892 233
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_priority
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int ShaderAttrib::get_shader_priority(void) const;

3549 18 get_instance_count 4 3830 32 ShaderAttrib::get_instance_count 0 1 1893 339
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_instance_count
//       Access: Published
//  Description: Returns the number of geometry instances. A value
//               of 0 means not to use instancing at all.
////////////////////////////////////////////////////////////////////
56
inline int ShaderAttrib::get_instance_count(void) const;

3550 14 auto_normal_on 4 3830 28 ShaderAttrib::auto_normal_on 0 1 1894 239
//weifengh
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_normal_on
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline bool ShaderAttrib::auto_normal_on(void) const;

3551 12 auto_glow_on 4 3830 26 ShaderAttrib::auto_glow_on 0 1 1895 226
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_glow_on
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline bool ShaderAttrib::auto_glow_on(void) const;

3552 13 auto_gloss_on 4 3830 27 ShaderAttrib::auto_gloss_on 0 1 1896 227
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_gloss_on
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
inline bool ShaderAttrib::auto_gloss_on(void) const;

3553 12 auto_ramp_on 4 3830 26 ShaderAttrib::auto_ramp_on 0 1 1897 226
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_ramp_on
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline bool ShaderAttrib::auto_ramp_on(void) const;

3554 14 auto_shadow_on 4 3830 28 ShaderAttrib::auto_shadow_on 0 1 1898 228
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_shadow_on
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline bool ShaderAttrib::auto_shadow_on(void) const;

3555 10 set_shader 4 3830 24 ShaderAttrib::set_shader 0 2 1899 1900 224
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
99
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader(Shader const *s, int priority = (0)) const;

3556 14 set_shader_off 4 3830 28 ShaderAttrib::set_shader_off 0 2 1901 1902 228
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_off
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
86
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_off(int priority = (0)) const;

3557 15 set_shader_auto 4 3830 29 ShaderAttrib::set_shader_auto 0 4 1903 1904 1905 1906 554
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description: Set auto shader with bitmask to customize use,
//  e.g., to keep normal, glow, etc., on or off
////////////////////////////////////////////////////////////////////
218
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_auto(int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_auto(BitMask< unsigned int, 32 > shader_switch, int priority = (0)) const;

3558 12 clear_shader 4 3830 26 ShaderAttrib::clear_shader 0 1 1907 226
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_shader(void) const;

3559 16 set_shader_input 4 3830 30 ShaderAttrib::set_shader_input 0 69 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 7278
// Shader Inputs

// InternalName* id

// InternalName* id

// String id

// String id

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
4446
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(ShaderInput const *inp) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, Texture *tex, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, NodePath const &np, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, PointerToArray< float > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, PointerToArray< double > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, PointerToArray< LMatrix4f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, PointerToArray< LMatrix3f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, PointerToArray< LVecBase4f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, PointerToArray< LVecBase3f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, PointerToArray< LVecBase2f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, LVecBase4f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, LVecBase3f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, LVecBase2f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, LMatrix4f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, LMatrix3f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(InternalName *id, double n1 = (0), double n2 = (0), double n3 = (0), double n4 = (1), int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, Texture *tex, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, NodePath const &np, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, PointerToArray< float > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, PointerToArray< double > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, PointerToArray< LMatrix4f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, PointerToArray< LMatrix3f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, PointerToArray< LVecBase4f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, PointerToArray< LVecBase3f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, PointerToArray< LVecBase2f > const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, LVecBase4f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, LVecBase3f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, LVecBase2f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, LMatrix4f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, LMatrix3f const &v, int priority = (0)) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::set_shader_input(basic_string< char > const &id, double n1 = (0), double n2 = (0), double n3 = (0), double n4 = (1), int priority = (0)) const;

3560 18 set_instance_count 4 3830 32 ShaderAttrib::set_instance_count 0 1 1977 475
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_instance_count
//       Access: Published
//  Description: Sets the geometry instance count. Do not confuse
//               this with instanceTo, which is used for animation
//               instancing, and has nothing to do with this.
//               A value of 0 means not to use instancing at all.
////////////////////////////////////////////////////////////////////
90
ConstPointerTo< RenderAttrib > ShaderAttrib::set_instance_count(int instance_count) const;

3561 8 set_flag 4 3830 22 ShaderAttrib::set_flag 0 1 1978 222
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
ConstPointerTo< RenderAttrib > ShaderAttrib::set_flag(int flag, bool value) const;

3562 10 clear_flag 4 3830 24 ShaderAttrib::clear_flag 0 1 1979 224
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
72
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_flag(int flag) const;

3563 18 clear_shader_input 4 3830 32 ShaderAttrib::clear_shader_input 0 2 1980 1981 466
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
191
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_shader_input(InternalName *id) const;
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_shader_input(basic_string< char > const &id) const;

3564 23 clear_all_shader_inputs 4 3830 37 ShaderAttrib::clear_all_shader_inputs 0 1 1982 280
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_all_shader_inputs
//       Access: Published
//  Description: Clears all the shader inputs on the attrib.
////////////////////////////////////////////////////////////////////
81
ConstPointerTo< RenderAttrib > ShaderAttrib::clear_all_shader_inputs(void) const;

3565 8 get_flag 4 3830 22 ShaderAttrib::get_flag 0 1 1983 222
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_flag
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline bool ShaderAttrib::get_flag(int flag) const;

3566 10 get_shader 4 3830 24 ShaderAttrib::get_shader 0 1 1984 444
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader
//       Access: Published
//  Description: Returns the shader object associated with the node.
//               If get_override returns true, but get_shader 
//               returns NULL, that means that this attribute should
//               disable the shader.
////////////////////////////////////////////////////////////////////
51
Shader const *ShaderAttrib::get_shader(void) const;

3567 16 get_shader_input 4 3830 30 ShaderAttrib::get_shader_input 0 2 1985 1986 818
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
////////////////////////////////////////////////////////////////////
163
ShaderInput const *ShaderAttrib::get_shader_input(InternalName *id) const;
ShaderInput const *ShaderAttrib::get_shader_input(basic_string< char > const &id) const;

3568 25 get_shader_input_nodepath 4 3830 39 ShaderAttrib::get_shader_input_nodepath 0 1 1987 358
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_nodepath
//       Access: Published
//  Description: Returns the ShaderInput as a nodepath.  Assertion 
//               fails if there is none, or if it is not a nodepath.
////////////////////////////////////////////////////////////////////
80
NodePath const &ShaderAttrib::get_shader_input_nodepath(InternalName *id) const;

3569 23 get_shader_input_vector 4 3830 37 ShaderAttrib::get_shader_input_vector 0 1 1988 352
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_vector
//       Access: Published
//  Description: Returns the ShaderInput as a vector.  Assertion 
//               fails if there is none, or if it is not a vector.
////////////////////////////////////////////////////////////////////
79
LVector4f const &ShaderAttrib::get_shader_input_vector(InternalName *id) const;

3570 24 get_shader_input_texture 4 3830 38 ShaderAttrib::get_shader_input_texture 0 1 1989 355
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_texture
//       Access: Published
//  Description: Returns the ShaderInput as a texture.  Assertion 
//               fails if there is none, or if it is not a texture.
////////////////////////////////////////////////////////////////////
72
Texture *ShaderAttrib::get_shader_input_texture(InternalName *id) const;

3571 20 get_shader_input_ptr 4 3830 34 ShaderAttrib::get_shader_input_ptr 0 1 1990 390
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_ptr
//       Access: Published
//  Description: Returns the ShaderInput as a ShaderPtrData struct. 
//               Assertion fails if there is none. or if it is not 
//               a PTA(double/float)
////////////////////////////////////////////////////////////////////
88
Shader::ShaderPtrData const *ShaderAttrib::get_shader_input_ptr(InternalName *id) const;

3572 26 register_with_read_factory 4 3830 40 ShaderAttrib::register_with_read_factory 0 1 1991 287
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::register_with_read_factory
//       Access: Public, Static
//  Description: Factory method to generate a Shader object
////////////////////////////////////////////////////////////////////
59
static void ShaderAttrib::register_with_read_factory(void);

3573 14 get_class_slot 4 3830 28 ShaderAttrib::get_class_slot 0 1 1992 0
46
static int ShaderAttrib::get_class_slot(void);

3574 14 get_class_type 4 3830 28 ShaderAttrib::get_class_type 0 1 1993 0
53
static TypeHandle ShaderAttrib::get_class_type(void);

3575 13 ~ShaderAttrib 4 3830 27 ShaderAttrib::~ShaderAttrib 0 0 0
34
ShaderAttrib::~ShaderAttrib(void);

3576 4 make 4 3831 22 ShowBoundsEffect::make 0 2 1994 1995 271
////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::make
//       Access: Published, Static
//  Description: Constructs a new ShowBoundsEffect object.
////////////////////////////////////////////////////////////////////
79
static ConstPointerTo< RenderEffect > ShowBoundsEffect::make(bool tight = (0));

3577 9 get_tight 4 3831 27 ShowBoundsEffect::get_tight 0 1 1996 404
////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::get_tight
//       Access: Published
//  Description: Returns true if the "tight" flag was set, meaning the
//               effect should compute and draw the tight bounding-box
//               of the node's vertices every frame.
////////////////////////////////////////////////////////////////////
52
inline bool ShowBoundsEffect::get_tight(void) const;

3578 14 get_class_type 4 3831 32 ShowBoundsEffect::get_class_type 0 1 1997 0
57
static TypeHandle ShowBoundsEffect::get_class_type(void);

3579 17 ~ShowBoundsEffect 4 3831 35 ShowBoundsEffect::~ShowBoundsEffect 0 0 0
42
ShowBoundsEffect::~ShowBoundsEffect(void);

3580 4 make 4 3832 24 TexProjectorEffect::make 0 1 1998 312
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::make
//       Access: Published, Static
//  Description: Constructs a TexProjectorEffect that modifies
//               no stages at all.
////////////////////////////////////////////////////////////////////
69
static ConstPointerTo< RenderEffect > TexProjectorEffect::make(void);

3581 9 add_stage 4 3832 29 TexProjectorEffect::add_stage 0 1 1999 800
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::add_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated projection for the given stage.
//               If this stage already exists, its projection
//               definition is replaced.
//
//               The relative transform between the "from" and the
//               "to" nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.
////////////////////////////////////////////////////////////////////
130
ConstPointerTo< RenderEffect > TexProjectorEffect::add_stage(TextureStage *stage, NodePath const &from, NodePath const &to) const;

3582 12 remove_stage 4 3832 32 TexProjectorEffect::remove_stage 0 1 2000 343
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated stage removed.
////////////////////////////////////////////////////////////////////
91
ConstPointerTo< RenderEffect > TexProjectorEffect::remove_stage(TextureStage *stage) const;

3583 8 is_empty 4 3832 28 TexProjectorEffect::is_empty 0 1 2001 335
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexProjectorEffect, false if at least one is.
////////////////////////////////////////////////////////////////////
46
bool TexProjectorEffect::is_empty(void) const;

3584 9 has_stage 4 3832 29 TexProjectorEffect::has_stage 0 1 2002 445
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
////////////////////////////////////////////////////////////////////
62
bool TexProjectorEffect::has_stage(TextureStage *stage) const;

3585 8 get_from 4 3832 28 TexProjectorEffect::get_from 0 1 2003 506
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
////////////////////////////////////////////////////////////////////
65
NodePath TexProjectorEffect::get_from(TextureStage *stage) const;

3586 6 get_to 4 3832 26 TexProjectorEffect::get_to 0 1 2004 665
////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.
////////////////////////////////////////////////////////////////////
63
NodePath TexProjectorEffect::get_to(TextureStage *stage) const;

3587 14 get_class_type 4 3832 34 TexProjectorEffect::get_class_type 0 1 2005 0
59
static TypeHandle TexProjectorEffect::get_class_type(void);

3588 11 make_screen 4 3833 26 ScissorEffect::make_screen 0 2 2006 2007 420
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_screen
//       Access: Published, Static
//  Description: Constructs a new screen-relative ScissorEffect.  The
//               frame defines a left, right, bottom, top region,
//               relative to the DisplayRegion.  See ScissorAttrib.
////////////////////////////////////////////////////////////////////
107
static ConstPointerTo< RenderEffect > ScissorEffect::make_screen(LVecBase4f const &frame, bool clip = (1));

3589 9 make_node 4 3833 24 ScissorEffect::make_node 0 6 2008 2009 2010 2011 2012 2013 1525
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect, with no
//               points.  This empty ScissorEffect does nothing.  You
//               must then call add_point a number of times to add the
//               points you require.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               two points are understood to be relative to the
//               indicated node, or the current node if the NodePath
//               is empty, and determine the diagonally opposite
//               corners of the scissor region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               four points are understood to be relative to the
//               indicated node, or the current node if the indicated
//               NodePath is empty, and determine four points
//               surrounding the scissor region.
////////////////////////////////////////////////////////////////////
384
static ConstPointerTo< RenderEffect > ScissorEffect::make_node(bool clip = (1));
static ConstPointerTo< RenderEffect > ScissorEffect::make_node(LPoint3f const &a, LPoint3f const &b, NodePath const &node = ((())));
static ConstPointerTo< RenderEffect > ScissorEffect::make_node(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c, LPoint3f const &d, NodePath const &node = ((())));

3590 9 add_point 4 3833 24 ScissorEffect::add_point 0 2 2014 2015 628
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::add_point
//       Access: Published
//  Description: Returns a new ScissorEffect with the indicated point
//               added.  It is only valid to call this on a "node"
//               type ScissorEffect.  The full set of points,
//               projected into screen space, defines the bounding
//               volume of the rectangular scissor region.
//
//               Each point may be relative to a different node, if
//               desired.
////////////////////////////////////////////////////////////////////
116
ConstPointerTo< RenderEffect > ScissorEffect::add_point(LPoint3f const &point, NodePath const &node = ((()))) const;

3591 9 is_screen 4 3833 24 ScissorEffect::is_screen 0 1 2016 882
// Filename: scissorEffect.I
// Created by:  drose (30Jul08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::is_screen
//       Access: Published
//  Description: Returns true if the ScissorEffect is a screen-based
//               effect, meaning get_frame() has a meaningful value,
//               but get_a() and get_b() do not.
////////////////////////////////////////////////////////////////////
49
inline bool ScissorEffect::is_screen(void) const;

3592 9 get_frame 4 3833 24 ScissorEffect::get_frame 0 1 2017 524
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_frame
//       Access: Published
//  Description: If is_screen() returns true, this method may be
//               called to query the screen-based scissor frame.  This
//               is a series of left, right, bottom, top, representing
//               the scissor frame relative to the current
//               DisplayRegion.  See ScissorAttrib.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f const &ScissorEffect::get_frame(void) const;

3593 14 get_num_points 4 3833 29 ScissorEffect::get_num_points 0 1 2018 312
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_num_points
//       Access: Published
//  Description: Returns the number of node-based scissor points.  See
//               get_point().
////////////////////////////////////////////////////////////////////
53
inline int ScissorEffect::get_num_points(void) const;

3594 9 get_point 4 3833 24 ScissorEffect::get_point 0 1 2019 582
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_point
//       Access: Published
//  Description: If is_screen() returns false, then get_num_points() and
//               get_point() may be called to query the node-based scissor
//               frame.  These return n points (at least two), which
//               are understood to be in the space of this node, and
//               which define any opposite corners of the scissor
//               frame.
////////////////////////////////////////////////////////////////////
61
inline LPoint3f const &ScissorEffect::get_point(int n) const;

3595 8 get_node 4 3833 23 ScissorEffect::get_node 0 1 2020 340
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_node
//       Access: Published
//  Description: Returns the node to which the nth point is relative,
//               or empty NodePath to indicate the current node.
////////////////////////////////////////////////////////////////////
53
inline NodePath ScissorEffect::get_node(int n) const;

3596 8 get_clip 4 3833 23 ScissorEffect::get_clip 0 1 2021 330
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_clip
//       Access: Published
//  Description: Returns true if this ScissorEffect actually enables
//               scissoring, or false if it culls only.
////////////////////////////////////////////////////////////////////
48
inline bool ScissorEffect::get_clip(void) const;

3597 14 get_class_type 4 3833 29 ScissorEffect::get_class_type 0 1 2022 0
54
static TypeHandle ScissorEffect::get_class_type(void);

3598 14 ~ScissorEffect 4 3833 29 ScissorEffect::~ScissorEffect 0 0 0
36
ScissorEffect::~ScissorEffect(void);

3599 17 SceneGraphReducer 4 3834 36 SceneGraphReducer::SceneGraphReducer 0 2 2023 2024 722
// Filename: sceneGraphReducer.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
inline SceneGraphReducer::SceneGraphReducer(GraphicsStateGuardianBase *gsg = ((void *)(0)));

3600 18 ~SceneGraphReducer 4 3834 37 SceneGraphReducer::~SceneGraphReducer 0 0 228
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline SceneGraphReducer::~SceneGraphReducer(void);

3601 7 set_gsg 4 3834 26 SceneGraphReducer::set_gsg 0 1 2025 664
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::set_gsg
//       Access: Published
//  Description: Specifies the particular GraphicsStateGuardian that
//               this object will attempt to optimize to.  The GSG may
//               specify parameters such as maximum number of vertices
//               per vertex data, max number of vertices per
//               primitive, and whether triangle strips are preferred.
//               It also affects the types of vertex column data that
//               is created by premunge().
////////////////////////////////////////////////////////////////////
64
void SceneGraphReducer::set_gsg(GraphicsStateGuardianBase *gsg);

3602 9 clear_gsg 4 3834 28 SceneGraphReducer::clear_gsg 0 1 2026 480
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::clear_gsg
//       Access: Published
//  Description: Specifies that no particular GraphicsStateGuardian
//               will be used to guide the optimization.  The
//               SceneGraphReducer will instead use config variables
//               such as max-collect-vertices and max-collect-indices.
////////////////////////////////////////////////////////////////////
40
void SceneGraphReducer::clear_gsg(void);

3603 7 get_gsg 4 3834 26 SceneGraphReducer::get_gsg 0 1 2027 366
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::get_gsg
//       Access: Published
//  Description: Returns the particular GraphicsStateGuardian that
//               this object will attempt to optimize to. 
//               See set_gsg().
////////////////////////////////////////////////////////////////////
73
inline GraphicsStateGuardianBase *SceneGraphReducer::get_gsg(void) const;

3604 18 set_combine_radius 4 3834 37 SceneGraphReducer::set_combine_radius 0 1 2028 757
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::set_combine_radius
//       Access: Published
//  Description: Specifies the radius that is used in conjunction with
//               CS_within_radius to decide whether a subgraph's
//               siblings should be combined into a single node or
//               not.
//
//               If the CS_within_radius bit is included in the
//               combine_siblings_bits parameter passed to flatten,
//               than any nodes whose bounding volume is smaller than
//               the indicated radius will be combined together (as if
//               CS_other were set).
////////////////////////////////////////////////////////////////////
72
inline void SceneGraphReducer::set_combine_radius(float combine_radius);

3605 18 get_combine_radius 4 3834 37 SceneGraphReducer::get_combine_radius 0 1 2029 350
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::get_combine_radius
//       Access: Published
//  Description: Returns the radius that is used in conjunction with
//               CS_within_radius.  See set_combine_radius().
////////////////////////////////////////////////////////////////////
63
inline float SceneGraphReducer::get_combine_radius(void) const;

3606 13 apply_attribs 4 3834 32 SceneGraphReducer::apply_attribs 0 3 2030 2031 2032 1409
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: Walks the scene graph, accumulating attribs of
//               the indicated types, applying them to the vertices,
//               and removing them from the scene graph.  This has a
//               performance optimization benefit in itself, but is
//               especially useful to pave the way for a call to
//               flatten() and greatly improve the effectiveness of
//               the flattening operation.
//
//               Multiply instanced geometry is duplicated before the
//               attribs are applied.
//
//               Of course, this operation does make certain dynamic
//               operations impossible.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: This flavor of apply_attribs() can be called
//               recursively from within another flatten process
//               (e.g. from PandaNode::apply_attribs_to_vertices()).
//               The parameters were presumably received from a parent
//               SceneGraphReducer object.
////////////////////////////////////////////////////////////////////
292
inline void SceneGraphReducer::apply_attribs(PandaNode *node, int attrib_types = ((~ ((TT_clip_plane | TT_cull_face) | TT_apply_texture_color))));
inline void SceneGraphReducer::apply_attribs(PandaNode *node, AccumulatedAttribs const &attribs, int attrib_types, GeomTransformer &transformer);

3607 7 flatten 4 3834 26 SceneGraphReducer::flatten 0 1 2033 940
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::flatten
//       Access: Published
//  Description: Simplifies the graph by removing unnecessary nodes
//               and nodes.
//
//               In general, a node (and its parent node) is a
//               candidate for removal if the node has no siblings and
//               the node has no special properties.
//
//               If combine_siblings_bits is nonzero, some sibling
//               nodes (according to the bits set in
//               combine_siblings_bits) may also be collapsed into a
//               single node.  This will further reduce scene graph
//               complexity, sometimes substantially, at the cost of
//               reduced spatial separation.
//
//               Returns the number of nodes removed from the graph.
////////////////////////////////////////////////////////////////////
75
int SceneGraphReducer::flatten(PandaNode *root, int combine_siblings_bits);

3608 13 remove_column 4 3834 32 SceneGraphReducer::remove_column 0 1 2034 406
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::remove_column
//       Access: Published
//  Description: Removes the indicated data column from any
//               GeomVertexDatas found at the indicated root and
//               below.  Returns the number of GeomNodes modified.
////////////////////////////////////////////////////////////////////
82
int SceneGraphReducer::remove_column(PandaNode *root, InternalName const *column);

3609 21 make_compatible_state 4 3834 40 SceneGraphReducer::make_compatible_state 0 1 2035 542
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_compatible_state
//       Access: Published
//  Description: Searches for GeomNodes that contain multiple Geoms
//               that differ only in their ColorAttribs.  If such a
//               GeomNode is found, then all the colors are pushed
//               down into the vertices.  This makes it feasible for
//               the geoms to be unified later.
////////////////////////////////////////////////////////////////////
62
int SceneGraphReducer::make_compatible_state(PandaNode *root);

3610 22 make_compatible_format 4 3834 41 SceneGraphReducer::make_compatible_format 0 2 2036 2037 1154
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_compatible_format
//       Access: Published
//  Description: Walks through the tree at this node and below and
//               unifies the GeomVertexFormat for any GeomVertexData
//               objects that are found, so that all eligible vdatas
//               (according to collect_bits; see collect_vertex_data)
//               will share the same vertex format.
//
//               This will add unused columns where necessary to match
//               formats.  It can result in suboptimal performance if
//               used needlessly.
//
//               There is usually no reason to call this explicitly,
//               since collect_vertex_data() will do this anyway if it
//               has not been done already.  However, calling it ahead
//               of time can make that future call to
//               collect_vertex_data() run a little bit faster.
//
//               The return value is the number of vertex datas
//               modified.
////////////////////////////////////////////////////////////////////
98
inline int SceneGraphReducer::make_compatible_format(PandaNode *root, int collect_bits = ((~ 0)));

3611 9 decompose 4 3834 28 SceneGraphReducer::decompose 0 1 2038 716
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::decompose
//       Access: Published
//  Description: Calls decompose() on every GeomNode at this level and
//               below.
//
//               There is usually no reason to call this explicitly,
//               since unify() will do this anyway if it needs to be
//               done.  However, calling it ahead of time can make
//               that future call to unify() run a little bit faster.
//
//               This operation has no effect if the config variable
//               preserve-triangle-strips has been set true.
////////////////////////////////////////////////////////////////////
51
void SceneGraphReducer::decompose(PandaNode *root);

3612 19 collect_vertex_data 4 3834 38 SceneGraphReducer::collect_vertex_data 0 2 2039 2040 955
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::collect_vertex_data
//       Access: Published
//  Description: Collects all different GeomVertexData blocks that
//               have compatible formats at this node and below into a
//               single, unified block (or at least multiple larger
//               blocks).  This is intended to reduce rendering
//               overhead incurred by switching vertex buffers.  It
//               can also make a subsequent call to unify() much more
//               effective than it would have been otherwise.
//
//               The set of bits passed in collect_bits indicates
//               which properties are used to differentiate
//               GeomVertexData blocks.  If it is 0, then more blocks
//               will be combined together than if it is nonzero.
////////////////////////////////////////////////////////////////////
95
inline int SceneGraphReducer::collect_vertex_data(PandaNode *root, int collect_bits = ((~ 0)));

3613 15 make_nonindexed 4 3834 34 SceneGraphReducer::make_nonindexed 0 2 2041 2042 604
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_nonindexed
//       Access: Published
//  Description: Converts indexed geometry to nonindexed geometry at
//               the indicated node and below, by duplicating vertices
//               where necessary.  The parameter nonindexed_bits is a
//               union of bits defined in
//               SceneGraphReducer::MakeNonindexed, which specifes
//               which types of geometry to avoid making nonindexed.
////////////////////////////////////////////////////////////////////
94
inline int SceneGraphReducer::make_nonindexed(PandaNode *root, int nonindexed_bits = ((~ 0)));

3614 5 unify 4 3834 24 SceneGraphReducer::unify 0 1 2043 499
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::unify
//       Access: Published
//  Description: Calls unify() on every GeomNode at this level and
//               below.  This attempts to reduce the total number of
//               individual Geoms and GeomPrimitives by combining
//               these objects wherever possible.  See
//               GeomNode::unify().
////////////////////////////////////////////////////////////////////
68
void SceneGraphReducer::unify(PandaNode *root, bool preserve_order);

3615 22 remove_unused_vertices 4 3834 41 SceneGraphReducer::remove_unused_vertices 0 1 2044 579
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::remove_unused_vertices
//       Access: Published
//  Description: Removes any vertices in GeomVertexDatas that are no
//               longer used at this level and below.  This requires
//               remapping vertex indices in all of the
//               GeomPrimitives, to remove holes in the
//               GeomVertexDatas.  It is normally not necessary to
//               call this explicitly.
////////////////////////////////////////////////////////////////////
64
void SceneGraphReducer::remove_unused_vertices(PandaNode *root);

3616 8 premunge 4 3834 27 SceneGraphReducer::premunge 0 1 2045 609
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::premunge
//       Access: Published
//  Description: Walks the scene graph rooted at this node and below,
//               and uses the indicated GSG to premunge every Geom
//               found to optimize it for eventual rendering on the
//               indicated GSG.  If there is no GSG indicated for the
//               SceneGraphReducer, this is a no-op.
//
//               This operation will also apply to stashed children.
////////////////////////////////////////////////////////////////////
91
inline void SceneGraphReducer::premunge(PandaNode *root, RenderState const *initial_state);

3617 18 check_live_flatten 4 3834 37 SceneGraphReducer::check_live_flatten 0 1 2046 672
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::check_live_flatten
//       Access: Published
//  Description: In a non-release build, returns false if the node is
//               correctly not in a live scene graph.  (Calling
//               flatten on a node that is part of a live scene graph,
//               for instance, a node somewhere under render, can
//               cause problems in a multithreaded environment.)
//
//               If allow_live_flatten is true, or in a release build,
//               this always returns true.
////////////////////////////////////////////////////////////////////
60
bool SceneGraphReducer::check_live_flatten(PandaNode *node);

3618 22 TextureStageCollection 4 3839 46 TextureStageCollection::TextureStageCollection 0 2 2047 2048 475
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
137
TextureStageCollection::TextureStageCollection(void);
TextureStageCollection::TextureStageCollection(TextureStageCollection const &copy);

3619 10 operator = 4 3839 34 TextureStageCollection::operator = 0 1 2049 247
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
void TextureStageCollection::operator =(TextureStageCollection const &copy);

3620 23 ~TextureStageCollection 4 3839 47 TextureStageCollection::~TextureStageCollection 0 0 731
// Filename: textureStageCollection.I
// Created by:  drose (23Jul04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline TextureStageCollection::~TextureStageCollection(void);

3621 17 add_texture_stage 4 3839 41 TextureStageCollection::add_texture_stage 0 1 2050 283
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stage
//       Access: Published
//  Description: Adds a new TextureStage to the collection.
////////////////////////////////////////////////////////////////////
81
void TextureStageCollection::add_texture_stage(TextureStage *node_texture_stage);

3622 20 remove_texture_stage 4 3839 44 TextureStageCollection::remove_texture_stage 0 1 2051 428
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stage
//       Access: Published
//  Description: Removes the indicated TextureStage from the collection.
//               Returns true if the texture_stage was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
84
bool TextureStageCollection::remove_texture_stage(TextureStage *node_texture_stage);

3623 23 add_texture_stages_from 4 3839 47 TextureStageCollection::add_texture_stages_from 0 1 2052 516
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stages_from
//       Access: Published
//  Description: Adds all the TextureStages indicated in the other
//               collection to this texture_stage.  The other texture_stages are simply
//               appended to the end of the texture_stages in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
90
void TextureStageCollection::add_texture_stages_from(TextureStageCollection const &other);

3624 26 remove_texture_stages_from 4 3839 50 TextureStageCollection::remove_texture_stages_from 0 1 2053 352
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stages_from
//       Access: Published
//  Description: Removes from this collection all of the TextureStages
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
93
void TextureStageCollection::remove_texture_stages_from(TextureStageCollection const &other);

3625 31 remove_duplicate_texture_stages 4 3839 55 TextureStageCollection::remove_duplicate_texture_stages 0 1 2054 494
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_duplicate_texture_stages
//       Access: Published
//  Description: Removes any duplicate entries of the same TextureStages
//               on this collection.  If a TextureStage appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
67
void TextureStageCollection::remove_duplicate_texture_stages(void);

3626 17 has_texture_stage 4 3839 41 TextureStageCollection::has_texture_stage 0 1 2055 345
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::has_texture_stage
//       Access: Published
//  Description: Returns true if the indicated TextureStage appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
82
bool TextureStageCollection::has_texture_stage(TextureStage *texture_stage) const;

3627 5 clear 4 3839 29 TextureStageCollection::clear 0 1 2056 275
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::clear
//       Access: Published
//  Description: Removes all TextureStages from the collection.
////////////////////////////////////////////////////////////////////
41
void TextureStageCollection::clear(void);

3628 18 find_texture_stage 4 3839 42 TextureStageCollection::find_texture_stage 0 1 2057 395
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::find_texture_stage
//       Access: Published
//  Description: Returns the texture_stage in the collection with the
//               indicated name, if any, or NULL if no texture_stage has
//               that name.
////////////////////////////////////////////////////////////////////
97
TextureStage *TextureStageCollection::find_texture_stage(basic_string< char > const &name) const;

3629 22 get_num_texture_stages 4 3839 46 TextureStageCollection::get_num_texture_stages 0 1 2058 300
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_num_texture_stages
//       Access: Published
//  Description: Returns the number of TextureStages in the collection.
////////////////////////////////////////////////////////////////////
63
int TextureStageCollection::get_num_texture_stages(void) const;

3630 17 get_texture_stage 4 3839 41 TextureStageCollection::get_texture_stage 0 1 2059 288
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_texture_stage
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.
////////////////////////////////////////////////////////////////////
73
TextureStage *TextureStageCollection::get_texture_stage(int index) const;

3631 11 operator [] 4 3839 35 TextureStageCollection::operator [] 0 1 2060 408
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::operator []
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.  This is
//               the same as get_texture_stage(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
67
TextureStage *TextureStageCollection::operator [](int index) const;

3632 4 size 4 3839 28 TextureStageCollection::size 0 1 2061 370
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::size
//       Access: Published
//  Description: Returns the number of texture stages in the
//               collection.  This is the same thing as
//               get_num_texture_stages().
////////////////////////////////////////////////////////////////////
45
int TextureStageCollection::size(void) const;

3633 11 operator += 4 3839 35 TextureStageCollection::operator += 0 1 2062 283
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
85
inline void TextureStageCollection::operator +=(TextureStageCollection const &other);

3634 10 operator + 4 3839 34 TextureStageCollection::operator + 0 1 2063 332
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::operator +
//       Access: Published
//  Description: Returns a TextureStageCollection representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
108
inline TextureStageCollection TextureStageCollection::operator +(TextureStageCollection const &other) const;

3635 4 sort 4 3839 28 TextureStageCollection::sort 0 1 2064 347
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::sort
//       Access: Published
//  Description: Sorts the TextureStages in this collection into order
//               by TextureStage::sort(), from lowest to highest.
////////////////////////////////////////////////////////////////////
40
void TextureStageCollection::sort(void);

3636 6 output 4 3839 30 TextureStageCollection::output 0 1 2065 344
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               TextureStageCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
56
void TextureStageCollection::output(ostream &out) const;

3637 5 write 4 3839 29 TextureStageCollection::write 0 2 2066 2067 348
////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureStageCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
79
void TextureStageCollection::write(ostream &out, int indent_level = (0)) const;

3638 14 PosLerpFunctor 4 3840 30 PosLerpFunctor::PosLerpFunctor 0 4 2068 2069 2070 2071 0
387
PosLerpFunctor::PosLerpFunctor(NodePath np, LPoint3f start, LPoint3f end);
PosLerpFunctor::PosLerpFunctor(NodePath np, float sx, float sy, float sz, float ex, float ey, float ez);
PosLerpFunctor::PosLerpFunctor(NodePath np, LPoint3f start, LPoint3f end, NodePath wrt);
PosLerpFunctor::PosLerpFunctor(NodePath np, float sx, float sy, float sz, float ex, float ey, float ez, NodePath wrt);

3639 14 get_class_type 4 3840 30 PosLerpFunctor::get_class_type 0 1 2072 27
// now for typehandle stuff
55
static TypeHandle PosLerpFunctor::get_class_type(void);

3640 14 HprLerpFunctor 4 3842 30 HprLerpFunctor::HprLerpFunctor 0 4 2073 2074 2075 2076 0
395
HprLerpFunctor::HprLerpFunctor(NodePath np, LVecBase3f start, LVecBase3f end);
HprLerpFunctor::HprLerpFunctor(NodePath np, float sx, float sy, float sz, float ex, float ey, float ez);
HprLerpFunctor::HprLerpFunctor(NodePath np, LVecBase3f start, LVecBase3f end, NodePath wrt);
HprLerpFunctor::HprLerpFunctor(NodePath np, float sx, float sy, float sz, float ex, float ey, float ez, NodePath wrt);

3641 13 take_shortest 4 3842 29 HprLerpFunctor::take_shortest 0 1 2077 0
41
void HprLerpFunctor::take_shortest(void);

3642 12 take_longest 4 3842 28 HprLerpFunctor::take_longest 0 1 2078 0
40
void HprLerpFunctor::take_longest(void);

3643 14 get_class_type 4 3842 30 HprLerpFunctor::get_class_type 0 1 2079 27
// now for typehandle stuff
55
static TypeHandle HprLerpFunctor::get_class_type(void);

3644 16 ScaleLerpFunctor 4 3844 34 ScaleLerpFunctor::ScaleLerpFunctor 0 4 2080 2081 2082 2083 0
411
ScaleLerpFunctor::ScaleLerpFunctor(NodePath np, LVecBase3f start, LVecBase3f end);
ScaleLerpFunctor::ScaleLerpFunctor(NodePath np, float sx, float sy, float sz, float ex, float ey, float ez);
ScaleLerpFunctor::ScaleLerpFunctor(NodePath np, LVecBase3f start, LVecBase3f end, NodePath wrt);
ScaleLerpFunctor::ScaleLerpFunctor(NodePath np, float sx, float sy, float sz, float ex, float ey, float ez, NodePath wrt);

3645 14 get_class_type 4 3844 32 ScaleLerpFunctor::get_class_type 0 1 2084 27
// now for typehandle stuff
57
static TypeHandle ScaleLerpFunctor::get_class_type(void);

3646 16 ColorLerpFunctor 4 3845 34 ColorLerpFunctor::ColorLerpFunctor 0 4 2085 2086 2087 2088 0
451
ColorLerpFunctor::ColorLerpFunctor(NodePath np, LVecBase4f start, LVecBase4f end);
ColorLerpFunctor::ColorLerpFunctor(NodePath np, float sr, float sg, float sb, float sa, float er, float eg, float eb, float ea);
ColorLerpFunctor::ColorLerpFunctor(NodePath np, LVecBase4f start, LVecBase4f end, NodePath wrt);
ColorLerpFunctor::ColorLerpFunctor(NodePath np, float sr, float sg, float sb, float sa, float er, float eg, float eb, float ea, NodePath wrt);

3647 14 get_class_type 4 3845 32 ColorLerpFunctor::get_class_type 0 1 2089 27
// now for typehandle stuff
57
static TypeHandle ColorLerpFunctor::get_class_type(void);

3648 17 PosHprLerpFunctor 4 3847 36 PosHprLerpFunctor::PosHprLerpFunctor 0 4 2090 2091 2092 2093 0
631
PosHprLerpFunctor::PosHprLerpFunctor(NodePath np, LPoint3f pstart, LPoint3f pend, LVecBase3f hstart, LVecBase3f hend);
PosHprLerpFunctor::PosHprLerpFunctor(NodePath np, float psx, float psy, float psz, float pex, float pey, float pez, float hsx, float hsy, float hsz, float hex, float hey, float hez);
PosHprLerpFunctor::PosHprLerpFunctor(NodePath np, LPoint3f pstart, LPoint3f pend, LVecBase3f hstart, LVecBase3f hend, NodePath wrt);
PosHprLerpFunctor::PosHprLerpFunctor(NodePath np, float psx, float psy, float psz, float pex, float pey, float pez, float hsx, float hsy, float hsz, float hex, float hey, float hez, NodePath wrt);

3649 13 take_shortest 4 3847 32 PosHprLerpFunctor::take_shortest 0 1 2094 0
44
void PosHprLerpFunctor::take_shortest(void);

3650 12 take_longest 4 3847 31 PosHprLerpFunctor::take_longest 0 1 2095 0
43
void PosHprLerpFunctor::take_longest(void);

3651 14 get_class_type 4 3847 33 PosHprLerpFunctor::get_class_type 0 1 2096 27
// now for typehandle stuff
58
static TypeHandle PosHprLerpFunctor::get_class_type(void);

3652 19 HprScaleLerpFunctor 4 3849 40 HprScaleLerpFunctor::HprScaleLerpFunctor 0 4 2097 2098 2099 2100 0
655
HprScaleLerpFunctor::HprScaleLerpFunctor(NodePath np, LVecBase3f hstart, LVecBase3f hend, LVecBase3f sstart, LVecBase3f send);
HprScaleLerpFunctor::HprScaleLerpFunctor(NodePath np, float hsx, float hsy, float hsz, float hex, float hey, float hez, float ssx, float ssy, float ssz, float sex, float sey, float sez);
HprScaleLerpFunctor::HprScaleLerpFunctor(NodePath np, LVecBase3f hstart, LVecBase3f hend, LVecBase3f sstart, LVecBase3f send, NodePath wrt);
HprScaleLerpFunctor::HprScaleLerpFunctor(NodePath np, float hsx, float hsy, float hsz, float hex, float hey, float hez, float ssx, float ssy, float ssz, float sex, float sey, float sez, NodePath wrt);

3653 13 take_shortest 4 3849 34 HprScaleLerpFunctor::take_shortest 0 1 2101 0
46
void HprScaleLerpFunctor::take_shortest(void);

3654 12 take_longest 4 3849 33 HprScaleLerpFunctor::take_longest 0 1 2102 0
45
void HprScaleLerpFunctor::take_longest(void);

3655 14 get_class_type 4 3849 35 HprScaleLerpFunctor::get_class_type 0 1 2103 27
// now for typehandle stuff
60
static TypeHandle HprScaleLerpFunctor::get_class_type(void);

3656 22 PosHprScaleLerpFunctor 4 3850 46 PosHprScaleLerpFunctor::PosHprScaleLerpFunctor 0 4 2104 2105 2106 2107 0
875
PosHprScaleLerpFunctor::PosHprScaleLerpFunctor(NodePath np, LPoint3f pstart, LPoint3f pend, LVecBase3f hstart, LVecBase3f hend, LVecBase3f sstart, LVecBase3f send);
PosHprScaleLerpFunctor::PosHprScaleLerpFunctor(NodePath np, float psx, float psy, float psz, float pex, float pey, float pez, float hsx, float hsy, float hsz, float hex, float hey, float hez, float ssx, float ssy, float ssz, float sex, float sey, float sez);
PosHprScaleLerpFunctor::PosHprScaleLerpFunctor(NodePath np, LPoint3f pstart, LPoint3f pend, LVecBase3f hstart, LVecBase3f hend, LVecBase3f sstart, LVecBase3f send, NodePath wrt);
PosHprScaleLerpFunctor::PosHprScaleLerpFunctor(NodePath np, float psx, float psy, float psz, float pex, float pey, float pez, float hsx, float hsy, float hsz, float hex, float hey, float hez, float ssx, float ssy, float ssz, float sex, float sey, float sez, NodePath wrt);

3657 13 take_shortest 4 3850 37 PosHprScaleLerpFunctor::take_shortest 0 1 2108 0
49
void PosHprScaleLerpFunctor::take_shortest(void);

3658 12 take_longest 4 3850 36 PosHprScaleLerpFunctor::take_longest 0 1 2109 0
48
void PosHprScaleLerpFunctor::take_longest(void);

3659 14 get_class_type 4 3850 38 PosHprScaleLerpFunctor::get_class_type 0 1 2110 27
// now for typehandle stuff
63
static TypeHandle PosHprScaleLerpFunctor::get_class_type(void);

3660 21 ColorScaleLerpFunctor 4 3851 44 ColorScaleLerpFunctor::ColorScaleLerpFunctor 0 4 2111 2112 2113 2114 0
491
ColorScaleLerpFunctor::ColorScaleLerpFunctor(NodePath np, LVecBase4f start, LVecBase4f end);
ColorScaleLerpFunctor::ColorScaleLerpFunctor(NodePath np, float sr, float sg, float sb, float sa, float er, float eg, float eb, float ea);
ColorScaleLerpFunctor::ColorScaleLerpFunctor(NodePath np, LVecBase4f start, LVecBase4f end, NodePath wrt);
ColorScaleLerpFunctor::ColorScaleLerpFunctor(NodePath np, float sr, float sg, float sb, float sa, float er, float eg, float eb, float ea, NodePath wrt);

3661 14 get_class_type 4 3851 37 ColorScaleLerpFunctor::get_class_type 0 1 2115 27
// now for typehandle stuff
62
static TypeHandle ColorScaleLerpFunctor::get_class_type(void);

3662 10 PortalNode 4 3852 22 PortalNode::PortalNode 0 3 2116 2117 2118 1041
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Default constructor, just an empty node, no geo
//               This is used to read portal from model. You can also
//               use this from python to create an empty portal. Then
//               you can set the vertices yourself, with addVertex.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Create a default rectangle as portal. Use this
//               to create an arbitrary portal and setup from Python
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
149
PortalNode::PortalNode(basic_string< char > const &name);
PortalNode::PortalNode(basic_string< char > const &name, LPoint3f pos, float scale = (10));

3663 15 set_portal_mask 4 3852 27 PortalNode::set_portal_mask 0 1 2119 813
// Filename: portalNode.I
// Created by:  masad (13May04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_mask
//       Access: Published
//  Description: Simultaneously sets both the "from" and "into"
//               PortalMask values to the same thing.
////////////////////////////////////////////////////////////////////
74
inline void PortalNode::set_portal_mask(BitMask< unsigned int, 32 > mask);

3664 20 set_from_portal_mask 4 3852 32 PortalNode::set_from_portal_mask 0 1 2120 501
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_from_portal_mask
//       Access: Published
//  Description: Sets the "from" PortalMask.  In order for a
//               portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
79
inline void PortalNode::set_from_portal_mask(BitMask< unsigned int, 32 > mask);

3665 20 set_into_portal_mask 4 3852 32 PortalNode::set_into_portal_mask 0 1 2121 501
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_into_portal_mask
//       Access: Published
//  Description: Sets the "into" PortalMask.  In order for a
//               portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
79
inline void PortalNode::set_into_portal_mask(BitMask< unsigned int, 32 > mask);

3666 20 get_from_portal_mask 4 3852 32 PortalNode::get_from_portal_mask 0 1 2122 512
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_from_portal_mask
//       Access: Published
//  Description: Returns the current "from" PortalMask.  In order for
//               a portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
////////////////////////////////////////////////////////////////////
80
inline BitMask< unsigned int, 32 > PortalNode::get_from_portal_mask(void) const;

3667 20 get_into_portal_mask 4 3852 32 PortalNode::get_into_portal_mask 0 1 2123 512
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_into_portal_mask
//       Access: Published
//  Description: Returns the current "into" PortalMask.  In order for
//               a portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
////////////////////////////////////////////////////////////////////
80
inline BitMask< unsigned int, 32 > PortalNode::get_into_portal_mask(void) const;

3668 15 set_portal_geom 4 3852 27 PortalNode::set_portal_geom 0 1 2124 847
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_geom
//       Access: Published
//  Description: Sets the state of the "portal geom" flag for this
//               PortalNode.  Normally, this is false; when this is
//               set true, the PortalSolids in this node will test
//               for portals with actual renderable geometry, in
//               addition to whatever PortalSolids may be indicated
//               by the from_portal_mask.
//
//               Setting this to true causes this to test *all*
//               GeomNodes for portals.  It is an all-or-none
//               thing; there is no way to portal with only some
//               GeomNodes, as GeomNodes have no into_portal_mask.
////////////////////////////////////////////////////////////////////
51
inline void PortalNode::set_portal_geom(bool flag);

3669 15 get_portal_geom 4 3852 27 PortalNode::get_portal_geom 0 1 2125 317
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_portal_geom
//       Access: Published
//  Description: Returns the current state of the portal_geom flag.
//               See set_portal_geom().
////////////////////////////////////////////////////////////////////
52
inline bool PortalNode::get_portal_geom(void) const;

3670 14 clear_vertices 4 3852 26 PortalNode::clear_vertices 0 1 2126 278
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::clear_vertices
//       Access: Published
//  Description: Resets the vertices of the portal to the empty list.
////////////////////////////////////////////////////////////////////
45
inline void PortalNode::clear_vertices(void);

3671 10 add_vertex 4 3852 22 PortalNode::add_vertex 0 1 2127 395
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the portal polygon.  The
//               vertices should be defined in a counterclockwise
//               orientation when viewing through the portal.
////////////////////////////////////////////////////////////////////
59
inline void PortalNode::add_vertex(LPoint3f const &vertex);

3672 16 get_num_vertices 4 3852 28 PortalNode::get_num_vertices 0 1 2128 281
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the portal polygon.
////////////////////////////////////////////////////////////////////
52
inline int PortalNode::get_num_vertices(void) const;

3673 10 get_vertex 4 3852 22 PortalNode::get_vertex 0 1 2129 267
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_vertex
//       Access: Published
//  Description: Returns the nth vertex of the portal polygon.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f const &PortalNode::get_vertex(int n) const;

3674 11 set_cell_in 4 3852 23 PortalNode::set_cell_in 0 1 2130 264
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
////////////////////////////////////////////////////////////////////
58
inline void PortalNode::set_cell_in(NodePath const &cell);

3675 11 get_cell_in 4 3852 23 PortalNode::get_cell_in 0 1 2131 264
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
////////////////////////////////////////////////////////////////////
52
inline NodePath PortalNode::get_cell_in(void) const;

3676 12 set_cell_out 4 3852 24 PortalNode::set_cell_out 0 1 2132 267
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
////////////////////////////////////////////////////////////////////
59
inline void PortalNode::set_cell_out(NodePath const &cell);

3677 12 get_cell_out 4 3852 24 PortalNode::get_cell_out 0 1 2133 267
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
////////////////////////////////////////////////////////////////////
53
inline NodePath PortalNode::get_cell_out(void) const;

3678 14 set_clip_plane 4 3852 26 PortalNode::set_clip_plane 0 1 2134 313
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_clip_plane
//       Access: Published
//  Description: this is set if the portal will clip against its 
//               left and right planes
////////////////////////////////////////////////////////////////////
51
inline void PortalNode::set_clip_plane(bool value);

3679 13 is_clip_plane 4 3852 25 PortalNode::is_clip_plane 0 1 2135 278
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_clip_plane
//       Access: Published
//  Description: Is this portal clipping against its left-right planes
////////////////////////////////////////////////////////////////////
44
inline bool PortalNode::is_clip_plane(void);

3680 11 set_visible 4 3852 23 PortalNode::set_visible 0 1 2136 265
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_visible
//       Access: Published
//  Description: this is set if the portal is facing camera
////////////////////////////////////////////////////////////////////
48
inline void PortalNode::set_visible(bool value);

3681 10 is_visible 4 3852 22 PortalNode::is_visible 0 1 2137 254
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_visible
//       Access: Published
//  Description: Is this portal facing the camera
////////////////////////////////////////////////////////////////////
41
inline bool PortalNode::is_visible(void);

3682 8 set_open 4 3852 20 PortalNode::set_open 0 1 2138 264
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_open
//       Access: Published
//  Description: Python sets this based on curent camera zone
////////////////////////////////////////////////////////////////////
45
inline void PortalNode::set_open(bool value);

3683 7 is_open 4 3852 19 PortalNode::is_open 0 1 2139 263
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_open
//       Access: Published
//  Description: Is this portal open from current camera zone
////////////////////////////////////////////////////////////////////
38
inline bool PortalNode::is_open(void);

3684 14 get_class_type 4 3852 26 PortalNode::get_class_type 0 1 2140 0
51
static TypeHandle PortalNode::get_class_type(void);

3685 4 make 4 3853 25 RescaleNormalAttrib::make 0 1 2141 419
////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RescaleNormalAttrib object that
//               specifies whether to rescale normals to compensate
//               for transform scales or incorrectly defined normals.
////////////////////////////////////////////////////////////////////
96
static ConstPointerTo< RenderAttrib > RescaleNormalAttrib::make(RescaleNormalAttrib::Mode mode);

3686 12 make_default 4 3853 33 RescaleNormalAttrib::make_default 0 1 2142 483
////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make_default
//       Access: Published, Static
//  Description: Constructs a RescaleNoramlAttrib object that's
//               suitable for putting at the top of a scene graph.
//               This will contain whatever attrib was suggested by
//               the user's rescale-normals Config variable.
////////////////////////////////////////////////////////////////////
78
static ConstPointerTo< RenderAttrib > RescaleNormalAttrib::make_default(void);

3687 8 get_mode 4 3853 29 RescaleNormalAttrib::get_mode 0 1 2143 253
////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
////////////////////////////////////////////////////////////////////
75
inline RescaleNormalAttrib::Mode RescaleNormalAttrib::get_mode(void) const;

3688 14 get_class_slot 4 3853 35 RescaleNormalAttrib::get_class_slot 0 1 2144 0
53
static int RescaleNormalAttrib::get_class_slot(void);

3689 14 get_class_type 4 3853 35 RescaleNormalAttrib::get_class_type 0 1 2145 0
60
static TypeHandle RescaleNormalAttrib::get_class_type(void);

3690 20 ~RescaleNormalAttrib 4 3853 41 RescaleNormalAttrib::~RescaleNormalAttrib 0 0 0
48
RescaleNormalAttrib::~RescaleNormalAttrib(void);

3691 8 make_off 4 3855 23 ScissorAttrib::make_off 0 1 2146 346
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ScissorAttrib object that removes
//               the scissor region and fills the DisplayRegion.
////////////////////////////////////////////////////////////////////
68
static ConstPointerTo< RenderAttrib > ScissorAttrib::make_off(void);

3692 4 make 4 3855 19 ScissorAttrib::make 0 2 2147 2148 1445
// Filename: scissorAttrib.I
// Created by:  drose (29Jul08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make
//       Access: Published, Static
//  Description: Constructs a ScissorAttrib that restricts rendering
//               to the indicated frame within the current
//               DisplayRegion.  (0,0) is the lower-left corner of the
//               DisplayRegion, and (1,1) is the upper-right corner.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make
//       Access: Published, Static
//  Description: Constructs a ScissorAttrib that restricts rendering
//               to the indicated frame within the current
//               DisplayRegion.  (0,0) is the lower-left corner of the
//               DisplayRegion, and (1,1) is the upper-right corner.
////////////////////////////////////////////////////////////////////
199
static inline ConstPointerTo< RenderAttrib > ScissorAttrib::make(float left, float right, float bottom, float top);
static ConstPointerTo< RenderAttrib > ScissorAttrib::make(LVecBase4f const &frame);

3693 12 make_default 4 3855 27 ScissorAttrib::make_default 0 1 2149 400
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > ScissorAttrib::make_default(void);

3694 9 get_frame 4 3855 24 ScissorAttrib::get_frame 0 1 2150 510
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::get_frame
//       Access: Published
//  Description: Returns the left, right, bottom, top coordinates of
//               the scissor frame.  This defines a frame within the
//               current DisplayRegion, where 0,0 is the lower-left
//               corner of the DisplayRegion, and 1,1 is the
//               upper-right corner.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f const &ScissorAttrib::get_frame(void) const;

3695 14 get_class_slot 4 3855 29 ScissorAttrib::get_class_slot 0 1 2151 0
47
static int ScissorAttrib::get_class_slot(void);

3696 14 get_class_type 4 3855 29 ScissorAttrib::get_class_type 0 1 2152 0
54
static TypeHandle ScissorAttrib::get_class_type(void);

3697 14 ~ScissorAttrib 4 3855 29 ScissorAttrib::~ScissorAttrib 0 0 0
36
ScissorAttrib::~ScissorAttrib(void);

3698 4 make 4 3856 22 ShadeModelAttrib::make 0 1 2153 399
////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShadeModelAttrib object that specifies
//               whether to draw polygons with flat shading or with
//               per-vertex (smooth) shading.
////////////////////////////////////////////////////////////////////
90
static ConstPointerTo< RenderAttrib > ShadeModelAttrib::make(ShadeModelAttrib::Mode mode);

3699 12 make_default 4 3856 30 ShadeModelAttrib::make_default 0 1 2154 403
////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
75
static ConstPointerTo< RenderAttrib > ShadeModelAttrib::make_default(void);

3700 8 get_mode 4 3856 26 ShadeModelAttrib::get_mode 0 1 2155 249
////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::get_mode
//       Access: Published
//  Description: Returns the shade mode.
////////////////////////////////////////////////////////////////////
69
inline ShadeModelAttrib::Mode ShadeModelAttrib::get_mode(void) const;

3701 14 get_class_slot 4 3856 32 ShadeModelAttrib::get_class_slot 0 1 2156 0
50
static int ShadeModelAttrib::get_class_slot(void);

3702 14 get_class_type 4 3856 32 ShadeModelAttrib::get_class_type 0 1 2157 0
57
static TypeHandle ShadeModelAttrib::get_class_type(void);

3703 17 ~ShadeModelAttrib 4 3856 35 ShadeModelAttrib::~ShadeModelAttrib 0 0 0
42
ShadeModelAttrib::~ShadeModelAttrib(void);

3704 8 make_off 4 3858 23 StencilAttrib::make_off 0 1 2158 307
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a StencilAttrib that has stenciling 
//               turned off.
////////////////////////////////////////////////////////////////////
68
static ConstPointerTo< RenderAttrib > StencilAttrib::make_off(void);

3705 12 make_default 4 3858 27 StencilAttrib::make_default 0 1 2159 400
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
////////////////////////////////////////////////////////////////////
72
static ConstPointerTo< RenderAttrib > StencilAttrib::make_default(void);

3706 4 make 4 3858 19 StencilAttrib::make 0 1 2160 265
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make
//       Access: Published, Static
//  Description: Constructs a front face StencilAttrib.
////////////////////////////////////////////////////////////////////
329
static ConstPointerTo< RenderAttrib > StencilAttrib::make(unsigned int front_enable, unsigned int front_comparison_function, unsigned int stencil_fail_operation, unsigned int stencil_pass_z_fail_operation, unsigned int front_stencil_pass_z_pass_operation, unsigned int reference, unsigned int read_mask, unsigned int write_mask);

3707 12 make_2_sided 4 3858 27 StencilAttrib::make_2_sided 0 1 2161 272
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_2_sided
//       Access: Published, Static
//  Description: Constructs a two-sided StencilAttrib.
////////////////////////////////////////////////////////////////////
542
static ConstPointerTo< RenderAttrib > StencilAttrib::make_2_sided(unsigned int front_enable, unsigned int back_enable, unsigned int front_comparison_function, unsigned int stencil_fail_operation, unsigned int stencil_pass_z_fail_operation, unsigned int front_stencil_pass_z_pass_operation, unsigned int reference, unsigned int read_mask, unsigned int write_mask, unsigned int back_comparison_function, unsigned int back_stencil_fail_operation, unsigned int back_stencil_pass_z_fail_operation, unsigned int back_stencil_pass_z_pass_operation);

3708 15 make_with_clear 4 3858 30 StencilAttrib::make_with_clear 0 1 2162 265
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make
//       Access: Published, Static
//  Description: Constructs a front face StencilAttrib.
////////////////////////////////////////////////////////////////////
386
static ConstPointerTo< RenderAttrib > StencilAttrib::make_with_clear(unsigned int front_enable, unsigned int front_comparison_function, unsigned int stencil_fail_operation, unsigned int stencil_pass_z_fail_operation, unsigned int front_stencil_pass_z_pass_operation, unsigned int reference, unsigned int read_mask, unsigned int write_mask, unsigned int clear, unsigned int clear_value);

3709 23 make_2_sided_with_clear 4 3858 38 StencilAttrib::make_2_sided_with_clear 0 1 2163 272
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_2_sided
//       Access: Published, Static
//  Description: Constructs a two-sided StencilAttrib.
////////////////////////////////////////////////////////////////////
599
static ConstPointerTo< RenderAttrib > StencilAttrib::make_2_sided_with_clear(unsigned int front_enable, unsigned int back_enable, unsigned int front_comparison_function, unsigned int stencil_fail_operation, unsigned int stencil_pass_z_fail_operation, unsigned int front_stencil_pass_z_pass_operation, unsigned int reference, unsigned int read_mask, unsigned int write_mask, unsigned int back_comparison_function, unsigned int back_stencil_fail_operation, unsigned int back_stencil_pass_z_fail_operation, unsigned int back_stencil_pass_z_pass_operation, unsigned int clear, unsigned int clear_value);

3710 16 get_render_state 4 3858 31 StencilAttrib::get_render_state 0 1 2164 744
// Filename: stencilAttrib.I
// Created by:  aignacio (18May06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::get_render_state
//       Access: Published
//  Description: Returns render state.
////////////////////////////////////////////////////////////////////
96
inline unsigned int StencilAttrib::get_render_state(unsigned int render_state_identifier) const;

3711 14 get_class_slot 4 3858 29 StencilAttrib::get_class_slot 0 1 2165 0
47
static int StencilAttrib::get_class_slot(void);

3712 14 get_class_type 4 3858 29 StencilAttrib::get_class_type 0 1 2166 0
54
static TypeHandle StencilAttrib::get_class_type(void);

3713 14 ~StencilAttrib 4 3858 29 StencilAttrib::~StencilAttrib 0 0 0
36
StencilAttrib::~StencilAttrib(void);

3714 10 has_shader 4 3863 22 ShaderPool::has_shader 0 1 2167 796
// Filename: shaderPool.I
// Created by:  aignacio (Mar06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::has_shader
//       Access: Public, Static
//  Description: Returns true if the shader has ever been loaded,
//               false otherwise.
////////////////////////////////////////////////////////////////////
68
static inline bool ShaderPool::has_shader(Filename const &filename);

3715 13 verify_shader 4 3863 25 ShaderPool::verify_shader 0 1 2168 602
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::verify_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_shader() with the same shader name will
//               return a valid Shader pointer.
////////////////////////////////////////////////////////////////////
71
static inline bool ShaderPool::verify_shader(Filename const &filename);

3716 11 load_shader 4 3863 23 ShaderPool::load_shader 0 1 2169 536
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::load_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns the new shader.
//               If a shader with the same filename was previously
//               loaded, returns that one instead.  If the shader
//               file cannot be found, returns NULL.
////////////////////////////////////////////////////////////////////
89
static inline ConstPointerTo< Shader > ShaderPool::load_shader(Filename const &filename);

3717 10 add_shader 4 3863 22 ShaderPool::add_shader 0 1 2170 432
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::add_shader
//       Access: Public, Static
//  Description: Adds the indicated already-loaded shader to the
//               pool.  The shader will always replace any
//               previously-loaded shader in the pool that had the
//               same filename.
////////////////////////////////////////////////////////////////////
84
static inline void ShaderPool::add_shader(Filename const &filename, Shader *shader);

3718 14 release_shader 4 3863 26 ShaderPool::release_shader 0 1 2171 549
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_shader
//       Access: Public, Static
//  Description: Removes the indicated shader from the pool,
//               indicating it will never be loaded again; the shader
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every shader
//               every loaded, and shaders will never be freed.
////////////////////////////////////////////////////////////////////
72
static inline void ShaderPool::release_shader(Filename const &filename);

3719 19 release_all_shaders 4 3863 31 ShaderPool::release_all_shaders 0 1 2172 327
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_all_shaders
//       Access: Public, Static
//  Description: Releases all shaders in the pool and restores the
//               pool to the empty state.
////////////////////////////////////////////////////////////////////
57
static inline void ShaderPool::release_all_shaders(void);

3720 15 garbage_collect 4 3863 27 ShaderPool::garbage_collect 0 1 2173 473
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those shaders in the pool that have a
//               reference count of exactly 1; i.e. only those
//               shaders that are not being used outside of the pool.
//               Returns the number of shaders released.
////////////////////////////////////////////////////////////////////
52
static inline int ShaderPool::garbage_collect(void);

3721 13 list_contents 4 3863 25 ShaderPool::list_contents 0 1 2174 316
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
59
static inline void ShaderPool::list_contents(ostream &out);

3722 5 write 4 3863 17 ShaderPool::write 0 1 2175 311
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::write
//       Access: Published, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
////////////////////////////////////////////////////////////////////
44
static void ShaderPool::write(ostream &out);

3723 11 ~ShaderPool 4 3863 23 ShaderPool::~ShaderPool 0 0 0
30
ShaderPool::~ShaderPool(void);

2177
1 14 Dtool_nJyoQ1lR 6 3 3866 0 14 Dtool_nJyoQ1lR 1058 // Filename: transformState.I
// Created by:  drose (25Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: TransformState::operator <
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This is the same as sorts_less(), except the
//               uniquify_matrix value is implicit from the Config.prc
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  5 other 1 3864  
2 14 Dtool_nJyoRA4G 6 4 3866 0 14 Dtool_nJyoRA4G 696 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::sorts_less
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               TransformStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               If uniquify_matrix is true, then matrix-defined
//               TransformStates are also uniqified.  If
//               uniquify_matrix is false, then only component-defined
//               TransformStates are uniquified, which is less
//               expensive.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3864  5 other 1 3864  15 uniquify_matrix 1 3866  
3 14 Dtool_nJyoNPd4 6 5 3867 0 14 Dtool_nJyoNPd4 268 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
4 14 Dtool_nJyooK5A 7 6 3864 0 14 Dtool_nJyooK5A 270 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_identity
//       Access: Published, Static
//  Description: Constructs an identity transform.
//////////////////////////////////////////////////////////////////// 0 
5 14 Dtool_nJyo0MDC 7 7 3864 0 14 Dtool_nJyo0MDC 342 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_invalid
//       Access: Published, Static
//  Description: Constructs an invalid transform; for instance, the
//               result of inverting a singular matrix.
//////////////////////////////////////////////////////////////////// 0 
6 14 Dtool_nJyoe_gZ 7 8 3864 0 14 Dtool_nJyoe_gZ 306 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 3 pos 1 3868  
7 14 Dtool_nJyonj11 7 9 3864 0 14 Dtool_nJyonj11 306 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 3 hpr 1 3868  
8 14 Dtool_nJyo_1bt 7 10 3864 0 14 Dtool_nJyo_1bt 307 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_quat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 4 quat 1 3871  
9 14 Dtool_nJyom6_l 7 11 3864 0 14 Dtool_nJyom6_l 310 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 2 3 pos 1 3868  3 hpr 1 3868  
10 14 Dtool_nJyoeCL8 7 12 3864 0 14 Dtool_nJyoeCL8 308 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3868  
11 14 Dtool_nJyoUwg8 7 12 3864 0 14 Dtool_nJyoUwg8 308 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3874  
12 14 Dtool_nJyo7OFW 7 13 3864 0 14 Dtool_nJyo7OFW 308 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3868  
13 14 Dtool_nJyorG32 7 14 3864 0 14 Dtool_nJyorG32 316 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 3 3 pos 1 3868  3 hpr 1 3868  5 scale 1 3868  
14 14 Dtool_nJyoR_EG 7 15 3864 0 14 Dtool_nJyoR_EG 317 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 3 3 pos 1 3868  4 quat 1 3871  5 scale 1 3868  
15 14 Dtool_nJyoFwpz 7 16 3864 0 14 Dtool_nJyoFwpz 322 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_hpr_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 4 3 pos 1 3868  3 hpr 1 3868  5 scale 1 3868  5 shear 1 3868  
16 14 Dtool_nJyoDFJS 7 17 3864 0 14 Dtool_nJyoDFJS 323 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_quat_scale_shear
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 4 3 pos 1 3868  4 quat 1 3871  5 scale 1 3868  5 shear 1 3868  
17 14 Dtool_nJyoyOW1 7 18 3864 0 14 Dtool_nJyoyOW1 317 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat
//       Access: Published, Static
//  Description: Makes a new TransformState with the specified
//               transformation matrix.
//////////////////////////////////////////////////////////////////// 1 3 mat 1 3875  
18 14 Dtool_nJyon4_7 7 19 3864 0 14 Dtool_nJyon4_7 312 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 3 pos 1 3878  
19 14 Dtool_nJyo6tOv 7 20 3864 0 14 Dtool_nJyo6tOv 315 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 6 rotate 1 3874  
20 14 Dtool_nJyoJlYf 7 21 3864 0 14 Dtool_nJyoJlYf 319 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 2 3 pos 1 3878  6 rotate 1 3874  
21 14 Dtool_nJyo_u6x 7 22 3864 0 14 Dtool_nJyo_u6x 314 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3878  
22 14 Dtool_nJyoMyK9 7 22 3864 0 14 Dtool_nJyoMyK9 314 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3874  
23 14 Dtool_nJyoPaEX 7 23 3864 0 14 Dtool_nJyoPaEX 314 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_shear2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3874  
24 14 Dtool_nJyozgBF 7 24 3864 0 14 Dtool_nJyozgBF 325 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale2d
//       Access: Published, Static
//  Description: Makes a new 2-d TransformState with the specified
//               components.
//////////////////////////////////////////////////////////////////// 3 3 pos 1 3878  6 rotate 1 3874  5 scale 1 3878  
25 14 Dtool_nJyoQpLJ 7 25 3864 0 14 Dtool_nJyoQpLJ 343 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_pos_rotate_scale_shear2d
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified components.
//////////////////////////////////////////////////////////////////// 4 3 pos 1 3878  6 rotate 1 3874  5 scale 1 3878  5 shear 1 3874  
26 14 Dtool_nJyovwaf 7 26 3864 0 14 Dtool_nJyovwaf 338 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::make_mat3
//       Access: Published, Static
//  Description: Makes a new two-dimensional TransformState with the
//               specified 3x3 transformation matrix.
//////////////////////////////////////////////////////////////////// 1 3 mat 1 3881  
27 14 Dtool_nJyo70HT 6 27 3866 0 14 Dtool_nJyo70HT 322 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_identity
//       Access: Published
//  Description: Returns true if the transform represents the identity
//               matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
28 14 Dtool_nJyo5m5t 6 28 3866 0 14 Dtool_nJyo5m5t 411 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_invalid
//       Access: Published
//  Description: Returns true if the transform represents an invalid
//               matrix, for instance the result of inverting a
//               singular matrix, or false if the transform is valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
29 14 Dtool_nJyo83Ub 6 29 3866 0 14 Dtool_nJyo83Ub 401 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_singular
//       Access: Published
//  Description: Returns true if the transform represents a singular
//               transform (that is, it has a zero scale, and it
//               cannot be inverted), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
30 14 Dtool_nJyoFbzh 6 30 3866 0 14 Dtool_nJyoFbzh 460 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::is_2d
//       Access: Published
//  Description: Returns true if the transform has been constructed
//               entirely using the 2-d transform operations,
//               e.g. make_pos2d(), and therefore operates strictly in
//               two-dimensional space on X and Y only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
31 14 Dtool_nJyo3N1T 6 31 3866 0 14 Dtool_nJyo3N1T 1050 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_components
//       Access: Published
//  Description: Returns true if the transform can be described by
//               separate pos, hpr, and scale components.  Most
//               transforms we use in everyday life can be so
//               described, but some kinds of transforms (for
//               instance, those involving a skew) cannot.
//
//               This is not related to whether the transform was
//               originally described componentwise.  Even a transform
//               that was constructed with a 4x4 may return true here
//               if the matrix is a simple affine matrix with no skew.
//
//               If this returns true, you may safely call get_hpr()
//               and get_scale() to retrieve the components.  (You
//               may always safely call get_pos() whether this returns
//               true or false.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
32 14 Dtool_nJyooeA_ 6 32 3866 0 14 Dtool_nJyooeA_ 796 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::components_given
//       Access: Published
//  Description: Returns true if the transform was specified
//               componentwise, or false if it was specified with a
//               general 4x4 matrix.  If this is true, the components
//               returned by get_pos() and get_scale() will be exactly
//               those that were set; otherwise, these functions will
//               return computed values.  If this is true, the
//               rotation may have been set either with a hpr trio or
//               with a quaternion; hpr_given() or quat_given() can
//               resolve the difference.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
33 14 Dtool_nJyoePnm 6 33 3866 0 14 Dtool_nJyoePnm 459 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::hpr_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a trio
//               of Euler angles, false otherwise.  If this is true,
//               get_hpr() will be exactly as set; otherwise, it will
//               return a computed value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
34 14 Dtool_nJyofBB6 6 34 3866 0 14 Dtool_nJyofBB6 452 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::quat_given
//       Access: Published
//  Description: Returns true if the rotation was specified via a 
//               quaternion, false otherwise.  If this is true,
//               get_quat() will be exactly as set; otherwise, it will
//               return a computed value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
35 14 Dtool_nJyod7_k 6 35 3866 0 14 Dtool_nJyod7_k 450 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_pos
//       Access: Published
//  Description: Returns true if the transform's pos component can be
//               extracted out separately.  This is generally always
//               true, unless the transform is invalid
//               (i.e. is_invalid() returns true).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
36 14 Dtool_nJyoaR4z 6 36 3866 0 14 Dtool_nJyoaR4z 456 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_hpr
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               set of Euler angles.  This is generally true only
//               when has_components() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
37 14 Dtool_nJyobgn7 6 37 3866 0 14 Dtool_nJyobgn7 448 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_quat
//       Access: Published
//  Description: Returns true if the transform's rotation component
//               can be extracted out separately and described as a
//               quaternion.  This is generally true only when
//               has_components() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
38 14 Dtool_nJyoeXCQ 6 38 3866 0 14 Dtool_nJyoeXCQ 399 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_scale
//       Access: Published
//  Description: Returns true if the transform's scale component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
39 14 Dtool_nJyotKCi 6 39 3866 0 14 Dtool_nJyotKCi 335 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_identity_scale
//       Access: Published
//  Description: Returns true if the scale is uniform 1.0, or false if
//               the scale has some real value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
40 14 Dtool_nJyoCj8m 6 40 3866 0 14 Dtool_nJyoCj8m 468 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_uniform_scale
//       Access: Published
//  Description: Returns true if the scale is uniform across all three
//               axes (and therefore can be expressed as a single
//               number), or false if the transform has a different
//               scale in different dimensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
41 14 Dtool_nJyoQZ2I 6 41 3866 0 14 Dtool_nJyoQZ2I 399 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_shear
//       Access: Published
//  Description: Returns true if the transform's shear component
//               can be extracted out separately.  This is generally
//               true only when has_components() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
42 14 Dtool_nJyoUk2V 6 42 3866 0 14 Dtool_nJyoUk2V 374 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_nonzero_shear
//       Access: Published
//  Description: Returns true if the shear component is non-zero,
//               false if it is zero or if the matrix cannot be
//               decomposed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
43 14 Dtool_nJyoSx0T 6 43 3866 0 14 Dtool_nJyoSx0T 377 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::has_mat
//       Access: Published
//  Description: Returns true if the transform can be described as a
//               matrix.  This is generally always true, unless
//               is_invalid() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
44 14 Dtool_nJyo1Y_X 6 44 3884 0 14 Dtool_nJyo1Y_X 341 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos
//       Access: Published
//  Description: Returns the pos component of the transform.  It is an
//               error to call this if has_pos() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
45 14 Dtool_nJyoyy3m 6 45 3868 0 14 Dtool_nJyoyy3m 396 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_hpr
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               trio of Euler angles.  It is an error to call this if
//               has_components() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
46 14 Dtool_nJyozDmu 6 46 3871 0 14 Dtool_nJyozDmu 746 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_quat
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               quaternion.  The return value will be normalized if a
//               normalized quaternion was given to the constructor
//               (or if the quaternion was computed implicitly); it
//               will be non-normalized if a non-normalized quaternion
//               was given to the constructor.  See also
//               get_norm_quat().
//
//               It is an error to call this if has_components()
//               returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
47 14 Dtool_nJyoTdVR 6 47 3871 0 14 Dtool_nJyoTdVR 524 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_norm_quat
//       Access: Published
//  Description: Returns the rotation component of the transform as a
//               quaternion.  Unlike the result of get_quat(), the
//               return value of this method is guaranteed to be
//               normalized.  It is an error to call this if
//               has_components() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
48 14 Dtool_nJyomyBD 6 48 3868 0 14 Dtool_nJyomyBD 369 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale
//       Access: Published
//  Description: Returns the scale component of the transform.  It is an
//               error to call this if has_components() returned
//               false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
49 14 Dtool_nJyo6_8Z 6 49 3874 0 14 Dtool_nJyo6_8Z 400 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_uniform_scale
//       Access: Published
//  Description: Returns the scale component of the transform, as a
//               single number.  It is an error to call this if
//               has_uniform_scale() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
50 14 Dtool_nJyon_27 6 50 3868 0 14 Dtool_nJyon_27 369 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear
//       Access: Published
//  Description: Returns the shear component of the transform.  It is
//               an error to call this if has_components() returned
//               false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
51 14 Dtool_nJyoKS0G 6 51 3875 0 14 Dtool_nJyoKS0G 271 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
52 14 Dtool_nJyoGSGD 7 52 3887 0 14 Dtool_nJyoGSGD 375 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_pos2d
//       Access: Published
//  Description: Returns the pos component of the 2-d transform.  It
//               is an error to call this if has_pos() or is_2d()
//               returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
53 14 Dtool_nJyoguij 6 53 3874 0 14 Dtool_nJyoguij 456 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_rotate2d
//       Access: Published
//  Description: Returns the rotation component of the 2-d transform
//               as an angle in degrees clockwise about the origin.
//               It is an error to call this if has_components() or
//               is_2d() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
54 14 Dtool_nJyoJEJy 7 54 3887 0 14 Dtool_nJyoJEJy 386 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_scale2d
//       Access: Published
//  Description: Returns the scale component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
55 14 Dtool_nJyoay8q 6 55 3874 0 14 Dtool_nJyoay8q 386 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_shear2d
//       Access: Published
//  Description: Returns the shear component of the 2-d transform.  It
//               is an error to call this if has_components() or
//               is_2d() returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
56 14 Dtool_nJyojHYM 7 56 3888 0 14 Dtool_nJyojHYM 370 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_mat3
//       Access: Published
//  Description: Returns the 3x3 matrix that describes the 2-d
//               transform.  It is an error to call this if is_2d()
//               returned false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
57 14 Dtool_nJyow_sj 7 57 3864 0 14 Dtool_nJyow_sj 394 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its pos component
//               replaced with the indicated value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  3 pos 1 3868  
58 14 Dtool_nJyotUny 7 58 3864 0 14 Dtool_nJyotUny 412 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_hpr
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  3 hpr 1 3868  
59 14 Dtool_nJyoAH3z 7 59 3864 0 14 Dtool_nJyoAH3z 413 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_quat
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its rotation component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  4 quat 1 3871  
60 14 Dtool_nJyo9kl0 7 60 3864 0 14 Dtool_nJyo9kl0 411 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its scale component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  5 scale 1 3868  
61 14 Dtool_nJyoIVYt 7 61 3864 0 14 Dtool_nJyoIVYt 411 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original TransformState with its shear component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  5 shear 1 3868  
62 14 Dtool_nJyo2_j0 7 62 3864 0 14 Dtool_nJyo2_j0 400 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_pos2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its pos component
//               replaced with the indicated value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  3 pos 1 3878  
63 14 Dtool_nJyowLZY 7 63 3864 0 14 Dtool_nJyowLZY 421 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_rotate2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its rotation component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  6 rotate 1 3874  
64 14 Dtool_nJyoDWpr 7 64 3864 0 14 Dtool_nJyoDWpr 417 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_scale2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its scale component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  5 scale 1 3878  
65 14 Dtool_nJyouRUH 7 65 3864 0 14 Dtool_nJyouRUH 417 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::set_shear2d
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               original 2-d TransformState with its shear component
//               replaced with the indicated value, if possible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  5 shear 1 3874  
66 14 Dtool_nJyoNCSV 7 66 3864 0 14 Dtool_nJyoNCSV 723 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this TransformState object and
//               the other TransformState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  5 other 1 3864  
67 14 Dtool_nJyo4b4F 7 67 3864 0 14 Dtool_nJyo4b4F 563 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::invert_compose
//       Access: Published
//  Description: Returns a new TransformState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  5 other 1 3864  
68 14 Dtool_nJyoQVGV 7 68 3864 0 14 Dtool_nJyoQVGV 460 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_inverse
//       Access: Published
//  Description: Returns the inverse of this transform.  If you are
//               going to immediately compose this result with another
//               TransformState, it is faster to do it in one
//               operation with invert_compose().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
69 14 Dtool_nJyonkWq 7 69 3864 0 14 Dtool_nJyonkWq 619 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique TransformState in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
70 14 Dtool_nJyo_HK4 6 70 3889 0 14 Dtool_nJyo_HK4 560 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TransformState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.  The RenderState's
//               get_geom_rendering() should already have been
//               applied.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  14 geom_rendering 1 3889  
71 14 Dtool_nJyoWr2Z 4 71 3890 0 14 Dtool_nJyoWr2Z 278 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
72 14 Dtool_nJyo6hq2 6 72 3866 0 14 Dtool_nJyo6hq2 280 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
73 14 Dtool_nJyovh_1 4 73 3890 0 14 Dtool_nJyovh_1 277 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
74 14 Dtool_nJyopm4c 6 74 3866 0 14 Dtool_nJyopm4c 279 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
75 14 Dtool_nJyoMO_Z 6 75 3889 0 14 Dtool_nJyoMO_Z 575 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the composition
//               cache for this TransformState.  This is the number of
//               other TransformStates whose composition with this one
//               has been cached.  This number is not useful for any
//               practical reason other than performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
76 14 Dtool_nJyoeOXi 6 76 3889 0 14 Dtool_nJyoeOXi 559 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the
//               invert_composition cache for this TransformState.
//               This is similar to the composition cache, but it
//               records cache entries for the invert_compose()
//               operation.  See get_composition_cache_num_entries().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
77 14 Dtool_nJyoZ_rG 6 77 3889 0 14 Dtool_nJyoZ_rG 655 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this TransformState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
78 14 Dtool_nJyoY_83 7 78 3864 0 14 Dtool_nJyoY_83 608 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_source
//       Access: Published
//  Description: Returns the source TransformState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//               See get_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  1 n 1 3889  
79 14 Dtool_nJyooMdw 7 79 3864 0 14 Dtool_nJyooMdw 707 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache_result
//       Access: Published
//  Description: Returns the result TransformState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//
//               In general,
//               a->compose(a->get_composition_cache_source(n)) ==
//               a->get_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  1 n 1 3889  
80 14 Dtool_nJyo9hkw 6 80 3889 0 14 Dtool_nJyo9hkw 669 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this TransformState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_invert_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
81 14 Dtool_nJyoffG4 7 81 3864 0 14 Dtool_nJyoffG4 630 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_source
//       Access: Published
//  Description: Returns the source TransformState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.  See get_invert_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  1 n 1 3889  
82 14 Dtool_nJyouybI 7 82 3864 0 14 Dtool_nJyouybI 759 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache_result
//       Access: Published
//  Description: Returns the result TransformState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.
//
//               In general,
//               a->invert_compose(a->get_invert_composition_cache_source(n))
//               == a->get_invert_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  1 n 1 3889  
83 14 Dtool_nJyorFw8 6 83 3891 0 14 Dtool_nJyorFw8 734 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_composition_cache
//       Access: Published
//  Description: Returns a list of 2-tuples that represents the
//               composition cache.  For each tuple in the list, the
//               first element is the source transform, and the second
//               is the result transform.  If both are None, there is
//               no entry in the cache at that slot.
//
//               In general, a->compose(source) == result.
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
84 14 Dtool_nJyoA_4X 6 84 3891 0 14 Dtool_nJyoA_4X 755 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_invert_composition_cache
//       Access: Published
//  Description: Returns a list of 2-tuples that represents the
//               invert_composition cache.  For each tuple in the list, the
//               first element is the source transform, and the second
//               is the result transform.  If both are None, there is
//               no entry in the cache at that slot.
//
//               In general, a->invert_compose(source) == result.
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3864  
85 14 Dtool_nJyopd25 4 85 3890 0 14 Dtool_nJyopd25 237 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TransformState::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3864  3 out 1 3893  
86 14 Dtool_nJyoREBo 4 86 3890 0 14 Dtool_nJyoREBo 221 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3864  3 out 1 3893  12 indent_level 1 3889  
87 14 Dtool_nJyonxWT 4 87 3890 0 14 Dtool_nJyonxWT 481 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::write_composition_cache
//       Access: Published
//  Description: Writes a brief description of the composition cache
//               and invert composition cache to the indicated
//               ostream.  This is not useful except for performance
//               analysis, to examine the cache structure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3864  3 out 1 3893  12 indent_level 1 3889  
88 14 Dtool_nJyoft1r 6 88 3889 0 14 Dtool_nJyoft1r 405 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique TransformState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
89 14 Dtool_nJyofD2f 6 89 3889 0 14 Dtool_nJyofD2f 1009 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               TransformState objects, both of which have references
//               held outside the cache, to have the result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base TransformStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" TransformState objects.
//////////////////////////////////////////////////////////////////// 0 
90 14 Dtool_nJyo8dXE 6 90 3889 0 14 Dtool_nJyo8dXE 1021 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed TransformStates.  This
//               makes every TransformState forget what results when
//               it is composed with other TransformStates.
//
//               This will eliminate any TransformState objects that
//               have been allocated but have no references outside of
//               the internal TransformState map.  It will not
//               eliminate TransformState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of TransformStates
//               freed by this operation.
//////////////////////////////////////////////////////////////////// 0 
91 14 Dtool_nJyoCbxp 4 91 3890 0 14 Dtool_nJyoCbxp 951 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
92 14 Dtool_nJyoIP9P 4 92 3890 0 14 Dtool_nJyoIP9P 424 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::list_states
//       Access: Published, Static
//  Description: Lists all of the TransformStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
93 14 Dtool_nJyoidJ2 6 93 3866 0 14 Dtool_nJyoidJ2 586 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const TransformState
//               objects).
//////////////////////////////////////////////////////////////////// 0 
94 14 Dtool_nJyoSnP2 6 94 3891 0 14 Dtool_nJyoSnP2 390 ////////////////////////////////////////////////////////////////////
//     Function: TransformState::get_states
//       Access: Published, Static
//  Description: Returns a list of all of the TransformState objects
//               in the state cache.  The order of elements in this
//               cache is arbitrary.
//////////////////////////////////////////////////////////////////// 0 
95 14 Dtool_nJyoOzaR 7 95 3896 0 14 Dtool_nJyoOzaR 0 0 
96 14 Dtool_nJyofX3c 6 97 3889 0 14 Dtool_nJyofX3c 846 // Filename: renderAttribRegistry.I
// Created by:  drose (13Nov08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot
//       Access: Published
//  Description: Returns the slot number assigned to the indicated
//               TypeHandle, or 0 if no slot number has been assigned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3897  11 type_handle 1 3896  
97 14 Dtool_nJyoZk5x 6 98 3889 0 14 Dtool_nJyoZk5x 709 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_max_slots
//       Access: Published
//  Description: Returns the maximum number that any slot number is
//               allowed to grow.  Actually, this number will be one
//               higher than the highest possible slot number.  This
//               puts an upper bound on the number of RenderAttrib
//               slots that may be allocated, and allows other code to
//               define an array of slots.
//
//               This number will not change during the lifetime of
//               the application.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3897  
98 14 Dtool_nJyoNQ5i 6 99 3889 0 14 Dtool_nJyoNQ5i 390 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_num_slots
//       Access: Published
//  Description: Returns the number of RenderAttrib slots that have
//               been allocated.  This is one more than the highest
//               slot number in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3897  
99 14 Dtool_nJyoHhxA 7 100 3896 0 14 Dtool_nJyoHhxA 281 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_type
//       Access: Published
//  Description: Returns the TypeHandle associated with slot n.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3897  4 slot 1 3889  
100 14 Dtool_nJyoADW5 6 101 3889 0 14 Dtool_nJyoADW5 282 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_sort
//       Access: Published
//  Description: Returns the sort number associated with slot n.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3897  4 slot 1 3889  
101 14 Dtool_nJyoMnQ_ 4 102 3890 0 14 Dtool_nJyoMnQ_ 282 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::set_slot_sort
//       Access: Published
//  Description: Changes the sort number associated with slot n.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3899  4 slot 1 3889  4 sort 1 3889  
102 14 Dtool_nJyosrqJ 7 103 3901 0 14 Dtool_nJyosrqJ 444 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_slot_default
//       Access: Published
//  Description: Returns the default RenderAttrib object associated
//               with slot n.  This is the attrib that should be
//               applied in the absence of any other attrib of this
//               type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3897  4 slot 1 3889  
103 14 Dtool_nJyoPoxa 6 104 3889 0 14 Dtool_nJyoPoxa 314 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_num_sorted_slots
//       Access: Published
//  Description: Returns the number of entries in the sorted_slots
//               list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3897  
104 14 Dtool_nJyoXftp 6 105 3889 0 14 Dtool_nJyoXftp 424 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_sorted_slot
//       Access: Published
//  Description: Returns the nth slot in sorted order.  By traversing
//               this list, you will retrieve all the slot numbers in
//               order according to their registered sort value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3897  1 n 1 3889  
105 14 Dtool_nJyogOhD 6 106 3902 0 14 Dtool_nJyogOhD 400 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_array_chain
//       Access: Published
//  Description: Returns the DeletedBufferChain object that may be
//               used to allocated appropriately-sized arrays of
//               RenderState::Attribute objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3897  
106 14 Dtool_nJyoVi_6 6 107 3899 0 14 Dtool_nJyoVi_6 243 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttribRegistry::get_global_ptr
//       Access: Published, Static
//  Description:
//////////////////////////////////////////////////////////////////// 0 
107 14 Dtool_nJyoYxD_ 7 110 3901 0 14 Dtool_nJyoYxD_ 1093 // Filename: renderAttrib.I
// Created by:  drose (21Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::compose
//       Access: Published
//  Description: Returns a new RenderAttrib object that represents the
//               composition of this attrib with the other attrib.  In
//               most cases, this is the same as the other attrib; a
//               compose b produces b.  Some kinds of attributes, like
//               a TextureTransform, for instance, might produce a new
//               result: a compose b produces c.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3901  5 other 1 3901  
108 14 Dtool_nJyoa9kQ 7 111 3901 0 14 Dtool_nJyoa9kQ 946 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::invert_compose
//       Access: Published
//  Description: Returns a new RenderAttrib object that represents the
//               composition of the inverse of this attrib with the
//               other attrib.  In most cases, this is the same as the
//               other attrib; !a compose b produces b.  Some kinds of
//               attributes, like a TextureTransform, for instance,
//               might produce a new result: !a compose b produces c.
//
//               This is similar to compose() except that the source
//               attrib is inverted first.  This is used to compute
//               the relative attribute for one node as viewed from
//               some other node, which is especially useful for
//               transform-type attributes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3901  5 other 1 3901  
109 14 Dtool_nJyo6RBU 6 112 3866 0 14 Dtool_nJyo6RBU 1472 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::lower_attrib_can_override
//       Access: Public, Virtual
//  Description: Intended to be overridden by derived RenderAttrib
//               types to specify how two consecutive RenderAttrib
//               objects of the same type interact.
//
//               This should return false if a RenderAttrib on a
//               higher node will compose into a RenderAttrib on a
//               lower node that has a higher override value, or true
//               if the lower RenderAttrib will completely replace the
//               state.
//
//               The default behavior is false: normally, a
//               RenderAttrib in the graph cannot completely override
//               a RenderAttrib above it, regardless of its override
//               value--instead, the two attribs are composed.  But
//               for some kinds of RenderAttribs, it is useful to
//               allow this kind of override.
//
//               This method only handles the one special case of a
//               lower RenderAttrib with a higher override value.  If
//               the higher RenderAttrib has a higher override value,
//               it always completely overrides.  And if both
//               RenderAttribs have the same override value, they are
//               always composed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3901  
110 14 Dtool_nJyovruE 6 113 3889 0 14 Dtool_nJyovruE 671 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderAttribs, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderAttrib
//               class because all equivalent RenderAttrib objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3901  5 other 1 3901  
111 14 Dtool_nJyoA7kY 7 114 3901 0 14 Dtool_nJyoA7kY 615 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique RenderAttrib in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3901  
112 14 Dtool_nJyooTLC 4 115 3890 0 14 Dtool_nJyooTLC 229 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3901  3 out 1 3893  
113 14 Dtool_nJyodBRS 4 116 3890 0 14 Dtool_nJyodBRS 228 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3901  3 out 1 3893  12 indent_level 1 3889  
114 14 Dtool_nJyoHzox 6 117 3889 0 14 Dtool_nJyoHzox 402 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::get_num_attribs
//       Access: Published, Static
//  Description: Returns the total number of unique RenderAttrib
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
115 14 Dtool_nJyoHw_H 4 118 3890 0 14 Dtool_nJyoHw_H 421 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::list_attribs
//       Access: Published, Static
//  Description: Lists all of the RenderAttribs in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
116 14 Dtool_nJyonA2d 6 119 3866 0 14 Dtool_nJyonA2d 480 ////////////////////////////////////////////////////////////////////
//     Function: RenderAttrib::validate_attribs
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderAttrib objects).
//////////////////////////////////////////////////////////////////// 0 
117 14 Dtool_nJyoFEBd 6 120 3889 0 14 Dtool_nJyoFEBd 0 1 4 this 3 3901  
118 14 Dtool_nJyoLWjP 7 123 3896 0 14 Dtool_nJyoLWjP 0 0 
119 14 Dtool_nJyoAgj2 7 126 3901 0 14 Dtool_nJyoAgj2 1219 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RenderModeAttrib object that specifies
//               whether to draw polygons in the normal, filled mode,
//               or wireframe mode, or in some other yet-to-be-defined
//               mode.
//
//               The thickness parameter specifies the thickness to be
//               used for wireframe lines, as well as for ordinary
//               linestrip lines; it also specifies the diameter of
//               points.  (Thick lines are presently only supported in
//               OpenGL; but thick points are supported on either
//               platform.)
//
//               If perspective is true, the point thickness
//               represented is actually a width in 3-d units, and the
//               points should scale according to perspective.  When
//               it is false, the point thickness is actually a width
//               in pixels, and points are a uniform screen size
//               regardless of distance from the camera.
//////////////////////////////////////////////////////////////////// 3 4 mode 1 3732  9 thickness 1 3874  11 perspective 1 3866  
120 14 Dtool_nJyo8VB1 7 126 3901 0 14 Dtool_nJyo8VB1 1219 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RenderModeAttrib object that specifies
//               whether to draw polygons in the normal, filled mode,
//               or wireframe mode, or in some other yet-to-be-defined
//               mode.
//
//               The thickness parameter specifies the thickness to be
//               used for wireframe lines, as well as for ordinary
//               linestrip lines; it also specifies the diameter of
//               points.  (Thick lines are presently only supported in
//               OpenGL; but thick points are supported on either
//               platform.)
//
//               If perspective is true, the point thickness
//               represented is actually a width in 3-d units, and the
//               points should scale according to perspective.  When
//               it is false, the point thickness is actually a width
//               in pixels, and points are a uniform screen size
//               regardless of distance from the camera.
//////////////////////////////////////////////////////////////////// 2 4 mode 1 3732  9 thickness 1 3874  
121 14 Dtool_nJyo9BMo 7 126 3901 0 14 Dtool_nJyo9BMo 1219 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RenderModeAttrib object that specifies
//               whether to draw polygons in the normal, filled mode,
//               or wireframe mode, or in some other yet-to-be-defined
//               mode.
//
//               The thickness parameter specifies the thickness to be
//               used for wireframe lines, as well as for ordinary
//               linestrip lines; it also specifies the diameter of
//               points.  (Thick lines are presently only supported in
//               OpenGL; but thick points are supported on either
//               platform.)
//
//               If perspective is true, the point thickness
//               represented is actually a width in 3-d units, and the
//               points should scale according to perspective.  When
//               it is false, the point thickness is actually a width
//               in pixels, and points are a uniform screen size
//               regardless of distance from the camera.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3732  
122 14 Dtool_nJyoKKJ2 7 127 3901 0 14 Dtool_nJyoKKJ2 403 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
123 14 Dtool_nJyoEaf_ 6 128 3732 0 14 Dtool_nJyoEaf_ 250 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3904  
124 14 Dtool_nJyo8Zwq 6 129 3874 0 14 Dtool_nJyo8Zwq 517 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_thickness
//       Access: Published
//  Description: Returns the line width or point thickness.  This is
//               only relevant when rendering points or lines, such as
//               when the mode is M_wireframe or M_point (or when
//               rendering actual points or lines primitives in
//               M_polygon mode).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3904  
125 14 Dtool_nJyozILX 6 130 3866 0 14 Dtool_nJyozILX 676 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_perspective
//       Access: Published
//  Description: Returns the perspective flag.  When this is true, the
//               point thickness represented by get_thickness() is
//               actually a width in 3-d units, and the points should
//               scale according to perspective.  When it is false,
//               the default, the point thickness is actually a width
//               in pixels, and points are a uniform size regardless
//               of distance from the camera.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3904  
126 14 Dtool_nJyoKD5y 6 131 3889 0 14 Dtool_nJyoKD5y 456 ////////////////////////////////////////////////////////////////////
//     Function: RenderModeAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderModeAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3904  14 geom_rendering 1 3889  
127 14 Dtool_nJyoGbwj 6 132 3889 0 14 Dtool_nJyoGbwj 0 0 
128 14 Dtool_nJyoN0p3 7 133 3896 0 14 Dtool_nJyoN0p3 0 0 
129 14 Dtool_nJyoFUDw 7 136 3901 0 14 Dtool_nJyoFUDw 305 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies
//               no stages at all.
//////////////////////////////////////////////////////////////////// 0 
130 14 Dtool_nJyoiX3D 7 136 3901 0 14 Dtool_nJyoiX3D 386 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated matrix to the default texture stage.  This
//               interface is deprecated.
//////////////////////////////////////////////////////////////////// 1 3 mat 1 3875  
131 14 Dtool_nJyoKQGr 7 136 3901 0 14 Dtool_nJyoKQGr 339 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexMatrixAttrib that applies the
//               indicated transform to the named texture stage.
//////////////////////////////////////////////////////////////////// 2 5 stage 1 3906  9 transform 1 3864  
132 14 Dtool_nJyoAK88 7 137 3901 0 14 Dtool_nJyoAK88 402 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
133 14 Dtool_nJyoTTkW 7 138 3901 0 14 Dtool_nJyoTTkW 425 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated transform for the given stage.  If
//               this stage already exists, its transform is replaced.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3908  5 stage 1 3906  9 transform 1 3864  8 override 1 3889  
134 14 Dtool_nJyo6Dmh 7 138 3901 0 14 Dtool_nJyo6Dmh 425 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated transform for the given stage.  If
//               this stage already exists, its transform is replaced.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3908  5 stage 1 3906  9 transform 1 3864  
135 14 Dtool_nJyolqcR 7 139 3901 0 14 Dtool_nJyolqcR 337 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexMatrixAttrib just like this one,
//               with the indicated stage removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3908  5 stage 1 3906  
136 14 Dtool_nJyo6GHq 6 140 3866 0 14 Dtool_nJyo6GHq 329 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexMatrixAttrib, false if at least one is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3908  
137 14 Dtool_nJyoogDz 6 141 3866 0 14 Dtool_nJyoogDz 442 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3908  5 stage 1 3906  
138 14 Dtool_nJyoCetZ 6 142 3889 0 14 Dtool_nJyoCetZ 313 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_num_stages
//       Access: Published
//  Description: Returns the number of stages that are represented by
//               this attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3908  
139 14 Dtool_nJyo8HUI 7 143 3906 0 14 Dtool_nJyo8HUI 364 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_stage
//       Access: Published
//  Description: Returns the nth stage that is represented by this
//               attrib.  The TextureStages are in no particular
//               order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3908  1 n 1 3889  
140 14 Dtool_nJyojqir 6 144 3875 0 14 Dtool_nJyojqir 317 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the default texture stage.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3908  
141 14 Dtool_nJyod7Oo 6 144 3875 0 14 Dtool_nJyod7Oo 406 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_mat
//       Access: Published
//  Description: Returns the transformation matrix associated with
//               the indicated texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3908  5 stage 1 3906  
142 14 Dtool_nJyoQoZM 7 145 3864 0 14 Dtool_nJyoQoZM 405 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_transform
//       Access: Published
//  Description: Returns the transformation associated with
//               the indicated texture stage, or identity matrix if
//               nothing is associated with the indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3908  5 stage 1 3906  
143 14 Dtool_nJyoHwsN 6 146 3889 0 14 Dtool_nJyoHwsN 309 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_override
//       Access: Published
//  Description: Returns the override value associated with the
//               indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3908  5 stage 1 3906  
144 14 Dtool_nJyoPyyY 6 147 3889 0 14 Dtool_nJyoPyyY 454 ////////////////////////////////////////////////////////////////////
//     Function: TexMatrixAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexMatrixAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3908  14 geom_rendering 1 3889  
145 14 Dtool_nJyo7BY0 6 148 3889 0 14 Dtool_nJyo7BY0 0 0 
146 14 Dtool_nJyo3OB_ 7 149 3896 0 14 Dtool_nJyo3OB_ 0 0 
147 14 Dtool_nJyoAt5L 6 151 3866 0 14 Dtool_nJyoAt5L 667 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::operator <
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderStates, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderState
//               class because all equivalent RenderState objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  5 other 1 3910  
148 14 Dtool_nJyofAFv 6 152 3889 0 14 Dtool_nJyofAFv 620 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::compare_sort
//       Access: Published
//  Description: Returns -1, 0, or 1 according to the relative sorting
//               of these two RenderStates, with regards to rendering
//               performance, so that "heavier" RenderAttribs (as
//               defined by RenderAttribRegistry::get_slot_sort()) are
//               more likely to be grouped together.  This is not
//               related to the sorting order defined by operator <.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  5 other 1 3910  
149 14 Dtool_nJyoxGYM 6 153 3867 0 14 Dtool_nJyoxGYM 265 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_hash
//       Access: Published
//  Description: Returns a suitable hash value for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
150 14 Dtool_nJyobG0o 6 154 3866 0 14 Dtool_nJyobG0o 760 // Filename: renderState.I
// Created by:  drose (21Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderState::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
151 14 Dtool_nJyo8NWA 6 155 3866 0 14 Dtool_nJyo8NWA 371 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_cull_callback
//       Access: Published
//  Description: Returns true if any of the RenderAttribs in this
//               state request a cull_callback(), false if none of
//               them do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
152 14 Dtool_nJyo8pTl 6 156 3866 0 14 Dtool_nJyo8pTl 443 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::cull_callback
//       Access: Published
//  Description: Calls cull_callback() on each attrib.  If any attrib
//               returns false, interrupts the list and returns false
//               immediately; otherwise, completes the list and
//               returns true.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3910  4 trav 1 3912  4 data 1 3913  
153 14 Dtool_nJyoGuHJ 7 157 3910 0 14 Dtool_nJyoGuHJ 276 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make_empty
//       Access: Published, Static
//  Description: Returns a RenderState with no attributes set.
//////////////////////////////////////////////////////////////////// 0 
154 14 Dtool_nJyoZyDQ 7 158 3910 0 14 Dtool_nJyoZyDQ 333 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make_full_default
//       Access: Published, Static
//  Description: Returns a RenderState with all possible attributes
//               set to their default value.
//////////////////////////////////////////////////////////////////// 0 
155 14 Dtool_nJyoRRYz 7 159 3910 0 14 Dtool_nJyoRRYz 272 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with four attributes set.
//////////////////////////////////////////////////////////////////// 5 7 attrib1 1 3901  7 attrib2 1 3901  7 attrib3 1 3901  7 attrib4 1 3901  8 override 1 3889  
156 14 Dtool_nJyojeWF 7 159 3910 0 14 Dtool_nJyojeWF 272 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with four attributes set.
//////////////////////////////////////////////////////////////////// 4 7 attrib1 1 3901  7 attrib2 1 3901  7 attrib3 1 3901  7 attrib4 1 3901  
157 14 Dtool_nJyoK6X3 7 159 3910 0 14 Dtool_nJyoK6X3 273 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with three attributes set.
//////////////////////////////////////////////////////////////////// 4 7 attrib1 1 3901  7 attrib2 1 3901  7 attrib3 1 3901  8 override 1 3889  
158 14 Dtool_nJyobtvX 7 159 3910 0 14 Dtool_nJyobtvX 273 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with three attributes set.
//////////////////////////////////////////////////////////////////// 3 7 attrib1 1 3901  7 attrib2 1 3901  7 attrib3 1 3901  
159 14 Dtool_nJyou7vK 7 159 3910 0 14 Dtool_nJyou7vK 271 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with two attributes set.
//////////////////////////////////////////////////////////////////// 3 7 attrib1 1 3901  7 attrib2 1 3901  8 override 1 3889  
160 14 Dtool_nJyoSK5z 7 159 3910 0 14 Dtool_nJyoSK5z 271 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with two attributes set.
//////////////////////////////////////////////////////////////////// 2 7 attrib1 1 3901  7 attrib2 1 3901  
161 14 Dtool_nJyoiqB_ 7 159 3910 0 14 Dtool_nJyoiqB_ 270 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with one attribute set.
//////////////////////////////////////////////////////////////////// 2 6 attrib 1 3901  8 override 1 3889  
162 14 Dtool_nJyoT9E9 7 159 3910 0 14 Dtool_nJyoT9E9 270 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::make
//       Access: Published, Static
//  Description: Returns a RenderState with one attribute set.
//////////////////////////////////////////////////////////////////// 1 6 attrib 1 3901  
163 14 Dtool_nJyosYED 7 160 3910 0 14 Dtool_nJyosYED 711 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state with the other state.
//
//               The result of this operation is cached, and will be
//               retained as long as both this RenderState object and
//               the other RenderState object continue to exist.
//               Should one of them destruct, the cached entry will be
//               removed, and its pointer will be allowed to destruct
//               as well.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  5 other 1 3910  
164 14 Dtool_nJyo_7EZ 7 161 3910 0 14 Dtool_nJyo_7EZ 557 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::invert_compose
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               composition of this state's inverse with the other
//               state.
//
//               This is similar to compose(), but is particularly
//               useful for computing the relative state of a node as
//               viewed from some other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  5 other 1 3910  
165 14 Dtool_nJyoMVE4 7 162 3910 0 14 Dtool_nJyoMVE4 505 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::add_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced (unless the override is
//               lower).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3910  6 attrib 1 3901  8 override 1 3889  
166 14 Dtool_nJyoyvO6 7 162 3910 0 14 Dtool_nJyoyvO6 505 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::add_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced (unless the override is
//               lower).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  6 attrib 1 3901  
167 14 Dtool_nJyoTzrr 7 163 3910 0 14 Dtool_nJyoTzrr 520 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::set_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced unconditionally.  The
//               override is not changed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  6 attrib 1 3901  
168 14 Dtool_nJyotlgp 7 163 3910 0 14 Dtool_nJyotlgp 538 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::set_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the new RenderAttrib
//               added.  If there is already a RenderAttrib with the
//               same type, it is replaced unconditionally.  The
//               override is also replaced unconditionally.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3910  6 attrib 1 3901  8 override 1 3889  
169 14 Dtool_nJyoyYRK 7 164 3910 0 14 Dtool_nJyoyYRK 379 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the indicated
//               RenderAttrib removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  4 type 1 3896  
170 14 Dtool_nJyofoiT 7 164 3910 0 14 Dtool_nJyofoiT 379 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::remove_attrib
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with the indicated
//               RenderAttrib removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  4 slot 1 3889  
171 14 Dtool_nJyo_mZy 7 165 3910 0 14 Dtool_nJyo_mZy 543 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::adjust_all_priorities
//       Access: Published
//  Description: Returns a new RenderState object that represents the
//               same as the source state, with all attributes'
//               override values incremented (or decremented, if
//               negative) by the indicated amount.  If the override
//               would drop below zero, it is set to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  10 adjustment 1 3889  
172 14 Dtool_nJyo2r9x 6 166 3866 0 14 Dtool_nJyo2r9x 316 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_attrib
//       Access: Published
//  Description: Returns true if an attrib of the indicated type is
//               present, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  4 type 1 3896  
173 14 Dtool_nJyouEau 6 166 3866 0 14 Dtool_nJyouEau 316 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::has_attrib
//       Access: Published
//  Description: Returns true if an attrib of the indicated type is
//               present, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  4 slot 1 3889  
174 14 Dtool_nJyoQqmu 7 167 3901 0 14 Dtool_nJyoQqmu 370 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  4 type 1 3896  
175 14 Dtool_nJyoUEFr 7 167 3901 0 14 Dtool_nJyoUEFr 367 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib
//       Access: Published
//  Description: Returns the RenderAttrib with the indicated slot
//               index, or NULL if there is no such RenderAttrib in
//               the state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  4 slot 1 3889  
176 14 Dtool_nJyoo_W5 7 168 3901 0 14 Dtool_nJyoo_W5 399 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_attrib_def
//       Access: Published
//  Description: Returns the RenderAttrib with the indicated slot
//               index, or the default attrib for that slot if there
//               is no such RenderAttrib in the state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  4 slot 1 3889  
177 14 Dtool_nJyouZNq 6 169 3889 0 14 Dtool_nJyouZNq 385 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns its override value if it is found,
//               or 0 if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  4 type 1 3896  
178 14 Dtool_nJyobchm 6 169 3889 0 14 Dtool_nJyobchm 385 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_override
//       Access: Published
//  Description: Looks for a RenderAttrib of the indicated type in the
//               state, and returns its override value if it is found,
//               or 0 if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  4 slot 1 3889  
179 14 Dtool_nJyo9oPR 7 170 3910 0 14 Dtool_nJyo9oPR 613 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_unique
//       Access: Published
//  Description: Returns the pointer to the unique RenderState in
//               the cache that is equivalent to this one.  This may
//               be the same pointer as this object, or it may be a
//               different pointer; but it will be an equivalent
//               object, and it will be a shared pointer.  This may be
//               called from time to time to improve cache benefits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
180 14 Dtool_nJyorMAG 4 171 3890 0 14 Dtool_nJyorMAG 275 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
181 14 Dtool_nJyoK_kx 6 172 3866 0 14 Dtool_nJyoK_kx 277 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::cache_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
182 14 Dtool_nJyolWCY 4 173 3890 0 14 Dtool_nJyolWCY 274 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_ref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
183 14 Dtool_nJyoVnZl 6 174 3866 0 14 Dtool_nJyoVnZl 276 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::node_unref
//       Access: Published
//  Description: Overrides this method to update PStats appropriately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
184 14 Dtool_nJyoTur9 6 175 3889 0 14 Dtool_nJyoTur9 566 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the composition
//               cache for this RenderState.  This is the number of
//               other RenderStates whose composition with this one
//               has been cached.  This number is not useful for any
//               practical reason other than performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
185 14 Dtool_nJyoGL_W 6 176 3889 0 14 Dtool_nJyoGL_W 553 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_num_entries
//       Access: Published
//  Description: Returns the number of entries in the
//               invert_composition cache for this RenderState.
//               This is similar to the composition cache, but it
//               records cache entries for the invert_compose()
//               operation.  See get_composition_cache_num_entries().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
186 14 Dtool_nJyovxQh 6 177 3889 0 14 Dtool_nJyovxQh 649 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this RenderState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
187 14 Dtool_nJyol_Jz 7 178 3910 0 14 Dtool_nJyol_Jz 602 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_source
//       Access: Published
//  Description: Returns the source RenderState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//               See get_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  1 n 1 3889  
188 14 Dtool_nJyodwO3 7 179 3910 0 14 Dtool_nJyodwO3 701 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache_result
//       Access: Published
//  Description: Returns the result RenderState of the nth element
//               in the composition cache.  Returns NULL if there
//               doesn't happen to be an entry in the nth element.
//
//               In general,
//               a->compose(a->get_composition_cache_source(n)) ==
//               a->get_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  1 n 1 3889  
189 14 Dtool_nJyos0y1 6 180 3889 0 14 Dtool_nJyos0y1 663 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_size
//       Access: Published
//  Description: Returns the number of slots in the composition
//               cache for this RenderState.  You may use this as
//               an upper bound when walking through all of the
//               composition cache results via
//               get_invert_composition_cache_source() or result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
190 14 Dtool_nJyo2x2Q 7 181 3910 0 14 Dtool_nJyo2x2Q 624 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_source
//       Access: Published
//  Description: Returns the source RenderState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.  See get_invert_composition_cache_result().
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  1 n 1 3889  
191 14 Dtool_nJyox5X0 7 182 3910 0 14 Dtool_nJyox5X0 753 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache_result
//       Access: Published
//  Description: Returns the result RenderState of the nth element
//               in the invert composition cache.  Returns NULL if
//               there doesn't happen to be an entry in the nth
//               element.
//
//               In general,
//               a->invert_compose(a->get_invert_composition_cache_source(n))
//               == a->get_invert_composition_cache_result(n).
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  1 n 1 3889  
192 14 Dtool_nJyok_E7 6 183 3891 0 14 Dtool_nJyok_E7 725 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_composition_cache
//       Access: Published
//  Description: Returns a list of 2-tuples that represents the
//               composition cache.  For each tuple in the list, the
//               first element is the source render, and the second
//               is the result render.  If both are None, there is
//               no entry in the cache at that slot.
//
//               In general, a->compose(source) == result.
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
193 14 Dtool_nJyoiZLJ 6 184 3891 0 14 Dtool_nJyoiZLJ 746 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_invert_composition_cache
//       Access: Published
//  Description: Returns a list of 2-tuples that represents the
//               invert_composition cache.  For each tuple in the list, the
//               first element is the source render, and the second
//               is the result render.  If both are None, there is
//               no entry in the cache at that slot.
//
//               In general, a->invert_compose(source) == result.
//
//               This has no practical value other than for examining
//               the cache for performance analysis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
194 14 Dtool_nJyo5YiO 4 185 3890 0 14 Dtool_nJyo5YiO 243 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: RenderState::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  3 out 1 3893  
195 14 Dtool_nJyoArA3 4 186 3890 0 14 Dtool_nJyoArA3 227 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3910  3 out 1 3893  12 indent_level 1 3889  
196 14 Dtool_nJyoV3mc 6 187 3889 0 14 Dtool_nJyoV3mc 599 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_max_priority
//       Access: Published, Static
//  Description: Returns the maximum priority number (sometimes called
//               override) that may be set on any node.  This may or
//               may not be enforced, but the scene graph code assumes
//               that no priority numbers will be larger than this,
//               and some effects may not work properly if you use a
//               larger number.
//////////////////////////////////////////////////////////////////// 0 
197 14 Dtool_nJyoSXJI 6 188 3889 0 14 Dtool_nJyoSXJI 399 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderState
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
198 14 Dtool_nJyoB8ph 6 189 3889 0 14 Dtool_nJyoB8ph 990 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_num_unused_states
//       Access: Published, Static
//  Description: Returns the total number of RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState cache.
//
//               A nonzero return value is not necessarily indicative
//               of leaked references; it is normal for two
//               RenderState objects, both of which have references
//               held outside the cache, to have to result of their
//               composition stored within the cache.  This result
//               will be retained within the cache until one of the
//               base RenderStates is released.
//
//               Use list_cycles() to get an idea of the number of
//               actual "leaked" RenderState objects.
//////////////////////////////////////////////////////////////////// 0 
199 14 Dtool_nJyofP1U 6 190 3889 0 14 Dtool_nJyofP1U 997 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::clear_cache
//       Access: Published, Static
//  Description: Empties the cache of composed RenderStates.  This
//               makes every RenderState forget what results when
//               it is composed with other RenderStates.
//
//               This will eliminate any RenderState objects that
//               have been allocated but have no references outside of
//               the internal RenderState map.  It will not
//               eliminate RenderState objects that are still in
//               use.
//
//               Nowadays, this method should not be necessary, as
//               reference-count cycles in the composition cache
//               should be automatically detected and broken.
//
//               The return value is the number of RenderStates
//               freed by this operation.
//////////////////////////////////////////////////////////////////// 0 
200 14 Dtool_nJyoMpuX 4 191 3890 0 14 Dtool_nJyoMpuX 405 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::clear_munger_cache
//       Access: Published, Static
//  Description: Completely empties the cache of state + gsg ->
//               munger, for all states and all gsg's.  Normally there
//               is no need to empty this cache.
//////////////////////////////////////////////////////////////////// 0 
201 14 Dtool_nJyoyu1u 4 192 3890 0 14 Dtool_nJyoyu1u 948 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_cycles
//       Access: Published, Static
//  Description: Detects all of the reference-count cycles in the
//               cache and reports them to standard output.
//
//               These cycles may be inadvertently created when state
//               compositions cycle back to a starting point.
//               Nowadays, these cycles should be automatically
//               detected and broken, so this method should never list
//               any cycles unless there is a bug in that detection
//               logic.
//
//               The cycles listed here are not leaks in the strictest
//               sense of the word, since they can be reclaimed by a
//               call to clear_cache(); but they will not be reclaimed
//               automatically.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
202 14 Dtool_nJyoMySM 4 193 3890 0 14 Dtool_nJyoMySM 418 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderStates in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
203 14 Dtool_nJyoYm1k 6 194 3866 0 14 Dtool_nJyoYm1k 580 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order, and that none of the cache elements have been
//               inadvertently deleted.  Returns true if so, false if
//               there is a problem (which implies someone has
//               modified one of the supposedly-const RenderState
//               objects).
//////////////////////////////////////////////////////////////////// 0 
204 14 Dtool_nJyoXnnR 6 195 3891 0 14 Dtool_nJyoXnnR 384 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_states
//       Access: Published, Static
//  Description: Returns a list of all of the RenderState objects
//               in the state cache.  The order of elements in this
//               cache is arbitrary.
//////////////////////////////////////////////////////////////////// 0 
205 14 Dtool_nJyowxn3 6 196 3889 0 14 Dtool_nJyowxn3 407 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_draw_order
//       Access: Published
//  Description: Returns the draw order indicated by the
//               CullBinAttrib, if any, associated by this state (or 0
//               if there is no CullBinAttrib).  See get_bin_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
206 14 Dtool_nJyoP6sb 6 197 3889 0 14 Dtool_nJyoP6sb 520 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_bin_index
//       Access: Published
//  Description: Returns the bin index indicated by the CullBinAttrib,
//               if any, associated by this state (or the default bin
//               index if there is no CullBinAttrib).  This function
//               is provided as an optimization for determining this
//               at render time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3910  
207 14 Dtool_nJyoaUkU 6 198 3889 0 14 Dtool_nJyoaUkU 446 ////////////////////////////////////////////////////////////////////
//     Function: RenderState::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this RenderState is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3910  14 geom_rendering 1 3889  
208 14 Dtool_nJyoF592 7 199 3896 0 14 Dtool_nJyoF592 0 0 
209 14 Dtool_nJyoQcHT 7 201 3901 0 14 Dtool_nJyoQcHT 269 ////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AlphaTestAttrib object.
//////////////////////////////////////////////////////////////////// 2 4 mode 1 3729  15 reference_alpha 1 3874  
210 14 Dtool_nJyo9su6 7 202 3901 0 14 Dtool_nJyo9su6 402 ////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
211 14 Dtool_nJyohz_c 6 203 3874 0 14 Dtool_nJyohz_c 270 ////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_reference_alpha
//       Access: Published
//  Description: Returns the alpha reference value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3915  
212 14 Dtool_nJyooV_S 6 204 3729 0 14 Dtool_nJyooV_S 254 ////////////////////////////////////////////////////////////////////
//     Function: AlphaTestAttrib::get_mode
//       Access: Published
//  Description: Returns the alpha write mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3915  
213 14 Dtool_nJyoL7Jy 6 205 3889 0 14 Dtool_nJyoL7Jy 0 0 
214 14 Dtool_nJyoP7w8 7 206 3896 0 14 Dtool_nJyoP7w8 0 0 
215 14 Dtool_nJyoPS8H 7 210 3901 0 14 Dtool_nJyoPS8H 1917 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AntialiasAttrib object.
//
//               The mode should be either M_none, M_auto, or a union
//               of any or all of M_point, M_line, M_polygon, and
//               M_multisample.  Also, in addition to the above
//               choices, it may include either of M_better of
//               M_faster to specify a performance/quality tradeoff
//               hint.
//
//               If M_none is specified, no antialiasing is performed.  
//
//               If M_multisample is specified, it means to use the
//               special framebuffer multisample bits for
//               antialiasing, if it is available.  If so, the
//               M_point, M_line, and M_polygon modes are ignored.
//               This advanced antialiasing mode is only available on
//               certain graphics hardware.  If it is not available,
//               the M_multisample bit is ignored (and the other modes
//               may be used instead, if specified).
//
//               M_point, M_line, and/or M_polygon specify
//               per-primitive smoothing.  When enabled, M_point and
//               M_line may force transparency on.  M_polygon requires
//               a frame buffer that includes an alpha channel, and it
//               works best if the primitives are sorted
//               front-to-back.
//
//               If M_auto is specified, M_multisample is selected if
//               it is available, otherwise M_polygon is selected,
//               unless drawing lines or points, in which case M_line
//               or M_point is selected (these two generally produce
//               better results than M_multisample)
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3917  
216 14 Dtool_nJyo40_f 7 211 3901 0 14 Dtool_nJyo40_f 402 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
217 14 Dtool_nJyoUNQ4 6 212 3917 0 14 Dtool_nJyoUNQ4 262 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode
//       Access: Published
//  Description: Returns the specified antialias mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3918  
218 14 Dtool_nJyo0ILz 6 213 3917 0 14 Dtool_nJyo0ILz 465 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_type
//       Access: Published
//  Description: Returns the specified antialias mode, with the
//               quality bits masked out.  This therefore indicates
//               only the requested type of antialiasing: M_none,
//               M_auto, or some specific combination.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3918  
219 14 Dtool_nJyoodxW 6 214 3917 0 14 Dtool_nJyoodxW 478 ////////////////////////////////////////////////////////////////////
//     Function: AntialiasAttrib::get_mode_quality
//       Access: Published
//  Description: Returns the specified antialias mode, with the type
//               bits masked out.  This therefore indicates only the
//               requested quality settings: one of M_faster,
//               M_better, M_dont_care, or zero (unspecified).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3918  
220 14 Dtool_nJyoowaX 6 215 3889 0 14 Dtool_nJyoowaX 0 0 
221 14 Dtool_nJyoqzDi 7 216 3896 0 14 Dtool_nJyoqzDi 0 0 
222 14 Dtool_nJyoZvzD 6 219 3889 0 14 Dtool_nJyoZvzD 1159 // Filename: renderEffect.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::compare_to
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderEffects, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderEffect
//               class because all equivalent RenderEffect objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3920  5 other 1 3920  
223 14 Dtool_nJyoLgOf 4 220 3890 0 14 Dtool_nJyoLgOf 229 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3920  3 out 1 3893  
224 14 Dtool_nJyoeXUv 4 221 3890 0 14 Dtool_nJyoeXUv 228 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3920  3 out 1 3893  12 indent_level 1 3889  
225 14 Dtool_nJyovz2e 6 222 3889 0 14 Dtool_nJyovz2e 402 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::get_num_effects
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffect
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
226 14 Dtool_nJyorBxm 4 223 3890 0 14 Dtool_nJyorBxm 421 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::list_effects
//       Access: Published, Static
//  Description: Lists all of the RenderEffects in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
227 14 Dtool_nJyoLUB_ 6 224 3866 0 14 Dtool_nJyoLUB_ 480 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffect::validate_effects
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffect objects).
//////////////////////////////////////////////////////////////////// 0 
228 14 Dtool_nJyo3Lms 7 225 3896 0 14 Dtool_nJyo3Lms 0 0 
229 14 Dtool_nJyomaIr 6 227 3866 0 14 Dtool_nJyomaIr 674 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::operator <
//       Access: Published
//  Description: Provides an arbitrary ordering among all unique
//               RenderEffects, so we can store the essentially
//               different ones in a big set and throw away the rest.
//
//               This method is not needed outside of the RenderEffects
//               class because all equivalent RenderEffects objects are
//               guaranteed to share the same pointer; thus, a pointer
//               comparison is always sufficient.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3922  5 other 1 3922  
230 14 Dtool_nJyom56U 6 228 3866 0 14 Dtool_nJyom56U 275 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::is_empty
//       Access: Published
//  Description: Returns true if the state is empty, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3922  
231 14 Dtool_nJyoiXcl 6 229 3889 0 14 Dtool_nJyoiXcl 309 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_effects
//       Access: Published
//  Description: Returns the number of separate effects indicated
//               in the state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3922  
232 14 Dtool_nJyo_AJ6 7 230 3920 0 14 Dtool_nJyo_AJ6 381 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published, Virtual
//  Description: Looks for a RenderEffect of the indicated type in the
//               state, and returns it if it is found, or NULL if it
//               is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3922  4 type 1 3896  
233 14 Dtool_nJyopvc2 7 230 3920 0 14 Dtool_nJyopvc2 261 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_effect
//       Access: Published
//  Description: Returns the nth effect in the state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3922  1 n 1 3889  
234 14 Dtool_nJyoNzuE 6 231 3889 0 14 Dtool_nJyoNzuE 378 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::find_effect
//       Access: Published
//  Description: Searches for an effect with the indicated type in
//               the state, and returns its index if it is found, or
//               -1 if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3922  4 type 1 3896  
235 14 Dtool_nJyogrKD 7 232 3922 0 14 Dtool_nJyogrKD 277 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make_empty
//       Access: Published, Static
//  Description: Returns a RenderEffects with no effects set.
//////////////////////////////////////////////////////////////////// 0 
236 14 Dtool_nJyoiDSO 7 233 3922 0 14 Dtool_nJyoiDSO 271 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with one effect set.
//////////////////////////////////////////////////////////////////// 1 6 effect 1 3920  
237 14 Dtool_nJyo3y67 7 233 3922 0 14 Dtool_nJyo3y67 272 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with two effects set.
//////////////////////////////////////////////////////////////////// 2 7 effect1 1 3920  7 effect2 1 3920  
238 14 Dtool_nJyoZQ3C 7 233 3922 0 14 Dtool_nJyoZQ3C 274 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with three effects set.
//////////////////////////////////////////////////////////////////// 3 7 effect1 1 3920  7 effect2 1 3920  7 effect3 1 3920  
239 14 Dtool_nJyozo_d 7 233 3922 0 14 Dtool_nJyozo_d 273 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::make
//       Access: Published, Static
//  Description: Returns a RenderEffects with four effects set.
//////////////////////////////////////////////////////////////////// 4 7 effect1 1 3920  7 effect2 1 3920  7 effect3 1 3920  7 effect4 1 3920  
240 14 Dtool_nJyo8sn3 7 234 3922 0 14 Dtool_nJyo8sn3 461 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::add_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the new RenderEffect
//               added.  If there is already a RenderEffect with the
//               same type, it is replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3922  6 effect 1 3920  
241 14 Dtool_nJyoNxu4 7 235 3922 0 14 Dtool_nJyoNxu4 383 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::remove_effect
//       Access: Published
//  Description: Returns a new RenderEffects object that represents the
//               same as the source state, with the indicated
//               RenderEffect removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3922  4 type 1 3896  
242 14 Dtool_nJyoxmDR 4 236 3890 0 14 Dtool_nJyoxmDR 230 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3922  3 out 1 3893  
243 14 Dtool_nJyo_6eU 4 237 3890 0 14 Dtool_nJyo_6eU 229 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3922  3 out 1 3893  12 indent_level 1 3889  
244 14 Dtool_nJyoELqs 6 238 3889 0 14 Dtool_nJyoELqs 403 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::get_num_states
//       Access: Published, Static
//  Description: Returns the total number of unique RenderEffects
//               objects allocated in the world.  This will go up and
//               down during normal operations.
//////////////////////////////////////////////////////////////////// 0 
245 14 Dtool_nJyoFHwJ 4 239 3890 0 14 Dtool_nJyoFHwJ 421 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::list_states
//       Access: Published, Static
//  Description: Lists all of the RenderEffects in the cache to the
//               output stream, one per line.  This can be quite a lot
//               of output if the cache is large, so be prepared.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
246 14 Dtool_nJyoP68o 6 240 3866 0 14 Dtool_nJyoP68o 481 ////////////////////////////////////////////////////////////////////
//     Function: RenderEffects::validate_states
//       Access: Published, Static
//  Description: Ensures that the cache is still stored in sorted
//               order.  Returns true if so, false if there is a
//               problem (which implies someone has modified one of
//               the supposedly-const RenderEffects objects).
//////////////////////////////////////////////////////////////////// 0 
247 14 Dtool_nJyope17 7 241 3896 0 14 Dtool_nJyope17 0 0 
248 14 Dtool_nJyomVfc 7 254 3925 2411 14 Dtool_nJyomVfc 1394 //
// There are two different interfaces here for making and breaking
// parent-child connections: the fundamental PandaNode interface, via
// add_child() and remove_child() (and related functions), and the
// NodePath support interface, via attach(), detach(), and reparent().
// They both do essentially the same thing, but with slightly
// different inputs.  The PandaNode interfaces try to guess which
// NodePaths should be updated as a result of the scene graph change,
// while the NodePath interfaces already know.
//
// The NodePath support interface functions are strictly called from
// within the NodePath class, and are used to implement
// NodePath::reparent_to() and NodePath::remove_node(), etc.  The
// fundamental interface, on the other hand, is intended to be called
// directly by the user.
//
// The fundamental interface has a slightly lower overhead because it
// does not need to create a NodePathComponent chain where one does
// not already exist; however, the NodePath support interface is more
// useful when the NodePath already does exist, because it ensures
// that the particular NodePath calling it is kept appropriately
// up-to-date.
//
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
249 14 Dtool_nJyoozEb 7 256 3925 2411 14 Dtool_nJyoozEb 828 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::combine_with
//       Access: Public, Virtual
//  Description: Collapses this PandaNode with the other PandaNode, if
//               possible, and returns a pointer to the combined
//               PandaNode, or NULL if the two PandaNodes cannot
//               safely be combined.
//
//               The return value may be this, other, or a new
//               PandaNode altogether.
//
//               This function is called from GraphReducer::flatten(),
//               and need not deal with children; its job is just to
//               decide whether to collapse the two PandaNodes and
//               what the collapsed PandaNode should look like.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  5 other 1 3925  
250 14 Dtool_nJyol3aT 7 257 3925 2411 14 Dtool_nJyol3aT 514 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::make_copy
//       Access: Published, Virtual
//  Description: Returns a newly-allocated PandaNode that is a shallow
//               copy of this one.  It will be a different pointer,
//               but its internal data may or may not be shared with
//               that of the original PandaNode.  No children will be
//               copied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
251 14 Dtool_nJyocUmi 7 258 3925 2411 14 Dtool_nJyocUmi 535 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_subgraph
//       Access: Published
//  Description: Allocates and returns a complete copy of this
//               PandaNode and the entire scene graph rooted at this
//               PandaNode.  Some data may still be shared from the
//               original (e.g. vertex index tables), but nothing that
//               will impede normal use of the PandaNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
252 14 Dtool_nJyoFYnx 7 258 3925 2411 14 Dtool_nJyoFYnx 535 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_subgraph
//       Access: Published
//  Description: Allocates and returns a complete copy of this
//               PandaNode and the entire scene graph rooted at this
//               PandaNode.  Some data may still be shared from the
//               original (e.g. vertex index tables), but nothing that
//               will impede normal use of the PandaNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
253 14 Dtool_nJyoDEly 7 259 3925 2411 14 Dtool_nJyoDEly 613 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::__copy__
//       Access: Published
//  Description: A special Python method that is invoked by
//               copy.copy(node).  Unlike the PandaNode copy
//               constructor, which creates a new node without
//               children, this shares child pointers (essentially
//               making every child an instance).  This is intended to
//               simulate the behavior of copy.copy() for other
//               objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
254 14 Dtool_nJyokWM2 6 260 3891 0 14 Dtool_nJyokWM2 428 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::__deepcopy__
//       Access: Published
//  Description: A special Python method that is invoked by
//               copy.deepcopy(node).  This calls copy_subgraph()
//               unless the node is already present in the provided
//               dictionary.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  4 self 1 3891  4 memo 1 3891  
255 14 Dtool_nJyoQZtc 6 261 3889 0 14 Dtool_nJyoQZtc 1023 // Filename: pandaNode.I
// Created by:  drose (20Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_parents
//       Access: Published
//  Description: Returns the number of parent nodes this node has.  If
//               this number is greater than 1, the node has been
//               multiply instanced.  The order of the parent nodes is
//               not meaningful and is not related to the order in
//               which the node was instanced to them.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
256 14 Dtool_nJyoI9bH 6 261 3889 0 14 Dtool_nJyoI9bH 1023 // Filename: pandaNode.I
// Created by:  drose (20Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_parents
//       Access: Published
//  Description: Returns the number of parent nodes this node has.  If
//               this number is greater than 1, the node has been
//               multiply instanced.  The order of the parent nodes is
//               not meaningful and is not related to the order in
//               which the node was instanced to them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
257 14 Dtool_nJyoLi8_ 7 262 3925 2411 14 Dtool_nJyoLi8_ 474 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_parent
//       Access: Published
//  Description: Returns the nth parent node of this node.  See
//               get_num_parents().  Also see get_parents(), if your
//               intention is to iterate through the complete list of
//               parents; get_parents() is preferable in this case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  1 n 1 3889  14 current_thread 1 3928  
258 14 Dtool_nJyoh0xF 7 262 3925 2411 14 Dtool_nJyoh0xF 474 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_parent
//       Access: Published
//  Description: Returns the nth parent node of this node.  See
//               get_num_parents().  Also see get_parents(), if your
//               intention is to iterate through the complete list of
//               parents; get_parents() is preferable in this case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  1 n 1 3889  
259 14 Dtool_nJyoJ9Xm 6 263 3889 0 14 Dtool_nJyoJ9Xm 325 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_parent
//       Access: Published
//  Description: Returns the index of the indicated parent node, if it
//               is a parent, or -1 if it is not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  4 node 1 3925  14 current_thread 1 3928  
260 14 Dtool_nJyoMWG_ 6 263 3889 0 14 Dtool_nJyoMWG_ 325 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_parent
//       Access: Published
//  Description: Returns the index of the indicated parent node, if it
//               is a parent, or -1 if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  4 node 1 3925  
261 14 Dtool_nJyo_i8R 6 264 3889 0 14 Dtool_nJyo_i8R 489 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes this node has.  The
//               order of the child nodes *is* meaningful and is based
//               on the sort number that was passed to add_child(),
//               and also on the order in which the nodes were added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
262 14 Dtool_nJyo78Bo 6 264 3889 0 14 Dtool_nJyo78Bo 489 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_children
//       Access: Published
//  Description: Returns the number of child nodes this node has.  The
//               order of the child nodes *is* meaningful and is based
//               on the sort number that was passed to add_child(),
//               and also on the order in which the nodes were added.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
263 14 Dtool_nJyowRT3 7 265 3925 2411 14 Dtool_nJyowRT3 476 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child
//       Access: Published
//  Description: Returns the nth child node of this node.  See
//               get_num_children().  Also see get_children(), if your
//               intention is to iterate through the complete list of
//               children; get_children() is preferable in this case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  1 n 1 3889  14 current_thread 1 3928  
264 14 Dtool_nJyokZg9 7 265 3925 2411 14 Dtool_nJyokZg9 476 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child
//       Access: Published
//  Description: Returns the nth child node of this node.  See
//               get_num_children().  Also see get_children(), if your
//               intention is to iterate through the complete list of
//               children; get_children() is preferable in this case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  1 n 1 3889  
265 14 Dtool_nJyokRF6 6 266 3889 0 14 Dtool_nJyokRF6 395 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child_sort
//       Access: Published
//  Description: Returns the sort index of the nth child node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_children().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  1 n 1 3889  14 current_thread 1 3928  
266 14 Dtool_nJyoMzeG 6 266 3889 0 14 Dtool_nJyoMzeG 395 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_child_sort
//       Access: Published
//  Description: Returns the sort index of the nth child node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_children().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  1 n 1 3889  
267 14 Dtool_nJyokP7k 6 267 3889 0 14 Dtool_nJyokP7k 322 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_child
//       Access: Published
//  Description: Returns the index of the indicated child node, if it
//               is a child, or -1 if it is not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  4 node 1 3925  14 current_thread 1 3928  
268 14 Dtool_nJyoKHuN 6 267 3889 0 14 Dtool_nJyoKHuN 322 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_child
//       Access: Published
//  Description: Returns the index of the indicated child node, if it
//               is a child, or -1 if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  4 node 1 3925  
269 14 Dtool_nJyoVcTo 6 268 3889 0 14 Dtool_nJyoVcTo 299 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::count_num_descendants
//       Access: Published
//  Description: Returns the number of nodes at and below this level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
270 14 Dtool_nJyo1AGw 4 269 3890 0 14 Dtool_nJyo1AGw 567 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_child
//       Access: Published
//  Description: Adds a new child to the node.  The child is added in
//               the relative position indicated by sort; if all
//               children have the same sort index, the child is added
//               at the end.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3925  10 child_node 1 3925  4 sort 1 3889  14 current_thread 1 3928  
271 14 Dtool_nJyoA9tQ 4 269 3890 0 14 Dtool_nJyoA9tQ 567 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_child
//       Access: Published
//  Description: Adds a new child to the node.  The child is added in
//               the relative position indicated by sort; if all
//               children have the same sort index, the child is added
//               at the end.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  10 child_node 1 3925  4 sort 1 3889  
272 14 Dtool_nJyo27ri 4 269 3890 0 14 Dtool_nJyo27ri 567 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_child
//       Access: Published
//  Description: Adds a new child to the node.  The child is added in
//               the relative position indicated by sort; if all
//               children have the same sort index, the child is added
//               at the end.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  10 child_node 1 3925  
273 14 Dtool_nJyoGA1V 6 270 3866 0 14 Dtool_nJyoGA1V 475 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the indicated child from the node.  Returns
//               true if the child was removed, false if it was not
//               already a child of the node.  This will also
//               successfully remove the child if it had been stashed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  10 child_node 1 3925  14 current_thread 1 3928  
274 14 Dtool_nJyozFZb 6 270 3866 0 14 Dtool_nJyozFZb 475 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the indicated child from the node.  Returns
//               true if the child was removed, false if it was not
//               already a child of the node.  This will also
//               successfully remove the child if it had been stashed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  10 child_node 1 3925  
275 14 Dtool_nJyoQQCt 4 270 3890 0 14 Dtool_nJyoQQCt 259 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the nth child from the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  11 child_index 1 3889  14 current_thread 1 3928  
276 14 Dtool_nJyoDqN1 4 270 3890 0 14 Dtool_nJyoDqN1 259 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_child
//       Access: Published
//  Description: Removes the nth child from the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  11 child_index 1 3889  
277 14 Dtool_nJyoAkgX 6 271 3866 0 14 Dtool_nJyoAkgX 513 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_child
//       Access: Published
//  Description: Searches for the orig_child node in the node's list
//               of children, and replaces it with the new_child
//               instead.  Returns true if the replacement is made, or
//               false if the node is not a child or if there is some
//               other problem.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3925  10 orig_child 1 3925  9 new_child 1 3925  14 current_thread 1 3928  
278 14 Dtool_nJyogW5Y 6 271 3866 0 14 Dtool_nJyogW5Y 513 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_child
//       Access: Published
//  Description: Searches for the orig_child node in the node's list
//               of children, and replaces it with the new_child
//               instead.  Returns true if the replacement is made, or
//               false if the node is not a child or if there is some
//               other problem.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  10 orig_child 1 3925  9 new_child 1 3925  
279 14 Dtool_nJyotzoI 6 272 3866 0 14 Dtool_nJyotzoI 919 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  10 child_node 1 3925  14 current_thread 1 3928  
280 14 Dtool_nJyojC1w 6 272 3866 0 14 Dtool_nJyojC1w 919 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  10 child_node 1 3925  
281 14 Dtool_nJyoVnZH 4 272 3890 0 14 Dtool_nJyoVnZH 787 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  11 child_index 1 3889  14 current_thread 1 3928  
282 14 Dtool_nJyorWqz 4 272 3890 0 14 Dtool_nJyorWqz 787 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::stash_child
//       Access: Published
//  Description: Stashes the indicated child node.  This removes the
//               child from the list of active children and puts it on
//               a special list of stashed children.  This child node
//               no longer contributes to the bounding volume of the
//               PandaNode, and is not visited in normal traversals.
//               It is invisible and uncollidable.  The child may
//               later be restored by calling unstash_child().
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  11 child_index 1 3889  
283 14 Dtool_nJyoQNEb 6 273 3866 0 14 Dtool_nJyoQNEb 885 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  10 child_node 1 3925  14 current_thread 1 3928  
284 14 Dtool_nJyoqJGM 6 273 3866 0 14 Dtool_nJyoqJGM 885 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This function returns true if the child node was
//               successfully stashed, or false if it was not a child
//               of the node in the first place (e.g. it was
//               previously stashed).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  10 child_node 1 3925  
285 14 Dtool_nJyosIFB 4 273 3890 0 14 Dtool_nJyosIFB 753 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  13 stashed_index 1 3889  14 current_thread 1 3928  
286 14 Dtool_nJyoeWxF 4 273 3890 0 14 Dtool_nJyoeWxF 753 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::unstash_child
//       Access: Published
//  Description: Returns the indicated stashed node to normal child
//               status.  This removes the child from the list of
//               stashed children and puts it on the normal list of
//               active children.  This child node once again
//               contributes to the bounding volume of the PandaNode,
//               and will be visited in normal traversals.  It is
//               visible and collidable.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  13 stashed_index 1 3889  
287 14 Dtool_nJyoGnOV 6 274 3889 0 14 Dtool_nJyoGnOV 416 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_stashed
//       Access: Published
//  Description: Returns the number of stashed nodes this node has.
//               These are former children of the node that have been
//               moved to the special stashed list via stash_child().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
288 14 Dtool_nJyoOR8_ 6 274 3889 0 14 Dtool_nJyoOR8_ 416 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_num_stashed
//       Access: Published
//  Description: Returns the number of stashed nodes this node has.
//               These are former children of the node that have been
//               moved to the special stashed list via stash_child().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
289 14 Dtool_nJyonMF3 7 275 3925 2411 14 Dtool_nJyonMF3 503 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed
//       Access: Published
//  Description: Returns the nth stashed child of this node.  See
//               get_num_stashed().  Also see get_stashed(), if your
//               intention is to iterate through the complete list of
//               stashed children; get_stashed() is preferable in this
//               case.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  1 n 1 3889  14 current_thread 1 3928  
290 14 Dtool_nJyok8qw 7 275 3925 2411 14 Dtool_nJyok8qw 503 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed
//       Access: Published
//  Description: Returns the nth stashed child of this node.  See
//               get_num_stashed().  Also see get_stashed(), if your
//               intention is to iterate through the complete list of
//               stashed children; get_stashed() is preferable in this
//               case.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  1 n 1 3889  
291 14 Dtool_nJyodx9j 6 276 3889 0 14 Dtool_nJyodx9j 398 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed_sort
//       Access: Published
//  Description: Returns the sort index of the nth stashed node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_stashed().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  1 n 1 3889  14 current_thread 1 3928  
292 14 Dtool_nJyoE1FX 6 276 3889 0 14 Dtool_nJyoE1FX 398 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_stashed_sort
//       Access: Published
//  Description: Returns the sort index of the nth stashed node of this
//               node (that is, the number that was passed to
//               add_child()).  See get_num_stashed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  1 n 1 3889  
293 14 Dtool_nJyolSwr 6 277 3889 0 14 Dtool_nJyolSwr 334 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_stashed
//       Access: Published
//  Description: Returns the index of the indicated stashed node, if
//               it is a stashed child, or -1 if it is not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  4 node 1 3925  14 current_thread 1 3928  
294 14 Dtool_nJyoyw9C 6 277 3889 0 14 Dtool_nJyoyw9C 334 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::find_stashed
//       Access: Published
//  Description: Returns the index of the indicated stashed node, if
//               it is a stashed child, or -1 if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  4 node 1 3925  
295 14 Dtool_nJyoQwdX 4 278 3890 0 14 Dtool_nJyoQwdX 675 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_stashed
//       Access: Published
//  Description: Adds a new child to the node, directly as a stashed
//               child.  The child is not added in the normal sense,
//               but will be revealed if unstash_child() is called on
//               it later.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3925  10 child_node 1 3925  4 sort 1 3889  14 current_thread 1 3928  
296 14 Dtool_nJyoXQ0n 4 278 3890 0 14 Dtool_nJyoXQ0n 675 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_stashed
//       Access: Published
//  Description: Adds a new child to the node, directly as a stashed
//               child.  The child is not added in the normal sense,
//               but will be revealed if unstash_child() is called on
//               it later.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  10 child_node 1 3925  4 sort 1 3889  
297 14 Dtool_nJyoswLI 4 278 3890 0 14 Dtool_nJyoswLI 675 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::add_stashed
//       Access: Published
//  Description: Adds a new child to the node, directly as a stashed
//               child.  The child is not added in the normal sense,
//               but will be revealed if unstash_child() is called on
//               it later.
//
//               If the same child is added to a node more than once,
//               the previous instance is first removed.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  10 child_node 1 3925  
298 14 Dtool_nJyouXWn 4 279 3890 0 14 Dtool_nJyouXWn 269 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_stashed
//       Access: Published
//  Description: Removes the nth stashed child from the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  11 child_index 1 3889  14 current_thread 1 3928  
299 14 Dtool_nJyoZHe7 4 279 3890 0 14 Dtool_nJyoZHe7 269 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_stashed
//       Access: Published
//  Description: Removes the nth stashed child from the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  11 child_index 1 3889  
300 14 Dtool_nJyoQp5s 4 280 3890 0 14 Dtool_nJyoQp5s 428 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_all_children
//       Access: Published
//  Description: Removes all the children from the node at once,
//               including stashed children.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  14 current_thread 1 3928  
301 14 Dtool_nJyobyap 4 280 3890 0 14 Dtool_nJyobyap 428 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::remove_all_children
//       Access: Published
//  Description: Removes all the children from the node at once,
//               including stashed children.
//
//               This can only be called from the top pipeline stage
//               (i.e. from App).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3925  
302 14 Dtool_nJyoNzAL 4 281 3890 0 14 Dtool_nJyoNzAL 436 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node onto this
//               node.
//
//               Any NodePaths to child nodes of the other node are
//               truncated, rather than moved to the new parent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  5 other 1 3925  14 current_thread 1 3928  
303 14 Dtool_nJyojgnr 4 281 3890 0 14 Dtool_nJyojgnr 436 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::steal_children
//       Access: Published
//  Description: Moves all the children from the other node onto this
//               node.
//
//               Any NodePaths to child nodes of the other node are
//               truncated, rather than moved to the new parent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  5 other 1 3925  
304 14 Dtool_nJyornCS 4 282 3890 0 14 Dtool_nJyornCS 329 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_children
//       Access: Published
//  Description: Makes another instance of all the children of the
//               other node, copying them to this node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  5 other 1 3925  14 current_thread 1 3928  
305 14 Dtool_nJyohfED 4 282 3890 0 14 Dtool_nJyohfED 329 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_children
//       Access: Published
//  Description: Makes another instance of all the children of the
//               other node, copying them to this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  5 other 1 3925  
306 14 Dtool_nJyo48Bd 4 283 3890 0 14 Dtool_nJyo48Bd 475 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  6 attrib 1 3901  8 override 1 3889  
307 14 Dtool_nJyoDD5k 4 283 3890 0 14 Dtool_nJyoDD5k 475 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  6 attrib 1 3901  
308 14 Dtool_nJyoaDfJ 7 284 3901 0 14 Dtool_nJyoaDfJ 538 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  4 type 1 3896  
309 14 Dtool_nJyoabHO 7 284 3901 0 14 Dtool_nJyoabHO 538 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  4 slot 1 3889  
310 14 Dtool_nJyo2W_P 6 285 3866 0 14 Dtool_nJyo2W_P 368 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  4 type 1 3896  
311 14 Dtool_nJyouInU 6 285 3866 0 14 Dtool_nJyouInU 368 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  4 slot 1 3889  
312 14 Dtool_nJyoDSEu 4 286 3890 0 14 Dtool_nJyoDSEu 451 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  4 type 1 3896  
313 14 Dtool_nJyoWqh9 4 286 3890 0 14 Dtool_nJyoWqh9 451 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  4 slot 1 3889  
314 14 Dtool_nJyoKWvI 4 287 3890 0 14 Dtool_nJyoKWvI 386 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  6 effect 1 3920  
315 14 Dtool_nJyo07Hl 7 288 3920 0 14 Dtool_nJyo07Hl 338 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  4 type 1 3896  
316 14 Dtool_nJyoI1nr 6 289 3866 0 14 Dtool_nJyoI1nr 365 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  4 type 1 3896  
317 14 Dtool_nJyoNUJ2 4 290 3890 0 14 Dtool_nJyoNUJ2 299 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  4 type 1 3896  
318 14 Dtool_nJyoemfK 4 291 3890 0 14 Dtool_nJyoemfK 620 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_state
//       Access: Published
//  Description: Sets the complete RenderState that will be applied to
//               all nodes at this level and below.  (The actual state
//               that will be applied to lower nodes is based on the
//               composition of RenderStates from above this node as
//               well).  This completely replaces whatever has been
//               set on this node via repeated calls to set_attrib().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  5 state 1 3910  14 current_thread 1 3928  
319 14 Dtool_nJyoGDjV 4 291 3890 0 14 Dtool_nJyoGDjV 620 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_state
//       Access: Published
//  Description: Sets the complete RenderState that will be applied to
//               all nodes at this level and below.  (The actual state
//               that will be applied to lower nodes is based on the
//               composition of RenderStates from above this node as
//               well).  This completely replaces whatever has been
//               set on this node via repeated calls to set_attrib().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  5 state 1 3910  
320 14 Dtool_nJyobxvz 7 292 3910 0 14 Dtool_nJyobxvz 533 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_state
//       Access: Published
//  Description: Returns the complete RenderState that will be applied
//               to all nodes at this level and below, as set on this
//               node.  This returns only the RenderState set on this
//               particular node, and has nothing to do with state
//               that might be inherited from above.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
321 14 Dtool_nJyoJocj 7 292 3910 0 14 Dtool_nJyoJocj 533 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_state
//       Access: Published
//  Description: Returns the complete RenderState that will be applied
//               to all nodes at this level and below, as set on this
//               node.  This returns only the RenderState set on this
//               particular node, and has nothing to do with state
//               that might be inherited from above.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
322 14 Dtool_nJyoIX0F 4 293 3890 0 14 Dtool_nJyoIX0F 438 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_state
//       Access: Published
//  Description: Resets this node to leave the render state alone.
//               Nodes at this level and below will once again inherit
//               their render state unchanged from the nodes above
//               this level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  14 current_thread 1 3928  
323 14 Dtool_nJyotySF 4 293 3890 0 14 Dtool_nJyotySF 438 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_state
//       Access: Published
//  Description: Resets this node to leave the render state alone.
//               Nodes at this level and below will once again inherit
//               their render state unchanged from the nodes above
//               this level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3925  
324 14 Dtool_nJyoCQ8C 4 294 3890 0 14 Dtool_nJyoCQ8C 433 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  7 effects 1 3922  14 current_thread 1 3928  
325 14 Dtool_nJyoxlpj 4 294 3890 0 14 Dtool_nJyoxlpj 433 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  7 effects 1 3922  
326 14 Dtool_nJyo8_I0 7 295 3922 0 14 Dtool_nJyo8_I0 308 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
327 14 Dtool_nJyo1WLf 7 295 3922 0 14 Dtool_nJyo1WLf 308 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
328 14 Dtool_nJyo6KSB 4 296 3890 0 14 Dtool_nJyo6KSB 267 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  14 current_thread 1 3928  
329 14 Dtool_nJyo6yPH 4 296 3890 0 14 Dtool_nJyo6yPH 267 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3925  
330 14 Dtool_nJyoqB_f 4 297 3890 0 14 Dtool_nJyoqB_f 402 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_transform
//       Access: Published
//  Description: Sets the transform that will be applied to this node
//               and below.  This defines a new coordinate space at
//               this point in the scene graph and below.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  9 transform 1 3864  14 current_thread 1 3928  
331 14 Dtool_nJyo55Ti 4 297 3890 0 14 Dtool_nJyo55Ti 402 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_transform
//       Access: Published
//  Description: Sets the transform that will be applied to this node
//               and below.  This defines a new coordinate space at
//               this point in the scene graph and below.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  9 transform 1 3864  
332 14 Dtool_nJyoJmGn 7 298 3864 0 14 Dtool_nJyoJmGn 435 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_transform
//       Access: Published
//  Description: Returns the transform that has been set on this
//               particular node.  This is not the net transform from
//               the root, but simply the transform on this particular
//               node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
333 14 Dtool_nJyoydH2 7 298 3864 0 14 Dtool_nJyoydH2 435 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_transform
//       Access: Published
//  Description: Returns the transform that has been set on this
//               particular node.  This is not the net transform from
//               the root, but simply the transform on this particular
//               node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
334 14 Dtool_nJyou6N3 4 299 3890 0 14 Dtool_nJyou6N3 303 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_transform
//       Access: Published
//  Description: Resets the transform on this node to the identity
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  14 current_thread 1 3928  
335 14 Dtool_nJyoEjK_ 4 299 3890 0 14 Dtool_nJyoEjK_ 303 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_transform
//       Access: Published
//  Description: Resets the transform on this node to the identity
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3925  
336 14 Dtool_nJyoou8E 4 300 3890 0 14 Dtool_nJyoou8E 436 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  9 transform 1 3864  14 current_thread 1 3928  
337 14 Dtool_nJyo_3nJ 4 300 3890 0 14 Dtool_nJyo_3nJ 436 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  9 transform 1 3864  
338 14 Dtool_nJyo01ew 7 301 3864 0 14 Dtool_nJyo01ew 365 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
339 14 Dtool_nJyor3cO 7 301 3864 0 14 Dtool_nJyor3cO 365 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
340 14 Dtool_nJyoCOg_ 4 302 3890 0 14 Dtool_nJyoCOg_ 444 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_prev_transform
//       Access: Published
//  Description: Resets the transform that represents this node's
//               "previous" position to the same as the current
//               transform.  This is not the same thing as clearing it
//               to identity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  14 current_thread 1 3928  
341 14 Dtool_nJyoGfcO 4 302 3890 0 14 Dtool_nJyoGfcO 444 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_prev_transform
//       Access: Published
//  Description: Resets the transform that represents this node's
//               "previous" position to the same as the current
//               transform.  This is not the same thing as clearing it
//               to identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3925  
342 14 Dtool_nJyoraRv 6 303 3866 0 14 Dtool_nJyoraRv 533 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_dirty_prev_transform
//       Access: Published
//  Description: Returns true if this node has the
//               _dirty_prev_transform flag set, which indicates its
//               _prev_transform is different from its _transform
//               value (in pipeline stage 0).  In this case, the node
//               will be visited by reset_prev_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
343 14 Dtool_nJyo_NX9 4 304 3890 0 14 Dtool_nJyo_NX9 533 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_all_prev_transform
//       Access: Published, Static
//  Description: Visits all nodes in the world with the
//               _dirty_prev_transform flag--that is, all nodes whose
//               _prev_transform is different from the _transform in
//               pipeline stage 0--and resets the _prev_transform to
//               be the same as _transform.
//////////////////////////////////////////////////////////////////// 1 14 current_thread 1 3928  
344 14 Dtool_nJyoSKY2 4 304 3890 0 14 Dtool_nJyoSKY2 533 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::reset_all_prev_transform
//       Access: Published, Static
//  Description: Visits all nodes in the world with the
//               _dirty_prev_transform flag--that is, all nodes whose
//               _prev_transform is different from the _transform in
//               pipeline stage 0--and resets the _prev_transform to
//               be the same as _transform.
//////////////////////////////////////////////////////////////////// 0 
345 14 Dtool_nJyoCAeo 4 305 3890 0 14 Dtool_nJyoCAeo 701 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3925  3 key 1 3924  5 value 1 3924  14 current_thread 1 3928  
346 14 Dtool_nJyoTNEJ 4 305 3890 0 14 Dtool_nJyoTNEJ 701 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  3 key 1 3924  5 value 1 3924  
347 14 Dtool_nJyoJI3z 6 306 3924 0 14 Dtool_nJyoJI3z 434 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  3 key 1 3924  14 current_thread 1 3928  
348 14 Dtool_nJyo5tVl 6 306 3924 0 14 Dtool_nJyo5tVl 434 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  3 key 1 3924  
349 14 Dtool_nJyodfX6 6 307 3866 0 14 Dtool_nJyodfX6 405 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  3 key 1 3924  14 current_thread 1 3928  
350 14 Dtool_nJyote2r 6 307 3866 0 14 Dtool_nJyote2r 405 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  3 key 1 3924  
351 14 Dtool_nJyonoMi 4 308 3890 0 14 Dtool_nJyonoMi 398 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  3 key 1 3924  14 current_thread 1 3928  
352 14 Dtool_nJyoiRPE 4 308 3890 0 14 Dtool_nJyoiRPE 398 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  3 key 1 3924  
353 14 Dtool_nJyonv2I 4 309 3890 0 14 Dtool_nJyonv2I 777 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_python_tag
//       Access: Published
//  Description: Associates an arbitrary Python object with a
//               user-defined key which is stored on the node.  This
//               is similar to set_tag(), except it can store any
//               Python object instead of just a string.  However, the
//               Python object is not recorded to a bam file.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  3 key 1 3924  5 value 1 3891  
354 14 Dtool_nJyo_RhW 6 310 3891 0 14 Dtool_nJyo_RhW 407 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_python_tag
//       Access: Published
//  Description: Retrieves the Python object that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns None.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  3 key 1 3924  
355 14 Dtool_nJyoCjBd 6 311 3866 0 14 Dtool_nJyoCjBd 410 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_python_tag
//       Access: Published
//  Description: Returns true if a Python object has been defined on
//               this node for the particular key (even if that object
//               is None), or false if no object has been set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  3 key 1 3924  
356 14 Dtool_nJyoCWBq 4 312 3890 0 14 Dtool_nJyoCWBq 444 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_python_tag
//       Access: Published
//  Description: Removes the Python object defined for this key on
//               this particular node.  After a call to
//               clear_python_tag(), has_python_tag() will return
//               false for the indicated key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  3 key 1 3924  
357 14 Dtool_nJyoUT5V 6 313 3866 0 14 Dtool_nJyoUT5V 324 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::has_tags
//       Access: Published
//  Description: Returns true if the node has any tags (or any Python
//               tags) at all, false if it has none.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
358 14 Dtool_nJyoxMQi 4 314 3890 0 14 Dtool_nJyoxMQi 460 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_tags
//       Access: Published
//  Description: Copies all of the tags stored on the other node onto
//               this node.  If a particular tag exists on both nodes,
//               the contents of this node's value is replaced by that
//               of the other.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  5 other 1 3925  
359 14 Dtool_nJyo3itg 4 315 3890 0 14 Dtool_nJyo3itg 660 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::list_tags
//       Access: Published
//  Description: Writes a list of all the tag keys assigned to the
//               node to the indicated stream.  Writes one instance of
//               the separator following each key (but does not write
//               a terminal separator).  The value associated with
//               each key is not written.
//
//               This is mainly for the benefit of the realtime user,
//               to see the list of all of the associated tag keys.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  3 out 1 3893  9 separator 1 3924  
360 14 Dtool_nJyocRES 4 315 3890 0 14 Dtool_nJyocRES 660 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::list_tags
//       Access: Published
//  Description: Writes a list of all the tag keys assigned to the
//               node to the indicated stream.  Writes one instance of
//               the separator following each key (but does not write
//               a terminal separator).  The value associated with
//               each key is not written.
//
//               This is mainly for the benefit of the realtime user,
//               to see the list of all of the associated tag keys.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  3 out 1 3893  
361 14 Dtool_nJyo5bPJ 6 316 3889 0 14 Dtool_nJyo5bPJ 643 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::compare_tags
//       Access: Published
//  Description: Returns a number less than 0, 0, or greater than 0,
//               to indicate the similarity of tags between this node
//               and the other one.  If this returns 0, the tags are
//               identical.  If it returns other than 0, then the tags
//               are different; and the nodes may be sorted into a
//               consistent (but arbitrary) ordering based on this
//               number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  5 other 1 3926  
362 14 Dtool_nJyoPMTU 4 317 3890 0 14 Dtool_nJyoPMTU 542 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::copy_all_properties
//       Access: Published
//  Description: Copies the TransformState, RenderState,
//               RenderEffects, tags, Python tags, and the show/hide
//               state from the other node onto this one.  Typically
//               this is used to prepare a node to replace another
//               node in the scene graph (also see replace_node()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  5 other 1 3925  
363 14 Dtool_nJyo5edC 4 318 3890 0 14 Dtool_nJyo5edC 976 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::replace_node
//       Access: Published
//  Description: Inserts this node into the scene graph in place of
//               the other one, and removes the other node.  All scene
//               graph attributes (TransformState, RenderState, etc.)
//               are copied to this node.  
//
//               All children are moved to this node, and removed from
//               the old node.  The new node is left in the same place
//               in the old node's parent's list of children.
//
//               Even NodePaths that reference the old node are
//               updated in-place to reference the new node instead.
//
//               This method is intended to be used to replace a node
//               of a given type in the scene graph with a node of a
//               different type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  5 other 1 3925  
364 14 Dtool_nJyohV2Y 4 320 3890 0 14 Dtool_nJyohV2Y 1028 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_unexpected_change
//       Access: Published
//  Description: Sets one or more of the PandaNode::UnexpectedChange
//               bits on, indicating that the corresponding property
//               should not change again on this node.  Once one of
//               these bits has been set, if the property changes, an
//               assertion failure will be raised, which is designed
//               to assist the developer in identifying the
//               troublesome code that modified the property
//               unexpectedly.
//
//               The input parameter is the union of bits that are to
//               be set.  To clear these bits later, use
//               clear_unexpected_change().
//
//               Since this is a developer debugging tool only, this
//               function does nothing in a production (NDEBUG) build.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  5 flags 1 3867  
365 14 Dtool_nJyo9YBk 6 321 3867 0 14 Dtool_nJyo9YBk 751 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_unexpected_change
//       Access: Published
//  Description: Returns nonzero if any of the bits in the input
//               parameter are set on this node, or zero if none of
//               them are set.  More specifically, this returns the
//               particular set of bits (masked by the input
//               parameter) that have been set on this node.  See
//               set_unexpected_change().
//
//               Since this is a developer debugging tool only, this
//               function always returns zero in a production (NDEBUG)
//               build.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  5 flags 1 3867  
366 14 Dtool_nJyoDKYD 4 322 3890 0 14 Dtool_nJyoDKYD 700 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_unexpected_change
//       Access: Published
//  Description: Sets one or more of the PandaNode::UnexpectedChange
//               bits off, indicating that the corresponding property
//               may once again change on this node.  See
//               set_unexpected_change().
//
//               The input parameter is the union of bits that are to
//               be cleared.
//
//               Since this is a developer debugging tool only, this
//               function does nothing in a production (NDEBUG) build.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  5 flags 1 3867  
367 14 Dtool_nJyoMVSB 7 323 3931 0 14 Dtool_nJyoMVSB 457 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_overall_bit
//       Access: Published, Static
//  Description: Returns the special bit that, when specifically
//               cleared in the node's DrawMask, indicates that the
//               node is hidden to all cameras, regardless of the
//               remaining DrawMask bits.
//////////////////////////////////////////////////////////////////// 0 
368 14 Dtool_nJyoD1n5 7 324 3931 0 14 Dtool_nJyoD1n5 323 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_all_camera_mask
//       Access: Published, Static
//  Description: Returns a DrawMask that is appropriate for rendering
//               to all cameras.
//////////////////////////////////////////////////////////////////// 0 
369 14 Dtool_nJyoc4fq 6 325 3866 0 14 Dtool_nJyoc4fq 337 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_overall_hidden
//       Access: Published, Static
//  Description: Returns true if the node has been hidden to all
//               cameras by clearing its overall bit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
370 14 Dtool_nJyopN5m 4 326 3890 0 14 Dtool_nJyopN5m 750 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_overall_hidden
//       Access: Published
//  Description: Sets or clears the hidden flag.  When the hidden flag
//               is true, the node and all of its children are
//               invisible to all cameras, regardless of the setting
//               of any draw masks.  Setting the hidden flag to false
//               restores the previous visibility as established by
//               the draw masks.
//
//               This actually works by twiddling the reserved
//               _overall_bit in the node's draw mask, which has
//               special meaning.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  14 overall_hidden 1 3866  
371 14 Dtool_nJyodFVQ 4 327 3890 0 14 Dtool_nJyodFVQ 1941 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::adjust_draw_mask
//       Access: Published
//  Description: Adjusts the hide/show bits of this particular node.
//
//               These three parameters can be used to adjust the
//               _draw_control_mask and _draw_show_mask independently,
//               which work together to provide per-camera visibility
//               for the node and its descendents.
//
//               _draw_control_mask indicates the bits in
//               _draw_show_mask that are significant.  Each different
//               bit corresponds to a different camera (and these bits
//               are assigned via Camera::set_camera_mask()).
//
//               Where _draw_control_mask has a 1 bit, a 1 bit in
//               _draw_show_mask indicates the node is visible to that
//               camera, and a 0 bit indicates the node is hidden to
//               that camera.  Where _draw_control_mask is 0, the node
//               is hidden only if a parent node is hidden.
//
//               The meaning of the three parameters is as follows:
//
//               * Wherever show_mask is 1, _draw_show_mask and
//               _draw_control_mask will be set 1.  Thus, show_mask
//               indicates the set of cameras to which the node should
//               be shown.
//
//               * Wherever hide_mask is 1, _draw_show_mask will be
//               set 0 and _draw_control_mask will be set 1.  Thus,
//               hide_mask indicates the set of cameras from which the
//               node should be hidden.
//
//               * Wherever clear_mask is 1, _draw_control_mask will
//               be set 0.  Thus, clear_mask indicates the set of
//               cameras from which the hidden state should be
//               inherited from a parent.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3925  9 show_mask 1 3931  9 hide_mask 1 3931  10 clear_mask 1 3931  
372 14 Dtool_nJyoaVGC 7 328 3931 0 14 Dtool_nJyoaVGC 347 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in draw_show_mask that are
//               considered meaningful.  See adjust_draw_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
373 14 Dtool_nJyokxUA 7 329 3931 0 14 Dtool_nJyokxUA 321 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_draw_show_mask
//       Access: Published
//  Description: Returns the hide/show bits of this particular node.
//               See adjust_draw_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
374 14 Dtool_nJyoVZQn 7 330 3931 0 14 Dtool_nJyoVZQn 681 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_control_mask
//       Access: Published
//  Description: Returns the set of bits in get_net_draw_show_mask()
//               that have been explicitly set via adjust_draw_mask(),
//               rather than implicitly inherited.
//
//               A 1 bit in any position of this mask indicates that
//               (a) this node has renderable children, and (b) some
//               child of this node has made an explicit hide() or
//               show_through() call for the corresponding bit.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
375 14 Dtool_nJyothHn 7 331 3931 0 14 Dtool_nJyothHn 943 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_draw_show_mask
//       Access: Published
//  Description: Returns the union of all draw_show_mask values--of
//               renderable nodes only--at this level and below.  If
//               any bit in this mask is 0, there is no reason to
//               traverse below this node for a camera with the
//               corresponding camera_mask.
//
//               The bits in this mask that do not correspond to a 1
//               bit in the net_draw_control_mask are meaningless (and
//               will be set to 1).  For bits that *do* correspond to
//               a 1 bit in the net_draw_control_mask, a 1 bit
//               indicates that at least one child should be visible,
//               while a 0 bit indicates that all children are hidden.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
376 14 Dtool_nJyoAdj3 4 332 3890 0 14 Dtool_nJyoAdj3 882 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_into_collide_mask
//       Access: Published
//  Description: Sets the "into" CollideMask.  
//
//               This specifies the set of bits that must be shared
//               with a CollisionNode's "from" CollideMask in order
//               for the CollisionNode to detect a collision with this
//               particular node.
//
//               The actual CollideMask that will be set is masked by
//               the return value from get_legal_collide_mask().
//               Thus, the into_collide_mask cannot be set to anything
//               other than nonzero except for those types of nodes
//               that can be collided into, such as CollisionNodes and
//               GeomNodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  4 mask 1 3931  
377 14 Dtool_nJyoc3Cf 7 333 3931 0 14 Dtool_nJyoc3Cf 278 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_into_collide_mask
//       Access: Published
//  Description: Returns the "into" collide mask for this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
378 14 Dtool_nJyotnOA 7 334 3931 0 14 Dtool_nJyotnOA 618 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_legal_collide_mask
//       Access: Published, Virtual
//  Description: Returns the subset of CollideMask bits that may be
//               set for this particular type of PandaNode.  For most
//               nodes, this is 0; it doesn't make sense to set a
//               CollideMask for most kinds of nodes.
//
//               For nodes that can be collided with, such as GeomNode
//               and CollisionNode, this returns all bits on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
379 14 Dtool_nJyoBjl_ 7 335 3931 0 14 Dtool_nJyoBjl_ 346 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_collide_mask
//       Access: Published
//  Description: Returns the union of all into_collide_mask() values
//               set at CollisionNodes at this level and below.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
380 14 Dtool_nJyo4l_T 7 335 3931 0 14 Dtool_nJyo4l_T 346 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_net_collide_mask
//       Access: Published
//  Description: Returns the union of all into_collide_mask() values
//               set at CollisionNodes at this level and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
381 14 Dtool_nJyoK84o 7 336 3901 0 14 Dtool_nJyoK84o 395 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_off_clip_planes
//       Access: Published
//  Description: Returns a ClipPlaneAttrib which represents the union
//               of all of the clip planes that have been turned *off*
//               at this level and below.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
382 14 Dtool_nJyoIxkn 7 336 3901 0 14 Dtool_nJyoIxkn 395 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_off_clip_planes
//       Access: Published
//  Description: Returns a ClipPlaneAttrib which represents the union
//               of all of the clip planes that have been turned *off*
//               at this level and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
383 14 Dtool_nJyo9vAT 4 337 3890 0 14 Dtool_nJyo9vAT 849 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::prepare_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at this node,
//               and does whatever initialization is required to
//               render the scene properly with the indicated GSG.  It
//               is not strictly necessary to call this, since the GSG
//               will initialize itself when the scene is rendered,
//               but this may take some of the overhead away from that
//               process.
//
//               In particular, this will ensure that textures within
//               the scene are loaded in texture memory, and display
//               lists are built up from static geometry.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3925  3 gsg 1 3932  9 net_state 1 3910  
384 14 Dtool_nJyohUEh 6 338 3866 0 14 Dtool_nJyohUEh 431 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_scene_root
//       Access: Published
//  Description: Returns true if this particular node is known to be
//               the render root of some active DisplayRegion
//               associated with the global GraphicsEngine, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
385 14 Dtool_nJyoUA6g 6 339 3866 0 14 Dtool_nJyoUA6g 601 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_under_scene_root
//       Access: Published
//  Description: Returns true if this particular node is in a live
//               scene graph: that is, it is a child or descendent of
//               a node that is itself a scene root.  If this is true,
//               this node may potentially be traversed by the render
//               traverser.  Stashed nodes don't count for this
//               purpose, but hidden nodes do.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
386 14 Dtool_nJyoW23T 4 340 3890 0 14 Dtool_nJyoW23T 226 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  3 out 1 3893  
387 14 Dtool_nJyoSz8K 4 341 3890 0 14 Dtool_nJyoSz8K 225 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  3 out 1 3893  12 indent_level 1 3889  
388 14 Dtool_nJyopBSg 4 342 3890 0 14 Dtool_nJyopBSg 295 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::ls
//       Access: Published
//  Description: Lists all the nodes at and below the current path
//               hierarchically.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  3 out 1 3893  12 indent_level 1 3889  
389 14 Dtool_nJyob2UJ 4 343 3890 0 14 Dtool_nJyob2UJ 1042 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bounds_type
//       Access: Published
//  Description: Specifies the desired type of bounding volume that
//               will be created for this node.  This is normally
//               BoundingVolume::BT_default, which means to set the
//               type according to the config variable "bounds-type".
//
//               If this is BT_sphere or BT_box, a BoundingSphere or
//               BoundingBox is explicitly created.  If it is BT_best,
//               the appropriate type to best enclose the node's
//               children is created.
//
//               This affects the bounding volume returned by
//               get_bounds(), which is not exactly the same bounding
//               volume modified by set_bounds(), because a new
//               bounding volume has to be created that includes this
//               node and all of its children.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  11 bounds_type 1 3934  
390 14 Dtool_nJyo6V3e 6 344 3934 0 14 Dtool_nJyo6V3e 644 // A node has three bounding volumes: an "external" bounding volume
// that represents the node and all of its children, an "internal"
// bounding volume which represents only the node itself (and is
// usually empty, unless a specific node type sets it otherwise),
// and a "user" bounding volume which is specified by the user.
// We define set_bounds() and get_bounds() functions so that
// set_bounds() sets the user bounding volume, while get_bounds()
// returns the external bounding volume.  Although it might seem
// strange and confusing to do this, this is actually the natural
// way the user thinks about nodes and bounding volumes. 1 4 this 3 3926  
391 14 Dtool_nJyoAQ3k 4 345 3890 0 14 Dtool_nJyoAQ3k 806 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bounds
//       Access: Published
//  Description: Resets the bounding volume so that it is the
//               indicated volume.  When it is explicitly set, the
//               bounding volume will no longer be automatically
//               computed according to the contents of the node
//               itself, for nodes like GeomNodes and TextNodes that
//               contain substance (but the bounding volume will still
//               be automatically expanded to include its children).
//
//               Call clear_bounds() if you would like to return the
//               bounding volume to its default behavior later.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  6 volume 1 3936  
392 14 Dtool_nJyophxO 4 346 3890 0 14 Dtool_nJyophxO 258 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_bound
//       Access: Published
//  Description: Deprecated.  Use set_bounds() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  6 volume 1 3936  
393 14 Dtool_nJyozkwy 4 347 3890 0 14 Dtool_nJyozkwy 441 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::clear_bounds
//       Access: Published
//  Description: Reverses the effect of a previous call to
//               set_bounds(), and allows the node's bounding volume
//               to be automatically computed once more based on the
//               contents of the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3925  
394 14 Dtool_nJyoDKe6 7 348 3936 0 14 Dtool_nJyoDKe6 454 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: Returns the external bounding volume of this node: a
//               bounding volume that contains the user bounding
//               volume, the internal bounding volume, and all of the
//               children's bounding volumes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
395 14 Dtool_nJyo9E3v 7 348 3936 0 14 Dtool_nJyo9E3v 454 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: Returns the external bounding volume of this node: a
//               bounding volume that contains the user bounding
//               volume, the internal bounding volume, and all of the
//               children's bounding volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
396 14 Dtool_nJyomNRe 7 348 3936 0 14 Dtool_nJyomNRe 947 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: This flavor of get_bounds() return the external
//               bounding volume, and also fills in seq with the
//               bounding volume's current sequence number.  When this
//               sequence number changes, it indicates that the
//               bounding volume might have changed, e.g. because some
//               nested child's bounding volume has changed.
//
//               Although this might occasionally increment without
//               changing the bounding volume, the bounding volume
//               will never change without incrementing this counter,
//               so as long as this counter remains unchanged you can
//               be confident the bounding volume is also unchanged.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3926  3 seq 1 3938  14 current_thread 1 3928  
397 14 Dtool_nJyo9yDH 7 348 3936 0 14 Dtool_nJyo9yDH 947 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_bounds
//       Access: Published
//  Description: This flavor of get_bounds() return the external
//               bounding volume, and also fills in seq with the
//               bounding volume's current sequence number.  When this
//               sequence number changes, it indicates that the
//               bounding volume might have changed, e.g. because some
//               nested child's bounding volume has changed.
//
//               Although this might occasionally increment without
//               changing the bounding volume, the bounding volume
//               will never change without incrementing this counter,
//               so as long as this counter remains unchanged you can
//               be confident the bounding volume is also unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  3 seq 1 3938  
398 14 Dtool_nJyoauzv 6 349 3889 0 14 Dtool_nJyoauzv 744 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_nested_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this node and all of its descendents.
//
//               This is not necessarily an accurate count of vertices
//               that will actually be rendered, since this will
//               include all vertices of all LOD's, and it will also
//               include hidden nodes.  It may also omit or only
//               approximate certain kinds of dynamic geometry.
//               However, it will not include stashed nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
399 14 Dtool_nJyoRfeu 6 349 3889 0 14 Dtool_nJyoRfeu 744 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_nested_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this node and all of its descendents.
//
//               This is not necessarily an accurate count of vertices
//               that will actually be rendered, since this will
//               include all vertices of all LOD's, and it will also
//               include hidden nodes.  It may also omit or only
//               approximate certain kinds of dynamic geometry.
//               However, it will not include stashed nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
400 14 Dtool_nJyoxMGh 7 350 3936 0 14 Dtool_nJyoxMGh 502 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_bounds
//       Access: Published
//  Description: Returns the node's internal bounding volume.  This is
//               the bounding volume around the node alone, without
//               including children.  If the user has called
//               set_bounds(), it will be the specified bounding
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
401 14 Dtool_nJyojqxf 7 350 3936 0 14 Dtool_nJyojqxf 502 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_bounds
//       Access: Published
//  Description: Returns the node's internal bounding volume.  This is
//               the bounding volume around the node alone, without
//               including children.  If the user has called
//               set_bounds(), it will be the specified bounding
//               volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
402 14 Dtool_nJyoOmTK 6 351 3889 0 14 Dtool_nJyoOmTK 488 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this particular node alone, not
//               accounting for its children.
//
//               This may not include all vertices for certain dynamic
//               effects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
403 14 Dtool_nJyoxQZ2 6 351 3889 0 14 Dtool_nJyoxQZ2 488 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_internal_vertices
//       Access: Published
//  Description: Returns the total number of vertices that will be
//               rendered by this particular node alone, not
//               accounting for its children.
//
//               This may not include all vertices for certain dynamic
//               effects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
404 14 Dtool_nJyoIbN9 4 352 3890 0 14 Dtool_nJyoIbN9 926 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_bounds_stale
//       Access: Published
//  Description: Indicates that the bounding volume, or something that
//               influences the bounding volume (or any of the other
//               things stored in CData, like net_collide_mask),
//               may have changed for this node, and that it must be
//               recomputed.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               This method is intended for internal use; usually it
//               is not necessary for a user to call this directly.
//               It will be called automatically by derived classes
//               when appropriate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
405 14 Dtool_nJyoddK_ 4 352 3890 0 14 Dtool_nJyoddK_ 926 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_bounds_stale
//       Access: Published
//  Description: Indicates that the bounding volume, or something that
//               influences the bounding volume (or any of the other
//               things stored in CData, like net_collide_mask),
//               may have changed for this node, and that it must be
//               recomputed.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               This method is intended for internal use; usually it
//               is not necessary for a user to call this directly.
//               It will be called automatically by derived classes
//               when appropriate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
406 14 Dtool_nJyol4WP 4 353 3890 0 14 Dtool_nJyol4WP 822 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_internal_bounds_stale
//       Access: Published
//  Description: Should be called by a derived class to mark the
//               internal bounding volume stale, so that
//               compute_internal_bounds() will be called when the
//               bounding volume is next requested.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               It is normally not necessary to call this method
//               directly; each node should be responsible for calling
//               it when its internals have changed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  14 current_thread 1 3928  
407 14 Dtool_nJyopy5K 4 353 3890 0 14 Dtool_nJyopy5K 822 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::mark_internal_bounds_stale
//       Access: Published
//  Description: Should be called by a derived class to mark the
//               internal bounding volume stale, so that
//               compute_internal_bounds() will be called when the
//               bounding volume is next requested.
//
//               With no parameters, this means to iterate through all
//               stages including and upstream of the current pipeline
//               stage.
//
//               It is normally not necessary to call this method
//               directly; each node should be responsible for calling
//               it when its internals have changed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3925  
408 14 Dtool_nJyo8mxQ 6 354 3866 0 14 Dtool_nJyo8mxQ 457 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_bounds_stale
//       Access: Published
//  Description: Returns true if the bounding volume of this node is
//                stale and will be implicitly recomputed at the next
//                call to get_bounds(), or false if it is fresh and
//                need not be recomputed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
409 14 Dtool_nJyofUw8 4 355 3890 0 14 Dtool_nJyofUw8 995 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::set_final
//       Access: Published
//  Description: Sets the "final" flag on this PandaNode.  If
//               this is true, than no bounding volume need be tested
//               below it; a positive intersection with this node's
//               bounding volume is deemed to be a positive
//               intersection with all geometry inside.
//
//               This is useful to quickly force a larger bounding
//               volume around a node when the GeomNodes themselves
//               are inaccurate for some reason, without forcing a
//               recompute of every nested bounding volume.  It's also
//               helpful when the bounding volume is tricked by some
//               special properties, like billboards, that may move
//               geometry out of its bounding volume otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3925  4 flag 1 3866  
410 14 Dtool_nJyoitT8 6 356 3866 0 14 Dtool_nJyoitT8 429 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_final
//       Access: Published
//  Description: Returns the current state of the "final" flag.
//               Initially, this flag is off (false), but it may be
//               changed by an explicit call to set_final().  See
//               set_final().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
411 14 Dtool_nJyo8p0D 6 356 3866 0 14 Dtool_nJyo8p0D 429 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_final
//       Access: Published
//  Description: Returns the current state of the "final" flag.
//               Initially, this flag is off (false), but it may be
//               changed by an explicit call to set_final().  See
//               set_final().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
412 14 Dtool_nJyoxAx3 6 357 3866 0 14 Dtool_nJyoxAx3 570 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_geom_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from GeomNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(GeomNode::get_class_type()), since this
//               test is so important to rendering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
413 14 Dtool_nJyohW8z 6 358 3866 0 14 Dtool_nJyohW8z 504 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_lod_node
//       Access: Published, Virtual
//  Description: A simple downcast check.  Returns true if this kind
//               of node happens to inherit from LODNode, false
//               otherwise.
//
//               This is provided as a a faster alternative to calling
//               is_of_type(LODNode::get_class_type()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
414 14 Dtool_nJyobCbs 7 359 3940 3246 14 Dtool_nJyobCbs 379 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::as_light
//       Access: Published, Virtual
//  Description: Cross-casts the node to a Light pointer, if it is one
//               of the four kinds of Light nodes, or returns NULL if
//               it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3925  
415 14 Dtool_nJyoz1Gk 6 360 3866 0 14 Dtool_nJyoz1Gk 356 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::is_ambient_light
//       Access: Published, Virtual
//  Description: Returns true if this is an AmbientLight, false if it
//               is not a light, or it is some other kind of light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
416 14 Dtool_nJyooTW8 6 362 3889 0 14 Dtool_nJyooTW8 617 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_fancy_bits
//       Access: Published
//  Description: Returns the union of all of the enum FancyBits values
//               corresponding to the various "fancy" attributes that
//               are set on the node.  If this returns 0, the node has
//               nothing interesting about it.  This is intended to
//               speed traversal by quickly skipping past nodes that
//               don't particularly affect the render state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3926  14 current_thread 1 3928  
417 14 Dtool_nJyonxtb 6 362 3889 0 14 Dtool_nJyonxtb 617 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::get_fancy_bits
//       Access: Published
//  Description: Returns the union of all of the enum FancyBits values
//               corresponding to the various "fancy" attributes that
//               are set on the node.  If this returns 0, the node has
//               nothing interesting about it.  This is intended to
//               speed traversal by quickly skipping past nodes that
//               don't particularly affect the render state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3926  
418 14 Dtool_nJyoU_2M 7 363 3925 2411 14 Dtool_nJyoU_2M 819 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type PandaNode,
//               allowing for easier reference count management.  Note
//               that the caller is still responsible for maintaining
//               the reference count on the return value.
//////////////////////////////////////////////////////////////////// 2 4 data 1 3924  6 reader 1 3941  
419 14 Dtool_nJyovo58 7 363 3925 2411 14 Dtool_nJyovo58 819 ////////////////////////////////////////////////////////////////////
//     Function: PandaNode::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type PandaNode,
//               allowing for easier reference count management.  Note
//               that the caller is still responsible for maintaining
//               the reference count on the return value.
//////////////////////////////////////////////////////////////////// 1 4 data 1 3924  
420 14 Dtool_nJyo6Ap_ 7 364 3896 0 14 Dtool_nJyo6Ap_ 0 0 
421 14 Dtool_nJyoEBYy 6 244 3943 0 14 Dtool_nJyoEBYy 0 1 4 this 3 3925  
422 14 Dtool_nJyovIpo 7 245 3925 2411 14 Dtool_nJyovIpo 0 1 4 this 3 3943  
423 14 Dtool_nJyojprb 6 247 3944 0 14 Dtool_nJyojprb 0 1 4 this 3 3925  
424 14 Dtool_nJyoPzAU 7 248 3925 2411 14 Dtool_nJyoPzAU 0 1 4 this 3 3944  
425 14 Dtool_nJyoX_n6 6 250 3945 0 14 Dtool_nJyoX_n6 0 1 4 this 3 3925  
426 14 Dtool_nJyoKjNt 7 251 3925 2411 14 Dtool_nJyoKjNt 0 1 4 this 3 3945  
427 14 Dtool_nJyogdrc 7 253 3946 0 14 Dtool_nJyogdrc 0 1 4 this 3 3925  
428 14 Dtool_nJyoMVvF 7 367 3901 0 14 Dtool_nJyoMVvF 275 ////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TransparencyAttrib object.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3748  
429 14 Dtool_nJyo6IgE 7 368 3901 0 14 Dtool_nJyo6IgE 405 ////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
430 14 Dtool_nJyorW44 6 369 3748 0 14 Dtool_nJyorW44 258 ////////////////////////////////////////////////////////////////////
//     Function: TransparencyAttrib::get_mode
//       Access: Published
//  Description: Returns the transparency mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3947  
431 14 Dtool_nJyoOcs2 6 370 3889 0 14 Dtool_nJyoOcs2 0 0 
432 14 Dtool_nJyo2mWN 7 371 3896 0 14 Dtool_nJyo2mWN 0 0 
433 14 Dtool_nJyodx9g 7 375 3949 2863 14 Dtool_nJyodx9g 761 // Filename: nodePath.I
// Created by:  drose (25Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: NodePath::Default Constructor
//       Access: Published
//  Description: This constructs an empty NodePath with no nodes.
//////////////////////////////////////////////////////////////////// 0 
434 14 Dtool_nJyoJaJj 7 375 3949 2863 14 Dtool_nJyoJaJj 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3950  
435 14 Dtool_nJyovecb 7 375 3949 2863 14 Dtool_nJyovecb 448 // ***End temporary transition code for operator bool
////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: Constructs a NodePath with the indicated parent
//               NodePath and child node; the child node must be a
//               stashed or unstashed child of the parent.
//////////////////////////////////////////////////////////////////// 3 6 parent 1 3950  10 child_node 1 3925  14 current_thread 1 3928  
436 14 Dtool_nJyonAhm 7 375 3949 2863 14 Dtool_nJyonAhm 448 // ***End temporary transition code for operator bool
////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: Constructs a NodePath with the indicated parent
//               NodePath and child node; the child node must be a
//               stashed or unstashed child of the parent.
//////////////////////////////////////////////////////////////////// 2 6 parent 1 3950  10 child_node 1 3925  
437 14 Dtool_nJyoGF9J 7 375 3949 2863 14 Dtool_nJyoGF9J 670 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a NodePath for the indicated node.
//               If the node does not have any parents, this creates a
//               singleton NodePath; otherwise, it automatically finds
//               the path from the node to the root.  If the node has
//               multiple paths to the root, one path is chosen
//               arbitrarily and a warning message is printed (but see
//               also NodePath::any_path(), below).
//////////////////////////////////////////////////////////////////// 2 4 node 1 3925  14 current_thread 1 3928  
438 14 Dtool_nJyoH4wM 7 375 3949 2863 14 Dtool_nJyoH4wM 670 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a NodePath for the indicated node.
//               If the node does not have any parents, this creates a
//               singleton NodePath; otherwise, it automatically finds
//               the path from the node to the root.  If the node has
//               multiple paths to the root, one path is chosen
//               arbitrarily and a warning message is printed (but see
//               also NodePath::any_path(), below).
//////////////////////////////////////////////////////////////////// 1 4 node 1 3925  
439 14 Dtool_nJyoAFt_ 7 375 3949 2863 14 Dtool_nJyoAFt_ 376 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a new NodePath with a single
//               node.  An ordinary, unattached PandaNode is created
//               with the indicated name.
//////////////////////////////////////////////////////////////////// 2 13 top_node_name 1 3924  14 current_thread 1 3928  
440 14 Dtool_nJyoH_EQ 7 375 3949 2863 14 Dtool_nJyoH_EQ 376 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Constructor
//       Access: Published
//  Description: This constructs a new NodePath with a single
//               node.  An ordinary, unattached PandaNode is created
//               with the indicated name.
//////////////////////////////////////////////////////////////////// 1 13 top_node_name 1 3924  
441 14 Dtool_nJyoh5bc 7 376 3949 2863 14 Dtool_nJyoh5bc 531 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::any_path named constructor
//       Access: Published, Static
//  Description: Returns a new NodePath that represents any arbitrary
//               path from the root to the indicated node.  This is
//               the same thing that would be returned by
//               NodePath(node), except that no warning is issued if
//               the path is ambiguous.
//////////////////////////////////////////////////////////////////// 2 4 node 1 3925  14 current_thread 1 3928  
442 14 Dtool_nJyooGNf 7 376 3949 2863 14 Dtool_nJyooGNf 531 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::any_path named constructor
//       Access: Published, Static
//  Description: Returns a new NodePath that represents any arbitrary
//               path from the root to the indicated node.  This is
//               the same thing that would be returned by
//               NodePath(node), except that no warning is issued if
//               the path is ambiguous.
//////////////////////////////////////////////////////////////////// 1 4 node 1 3925  
443 14 Dtool_nJyorj60 6 377 3949 0 14 Dtool_nJyorj60 233 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 copy 1 3950  
444 14 Dtool_nJyoLNYF 7 378 3949 2863 14 Dtool_nJyoLNYF 505 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::__copy__
//       Access: Published
//  Description: A special Python method that is invoked by
//               copy.copy(node).  Unlike the NodePath copy
//               constructor, this makes a duplicate copy of the
//               underlying PandaNode (but shares children, instead of
//               copying them or omitting them).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
445 14 Dtool_nJyo9waX 6 379 3891 0 14 Dtool_nJyo9waX 423 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::__deepcopy__
//       Access: Published
//  Description: A special Python method that is invoked by
//               copy.deepcopy(np).  This calls copy_to() unless the
//               NodePath is already present in the provided
//               dictionary.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  4 self 1 3891  4 memo 1 3891  
446 14 Dtool_nJyoEvGb 6 380 3891 0 14 Dtool_nJyoEvGb 487 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 self 1 3891  
447 14 Dtool_nJyogaU9 6 381 3891 0 14 Dtool_nJyogaU9 704 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::__reduce_persist__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This is similar to __reduce__, but it provides
//               additional support for the missing persistent-state
//               object needed to properly support self-referential
//               BAM objects written to the pickle stream.  This hooks
//               into the pickle and cPickle modules implemented in
//               direct/src/stdpy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  4 self 1 3891  7 pickler 1 3891  
448 14 Dtool_nJyoH6GR 7 382 3949 2863 14 Dtool_nJyoH6GR 318 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::not_found named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_not_found error type
//               set.
//////////////////////////////////////////////////////////////////// 0 
449 14 Dtool_nJyocqkY 7 383 3949 2863 14 Dtool_nJyocqkY 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::removed named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_removed error type
//               set.
//////////////////////////////////////////////////////////////////// 0 
450 14 Dtool_nJyoKvgx 7 384 3949 2863 14 Dtool_nJyoKvgx 308 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::fail named constructor
//       Access: Published, Static
//  Description: Creates a NodePath with the ET_fail error type
//               set.
//////////////////////////////////////////////////////////////////// 0 
451 14 Dtool_nJyoF4FI 4 385 3890 0 14 Dtool_nJyoF4FI 1267 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_max_search_depth
//       Access: Published, Static
//  Description: Certain operations, such as find() or
//               find_all_matches(), require a traversal of the scene
//               graph to search for the target node or nodes.  This
//               traversal does not attempt to detect cycles, so an
//               arbitrary cap is set on the depth of the traversal as
//               a poor man's cycle detection, in the event that a
//               cycle has inadvertently been introduced into the
//               scene graph.
//
//               There may be other reasons you'd want to truncate a
//               search before the bottom of the scene graph has been
//               reached.  In any event, this function sets the limit
//               on the number of levels that a traversal will
//               continue, and hence the maximum length of a path that
//               may be returned by a traversal.
//
//               This is a static method, and so changing this
//               parameter affects all of the NodePaths in the
//               universe.
//////////////////////////////////////////////////////////////////// 1 16 max_search_depth 1 3889  
452 14 Dtool_nJyojBwf 6 386 3889 0 14 Dtool_nJyojBwf 336 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_max_search_depth
//       Access: Published, Static
//  Description: Returns the current setting of the search depth
//               limit.  See set_max_search_depth.
//////////////////////////////////////////////////////////////////// 0 
453 14 Dtool_nJyo6BVO 6 387 3866 0 14 Dtool_nJyo6BVO 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_empty
//       Access: Published
//  Description: Returns true if the NodePath contains no nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
454 14 Dtool_nJyofPMM 6 389 3866 0 14 Dtool_nJyofPMM 294 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_singleton
//       Access: Published
//  Description: Returns true if the NodePath contains exactly one
//               node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
455 14 Dtool_nJyonHP3 6 389 3866 0 14 Dtool_nJyonHP3 294 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_singleton
//       Access: Published
//  Description: Returns true if the NodePath contains exactly one
//               node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
456 14 Dtool_nJyodRIU 6 390 3889 0 14 Dtool_nJyodRIU 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_nodes
//       Access: Published
//  Description: Returns the number of nodes in the path.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
457 14 Dtool_nJyoMbn0 6 390 3889 0 14 Dtool_nJyoMbn0 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_nodes
//       Access: Published
//  Description: Returns the number of nodes in the path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
458 14 Dtool_nJyoOx_k 7 391 3925 2411 14 Dtool_nJyoOx_k 812 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_node
//       Access: Published
//  Description: Returns the nth node of the path, where 0 is the
//               referenced (bottom) node and get_num_nodes() - 1 is
//               the top node.  This requires iterating through the
//               path.
//
//               Also see node(), which is a convenience function to
//               return the same thing as get_node(0) (since the
//               bottom node is the most important node in the
//               NodePath, and is the one most frequently referenced).
//
//               Note that this function returns the same thing as
//               get_ancestor(index).node().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 index 1 3889  14 current_thread 1 3928  
459 14 Dtool_nJyo5Kz9 7 391 3925 2411 14 Dtool_nJyo5Kz9 812 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_node
//       Access: Published
//  Description: Returns the nth node of the path, where 0 is the
//               referenced (bottom) node and get_num_nodes() - 1 is
//               the top node.  This requires iterating through the
//               path.
//
//               Also see node(), which is a convenience function to
//               return the same thing as get_node(0) (since the
//               bottom node is the most important node in the
//               NodePath, and is the one most frequently referenced).
//
//               Note that this function returns the same thing as
//               get_ancestor(index).node().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 index 1 3889  
460 14 Dtool_nJyoH5pa 7 392 3949 2863 14 Dtool_nJyoH5pa 531 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_ancestor
//       Access: Published
//  Description: Returns the nth ancestor of the path, where 0 is the
//               NodePath itself and get_num_nodes() - 1 is get_top().
//               This requires iterating through the path.
//
//               Also see get_node(), which returns the same thing as
//               a PandaNode pointer, not a NodePath.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 index 1 3889  14 current_thread 1 3928  
461 14 Dtool_nJyo4QOU 7 392 3949 2863 14 Dtool_nJyo4QOU 531 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_ancestor
//       Access: Published
//  Description: Returns the nth ancestor of the path, where 0 is the
//               NodePath itself and get_num_nodes() - 1 is get_top().
//               This requires iterating through the path.
//
//               Also see get_node(), which returns the same thing as
//               a PandaNode pointer, not a NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 index 1 3889  
462 14 Dtool_nJyo17Vc 6 393 3750 0 14 Dtool_nJyo17Vc 337 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_error_type
//       Access: Published
//  Description: If is_empty() is true, this returns a code that
//               represents the reason why the NodePath is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
463 14 Dtool_nJyobOLd 7 394 3925 2411 14 Dtool_nJyobOLd 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top_node
//       Access: Published
//  Description: Returns the top node of the path, or NULL if the path
//               is empty.  This requires iterating through the path.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
464 14 Dtool_nJyoCGOI 7 394 3925 2411 14 Dtool_nJyoCGOI 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top_node
//       Access: Published
//  Description: Returns the top node of the path, or NULL if the path
//               is empty.  This requires iterating through the path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
465 14 Dtool_nJyoFyxv 7 395 3949 2863 14 Dtool_nJyoFyxv 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top
//       Access: Published
//  Description: Returns a singleton NodePath that represents the top
//               of the path, or empty NodePath if this path is empty.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
466 14 Dtool_nJyoHiQF 7 395 3949 2863 14 Dtool_nJyoHiQF 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_top
//       Access: Published
//  Description: Returns a singleton NodePath that represents the top
//               of the path, or empty NodePath if this path is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
467 14 Dtool_nJyoC92U 7 396 3925 2411 14 Dtool_nJyoC92U 254 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::node
//       Access: Published
//  Description: Returns the referenced node of the path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
468 14 Dtool_nJyoumo_ 6 397 3889 0 14 Dtool_nJyoumo_ 988 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_key
//       Access: Published
//  Description: Returns an integer that is guaranteed to be the same
//               for all NodePaths that represent the same node
//               instance, and different for all NodePaths that
//               represent a different node instance.  
//
//               The same key will be returned for a particular
//               instance as long as at least one NodePath exists that
//               represents that instance; if all NodePaths for a
//               particular instance destruct and a new one is later
//               created, it may have a different index.  However, a
//               given key will never be reused for a different
//               instance (unless the app has been running long enough
//               that we overflow the integer key value).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
469 14 Dtool_nJyoanz3 6 398 3866 0 14 Dtool_nJyoanz3 526 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_same_graph
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is parented within the same graph as that of the
//               other NodePath.  This is essentially the same thing
//               as asking whether get_top() of both NodePaths is the
//               same (e.g., both "render").
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  14 current_thread 1 3928  
470 14 Dtool_nJyoRlGb 6 398 3866 0 14 Dtool_nJyoRlGb 526 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_same_graph
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is parented within the same graph as that of the
//               other NodePath.  This is essentially the same thing
//               as asking whether get_top() of both NodePaths is the
//               same (e.g., both "render").
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
471 14 Dtool_nJyoY3g7 6 399 3866 0 14 Dtool_nJyoY3g7 387 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_ancestor_of
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is a parent or other ancestor of the other NodePath,
//               or false if it is not.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  14 current_thread 1 3928  
472 14 Dtool_nJyoFCVk 6 399 3866 0 14 Dtool_nJyoFCVk 387 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_ancestor_of
//       Access: Published
//  Description: Returns true if the node represented by this NodePath
//               is a parent or other ancestor of the other NodePath,
//               or false if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
473 14 Dtool_nJyoT79O 7 400 3949 2863 14 Dtool_nJyoT79O 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_common_ancestor
//       Access: Published
//  Description: Returns the lowest NodePath that both of these two
//               NodePaths have in common: the first ancestor that
//               both of them share.  If the two NodePaths are
//               unrelated, returns NodePath::not_found().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  14 current_thread 1 3928  
474 14 Dtool_nJyoiMjg 7 400 3949 2863 14 Dtool_nJyoiMjg 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_common_ancestor
//       Access: Published
//  Description: Returns the lowest NodePath that both of these two
//               NodePaths have in common: the first ancestor that
//               both of them share.  If the two NodePaths are
//               unrelated, returns NodePath::not_found().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
475 14 Dtool_nJyobz5q 7 401 3952 3404 14 Dtool_nJyobz5q 297 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
476 14 Dtool_nJyogb8V 7 401 3952 3404 14 Dtool_nJyogb8V 297 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
477 14 Dtool_nJyojAV2 6 402 3889 0 14 Dtool_nJyojAV2 280 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_children
//       Access: Published
//  Description: Returns the number of children of the referenced node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
478 14 Dtool_nJyoSTCh 6 402 3889 0 14 Dtool_nJyoSTCh 280 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_num_children
//       Access: Published
//  Description: Returns the number of children of the referenced node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
479 14 Dtool_nJyoxKe9 7 403 3949 2863 14 Dtool_nJyoxKe9 305 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_child
//       Access: Published
//  Description: Returns a NodePath representing the nth child of the
//               referenced node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  1 n 1 3889  14 current_thread 1 3928  
480 14 Dtool_nJyoaFtX 7 403 3949 2863 14 Dtool_nJyoaFtX 305 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_child
//       Access: Published
//  Description: Returns a NodePath representing the nth child of the
//               referenced node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  1 n 1 3889  
481 14 Dtool_nJyoOQxT 7 404 3952 3404 14 Dtool_nJyoOQxT 474 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node that have been stashed.  These children are not
//               normally visible on the node, and do not appear in
//               the list returned by get_children().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
482 14 Dtool_nJyowedS 7 404 3952 3404 14 Dtool_nJyowedS 474 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_children
//       Access: Published
//  Description: Returns the set of all child nodes of the referenced
//               node that have been stashed.  These children are not
//               normally visible on the node, and do not appear in
//               the list returned by get_children().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
483 14 Dtool_nJyoGzBj 6 405 3889 0 14 Dtool_nJyoGzBj 283 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::count_num_descendants
//       Access: Published
//  Description: Returns the number of nodes at and below this level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
484 14 Dtool_nJyokmIB 6 406 3866 0 14 Dtool_nJyokmIB 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_parent
//       Access: Published
//  Description: Returns true if the referenced node has a parent;
//               i.e. the NodePath chain contains at least two nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
485 14 Dtool_nJyohc1w 6 406 3866 0 14 Dtool_nJyohc1w 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_parent
//       Access: Published
//  Description: Returns true if the referenced node has a parent;
//               i.e. the NodePath chain contains at least two nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
486 14 Dtool_nJyoBn7Y 7 407 3949 2863 14 Dtool_nJyoBn7Y 448 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_parent
//       Access: Published
//  Description: Returns the NodePath to the parent of the referenced
//               node: that is, this NodePath, shortened by one node.
//               The parent of a singleton NodePath is defined to be
//               the empty NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
487 14 Dtool_nJyoDcoI 7 407 3949 2863 14 Dtool_nJyoDcoI 448 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_parent
//       Access: Published
//  Description: Returns the NodePath to the parent of the referenced
//               node: that is, this NodePath, shortened by one node.
//               The parent of a singleton NodePath is defined to be
//               the empty NodePath.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
488 14 Dtool_nJyoHJFY 6 408 3889 0 14 Dtool_nJyoHJFY 513 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sort
//       Access: Published
//  Description: Returns the sort value of the referenced node within
//               its parent; that is, the sort number passed on the
//               last reparenting operation for this node.  This will
//               control the position of the node within its parent's
//               list of children.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
489 14 Dtool_nJyoFeVI 6 408 3889 0 14 Dtool_nJyoFeVI 513 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sort
//       Access: Published
//  Description: Returns the sort value of the referenced node within
//               its parent; that is, the sort number passed on the
//               last reparenting operation for this node.  This will
//               control the position of the node within its parent's
//               list of children.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
490 14 Dtool_nJyoO9_b 7 409 3949 2863 14 Dtool_nJyoO9_b 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find
//       Access: Published
//  Description: Searches for a node below the referenced node that
//               matches the indicated string.  Returns the shortest
//               match found, if any, or an empty NodePath if no match
//               can be found.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 path 1 3924  
491 14 Dtool_nJyoQFrr 7 410 3949 2863 14 Dtool_nJyoQFrr 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_path_to
//       Access: Published
//  Description: Searches for the indicated node below this node and
//               returns the shortest NodePath that connects them.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 node 1 3925  
492 14 Dtool_nJyoupHP 7 411 3952 3404 14 Dtool_nJyoupHP 419 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with this NodePath and can be extended by
//               path.  The shortest paths will be listed
//               first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 path 1 3924  
493 14 Dtool_nJyoO6Sn 7 412 3952 3404 14 Dtool_nJyoO6Sn 394 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_paths_to
//       Access: Published
//  Description: Returns the set of all NodePaths that extend from
//               this NodePath down to the indicated node.  The
//               shortest paths will be listed first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 node 1 3925  
494 14 Dtool_nJyodxiE 4 413 3890 0 14 Dtool_nJyodxiE 710 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::reparent_to
//       Access: Published
//  Description: Removes the referenced node of the NodePath from its
//               current parent and attaches it to the referenced node
//               of the indicated NodePath.  
//
//               If the destination NodePath is empty, this is the
//               same thing as detach_node().
//
//               If the referenced node is already a child of the
//               indicated NodePath (via some other instance), this
//               operation fails and leaves the NodePath detached.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  4 sort 1 3889  14 current_thread 1 3928  
495 14 Dtool_nJyo4WHK 4 413 3890 0 14 Dtool_nJyo4WHK 710 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::reparent_to
//       Access: Published
//  Description: Removes the referenced node of the NodePath from its
//               current parent and attaches it to the referenced node
//               of the indicated NodePath.  
//
//               If the destination NodePath is empty, this is the
//               same thing as detach_node().
//
//               If the referenced node is already a child of the
//               indicated NodePath (via some other instance), this
//               operation fails and leaves the NodePath detached.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  4 sort 1 3889  
496 14 Dtool_nJyozsyP 4 413 3890 0 14 Dtool_nJyozsyP 710 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::reparent_to
//       Access: Published
//  Description: Removes the referenced node of the NodePath from its
//               current parent and attaches it to the referenced node
//               of the indicated NodePath.  
//
//               If the destination NodePath is empty, this is the
//               same thing as detach_node().
//
//               If the referenced node is already a child of the
//               indicated NodePath (via some other instance), this
//               operation fails and leaves the NodePath detached.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 other 1 3950  
497 14 Dtool_nJyoUB2k 4 414 3890 0 14 Dtool_nJyoUB2k 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash_to
//       Access: Published
//  Description: Similar to reparent_to(), but the node is added to
//               its new parent's stashed list, so that the result is
//               equivalent to calling reparent_to() immediately
//               followed by stash().
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  4 sort 1 3889  14 current_thread 1 3928  
498 14 Dtool_nJyon8L1 4 414 3890 0 14 Dtool_nJyon8L1 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash_to
//       Access: Published
//  Description: Similar to reparent_to(), but the node is added to
//               its new parent's stashed list, so that the result is
//               equivalent to calling reparent_to() immediately
//               followed by stash().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  4 sort 1 3889  
499 14 Dtool_nJyozzL_ 4 414 3890 0 14 Dtool_nJyozzL_ 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash_to
//       Access: Published
//  Description: Similar to reparent_to(), but the node is added to
//               its new parent's stashed list, so that the result is
//               equivalent to calling reparent_to() immediately
//               followed by stash().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 other 1 3950  
500 14 Dtool_nJyoVNjc 4 415 3890 0 14 Dtool_nJyoVNjc 514 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::wrt_reparent_to
//       Access: Published
//  Description: This functions identically to reparent_to(), except
//               the transform on this node is also adjusted so that
//               the node remains in the same place in world
//               coordinates, even if it is reparented into a
//               different coordinate system.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  4 sort 1 3889  14 current_thread 1 3928  
501 14 Dtool_nJyoln7s 4 415 3890 0 14 Dtool_nJyoln7s 514 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::wrt_reparent_to
//       Access: Published
//  Description: This functions identically to reparent_to(), except
//               the transform on this node is also adjusted so that
//               the node remains in the same place in world
//               coordinates, even if it is reparented into a
//               different coordinate system.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  4 sort 1 3889  
502 14 Dtool_nJyowFTN 4 415 3890 0 14 Dtool_nJyowFTN 514 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::wrt_reparent_to
//       Access: Published
//  Description: This functions identically to reparent_to(), except
//               the transform on this node is also adjusted so that
//               the node remains in the same place in world
//               coordinates, even if it is reparented into a
//               different coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 other 1 3950  
503 14 Dtool_nJyoCtbj 7 416 3949 2863 14 Dtool_nJyoCtbj 1455 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_to
//       Access: Published
//  Description: Adds the referenced node of the NodePath as a child
//               of the referenced node of the indicated other
//               NodePath.  Any other parent-child relations of the
//               node are unchanged; in particular, the node is not
//               removed from its existing parent, if any.
//
//               If the node already had an existing parent, this
//               method will create a new instance of the node within
//               the scene graph.
//
//               This does not change the NodePath itself, but does
//               return a new NodePath that reflects the new instance
//               node.
//
//               If the destination NodePath is empty, this creates a
//               new instance which is not yet parented to any node.
//               A new instance of this sort cannot easily be
//               differentiated from other similar instances, but it
//               is nevertheless a different instance and it will
//               return a different get_id() value.
//
//               If the referenced node is already a child of the
//               indicated NodePath, returns that already-existing
//               instance, unstashing it first if necessary.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3950  5 other 1 3950  4 sort 1 3889  14 current_thread 1 3928  
504 14 Dtool_nJyo2Mo6 7 416 3949 2863 14 Dtool_nJyo2Mo6 1455 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_to
//       Access: Published
//  Description: Adds the referenced node of the NodePath as a child
//               of the referenced node of the indicated other
//               NodePath.  Any other parent-child relations of the
//               node are unchanged; in particular, the node is not
//               removed from its existing parent, if any.
//
//               If the node already had an existing parent, this
//               method will create a new instance of the node within
//               the scene graph.
//
//               This does not change the NodePath itself, but does
//               return a new NodePath that reflects the new instance
//               node.
//
//               If the destination NodePath is empty, this creates a
//               new instance which is not yet parented to any node.
//               A new instance of this sort cannot easily be
//               differentiated from other similar instances, but it
//               is nevertheless a different instance and it will
//               return a different get_id() value.
//
//               If the referenced node is already a child of the
//               indicated NodePath, returns that already-existing
//               instance, unstashing it first if necessary.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  4 sort 1 3889  
505 14 Dtool_nJyoTlPD 7 416 3949 2863 14 Dtool_nJyoTlPD 1455 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_to
//       Access: Published
//  Description: Adds the referenced node of the NodePath as a child
//               of the referenced node of the indicated other
//               NodePath.  Any other parent-child relations of the
//               node are unchanged; in particular, the node is not
//               removed from its existing parent, if any.
//
//               If the node already had an existing parent, this
//               method will create a new instance of the node within
//               the scene graph.
//
//               This does not change the NodePath itself, but does
//               return a new NodePath that reflects the new instance
//               node.
//
//               If the destination NodePath is empty, this creates a
//               new instance which is not yet parented to any node.
//               A new instance of this sort cannot easily be
//               differentiated from other similar instances, but it
//               is nevertheless a different instance and it will
//               return a different get_id() value.
//
//               If the referenced node is already a child of the
//               indicated NodePath, returns that already-existing
//               instance, unstashing it first if necessary.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
506 14 Dtool_nJyo8RrM 7 417 3949 2863 14 Dtool_nJyo8RrM 516 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_under_node
//       Access: Published
//  Description: Behaves like instance_to(), but implicitly creates a
//               new node to instance the geometry under, and returns a
//               NodePath to that new node.  This allows the
//               programmer to set a unique state and/or transform on
//               this instance.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3950  5 other 1 3950  4 name 1 3924  4 sort 1 3889  14 current_thread 1 3928  
507 14 Dtool_nJyoHSFZ 7 417 3949 2863 14 Dtool_nJyoHSFZ 516 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_under_node
//       Access: Published
//  Description: Behaves like instance_to(), but implicitly creates a
//               new node to instance the geometry under, and returns a
//               NodePath to that new node.  This allows the
//               programmer to set a unique state and/or transform on
//               this instance.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3950  5 other 1 3950  4 name 1 3924  4 sort 1 3889  
508 14 Dtool_nJyofsm_ 7 417 3949 2863 14 Dtool_nJyofsm_ 516 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::instance_under_node
//       Access: Published
//  Description: Behaves like instance_to(), but implicitly creates a
//               new node to instance the geometry under, and returns a
//               NodePath to that new node.  This allows the
//               programmer to set a unique state and/or transform on
//               this instance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  4 name 1 3924  
509 14 Dtool_nJyotacp 7 418 3949 2863 14 Dtool_nJyotacp 489 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::copy_to
//       Access: Published
//  Description: Functions like instance_to(), except a deep
//               copy is made of the referenced node and all of its
//               descendents, which is then parented to the indicated
//               node.  A NodePath to the newly created copy is
//               returned.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3950  5 other 1 3950  4 sort 1 3889  14 current_thread 1 3928  
510 14 Dtool_nJyoxTlc 7 418 3949 2863 14 Dtool_nJyoxTlc 489 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::copy_to
//       Access: Published
//  Description: Functions like instance_to(), except a deep
//               copy is made of the referenced node and all of its
//               descendents, which is then parented to the indicated
//               node.  A NodePath to the newly created copy is
//               returned.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  4 sort 1 3889  
511 14 Dtool_nJyotI_l 7 418 3949 2863 14 Dtool_nJyotI_l 489 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::copy_to
//       Access: Published
//  Description: Functions like instance_to(), except a deep
//               copy is made of the referenced node and all of its
//               descendents, which is then parented to the indicated
//               node.  A NodePath to the newly created copy is
//               returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
512 14 Dtool_nJyo6KoR 7 419 3949 2863 14 Dtool_nJyo6KoR 800 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Attaches a new node, with or without existing
//               parents, to the scene graph below the referenced node
//               of this NodePath.  This is the preferred way to add
//               nodes to the graph.
//
//               If the node was already a child of the parent, this
//               returns a NodePath to the existing child.
//
//               This does *not* automatically extend the current
//               NodePath to reflect the attachment; however, a
//               NodePath that does reflect this extension is
//               returned.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3950  4 node 1 3925  4 sort 1 3889  14 current_thread 1 3928  
513 14 Dtool_nJyonUwe 7 419 3949 2863 14 Dtool_nJyonUwe 800 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Attaches a new node, with or without existing
//               parents, to the scene graph below the referenced node
//               of this NodePath.  This is the preferred way to add
//               nodes to the graph.
//
//               If the node was already a child of the parent, this
//               returns a NodePath to the existing child.
//
//               This does *not* automatically extend the current
//               NodePath to reflect the attachment; however, a
//               NodePath that does reflect this extension is
//               returned.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  4 node 1 3925  4 sort 1 3889  
514 14 Dtool_nJyo9EWP 7 419 3949 2863 14 Dtool_nJyo9EWP 800 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Attaches a new node, with or without existing
//               parents, to the scene graph below the referenced node
//               of this NodePath.  This is the preferred way to add
//               nodes to the graph.
//
//               If the node was already a child of the parent, this
//               returns a NodePath to the existing child.
//
//               This does *not* automatically extend the current
//               NodePath to reflect the attachment; however, a
//               NodePath that does reflect this extension is
//               returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 node 1 3925  
515 14 Dtool_nJyohRzz 7 419 3949 2863 14 Dtool_nJyohRzz 377 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Creates an ordinary PandaNode and attaches it below
//               the current NodePath, returning a new NodePath that
//               references it.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3950  4 name 1 3924  4 sort 1 3889  14 current_thread 1 3928  
516 14 Dtool_nJyolodl 7 419 3949 2863 14 Dtool_nJyolodl 377 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Creates an ordinary PandaNode and attaches it below
//               the current NodePath, returning a new NodePath that
//               references it.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  4 name 1 3924  4 sort 1 3889  
517 14 Dtool_nJyo8rj7 7 419 3949 2863 14 Dtool_nJyo8rj7 377 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::attach_new_node
//       Access: Published
//  Description: Creates an ordinary PandaNode and attaches it below
//               the current NodePath, returning a new NodePath that
//               references it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3924  
518 14 Dtool_nJyoMmwt 4 420 3890 0 14 Dtool_nJyoMmwt 1171 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::remove_node
//       Access: Published
//  Description: Disconnects the referenced node from the scene graph.
//               This will also delete the node if there are no other
//               pointers to it.
//
//               Normally, this should be called only when you are
//               really done with the node.  If you want to remove a
//               node from the scene graph but keep it around for
//               later, you should probably use detach_node() instead.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  14 current_thread 1 3928  
519 14 Dtool_nJyoliuR 4 420 3890 0 14 Dtool_nJyoliuR 1171 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::remove_node
//       Access: Published
//  Description: Disconnects the referenced node from the scene graph.
//               This will also delete the node if there are no other
//               pointers to it.
//
//               Normally, this should be called only when you are
//               really done with the node.  If you want to remove a
//               node from the scene graph but keep it around for
//               later, you should probably use detach_node() instead.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
520 14 Dtool_nJyorQzO 4 421 3890 0 14 Dtool_nJyorQzO 1153 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::detach_node
//       Access: Published
//  Description: Disconnects the referenced node from its parent, but
//               does not immediately delete it.  The NodePath retains
//               a pointer to the node, and becomes a singleton
//               NodePath.
//
//               This should be called to detach a node from the scene
//               graph, with the option of reattaching it later to the
//               same parent or to a different parent.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  14 current_thread 1 3928  
521 14 Dtool_nJyogfzy 4 421 3890 0 14 Dtool_nJyogfzy 1153 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::detach_node
//       Access: Published
//  Description: Disconnects the referenced node from its parent, but
//               does not immediately delete it.  The NodePath retains
//               a pointer to the node, and becomes a singleton
//               NodePath.
//
//               This should be called to detach a node from the scene
//               graph, with the option of reattaching it later to the
//               same parent or to a different parent.
//
//               In practice, the only difference between
//               remove_node() and detach_node() is that remove_node()
//               also resets the NodePath to empty, which will cause
//               the node to be deleted immediately if there are no
//               other references.  On the other hand, detach_node()
//               leaves the NodePath referencing the node, which will
//               keep at least one reference to the node for as long
//               as the NodePath exists.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
522 14 Dtool_nJyooCbM 4 422 3890 0 14 Dtool_nJyooCbM 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::output
//       Access: Published
//  Description: Writes a sensible description of the NodePath to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 out 1 3893  
523 14 Dtool_nJyovoLL 4 423 3890 0 14 Dtool_nJyovoLL 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
524 14 Dtool_nJyo1zyE 4 423 3890 0 14 Dtool_nJyo1zyE 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  3 out 1 3893  12 indent_level 1 3889  
525 14 Dtool_nJyou02a 4 423 3890 0 14 Dtool_nJyou02a 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::ls
//       Access: Published
//  Description: Lists the hierarchy at and below the referenced node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 out 1 3893  
526 14 Dtool_nJyoh7pG 4 424 3890 0 14 Dtool_nJyoh7pG 273 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
527 14 Dtool_nJyotiSZ 6 424 3889 0 14 Dtool_nJyotiSZ 273 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  3 out 1 3893  12 indent_level 1 3889  
528 14 Dtool_nJyo4b6h 6 424 3889 0 14 Dtool_nJyo4b6h 273 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::reverse_ls
//       Access: Published
//  Description: Lists the hierarchy at and above the referenced node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 out 1 3893  
529 14 Dtool_nJyo8qvj 7 425 3910 0 14 Dtool_nJyo8qvj 384 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the state changes that must be made to
//               transition to the render state of this node from the
//               render state of the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  14 current_thread 1 3928  
530 14 Dtool_nJyou5LY 7 425 3910 0 14 Dtool_nJyou5LY 384 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the state changes that must be made to
//               transition to the render state of this node from the
//               render state of the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
531 14 Dtool_nJyoNmZv 7 425 3910 0 14 Dtool_nJyoNmZv 270 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the complete state object set on this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
532 14 Dtool_nJyoMd52 7 425 3910 0 14 Dtool_nJyoMd52 270 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_state
//       Access: Published
//  Description: Returns the complete state object set on this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
533 14 Dtool_nJyoIp0D 4 426 3890 0 14 Dtool_nJyoIp0D 433 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Sets the state object on this node, relative to
//               the other node.  This computes a new state object
//               that will have the indicated value when seen from the
//               other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 state 1 3910  14 current_thread 1 3928  
534 14 Dtool_nJyoojNF 4 426 3890 0 14 Dtool_nJyoojNF 433 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Sets the state object on this node, relative to
//               the other node.  This computes a new state object
//               that will have the indicated value when seen from the
//               other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  5 state 1 3910  
535 14 Dtool_nJyoDhE4 4 426 3890 0 14 Dtool_nJyoDhE4 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Changes the complete state object on this node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 state 1 3910  14 current_thread 1 3928  
536 14 Dtool_nJyoYTbI 4 426 3890 0 14 Dtool_nJyoYTbI 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_state
//       Access: Published
//  Description: Changes the complete state object on this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 state 1 3910  
537 14 Dtool_nJyoT2Wy 7 427 3910 0 14 Dtool_nJyoT2Wy 272 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_state
//       Access: Published
//  Description: Returns the net state on this node from the root.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
538 14 Dtool_nJyoxk0S 7 427 3910 0 14 Dtool_nJyoxk0S 272 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_state
//       Access: Published
//  Description: Returns the net state on this node from the root.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
539 14 Dtool_nJyo_hqK 4 428 3890 0 14 Dtool_nJyo_hqK 474 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  6 attrib 1 3901  8 priority 1 3889  
540 14 Dtool_nJyosv7c 4 428 3890 0 14 Dtool_nJyosv7c 474 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_attrib
//       Access: Published
//  Description: Adds the indicated render attribute to the scene
//               graph on this node.  This attribute will now apply to
//               this node and everything below.  If there was already
//               an attribute of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  6 attrib 1 3901  
541 14 Dtool_nJyoEHFA 7 429 3901 0 14 Dtool_nJyoEHFA 537 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_attrib
//       Access: Published
//  Description: Returns the render attribute of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//               This checks only what is set on this particular node
//               level, and has nothing to do with what render
//               attributes may be inherited from parent nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 type 1 3896  
542 14 Dtool_nJyo_GQo 6 430 3866 0 14 Dtool_nJyo_GQo 367 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_attrib
//       Access: Published
//  Description: Returns true if there is a render attribute of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 type 1 3896  
543 14 Dtool_nJyo9ZOD 4 431 3890 0 14 Dtool_nJyo9ZOD 450 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_attrib
//       Access: Published
//  Description: Removes the render attribute of the given type from
//               this node.  This node, and the subgraph below, will
//               now inherit the indicated render attribute from the
//               nodes above this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 type 1 3896  
544 14 Dtool_nJyoDDCe 4 432 3890 0 14 Dtool_nJyoDDCe 385 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effect
//       Access: Published
//  Description: Adds the indicated render effect to the scene
//               graph on this node.  If there was already an effect
//               of the same type, it is replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  6 effect 1 3920  
545 14 Dtool_nJyoYm6g 7 433 3920 0 14 Dtool_nJyoYm6g 337 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effect
//       Access: Published
//  Description: Returns the render effect of the indicated type,
//               if it is defined on the node, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 type 1 3896  
546 14 Dtool_nJyo_pJJ 6 434 3866 0 14 Dtool_nJyo_pJJ 364 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_effect
//       Access: Published
//  Description: Returns true if there is a render effect of the
//               indicated type defined on this node, or false if
//               there is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 type 1 3896  
547 14 Dtool_nJyoEpe3 4 435 3890 0 14 Dtool_nJyoEpe3 298 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effect
//       Access: Published
//  Description: Removes the render effect of the given type from
//               this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 type 1 3896  
548 14 Dtool_nJyoPD2Q 4 436 3890 0 14 Dtool_nJyoPD2Q 432 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_effects
//       Access: Published
//  Description: Sets the complete RenderEffects that will be applied
//               this node.  This completely replaces whatever has
//               been set on this node via repeated calls to
//               set_attrib().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  7 effects 1 3922  
549 14 Dtool_nJyouJzu 7 437 3922 0 14 Dtool_nJyouJzu 307 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_effects
//       Access: Published
//  Description: Returns the complete RenderEffects that will be
//               applied to this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
550 14 Dtool_nJyoZ8BC 4 438 3890 0 14 Dtool_nJyoZ8BC 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_effects
//       Access: Published
//  Description: Resets this node to have no render effects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
551 14 Dtool_nJyou8Qi 7 439 3864 0 14 Dtool_nJyou8Qi 387 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the relative transform to this node from the
//               other node; i.e. the transformation of this node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  14 current_thread 1 3928  
552 14 Dtool_nJyo25iF 7 439 3864 0 14 Dtool_nJyo25iF 387 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the relative transform to this node from the
//               other node; i.e. the transformation of this node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
553 14 Dtool_nJyo_qAT 7 439 3864 0 14 Dtool_nJyo_qAT 278 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the complete transform object set on this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
554 14 Dtool_nJyobFez 7 439 3864 0 14 Dtool_nJyobFez 278 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transform
//       Access: Published
//  Description: Returns the complete transform object set on this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
555 14 Dtool_nJyo4KfH 4 440 3890 0 14 Dtool_nJyo4KfH 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity,
//               relative to the other node.  This effectively places
//               this node at the same position as the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  14 current_thread 1 3928  
556 14 Dtool_nJyoQssv 4 440 3890 0 14 Dtool_nJyoQssv 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity,
//               relative to the other node.  This effectively places
//               this node at the same position as the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 other 1 3950  
557 14 Dtool_nJyow8h9 4 440 3890 0 14 Dtool_nJyow8h9 276 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  14 current_thread 1 3928  
558 14 Dtool_nJyoH5x7 4 440 3890 0 14 Dtool_nJyoH5x7 276 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transform
//       Access: Published
//  Description: Sets the transform object on this node to identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
559 14 Dtool_nJyoV_k2 4 441 3890 0 14 Dtool_nJyoV_k2 445 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Sets the transform object on this node, relative to
//               the other node.  This computes a new transform object
//               that will have the indicated value when seen from the
//               other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  9 transform 1 3864  14 current_thread 1 3928  
560 14 Dtool_nJyoOC4G 4 441 3890 0 14 Dtool_nJyoOC4G 445 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Sets the transform object on this node, relative to
//               the other node.  This computes a new transform object
//               that will have the indicated value when seen from the
//               other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  9 transform 1 3864  
561 14 Dtool_nJyoCDwY 4 441 3890 0 14 Dtool_nJyoCDwY 274 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Changes the complete transform object on this node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  9 transform 1 3864  14 current_thread 1 3928  
562 14 Dtool_nJyoOl1c 4 441 3890 0 14 Dtool_nJyoOl1c 274 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transform
//       Access: Published
//  Description: Changes the complete transform object on this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  9 transform 1 3864  
563 14 Dtool_nJyokhio 7 442 3864 0 14 Dtool_nJyokhio 280 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_transform
//       Access: Published
//  Description: Returns the net transform on this node from the root.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
564 14 Dtool_nJyodCm_ 7 442 3864 0 14 Dtool_nJyodCm_ 280 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_transform
//       Access: Published
//  Description: Returns the net transform on this node from the root.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
565 14 Dtool_nJyoPA07 7 443 3864 0 14 Dtool_nJyoPA07 457 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the relative "previous" transform to this
//               node from the other node; i.e. the position of this
//               node in the previous frame, as seen by the other node
//               in the previous frame.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  14 current_thread 1 3928  
566 14 Dtool_nJyoIeYC 7 443 3864 0 14 Dtool_nJyoIeYC 457 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the relative "previous" transform to this
//               node from the other node; i.e. the position of this
//               node in the previous frame, as seen by the other node
//               in the previous frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
567 14 Dtool_nJyoUJSd 7 443 3864 0 14 Dtool_nJyoUJSd 364 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
568 14 Dtool_nJyoaXOe 7 443 3864 0 14 Dtool_nJyoaXOe 364 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_prev_transform
//       Access: Published
//  Description: Returns the transform that has been set as this
//               node's "previous" position.  See
//               set_prev_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
569 14 Dtool_nJyobxkj 4 444 3890 0 14 Dtool_nJyobxkj 461 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the "previous" transform object on this node,
//               relative to the other node.  This computes a new
//               transform object that will have the indicated value
//               when seen from the other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  9 transform 1 3864  14 current_thread 1 3928  
570 14 Dtool_nJyoKELE 4 444 3890 0 14 Dtool_nJyoKELE 461 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the "previous" transform object on this node,
//               relative to the other node.  This computes a new
//               transform object that will have the indicated value
//               when seen from the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  9 transform 1 3864  
571 14 Dtool_nJyoTR3n 4 444 3890 0 14 Dtool_nJyoTR3n 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  9 transform 1 3864  14 current_thread 1 3928  
572 14 Dtool_nJyogmBw 4 444 3890 0 14 Dtool_nJyogmBw 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_prev_transform
//       Access: Published
//  Description: Sets the transform that represents this node's
//               "previous" position, one frame ago, for the purposes
//               of detecting motion for accurate collision
//               calculations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  9 transform 1 3864  
573 14 Dtool_nJyoU8Kx 7 445 3864 0 14 Dtool_nJyoU8Kx 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_prev_transform
//       Access: Published
//  Description: Returns the net "previous" transform on this node
//               from the root.  See set_prev_transform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
574 14 Dtool_nJyoq_Pd 7 445 3864 0 14 Dtool_nJyoq_Pd 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_prev_transform
//       Access: Published
//  Description: Returns the net "previous" transform on this node
//               from the root.  See set_prev_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
575 14 Dtool_nJyotVV9 4 446 3890 0 14 Dtool_nJyotVV9 614 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
//     See Also: NodePath::set_fluid_pos
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 pos 1 3868  
576 14 Dtool_nJyowgot 4 446 3890 0 14 Dtool_nJyowgot 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  3 pos 1 3868  
577 14 Dtool_nJyo0iUk 4 446 3890 0 14 Dtool_nJyo0iUk 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  1 x 1 3874  1 y 1 3874  1 z 1 3874  
578 14 Dtool_nJyoc4_K 4 446 3890 0 14 Dtool_nJyoc4_K 573 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               leaving rotation and scale untouched.  This also
//               resets the node's "previous" position, so that the
//               collision system will see the node as having suddenly
//               appeared in the new position, without passing any
//               points in between.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  1 x 1 3874  1 y 1 3874  1 z 1 3874  
579 14 Dtool_nJyoQez_ 4 447 3890 0 14 Dtool_nJyoQez_ 0 3 4 this 3 3949  5 other 1 3950  1 x 1 3874  
580 14 Dtool_nJyodaZh 4 447 3890 0 14 Dtool_nJyodaZh 0 2 4 this 3 3949  1 x 1 3874  
581 14 Dtool_nJyoyKzv 4 448 3890 0 14 Dtool_nJyoyKzv 0 3 4 this 3 3949  5 other 1 3950  1 y 1 3874  
582 14 Dtool_nJyo2gZR 4 448 3890 0 14 Dtool_nJyo2gZR 0 2 4 this 3 3949  1 y 1 3874  
583 14 Dtool_nJyoU5zf 4 449 3890 0 14 Dtool_nJyoU5zf 0 3 4 this 3 3949  5 other 1 3950  1 z 1 3874  
584 14 Dtool_nJyoYzZB 4 449 3890 0 14 Dtool_nJyoYzZB 0 2 4 this 3 3949  1 z 1 3874  
585 14 Dtool_nJyoiI31 4 450 3890 0 14 Dtool_nJyoiI31 495 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
//     See Also: NodePath::set_pos
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 pos 1 3868  
586 14 Dtool_nJyoQamK 4 450 3890 0 14 Dtool_nJyoQamK 316 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  3 pos 1 3868  
587 14 Dtool_nJyojpk5 4 450 3890 0 14 Dtool_nJyojpk5 460 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  1 x 1 3874  1 y 1 3874  1 z 1 3874  
588 14 Dtool_nJyoDckh 4 450 3890 0 14 Dtool_nJyoDckh 460 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fluid_pos
//       Access: Published
//  Description: Sets the translation component, without changing the
//               "previous" position, so that the collision system
//               will see the node as moving fluidly from its previous
//               position to its new position.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  1 x 1 3874  1 y 1 3874  1 z 1 3874  
589 14 Dtool_nJyomNMV 4 451 3890 0 14 Dtool_nJyomNMV 0 3 4 this 3 3949  5 other 1 3950  1 x 1 3874  
590 14 Dtool_nJyoFku5 4 451 3890 0 14 Dtool_nJyoFku5 0 2 4 this 3 3949  1 x 1 3874  
591 14 Dtool_nJyoWvfV 4 452 3890 0 14 Dtool_nJyoWvfV 0 3 4 this 3 3949  5 other 1 3950  1 y 1 3874  
592 14 Dtool_nJyoVKB6 4 452 3890 0 14 Dtool_nJyoVKB6 0 2 4 this 3 3949  1 y 1 3874  
593 14 Dtool_nJyoGBzV 4 453 3890 0 14 Dtool_nJyoGBzV 0 3 4 this 3 3949  5 other 1 3950  1 z 1 3874  
594 14 Dtool_nJyolrV6 4 453 3890 0 14 Dtool_nJyolrV6 0 2 4 this 3 3949  1 z 1 3874  
595 14 Dtool_nJyoOo4T 7 454 3953 0 14 Dtool_nJyoOo4T 270 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Retrieves the translation component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
596 14 Dtool_nJyoCfLu 7 454 3953 0 14 Dtool_nJyoCfLu 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos
//       Access: Published
//  Description: Returns the relative position of the referenced node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
597 14 Dtool_nJyo0lol 6 455 3874 0 14 Dtool_nJyo0lol 0 1 4 this 3 3950  
598 14 Dtool_nJyosQU6 6 455 3874 0 14 Dtool_nJyosQU6 0 2 4 this 3 3950  5 other 1 3950  
599 14 Dtool_nJyoaSpV 6 456 3874 0 14 Dtool_nJyoaSpV 0 1 4 this 3 3950  
600 14 Dtool_nJyoKEUq 6 456 3874 0 14 Dtool_nJyoKEUq 0 2 4 this 3 3950  5 other 1 3950  
601 14 Dtool_nJyoxcoF 6 457 3874 0 14 Dtool_nJyoxcoF 0 1 4 this 3 3950  
602 14 Dtool_nJyoo5Ua 6 457 3874 0 14 Dtool_nJyoo5Ua 0 2 4 this 3 3950  5 other 1 3950  
603 14 Dtool_nJyodM8H 7 458 3955 0 14 Dtool_nJyodM8H 816 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
604 14 Dtool_nJyojYBa 7 458 3955 0 14 Dtool_nJyojYBa 883 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_pos_delta
//       Access: Published
//  Description: Returns the delta vector from this node's position in
//               the previous frame (according to
//               set_prev_transform(), typically set via the use of
//               set_fluid_pos()) and its position in the current
//               frame, as seen in the indicated node's coordinate
//               space.  This is the vector used to determine
//               collisions.  Generally, if the node was last
//               repositioned via set_pos(), the delta will be zero;
//               if it was adjusted via set_fluid_pos(), the delta
//               will represent the change from the previous frame's
//               position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
605 14 Dtool_nJyoHdk4 4 459 3890 0 14 Dtool_nJyoHdk4 320 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 hpr 1 3868  
606 14 Dtool_nJyoOo3o 4 459 3890 0 14 Dtool_nJyoOo3o 307 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  3 hpr 1 3868  
607 14 Dtool_nJyoablf 4 459 3890 0 14 Dtool_nJyoablf 307 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  1 h 1 3874  1 p 1 3874  1 r 1 3874  
608 14 Dtool_nJyoGhOG 4 459 3890 0 14 Dtool_nJyoGhOG 320 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  1 h 1 3874  1 p 1 3874  1 r 1 3874  
609 14 Dtool_nJyo0Wu_ 4 460 3890 0 14 Dtool_nJyo0Wu_ 0 3 4 this 3 3949  5 other 1 3950  1 h 1 3874  
610 14 Dtool_nJyo5SUh 4 460 3890 0 14 Dtool_nJyo5SUh 0 2 4 this 3 3949  1 h 1 3874  
611 14 Dtool_nJyoCyw_ 4 461 3890 0 14 Dtool_nJyoCyw_ 0 3 4 this 3 3949  5 other 1 3950  1 p 1 3874  
612 14 Dtool_nJyov_Xh 4 461 3890 0 14 Dtool_nJyov_Xh 0 2 4 this 3 3949  1 p 1 3874  
613 14 Dtool_nJyoGVwf 4 462 3890 0 14 Dtool_nJyoGVwf 0 3 4 this 3 3949  5 other 1 3950  1 r 1 3874  
614 14 Dtool_nJyoqXXB 4 462 3890 0 14 Dtool_nJyoqXXB 0 2 4 this 3 3949  1 r 1 3874  
615 14 Dtool_nJyokhJP 7 463 3956 0 14 Dtool_nJyokhJP 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
616 14 Dtool_nJyoYUap 7 463 3956 0 14 Dtool_nJyoYUap 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hpr
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
617 14 Dtool_nJyoQtjl 6 464 3874 0 14 Dtool_nJyoQtjl 0 1 4 this 3 3950  
618 14 Dtool_nJyoAZP6 6 464 3874 0 14 Dtool_nJyoAZP6 0 2 4 this 3 3950  5 other 1 3950  
619 14 Dtool_nJyoCJll 6 465 3874 0 14 Dtool_nJyoCJll 0 1 4 this 3 3950  
620 14 Dtool_nJyoS1R6 6 465 3874 0 14 Dtool_nJyoS1R6 0 2 4 this 3 3950  5 other 1 3950  
621 14 Dtool_nJyoHwlF 6 466 3874 0 14 Dtool_nJyoHwlF 0 1 4 this 3 3950  
622 14 Dtool_nJyoWcRa 6 466 3874 0 14 Dtool_nJyoWcRa 0 2 4 this 3 3950  5 other 1 3950  
623 14 Dtool_nJyowJgI 4 467 3890 0 14 Dtool_nJyowJgI 321 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               leaving translation and scale untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 quat 1 3871  
624 14 Dtool_nJyoKI60 4 467 3890 0 14 Dtool_nJyoKI60 308 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat
//       Access: Published
//  Description: Sets the rotation component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  4 quat 1 3871  
625 14 Dtool_nJyowDPW 7 468 3957 0 14 Dtool_nJyowDPW 268 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Retrieves the rotation component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
626 14 Dtool_nJyoCURf 7 468 3957 0 14 Dtool_nJyoCURf 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_quat
//       Access: Published
//  Description: Returns the relative orientation of the bottom node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
627 14 Dtool_nJyoZaRp 4 469 3890 0 14 Dtool_nJyoZaRp 322 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 scale 1 3868  
628 14 Dtool_nJyopef1 4 469 3890 0 14 Dtool_nJyopef1 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  5 scale 1 3868  
629 14 Dtool_nJyo_9Ct 4 469 3890 0 14 Dtool_nJyo_9Ct 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  5 scale 1 3874  
630 14 Dtool_nJyoxK_k 4 469 3890 0 14 Dtool_nJyoxK_k 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  
631 14 Dtool_nJyotTLn 4 469 3890 0 14 Dtool_nJyotTLn 322 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scale
//       Access: Published
//  Description: Sets the scale component of the transform,
//               leaving translation and rotation untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 scale 1 3874  
632 14 Dtool_nJyoNsGl 4 469 3890 0 14 Dtool_nJyoNsGl 0 4 4 this 3 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  
633 14 Dtool_nJyooi3_ 4 470 3890 0 14 Dtool_nJyooi3_ 0 3 4 this 3 3949  5 other 1 3950  2 sx 1 3874  
634 14 Dtool_nJyoEtIx 4 470 3890 0 14 Dtool_nJyoEtIx 0 2 4 this 3 3949  2 sx 1 3874  
635 14 Dtool_nJyogVB_ 4 471 3890 0 14 Dtool_nJyogVB_ 0 3 4 this 3 3949  5 other 1 3950  2 sy 1 3874  
636 14 Dtool_nJyocaRx 4 471 3890 0 14 Dtool_nJyocaRx 0 2 4 this 3 3949  2 sy 1 3874  
637 14 Dtool_nJyo4EL_ 4 472 3890 0 14 Dtool_nJyo4EL_ 0 3 4 this 3 3949  5 other 1 3950  2 sz 1 3874  
638 14 Dtool_nJyoULbx 4 472 3890 0 14 Dtool_nJyoULbx 0 2 4 this 3 3949  2 sz 1 3874  
639 14 Dtool_nJyo5djS 7 473 3956 0 14 Dtool_nJyo5djS 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Retrieves the scale component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
640 14 Dtool_nJyoam1z 7 473 3956 0 14 Dtool_nJyoam1z 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the bottom node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
641 14 Dtool_nJyon63U 6 474 3874 0 14 Dtool_nJyon63U 0 1 4 this 3 3950  
642 14 Dtool_nJyoCXrr 6 474 3874 0 14 Dtool_nJyoCXrr 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_scale
//       Access: Published
//  Description: Returns the relative scale of the referenced node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
643 14 Dtool_nJyovrBV 6 475 3874 0 14 Dtool_nJyovrBV 0 1 4 this 3 3950  
644 14 Dtool_nJyoKE1r 6 475 3874 0 14 Dtool_nJyoKE1r 0 2 4 this 3 3950  5 other 1 3950  
645 14 Dtool_nJyoXULV 6 476 3874 0 14 Dtool_nJyoXULV 0 1 4 this 3 3950  
646 14 Dtool_nJyoS18r 6 476 3874 0 14 Dtool_nJyoS18r 0 2 4 this 3 3950  5 other 1 3950  
647 14 Dtool_nJyosuKi 4 477 3890 0 14 Dtool_nJyosuKi 322 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation and rotation untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 shear 1 3868  
648 14 Dtool_nJyoiMYu 4 477 3890 0 14 Dtool_nJyoiMYu 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  5 shear 1 3868  
649 14 Dtool_nJyoOe2d 4 477 3890 0 14 Dtool_nJyoOe2d 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  4 shxy 1 3874  4 shxz 1 3874  4 shyz 1 3874  
650 14 Dtool_nJyofHAe 4 477 3890 0 14 Dtool_nJyofHAe 330 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shear
//       Access: Published
//  Description: Sets the shear component of the transform,
//               leaving translation, rotation, and scale untouched.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  4 shxy 1 3874  4 shxz 1 3874  4 shyz 1 3874  
651 14 Dtool_nJyoUJVV 4 478 3890 0 14 Dtool_nJyoUJVV 0 3 4 this 3 3949  5 other 1 3950  4 shxy 1 3874  
652 14 Dtool_nJyo7PKV 4 478 3890 0 14 Dtool_nJyo7PKV 0 2 4 this 3 3949  4 shxy 1 3874  
653 14 Dtool_nJyoaJjx 4 479 3890 0 14 Dtool_nJyoaJjx 0 3 4 this 3 3949  5 other 1 3950  4 shxz 1 3874  
654 14 Dtool_nJyolPYx 4 479 3890 0 14 Dtool_nJyolPYx 0 2 4 this 3 3949  4 shxz 1 3874  
655 14 Dtool_nJyoatc2 4 480 3890 0 14 Dtool_nJyoatc2 0 3 4 this 3 3949  5 other 1 3950  4 shyz 1 3874  
656 14 Dtool_nJyolrR2 4 480 3890 0 14 Dtool_nJyolrR2 0 2 4 this 3 3949  4 shyz 1 3874  
657 14 Dtool_nJyoyRcL 7 481 3956 0 14 Dtool_nJyoyRcL 266 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Retrieves the shear component of the transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
658 14 Dtool_nJyoXxss 7 481 3956 0 14 Dtool_nJyoXxss 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the bottom node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
659 14 Dtool_nJyo5jpx 6 482 3874 0 14 Dtool_nJyo5jpx 0 1 4 this 3 3950  
660 14 Dtool_nJyobLq6 6 482 3874 0 14 Dtool_nJyobLq6 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shear
//       Access: Published
//  Description: Returns the relative shear of the referenced node
//               as seen from the other node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
661 14 Dtool_nJyo8j3N 6 483 3874 0 14 Dtool_nJyo8j3N 0 1 4 this 3 3950  
662 14 Dtool_nJyoWL4W 6 483 3874 0 14 Dtool_nJyoWL4W 0 2 4 this 3 3950  5 other 1 3950  
663 14 Dtool_nJyo8PuS 6 484 3874 0 14 Dtool_nJyo8PuS 0 1 4 this 3 3950  
664 14 Dtool_nJyoWXwb 6 484 3874 0 14 Dtool_nJyoWXwb 0 2 4 this 3 3950  5 other 1 3950  
665 14 Dtool_nJyo_KIO 4 485 3890 0 14 Dtool_nJyo_KIO 324 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  3 pos 1 3868  3 hpr 1 3868  
666 14 Dtool_nJyobgSC 4 485 3890 0 14 Dtool_nJyobgSC 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  3 pos 1 3868  3 hpr 1 3868  
667 14 Dtool_nJyohbI1 4 485 3890 0 14 Dtool_nJyohbI1 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
//////////////////////////////////////////////////////////////////// 8 4 this 3 3949  5 other 1 3950  1 x 1 3874  1 y 1 3874  1 z 1 3874  1 h 1 3874  1 p 1 3874  1 r 1 3874  
668 14 Dtool_nJyoFbxa 4 485 3890 0 14 Dtool_nJyoFbxa 324 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
//////////////////////////////////////////////////////////////////// 7 4 this 3 3949  1 x 1 3874  1 y 1 3874  1 z 1 3874  1 h 1 3874  1 p 1 3874  1 r 1 3874  
669 14 Dtool_nJyoPEZ1 4 486 3890 0 14 Dtool_nJyoPEZ1 325 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, leaving scale untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  3 pos 1 3868  4 quat 1 3871  
670 14 Dtool_nJyogdNI 4 486 3890 0 14 Dtool_nJyogdNI 328 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat
//       Access: Published
//  Description: Sets the translation and rotation component of the
//               transform, relative to the other node.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  3 pos 1 3868  4 quat 1 3871  
671 14 Dtool_nJyoeWuA 4 487 3890 0 14 Dtool_nJyoeWuA 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  3 hpr 1 3868  5 scale 1 3868  
672 14 Dtool_nJyoTEr7 4 487 3890 0 14 Dtool_nJyoTEr7 476 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  3 hpr 1 3868  5 scale 1 3868  
673 14 Dtool_nJyo4kfC 4 487 3890 0 14 Dtool_nJyo4kfC 476 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_hpr_scale, is the preferred way to update a
//               transform when both hpr and scale are to be changed.
//////////////////////////////////////////////////////////////////// 8 4 this 3 3949  5 other 1 3950  1 h 1 3874  1 p 1 3874  1 r 1 3874  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  
674 14 Dtool_nJyoWIYi 4 487 3890 0 14 Dtool_nJyoWIYi 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_hpr_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
//////////////////////////////////////////////////////////////////// 7 4 this 3 3949  1 h 1 3874  1 p 1 3874  1 r 1 3874  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  
675 14 Dtool_nJyoxukU 4 488 3890 0 14 Dtool_nJyoxukU 328 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  4 quat 1 3871  5 scale 1 3868  
676 14 Dtool_nJyo9poi 4 488 3890 0 14 Dtool_nJyo9poi 479 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_quat_scale
//       Access: Published
//  Description: Sets the rotation and scale components of the
//               transform, leaving translation untouched.  This, or
//               set_pos_quat_scale, is the preferred way to update a
//               transform when both quat and scale are to be changed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  4 quat 1 3871  5 scale 1 3868  
677 14 Dtool_nJyoWLWQ 4 489 3890 0 14 Dtool_nJyoWLWQ 332 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  3 pos 1 3868  3 hpr 1 3868  5 scale 1 3868  
678 14 Dtool_nJyo6XbK 4 489 3890 0 14 Dtool_nJyo6XbK 407 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  3 pos 1 3868  3 hpr 1 3868  5 scale 1 3868  
679 14 Dtool_nJyoVHTJ 4 489 3890 0 14 Dtool_nJyoVHTJ 376 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node.
//////////////////////////////////////////////////////////////////// 11 4 this 3 3949  5 other 1 3950  1 x 1 3874  1 y 1 3874  1 z 1 3874  1 h 1 3874  1 p 1 3874  1 r 1 3874  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  
680 14 Dtool_nJyoh3Bw 4 489 3890 0 14 Dtool_nJyoh3Bw 331 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components.
//////////////////////////////////////////////////////////////////// 10 4 this 3 3949  1 x 1 3874  1 y 1 3874  1 z 1 3874  1 h 1 3874  1 p 1 3874  1 r 1 3874  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  
681 14 Dtool_nJyolcNQ 4 490 3890 0 14 Dtool_nJyolcNQ 333 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Replaces the translation, rotation, and scale
//               components, implicitly setting shear to 0.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  3 pos 1 3868  4 quat 1 3871  5 scale 1 3868  
682 14 Dtool_nJyoAbZX 4 490 3890 0 14 Dtool_nJyoAbZX 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, and scale components, relative
//               to the other node, implicitly setting shear to 0.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  3 pos 1 3868  4 quat 1 3871  5 scale 1 3868  
683 14 Dtool_nJyo9p1n 4 491 3890 0 14 Dtool_nJyo9p1n 344 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  3 pos 1 3868  3 hpr 1 3868  5 scale 1 3868  5 shear 1 3868  
684 14 Dtool_nJyoyreF 4 491 3890 0 14 Dtool_nJyoyreF 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_hpr_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  5 other 1 3950  3 pos 1 3868  3 hpr 1 3868  5 scale 1 3868  5 shear 1 3868  
685 14 Dtool_nJyoFwaK 4 492 3890 0 14 Dtool_nJyoFwaK 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  3 pos 1 3868  4 quat 1 3871  5 scale 1 3868  5 shear 1 3868  
686 14 Dtool_nJyoSPDh 4 492 3890 0 14 Dtool_nJyoSPDh 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_pos_quat_scale_shear
//       Access: Published
//  Description: Completely replaces the transform with new
//               translation, rotation, scale, and shear components,
//               relative to the other node.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  5 other 1 3950  3 pos 1 3868  4 quat 1 3871  5 scale 1 3868  5 shear 1 3868  
687 14 Dtool_nJyo6Rbe 4 493 3890 0 14 Dtool_nJyo6Rbe 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Directly sets an arbitrary 4x4 transform matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 mat 1 3875  
688 14 Dtool_nJyoe6vZ 4 493 3890 0 14 Dtool_nJyoe6vZ 373 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_mat
//       Access: Published
//  Description: Converts the indicated matrix from the other's
//               coordinate space to the local coordinate space, and
//               applies it to the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  3 mat 1 3875  
689 14 Dtool_nJyoZ8BU 4 494 3890 0 14 Dtool_nJyoZ8BU 294 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_mat
//       Access: Published
//  Description: Completely removes any transform from the referenced
//               node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
690 14 Dtool_nJyouM1u 6 495 3866 0 14 Dtool_nJyouM1u 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_mat
//       Access: Published
//  Description: Returns true if a non-identity transform matrix has
//               been applied to the referenced node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
691 14 Dtool_nJyoIMoG 6 496 3875 0 14 Dtool_nJyoIMoG 379 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the transform matrix that has been applied to
//               the referenced node, or the identity matrix if no
//               matrix has been applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
692 14 Dtool_nJyo_p5g 7 496 3958 0 14 Dtool_nJyo_p5g 386 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_mat
//       Access: Published
//  Description: Returns the matrix that describes the coordinate
//               space of the bottom node, relative to the other
//               path's bottom node's coordinate space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
693 14 Dtool_nJyovdrT 4 497 3890 0 14 Dtool_nJyovdrT 320 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it
//               rotates to face the indicated point in space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 point 1 3884  2 up 1 3959  
694 14 Dtool_nJyoOO_M 4 497 3890 0 14 Dtool_nJyoOO_M 320 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it
//               rotates to face the indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 point 1 3884  
695 14 Dtool_nJyoCkNd 4 497 3890 0 14 Dtool_nJyoCkNd 384 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space, which
//               is relative to the other NodePath.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 point 1 3884  2 up 1 3959  
696 14 Dtool_nJyosdPC 4 497 3890 0 14 Dtool_nJyosdPC 384 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space, which
//               is relative to the other NodePath.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  5 point 1 3884  
697 14 Dtool_nJyo62Ls 4 497 3890 0 14 Dtool_nJyo62Ls 384 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space, which
//               is relative to the other NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 other 1 3950  
698 14 Dtool_nJyoooUy 4 497 3890 0 14 Dtool_nJyoooUy 378 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the hpr on this NodePath so that it rotates to
//               face the indicated point in space, which is relative
//               to the other NodePath.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  1 x 1 3874  1 y 1 3874  1 z 1 3874  
699 14 Dtool_nJyoTR_Y 4 497 3890 0 14 Dtool_nJyoTR_Y 467 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::look_at
//       Access: Published
//  Description: Sets the transform on this NodePath so that it
//               rotates to face the indicated point in space.  This
//               will overwrite any previously existing scale on the
//               node, although it will preserve any translation.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  1 x 1 3874  1 y 1 3874  1 z 1 3874  
700 14 Dtool_nJyo45wG 4 498 3890 0 14 Dtool_nJyo45wG 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 point 1 3884  2 up 1 3959  
701 14 Dtool_nJyoK5su 4 498 3890 0 14 Dtool_nJyoK5su 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 point 1 3884  
702 14 Dtool_nJyo_0_3 4 498 3890 0 14 Dtool_nJyo_0_3 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 point 1 3884  2 up 1 3959  
703 14 Dtool_nJyo1SnX 4 498 3890 0 14 Dtool_nJyo1SnX 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 other 1 3950  5 point 1 3884  
704 14 Dtool_nJyowIWV 4 498 3890 0 14 Dtool_nJyowIWV 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 other 1 3950  
705 14 Dtool_nJyozOob 4 498 3890 0 14 Dtool_nJyozOob 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  1 x 1 3874  1 y 1 3874  1 z 1 3874  
706 14 Dtool_nJyodJov 4 498 3890 0 14 Dtool_nJyodJov 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::heads_up
//       Access: Published
//  Description: Behaves like look_at(), but with a strong preference
//               to keeping the up vector oriented in the indicated
//               "up" direction.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  1 x 1 3874  1 y 1 3874  1 z 1 3874  
707 14 Dtool_nJyoOttf 7 499 3953 0 14 Dtool_nJyoOttf 396 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_point
//       Access: Published
//  Description: Given that the indicated point is in the coordinate
//               system of the other node, returns the same point in
//               this node's coordinate system.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  5 point 1 3868  
708 14 Dtool_nJyojeSO 7 500 3955 0 14 Dtool_nJyojeSO 399 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_relative_vector
//       Access: Published
//  Description: Given that the indicated vector is in the coordinate
//               system of the other node, returns the same vector in
//               this node's coordinate system.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  3 vec 1 3868  
709 14 Dtool_nJyogctf 6 501 3874 0 14 Dtool_nJyogctf 385 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_distance
//       Access: Published
//  Description: Returns the straight-line distance between this
//               referenced node's coordinate frame's origin, and that
//               of the other node's origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
710 14 Dtool_nJyoadvm 4 502 3890 0 14 Dtool_nJyoadvm 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 color 1 3961  8 priority 1 3889  
711 14 Dtool_nJyoV3Zs 4 502 3890 0 14 Dtool_nJyoV3Zs 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 color 1 3961  
712 14 Dtool_nJyo066r 4 502 3890 0 14 Dtool_nJyo066r 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  1 r 1 3874  1 g 1 3874  1 b 1 3874  1 a 1 3874  8 priority 1 3889  
713 14 Dtool_nJyoxcaQ 4 502 3890 0 14 Dtool_nJyoxcaQ 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  1 r 1 3874  1 g 1 3874  1 b 1 3874  1 a 1 3874  
714 14 Dtool_nJyoQ4OM 4 502 3890 0 14 Dtool_nJyoQ4OM 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color
//       Access: Published
//  Description: Applies a scene-graph color to the referenced node.
//               This color will apply to all geometry at this level
//               and below (that does not specify a new color or a
//               set_color_off()).
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  1 r 1 3874  1 g 1 3874  1 b 1 3874  
715 14 Dtool_nJyow27z 4 503 3890 0 14 Dtool_nJyow27z 565 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the geometry color.  This is normally the
//               default, but it may be useful to use this to
//               contradict set_color() at a higher node level (or,
//               with a priority, to override a set_color() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
716 14 Dtool_nJyoE1gC 4 503 3890 0 14 Dtool_nJyoE1gC 565 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the geometry color.  This is normally the
//               default, but it may be useful to use this to
//               contradict set_color() at a higher node level (or,
//               with a priority, to override a set_color() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
717 14 Dtool_nJyo1mr9 4 504 3890 0 14 Dtool_nJyo1mr9 463 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color
//       Access: Published
//  Description: Completely removes any color adjustment from the node.
//               This allows the natural color of the geometry, or
//               whatever color transitions might be otherwise
//               affecting the geometry, to show instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
718 14 Dtool_nJyobz4h 6 505 3866 0 14 Dtool_nJyobz4h 312 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color
//       Access: Published
//  Description: Returns true if a color has been applied to the given
//               node, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
719 14 Dtool_nJyokzr5 7 506 3964 0 14 Dtool_nJyokzr5 329 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color
//       Access: Published
//  Description: Returns the color that has been assigned to the node,
//               or black if no color has been assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
720 14 Dtool_nJyoh9q2 6 507 3866 0 14 Dtool_nJyoh9q2 453 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_color_scale
//       Access: Published
//  Description: Returns true if a color scale has been applied
//               to the referenced node, false otherwise.  It is still
//               possible that color at this node might have been
//               scaled by an ancestor node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
721 14 Dtool_nJyoNGLo 4 508 3890 0 14 Dtool_nJyoNGLo 499 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_color_scale
//       Access: Published
//  Description: Completely removes any color scale from the
//               referenced node.  This is preferable to simply
//               setting the color scale to identity, as it also
//               removes the overhead associated with having a color
//               scale at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
722 14 Dtool_nJyo5CtZ 4 509 3890 0 14 Dtool_nJyo5CtZ 334 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform,
//               leaving translation and rotation untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 scale 1 3961  8 priority 1 3889  
723 14 Dtool_nJyoiG1C 4 509 3890 0 14 Dtool_nJyoiG1C 334 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform,
//               leaving translation and rotation untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 scale 1 3961  
724 14 Dtool_nJyoO7kn 4 509 3890 0 14 Dtool_nJyoO7kn 272 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 sa 1 3874  8 priority 1 3889  
725 14 Dtool_nJyoUFGH 4 509 3890 0 14 Dtool_nJyoUFGH 272 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 sa 1 3874  
726 14 Dtool_nJyoeapS 4 510 3890 0 14 Dtool_nJyoeapS 388 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: multiplies the color scale component of the transform,
//               with previous color scale leaving translation and 
//               rotation untouched.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 scale 1 3961  8 priority 1 3889  
727 14 Dtool_nJyo3nOp 4 510 3890 0 14 Dtool_nJyo3nOp 388 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: multiplies the color scale component of the transform,
//               with previous color scale leaving translation and 
//               rotation untouched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 scale 1 3961  
728 14 Dtool_nJyoB_fn 4 510 3890 0 14 Dtool_nJyoB_fn 276 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 sa 1 3874  8 priority 1 3889  
729 14 Dtool_nJyob_d5 4 510 3890 0 14 Dtool_nJyob_d5 276 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::compose_color_scale
//       Access: Published
//  Description: Sets the color scale component of the transform
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 sa 1 3874  
730 14 Dtool_nJyohzGl 4 511 3890 0 14 Dtool_nJyohzGl 900 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale_off
//       Access: Published
//  Description: Disables any color scale attribute inherited from
//               above.  This is not the same thing as
//               clear_color_scale(), which undoes any previous
//               set_color_scale() operation on this node; rather,
//               this actively disables any set_color_scale() that
//               might be inherited from a parent node.  This also
//               disables set_alpha_scale() at the same time.
//
//               It is legal to specify a new color scale on the same
//               node with a subsequent call to set_color_scale() or
//               set_alpha_scale(); this new scale will apply to lower
//               geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
731 14 Dtool_nJyoPZ4L 4 511 3890 0 14 Dtool_nJyoPZ4L 900 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_color_scale_off
//       Access: Published
//  Description: Disables any color scale attribute inherited from
//               above.  This is not the same thing as
//               clear_color_scale(), which undoes any previous
//               set_color_scale() operation on this node; rather,
//               this actively disables any set_color_scale() that
//               might be inherited from a parent node.  This also
//               disables set_alpha_scale() at the same time.
//
//               It is legal to specify a new color scale on the same
//               node with a subsequent call to set_color_scale() or
//               set_alpha_scale(); this new scale will apply to lower
//               geometry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
732 14 Dtool_nJyor8w8 4 512 3890 0 14 Dtool_nJyor8w8 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_alpha_scale
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//               without (much) affecting the color scale.  Note that
//               any priority specified will also apply to the color
//               scale.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 scale 1 3874  8 priority 1 3889  
733 14 Dtool_nJyou4Ux 4 512 3890 0 14 Dtool_nJyou4Ux 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_alpha_scale
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//               without (much) affecting the color scale.  Note that
//               any priority specified will also apply to the color
//               scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 scale 1 3874  
734 14 Dtool_nJyoFCj2 4 513 3890 0 14 Dtool_nJyoFCj2 469 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_all_color_scale
//       Access: Published
//  Description: Scales all the color components of the object by the
//               same amount, darkening the object, without (much)
//               affecting alpha.  Note that any priority specified
//               will also apply to the alpha scale.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 scale 1 3874  8 priority 1 3889  
735 14 Dtool_nJyoWf2B 4 513 3890 0 14 Dtool_nJyoWf2B 469 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_all_color_scale
//       Access: Published
//  Description: Scales all the color components of the object by the
//               same amount, darkening the object, without (much)
//               affecting alpha.  Note that any priority specified
//               will also apply to the alpha scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 scale 1 3874  
736 14 Dtool_nJyoUANw 4 514 3890 0 14 Dtool_nJyoUANw 261 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sr
//       Access: Published
//  Description: Sets the red scale component of the transform
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  2 sr 1 3874  
737 14 Dtool_nJyoMqiu 4 515 3890 0 14 Dtool_nJyoMqiu 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sg
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  2 sg 1 3874  
738 14 Dtool_nJyoU_xt 4 516 3890 0 14 Dtool_nJyoU_xt 262 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sb
//       Access: Published
//  Description: Sets the blue scale component of the transform
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  2 sb 1 3874  
739 14 Dtool_nJyocBnt 4 517 3890 0 14 Dtool_nJyocBnt 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_sa
//       Access: Published
//  Description: Sets the alpha scale component of the transform
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  2 sa 1 3874  
740 14 Dtool_nJyoH9dO 6 518 3961 0 14 Dtool_nJyoH9dO 510 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_color_scale
//       Access: Published
//  Description: Returns the complete color scale vector that has been
//               applied to this node via a previous call to
//               set_color_scale() and/or set_alpha_scale(), or all
//               1's (identity) if no scale has been applied to this
//               particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
741 14 Dtool_nJyoXd9T 6 519 3874 0 14 Dtool_nJyoXd9T 261 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sr
//       Access: Published
//  Description: Gets the red scale component of the transform
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
742 14 Dtool_nJyo_7RS 6 520 3874 0 14 Dtool_nJyo_7RS 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sg
//       Access: Published
//  Description: Gets the green scale component of the transform
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
743 14 Dtool_nJyoXPhR 6 521 3874 0 14 Dtool_nJyoXPhR 262 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sb
//       Access: Published
//  Description: Gets the blue scale component of the transform
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
744 14 Dtool_nJyoveXR 6 522 3874 0 14 Dtool_nJyoveXR 263 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_sa
//       Access: Published
//  Description: Gets the alpha scale component of the transform
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
745 14 Dtool_nJyoOmzA 4 523 3890 0 14 Dtool_nJyoOmzA 593 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light
//       Access: Published
//  Description: Adds the indicated Light or PolylightNode to the list
//               of lights that illuminate geometry at this node and
//               below.  The light itself should be parented into the
//               scene graph elsewhere, to represent the light's
//               position in space; but until set_light() is called it
//               will illuminate no geometry.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 light 1 3950  8 priority 1 3889  
746 14 Dtool_nJyoVcVg 4 523 3890 0 14 Dtool_nJyoVcVg 593 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light
//       Access: Published
//  Description: Adds the indicated Light or PolylightNode to the list
//               of lights that illuminate geometry at this node and
//               below.  The light itself should be parented into the
//               scene graph elsewhere, to represent the light's
//               position in space; but until set_light() is called it
//               will illuminate no geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 light 1 3950  
747 14 Dtool_nJyomGGU 4 524 3890 0 14 Dtool_nJyomGGU 712 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without using the indicated Light.  This is different
//               from not specifying the Light; rather, this
//               specifically contradicts set_light() at a higher node
//               level (or, with a priority, overrides a set_light()
//               at a lower level).
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 light 1 3950  8 priority 1 3889  
748 14 Dtool_nJyos0Fm 4 524 3890 0 14 Dtool_nJyos0Fm 712 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without using the indicated Light.  This is different
//               from not specifying the Light; rather, this
//               specifically contradicts set_light() at a higher node
//               level (or, with a priority, overrides a set_light()
//               at a lower level).
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 light 1 3950  
749 14 Dtool_nJyo3hHT 4 524 3890 0 14 Dtool_nJyo3hHT 735 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no lights at all.  This is different
//               from not specifying a light; rather, this
//               specifically contradicts set_light() at a higher
//               node level (or, with a priority, overrides a
//               set_light() at a lower level).
//
//               If no lights are in effect on a particular piece of
//               geometry, that geometry is rendered with lighting
//               disabled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
750 14 Dtool_nJyo8iuh 4 524 3890 0 14 Dtool_nJyo8iuh 735 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_light_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no lights at all.  This is different
//               from not specifying a light; rather, this
//               specifically contradicts set_light() at a higher
//               node level (or, with a priority, overrides a
//               set_light() at a lower level).
//
//               If no lights are in effect on a particular piece of
//               geometry, that geometry is rendered with lighting
//               disabled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
751 14 Dtool_nJyo_y39 4 525 3890 0 14 Dtool_nJyo_y39 382 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Completely removes any lighting operations that may
//               have been set via set_light() or set_light_off()
//               from this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
752 14 Dtool_nJyoF_28 4 525 3890 0 14 Dtool_nJyoF_28 318 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_light
//       Access: Published
//  Description: Removes any reference to the indicated Light or
//               PolylightNode from the NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 light 1 3950  
753 14 Dtool_nJyoLCWi 6 526 3866 0 14 Dtool_nJyoLCWi 460 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light
//       Access: Published
//  Description: Returns true if the indicated Light or PolylightNode
//               has been specifically enabled on this particular
//               node.  This means that someone called set_light() on
//               this node with the indicated light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 light 1 3950  
754 14 Dtool_nJyoKg80 6 527 3866 0 14 Dtool_nJyoKg80 438 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if all Lights have been specifically
//               disabled on this particular node.  This means that
//               someone called set_light_off() on this node with no
//               parameters.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
755 14 Dtool_nJyo3UBH 6 527 3866 0 14 Dtool_nJyo3UBH 582 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_light_off
//       Access: Published
//  Description: Returns true if the indicated Light has been
//               specifically disabled on this particular node.  This
//               means that someone called set_light_off() on this
//               node with the indicated light.
//
//               This interface does not support PolylightNodes, which
//               cannot be turned off at a lower level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 light 1 3950  
756 14 Dtool_nJyopYL4 4 528 3890 0 14 Dtool_nJyopYL4 609 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane
//       Access: Published
//  Description: Adds the indicated clipping plane to the list of
//               planes that apply to geometry at this node and below.
//               The clipping plane itself, a PlaneNode, should be
//               parented into the scene graph elsewhere, to represent
//               the plane's position in space; but until
//               set_clip_plane() is called it will clip no geometry.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  10 clip_plane 1 3950  8 priority 1 3889  
757 14 Dtool_nJyo1XO3 4 528 3890 0 14 Dtool_nJyo1XO3 609 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane
//       Access: Published
//  Description: Adds the indicated clipping plane to the list of
//               planes that apply to geometry at this node and below.
//               The clipping plane itself, a PlaneNode, should be
//               parented into the scene graph elsewhere, to represent
//               the plane's position in space; but until
//               set_clip_plane() is called it will clip no geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  10 clip_plane 1 3950  
758 14 Dtool_nJyo6bye 4 529 3890 0 14 Dtool_nJyo6bye 632 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without being clipped by the indicated PlaneNode.
//               This is different from not specifying the PlaneNode;
//               rather, this specifically contradicts
//               set_clip_plane() at a higher node level (or, with a
//               priority, overrides a set_clip_plane() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  10 clip_plane 1 3950  8 priority 1 3889  
759 14 Dtool_nJyo2qvC 4 529 3890 0 14 Dtool_nJyo2qvC 632 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               without being clipped by the indicated PlaneNode.
//               This is different from not specifying the PlaneNode;
//               rather, this specifically contradicts
//               set_clip_plane() at a higher node level (or, with a
//               priority, overrides a set_clip_plane() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  10 clip_plane 1 3950  
760 14 Dtool_nJyo28yc 4 529 3890 0 14 Dtool_nJyo28yc 800 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no clip_planes at all.  This is different
//               from not specifying a clip_plane; rather, this
//               specifically contradicts set_clip_plane() at a higher
//               node level (or, with a priority, overrides a
//               set_clip_plane() at a lower level).
//
//               If no clip_planes are in effect on a particular piece
//               of geometry, that geometry is rendered without being
//               clipped (other than by the viewing frustum).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
761 14 Dtool_nJyocSB6 4 529 3890 0 14 Dtool_nJyocSB6 800 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_clip_plane_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no clip_planes at all.  This is different
//               from not specifying a clip_plane; rather, this
//               specifically contradicts set_clip_plane() at a higher
//               node level (or, with a priority, overrides a
//               set_clip_plane() at a lower level).
//
//               If no clip_planes are in effect on a particular piece
//               of geometry, that geometry is rendered without being
//               clipped (other than by the viewing frustum).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
762 14 Dtool_nJyoteSh 4 530 3890 0 14 Dtool_nJyoteSh 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Completely removes any clip planes that may have been
//               set via set_clip_plane() or set_clip_plane_off() from
//               this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
763 14 Dtool_nJyoBURf 4 530 3890 0 14 Dtool_nJyoBURf 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_clip_plane
//       Access: Published
//  Description: Removes any reference to the indicated clipping plane
//               from the NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  10 clip_plane 1 3950  
764 14 Dtool_nJyoUt_T 6 531 3866 0 14 Dtool_nJyoUt_T 467 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically applied to this particular node.  This
//               means that someone called set_clip_plane() on this
//               node with the indicated clip_plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  10 clip_plane 1 3950  
765 14 Dtool_nJyovnN5 6 532 3866 0 14 Dtool_nJyovnN5 457 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if all clipping planes have been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with no parameters.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
766 14 Dtool_nJyoZ8Wd 6 532 3866 0 14 Dtool_nJyoZ8Wd 476 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_clip_plane_off
//       Access: Published
//  Description: Returns true if the indicated clipping plane has been
//               specifically disabled on this particular node.  This
//               means that someone called set_clip_plane_off() on
//               this node with the indicated clip_plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  10 clip_plane 1 3950  
767 14 Dtool_nJyo_gnY 4 533 3890 0 14 Dtool_nJyo_gnY 567 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The two points are understood
//               to be relative to this node.  When these points are
//               projected into screen space, they define the
//               diagonally-opposite points that determine the scissor
//               region.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  1 a 1 3884  1 b 1 3884  
768 14 Dtool_nJyoFyJ0 4 533 3890 0 14 Dtool_nJyoFyJ0 648 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four points are understood
//               to be relative to this node.  When these points are
//               projected into screen space, they define the
//               bounding volume of the scissor region (the scissor
//               region is the smallest onscreen rectangle that
//               encloses all four points).
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  1 a 1 3884  1 b 1 3884  1 c 1 3884  1 d 1 3884  
769 14 Dtool_nJyoWnEw 4 533 3890 0 14 Dtool_nJyoWnEw 582 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The two points are understood
//               to be relative to the indicated other node.  When
//               these points are projected into screen space, they
//               define the diagonally-opposite points that determine
//               the scissor region.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  1 a 1 3884  1 b 1 3884  
770 14 Dtool_nJyoFDXe 4 533 3890 0 14 Dtool_nJyoFDXe 663 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four points are understood
//               to be relative to the indicated other node.  When
//               these points are projected into screen space, they
//               define the bounding volume of the scissor region (the
//               scissor region is the smallest onscreen rectangle
//               that encloses all four points).
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  5 other 1 3950  1 a 1 3884  1 b 1 3884  1 c 1 3884  1 d 1 3884  
771 14 Dtool_nJyou_n1 4 533 3890 0 14 Dtool_nJyou_n1 623 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_scissor
//       Access: Published
//  Description: Sets up a scissor region on the nodes rendered at
//               this level and below.  The four coordinates are
//               understood to define a rectangle in screen space.
//               These numbers are relative to the current
//               DisplayRegion, where (0,0) is the lower-left corner
//               of the DisplayRegion, and (1,1) is the upper-right
//               corner.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  4 left 1 3874  5 right 1 3874  6 bottom 1 3874  3 top 1 3874  
772 14 Dtool_nJyo0gei 4 534 3890 0 14 Dtool_nJyo0gei 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_scissor
//       Access: Published
//  Description: Removes the scissor region that was defined at this
//               node level by a previous call to set_scissor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
773 14 Dtool_nJyouv7f 6 535 3866 0 14 Dtool_nJyouv7f 607 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_scissor
//       Access: Published
//  Description: Returns true if a scissor region was defined at this
//               node by a previous call to set_scissor().  This does
//               not check for scissor regions inherited from a parent
//               class.  It also does not check for the presence of a
//               low-level ScissorAttrib, which is different from the
//               ScissorEffect added by set_scissor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
774 14 Dtool_nJyoxqDK 4 536 3890 0 14 Dtool_nJyoxqDK 1343 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_bin
//       Access: Published
//  Description: Assigns the geometry at this level and below to the
//               named rendering bin.  It is the user's responsibility
//               to ensure that such a bin already exists, either via
//               the cull-bin Configrc variable, or by explicitly
//               creating a GeomBin of the appropriate type at
//               runtime.
//
//               There are two default bins created when Panda is
//               started: "default" and "fixed".  Normally, all
//               geometry is assigned to "default" unless specified
//               otherwise.  This bin renders opaque geometry in
//               state-sorted order, followed by transparent geometry
//               sorted back-to-front.  If any geometry is assigned to
//               "fixed", this will be rendered following all the
//               geometry in "default", in the order specified by
//               draw_order for each piece of geometry so assigned.
//
//               The draw_order parameter is meaningful only for
//               GeomBinFixed type bins, e.g. "fixed".  Other kinds of
//               bins ignore it.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  8 bin_name 1 3924  10 draw_order 1 3889  8 priority 1 3889  
775 14 Dtool_nJyoZBGG 4 536 3890 0 14 Dtool_nJyoZBGG 1343 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_bin
//       Access: Published
//  Description: Assigns the geometry at this level and below to the
//               named rendering bin.  It is the user's responsibility
//               to ensure that such a bin already exists, either via
//               the cull-bin Configrc variable, or by explicitly
//               creating a GeomBin of the appropriate type at
//               runtime.
//
//               There are two default bins created when Panda is
//               started: "default" and "fixed".  Normally, all
//               geometry is assigned to "default" unless specified
//               otherwise.  This bin renders opaque geometry in
//               state-sorted order, followed by transparent geometry
//               sorted back-to-front.  If any geometry is assigned to
//               "fixed", this will be rendered following all the
//               geometry in "default", in the order specified by
//               draw_order for each piece of geometry so assigned.
//
//               The draw_order parameter is meaningful only for
//               GeomBinFixed type bins, e.g. "fixed".  Other kinds of
//               bins ignore it.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  8 bin_name 1 3924  10 draw_order 1 3889  
776 14 Dtool_nJyobzEW 4 537 3890 0 14 Dtool_nJyobzEW 337 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_bin
//       Access: Published
//  Description: Completely removes any bin adjustment that may have
//               been set via set_bin() from this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
777 14 Dtool_nJyoTmsC 6 538 3866 0 14 Dtool_nJyoTmsC 359 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_bin
//       Access: Published
//  Description: Returns true if the node has been assigned to the a
//               particular rendering bin via set_bin(), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
778 14 Dtool_nJyoLAFg 6 539 3924 0 14 Dtool_nJyoLAFg 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin that this particular node
//               was assigned to via set_bin(), or the empty string if
//               no bin was assigned.  See set_bin() and has_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
779 14 Dtool_nJyo2Nw9 6 540 3889 0 14 Dtool_nJyo2Nw9 444 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bin_draw_order
//       Access: Published
//  Description: Returns the drawing order associated with the bin
//               that this particular node was assigned to via
//               set_bin(), or 0 if no bin was assigned.  See
//               set_bin() and has_bin().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
780 14 Dtool_nJyoFEvx 4 541 3890 0 14 Dtool_nJyoFEvx 617 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the convenience single-texture variant of
//               this method; it is now superceded by set_texture()
//               that accepts a stage and texture.  You may use this
//               method if you just want to adjust the default stage.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  3 tex 1 3965  8 priority 1 3889  
781 14 Dtool_nJyochTm 4 541 3890 0 14 Dtool_nJyochTm 617 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the convenience single-texture variant of
//               this method; it is now superceded by set_texture()
//               that accepts a stage and texture.  You may use this
//               method if you just want to adjust the default stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 tex 1 3965  
782 14 Dtool_nJyogM3e 4 541 3890 0 14 Dtool_nJyogM3e 659 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 stage 1 3906  3 tex 1 3965  8 priority 1 3889  
783 14 Dtool_nJyotHou 4 541 3890 0 14 Dtool_nJyotHou 659 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  3 tex 1 3965  
784 14 Dtool_nJyoHq1d 4 542 3890 0 14 Dtool_nJyoHq1d 595 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  8 priority 1 3889  
785 14 Dtool_nJyowSb0 4 542 3890 0 14 Dtool_nJyowSb0 595 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 stage 1 3906  
786 14 Dtool_nJyow4bU 4 542 3890 0 14 Dtool_nJyow4bU 585 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
787 14 Dtool_nJyo_4vA 4 542 3890 0 14 Dtool_nJyo_4vA 585 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
788 14 Dtool_nJyoNNBp 4 543 3890 0 14 Dtool_nJyoNNBp 511 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Completely removes any texture adjustment that may
//               have been set via set_texture() or set_texture_off()
//               from this particular node.  This allows whatever
//               textures might be otherwise affecting the geometry to
//               show instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
789 14 Dtool_nJyocr3x 4 543 3890 0 14 Dtool_nJyocr3x 311 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_texture
//       Access: Published
//  Description: Removes any reference to the indicated texture stage
//               from the NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 stage 1 3906  
790 14 Dtool_nJyoqlwf 6 544 3866 0 14 Dtool_nJyoqlwf 578 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if a texture has been applied to this
//               particular node via set_texture(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               texturing, as there may be a texture in effect from a
//               higher or lower level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
791 14 Dtool_nJyoCNaQ 6 544 3866 0 14 Dtool_nJyoCNaQ 592 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               enabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture() on this node with the indicated stage
//               name, or the stage_name is the default stage_name,
//               and someone called set_texture() on this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
792 14 Dtool_nJyoxE64 6 545 3866 0 14 Dtool_nJyoxE64 597 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node via
//               set_texture_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered untextured, as there may be a
//               texture in effect from a higher or lower level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
793 14 Dtool_nJyoL45P 6 545 3866 0 14 Dtool_nJyoL45P 585 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texture_off
//       Access: Published
//  Description: Returns true if texturing has been specifically
//               disabled on this particular node for the indicated
//               stage.  This means that someone called
//               set_texture_off() on this node with the indicated
//               stage name, or that someone called set_texture_off()
//               on this node to remove all stages.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
794 14 Dtool_nJyoPll3 7 546 3965 0 14 Dtool_nJyoPll3 618 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the base-level texture that has been set on
//               this particular node, or NULL if no texture has been
//               set.  This is not necessarily the texture that will
//               be applied to the geometry at or below this level, as
//               another texture at a higher or lower level may
//               override.
//
//               See also find_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
795 14 Dtool_nJyohMNo 7 546 3965 0 14 Dtool_nJyohMNo 392 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_texture
//       Access: Published
//  Description: Returns the texture that has been set on the
//               indicated stage for this particular node, or NULL if
//               no texture has been set for this stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
796 14 Dtool_nJyox_K4 4 547 3890 0 14 Dtool_nJyox_K4 220 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  3 sha 1 3967  8 priority 1 3889  
797 14 Dtool_nJyoOCeD 4 547 3890 0 14 Dtool_nJyoOCeD 220 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 sha 1 3967  
798 14 Dtool_nJyoaMRX 4 548 3890 0 14 Dtool_nJyoaMRX 224 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_off
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
799 14 Dtool_nJyozipq 4 548 3890 0 14 Dtool_nJyozipq 224 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_off
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
800 14 Dtool_nJyobHmm 4 549 3890 0 14 Dtool_nJyobHmm 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description: overloaded for auto shader customization
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  13 shader_switch 1 3931  8 priority 1 3889  
801 14 Dtool_nJyo0nyW 4 549 3890 0 14 Dtool_nJyo0nyW 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description: overloaded for auto shader customization
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  13 shader_switch 1 3931  
802 14 Dtool_nJyo0Slp 4 549 3890 0 14 Dtool_nJyo0Slp 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
803 14 Dtool_nJyo7C4V 4 549 3890 0 14 Dtool_nJyo7C4V 225 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_auto
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
804 14 Dtool_nJyoWwTt 4 550 3890 0 14 Dtool_nJyoWwTt 222 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
805 14 Dtool_nJyoFwTI 4 551 3890 0 14 Dtool_nJyoFwTI 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3881  8 priority 1 3889  
806 14 Dtool_nJyoZA0n 4 551 3890 0 14 Dtool_nJyoZA0n 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3881  
807 14 Dtool_nJyoFg1b 4 551 3890 0 14 Dtool_nJyoFg1b 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3875  8 priority 1 3889  
808 14 Dtool_nJyoZwV7 4 551 3890 0 14 Dtool_nJyoZwV7 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3875  
809 14 Dtool_nJyoxeRP 4 551 3890 0 14 Dtool_nJyoxeRP 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3878  8 priority 1 3889  
810 14 Dtool_nJyob_d_ 4 551 3890 0 14 Dtool_nJyob_d_ 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3878  
811 14 Dtool_nJyoHeJA 4 551 3890 0 14 Dtool_nJyoHeJA 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3868  8 priority 1 3889  
812 14 Dtool_nJyoh9Vw 4 551 3890 0 14 Dtool_nJyoh9Vw 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3868  
813 14 Dtool_nJyoceBx 4 551 3890 0 14 Dtool_nJyoceBx 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3961  8 priority 1 3889  
814 14 Dtool_nJyo39Nh 4 551 3890 0 14 Dtool_nJyo39Nh 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3961  
815 14 Dtool_nJyoRf3C 4 551 3890 0 14 Dtool_nJyoRf3C 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  2 np 1 3950  8 priority 1 3889  
816 14 Dtool_nJyo8e3L 4 551 3890 0 14 Dtool_nJyo8e3L 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  2 np 1 3950  
817 14 Dtool_nJyoE2Jf 4 551 3890 0 14 Dtool_nJyoE2Jf 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3972  8 priority 1 3889  
818 14 Dtool_nJyovkoD 4 551 3890 0 14 Dtool_nJyovkoD 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3972  
819 14 Dtool_nJyoW3Jm 4 551 3890 0 14 Dtool_nJyoW3Jm 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3975  8 priority 1 3889  
820 14 Dtool_nJyo9noK 4 551 3890 0 14 Dtool_nJyo9noK 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3975  
821 14 Dtool_nJyo45dC 4 551 3890 0 14 Dtool_nJyo45dC 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3978  8 priority 1 3889  
822 14 Dtool_nJyonSPS 4 551 3890 0 14 Dtool_nJyonSPS 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3978  
823 14 Dtool_nJyo9Adi 4 551 3890 0 14 Dtool_nJyo9Adi 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3981  8 priority 1 3889  
824 14 Dtool_nJyog5Py 4 551 3890 0 14 Dtool_nJyog5Py 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3981  
825 14 Dtool_nJyoh3eC 4 551 3890 0 14 Dtool_nJyoh3eC 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3984  8 priority 1 3889  
826 14 Dtool_nJyoedQS 4 551 3890 0 14 Dtool_nJyoedQS 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3984  
827 14 Dtool_nJyoUqc7 4 551 3890 0 14 Dtool_nJyoUqc7 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3987  8 priority 1 3889  
828 14 Dtool_nJyosAg3 4 551 3890 0 14 Dtool_nJyosAg3 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3987  
829 14 Dtool_nJyoHOuQ 4 551 3890 0 14 Dtool_nJyoHOuQ 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  1 v 1 3990  8 priority 1 3889  
830 14 Dtool_nJyoQFnY 4 551 3890 0 14 Dtool_nJyoQFnY 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  1 v 1 3990  
831 14 Dtool_nJyo6LVn 4 551 3890 0 14 Dtool_nJyo6LVn 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  3 tex 1 3965  8 priority 1 3889  
832 14 Dtool_nJyodp1G 4 551 3890 0 14 Dtool_nJyodp1G 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  3 tex 1 3965  
833 14 Dtool_nJyoJYfv 4 551 3890 0 14 Dtool_nJyoJYfv 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 7 4 this 3 3949  2 id 1 3970  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  2 n4 1 3993  8 priority 1 3889  
834 14 Dtool_nJyoArVy 4 551 3890 0 14 Dtool_nJyoArVy 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  2 id 1 3970  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  2 n4 1 3993  
835 14 Dtool_nJyofnoG 4 551 3890 0 14 Dtool_nJyofnoG 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  2 id 1 3970  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  
836 14 Dtool_nJyo_OeN 4 551 3890 0 14 Dtool_nJyo_OeN 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3970  2 n1 1 3993  2 n2 1 3993  
837 14 Dtool_nJyoeaWg 4 551 3890 0 14 Dtool_nJyoeaWg 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3970  2 n1 1 3993  
838 14 Dtool_nJyoMBp0 4 551 3890 0 14 Dtool_nJyoMBp0 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  2 id 1 3970  
839 14 Dtool_nJyo4rQe 4 551 3890 0 14 Dtool_nJyo4rQe 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 inp 1 3994  
840 14 Dtool_nJyofqhO 4 551 3890 0 14 Dtool_nJyofqhO 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3881  8 priority 1 3889  
841 14 Dtool_nJyoxd5u 4 551 3890 0 14 Dtool_nJyoxd5u 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3881  
842 14 Dtool_nJyowrRw 4 551 3890 0 14 Dtool_nJyowrRw 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3875  8 priority 1 3889  
843 14 Dtool_nJyoldpQ 4 551 3890 0 14 Dtool_nJyoldpQ 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3875  
844 14 Dtool_nJyoG_DM 4 551 3890 0 14 Dtool_nJyoG_DM 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3878  8 priority 1 3889  
845 14 Dtool_nJyoaUXX 4 551 3890 0 14 Dtool_nJyoaUXX 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3878  
846 14 Dtool_nJyoXpDE 4 551 3890 0 14 Dtool_nJyoXpDE 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3868  8 priority 1 3889  
847 14 Dtool_nJyoVqWP 4 551 3890 0 14 Dtool_nJyoVqWP 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3868  
848 14 Dtool_nJyoniD8 4 551 3890 0 14 Dtool_nJyoniD8 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3961  8 priority 1 3889  
849 14 Dtool_nJyo_uXH 4 551 3890 0 14 Dtool_nJyo_uXH 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3961  
850 14 Dtool_nJyoZ40x 4 551 3890 0 14 Dtool_nJyoZ40x 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  2 np 1 3950  8 priority 1 3889  
851 14 Dtool_nJyos13w 4 551 3890 0 14 Dtool_nJyos13w 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  2 np 1 3950  
852 14 Dtool_nJyoaewG 4 551 3890 0 14 Dtool_nJyoaewG 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3972  8 priority 1 3889  
853 14 Dtool_nJyo5wRm 4 551 3890 0 14 Dtool_nJyo5wRm 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3972  
854 14 Dtool_nJyoBsxG 4 551 3890 0 14 Dtool_nJyoBsxG 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3975  8 priority 1 3889  
855 14 Dtool_nJyowiSm 4 551 3890 0 14 Dtool_nJyowiSm 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3975  
856 14 Dtool_nJyo9DPd 4 551 3890 0 14 Dtool_nJyo9DPd 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3978  8 priority 1 3889  
857 14 Dtool_nJyoErcN 4 551 3890 0 14 Dtool_nJyoErcN 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3978  
858 14 Dtool_nJyodH2d 4 551 3890 0 14 Dtool_nJyodH2d 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3981  8 priority 1 3889  
859 14 Dtool_nJyoknDO 4 551 3890 0 14 Dtool_nJyoknDO 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3981  
860 14 Dtool_nJyo9ade 4 551 3890 0 14 Dtool_nJyo9ade 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3984  8 priority 1 3889  
861 14 Dtool_nJyoEiqO 4 551 3890 0 14 Dtool_nJyoEiqO 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3984  
862 14 Dtool_nJyo911c 4 551 3890 0 14 Dtool_nJyo911c 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3987  8 priority 1 3889  
863 14 Dtool_nJyo83rf 4 551 3890 0 14 Dtool_nJyo83rf 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3987  
864 14 Dtool_nJyoC6Kt 4 551 3890 0 14 Dtool_nJyoC6Kt 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  1 v 1 3990  8 priority 1 3889  
865 14 Dtool_nJyoSFQl 4 551 3890 0 14 Dtool_nJyoSFQl 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  1 v 1 3990  
866 14 Dtool_nJyoxy3P 4 551 3890 0 14 Dtool_nJyoxy3P 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  3 tex 1 3965  8 priority 1 3889  
867 14 Dtool_nJyoLvPw 4 551 3890 0 14 Dtool_nJyoLvPw 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  3 tex 1 3965  
868 14 Dtool_nJyom7yf 4 551 3890 0 14 Dtool_nJyom7yf 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 7 4 this 3 3949  2 id 1 3924  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  2 n4 1 3993  8 priority 1 3889  
869 14 Dtool_nJyo6xXU 4 551 3890 0 14 Dtool_nJyo6xXU 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  2 id 1 3924  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  2 n4 1 3993  
870 14 Dtool_nJyomMEm 4 551 3890 0 14 Dtool_nJyomMEm 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  2 id 1 3924  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  
871 14 Dtool_nJyoT_ya 4 551 3890 0 14 Dtool_nJyoT_ya 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  2 id 1 3924  2 n1 1 3993  2 n2 1 3993  
872 14 Dtool_nJyo5n6P 4 551 3890 0 14 Dtool_nJyo5n6P 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  2 id 1 3924  2 n1 1 3993  
873 14 Dtool_nJyoegoh 4 551 3890 0 14 Dtool_nJyoegoh 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  2 id 1 3924  
874 14 Dtool_nJyomA_3 4 552 3890 0 14 Dtool_nJyomA_3 228 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  2 id 1 3970  
875 14 Dtool_nJyoH2LE 4 552 3890 0 14 Dtool_nJyoH2LE 228 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  2 id 1 3924  
876 14 Dtool_nJyos3Az 4 553 3890 0 14 Dtool_nJyos3Az 435 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_instance_count
//       Access: Published
//  Description: Sets the geometry instance count, or 0 if
//               geometry instancing should be disabled. Do not
//               confuse with instanceTo which only applies to
//               animation instancing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  14 instance_count 1 3889  
877 14 Dtool_nJyoXRer 7 554 3967 0 14 Dtool_nJyoXRer 220 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
878 14 Dtool_nJyoBy46 7 555 3994 0 14 Dtool_nJyoBy46 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  2 id 1 3970  
879 14 Dtool_nJyosHFu 7 555 3994 0 14 Dtool_nJyosHFu 226 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  2 id 1 3924  
880 14 Dtool_nJyoFCMn 6 556 3889 0 14 Dtool_nJyoFCMn 323 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_instance_count
//       Access: Published
//  Description: Returns the geometry instance count, or 0 if
//               disabled. See set_instance_count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
881 14 Dtool_nJyoM5dH 4 557 3890 0 14 Dtool_nJyoM5dH 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 stage 1 3906  9 transform 1 3864  
882 14 Dtool_nJyo7rVh 4 557 3890 0 14 Dtool_nJyo7rVh 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_transform
//       Access: Published
//  Description: Sets the texture matrix on the current node to the
//               indicated transform for the given stage.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  9 transform 1 3864  
883 14 Dtool_nJyoPvbV 4 558 3890 0 14 Dtool_nJyoPvbV 280 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes all texture matrices from the current node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
884 14 Dtool_nJyo7hmM 4 558 3890 0 14 Dtool_nJyo7hmM 313 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_transform
//       Access: Published
//  Description: Removes the texture matrix on the current node for
//               the given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 stage 1 3906  
885 14 Dtool_nJyoW20G 6 559 3866 0 14 Dtool_nJyoW20G 336 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_transform
//       Access: Published
//  Description: Returns true if there is an explicit texture matrix
//               on the current node for the given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
886 14 Dtool_nJyokXI_ 7 560 3864 0 14 Dtool_nJyokXI_ 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, relative to the other node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  5 stage 1 3906  
887 14 Dtool_nJyoz2ne 7 560 3864 0 14 Dtool_nJyoz2ne 409 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_transform
//       Access: Published
//  Description: Returns the texture matrix on the current node for the
//               given stage, or identity transform if there is no
//               explicit transform set for the given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
888 14 Dtool_nJyodjnO 4 561 3890 0 14 Dtool_nJyodjnO 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 stage 1 3906  2 uv 1 3878  
889 14 Dtool_nJyowlj_ 4 561 3890 0 14 Dtool_nJyowlj_ 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  5 stage 1 3906  1 u 1 3874  1 v 1 3874  
890 14 Dtool_nJyoD4GX 4 561 3890 0 14 Dtool_nJyoD4GX 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  2 uv 1 3878  
891 14 Dtool_nJyoO2Fz 4 561 3890 0 14 Dtool_nJyoO2Fz 441 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_offset
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 stage 1 3906  1 u 1 3874  1 v 1 3874  
892 14 Dtool_nJyoa1iX 4 562 3890 0 14 Dtool_nJyoa1iX 483 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 stage 1 3906  1 r 1 3874  
893 14 Dtool_nJyoTo9d 4 562 3890 0 14 Dtool_nJyoTo9d 483 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_rotate
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, clockwise in degrees, to UV's
//               for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  1 r 1 3874  
894 14 Dtool_nJyoKMt1 4 563 3890 0 14 Dtool_nJyoKMt1 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 stage 1 3906  5 scale 1 3878  
895 14 Dtool_nJyouHy1 4 563 3890 0 14 Dtool_nJyouHy1 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 stage 1 3906  5 scale 1 3868  
896 14 Dtool_nJyor_zt 4 563 3890 0 14 Dtool_nJyor_zt 437 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 stage 1 3906  5 scale 1 3874  
897 14 Dtool_nJyom0Lh 4 563 3890 0 14 Dtool_nJyom0Lh 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 other 1 3950  5 stage 1 3906  2 su 1 3874  2 sv 1 3874  
898 14 Dtool_nJyocmSt 4 563 3890 0 14 Dtool_nJyocmSt 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  5 other 1 3950  5 stage 1 3906  2 su 1 3874  2 sv 1 3874  2 sw 1 3874  
899 14 Dtool_nJyoNnAk 4 563 3890 0 14 Dtool_nJyoNnAk 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  5 scale 1 3878  
900 14 Dtool_nJyo0xBk 4 563 3890 0 14 Dtool_nJyo0xBk 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  5 scale 1 3868  
901 14 Dtool_nJyoPODC 4 563 3890 0 14 Dtool_nJyoPODC 438 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 2-d or 3-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  5 scale 1 3874  
902 14 Dtool_nJyosV2O 4 563 3890 0 14 Dtool_nJyosV2O 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UV's for the given stage.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 stage 1 3906  2 su 1 3874  2 sv 1 3874  
903 14 Dtool_nJyoge4h 4 563 3890 0 14 Dtool_nJyoge4h 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_scale
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated scale to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 stage 1 3906  2 su 1 3874  2 sv 1 3874  2 sw 1 3874  
904 14 Dtool_nJyotMN_ 7 564 3887 0 14 Dtool_nJyotMN_ 417 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  5 stage 1 3906  
905 14 Dtool_nJyoOSVy 7 564 3887 0 14 Dtool_nJyoOSVy 417 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_offset
//       Access: Published
//  Description: Returns the offset set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
906 14 Dtool_nJyogsWE 6 565 3874 0 14 Dtool_nJyogsWE 419 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  5 stage 1 3906  
907 14 Dtool_nJyoF4f4 6 565 3874 0 14 Dtool_nJyoF4f4 419 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_rotate
//       Access: Published
//  Description: Returns the rotation set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
908 14 Dtool_nJyohlUo 7 566 3887 0 14 Dtool_nJyohlUo 415 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  5 stage 1 3906  
909 14 Dtool_nJyo6J_f 7 566 3887 0 14 Dtool_nJyo6J_f 415 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale
//       Access: Published
//  Description: Returns the scale set for the UV's for the given
//               stage on the current node.
//
//               This call is appropriate for ordinary 2-d texture
//               coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
910 14 Dtool_nJyo21PM 4 567 3890 0 14 Dtool_nJyo21PM 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 stage 1 3906  3 uvw 1 3868  
911 14 Dtool_nJyo1363 4 567 3890 0 14 Dtool_nJyo1363 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  5 other 1 3950  5 stage 1 3906  1 u 1 3874  1 v 1 3874  1 w 1 3874  
912 14 Dtool_nJyoABBU 4 567 3890 0 14 Dtool_nJyoABBU 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  3 uvw 1 3868  
913 14 Dtool_nJyoV77u 4 567 3890 0 14 Dtool_nJyoV77u 413 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_pos
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated offset to UVW's for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 stage 1 3906  1 u 1 3874  1 v 1 3874  1 w 1 3874  
914 14 Dtool_nJyovv9z 4 568 3890 0 14 Dtool_nJyovv9z 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 other 1 3950  5 stage 1 3906  3 hpr 1 3868  
915 14 Dtool_nJyoWzpf 4 568 3890 0 14 Dtool_nJyoWzpf 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  5 other 1 3950  5 stage 1 3906  1 h 1 3874  1 p 1 3874  1 r 1 3874  
916 14 Dtool_nJyoMiv7 4 568 3890 0 14 Dtool_nJyoMiv7 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  3 hpr 1 3868  
917 14 Dtool_nJyoo_oW 4 568 3890 0 14 Dtool_nJyoo_oW 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_hpr
//       Access: Published
//  Description: Sets a texture matrix on the current node to apply
//               the indicated rotation, as a 3-D HPR, to UVW's
//               for the given stage.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 stage 1 3906  1 h 1 3874  1 p 1 3874  1 r 1 3874  
918 14 Dtool_nJyoJ7Vi 7 569 3956 0 14 Dtool_nJyoJ7Vi 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  5 stage 1 3906  
919 14 Dtool_nJyopg2Y 7 569 3956 0 14 Dtool_nJyopg2Y 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_pos
//       Access: Published
//  Description: Returns the offset set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
920 14 Dtool_nJyoH0DK 7 570 3956 0 14 Dtool_nJyoH0DK 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  5 stage 1 3906  
921 14 Dtool_nJyo_wiA 7 570 3956 0 14 Dtool_nJyo_wiA 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_hpr
//       Access: Published
//  Description: Returns the 3-D HPR set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
922 14 Dtool_nJyobZgd 7 571 3956 0 14 Dtool_nJyobZgd 393 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  5 other 1 3950  5 stage 1 3906  
923 14 Dtool_nJyoKAhK 7 571 3956 0 14 Dtool_nJyoKAhK 393 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_scale_3d
//       Access: Published
//  Description: Returns the scale set for the UVW's for the given
//               stage on the current node.
//
//               This call is appropriate for 3-d texture coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
924 14 Dtool_nJyolhYh 4 572 3890 0 14 Dtool_nJyolhYh 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.  This version of this
//               method is useful when setting M_constant, which
//               requires a constant texture coordinate value.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 stage 1 3906  4 mode 1 3730  14 constant_value 1 3884  8 priority 1 3889  
925 14 Dtool_nJyo9yfZ 4 572 3890 0 14 Dtool_nJyo9yfZ 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.  This version of this
//               method is useful when setting M_constant, which
//               requires a constant texture coordinate value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 stage 1 3906  4 mode 1 3730  14 constant_value 1 3884  
926 14 Dtool_nJyoJT_E 4 572 3890 0 14 Dtool_nJyoJT_E 607 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.  This version of this
//               method is useful when setting M_light_vector, which
//               requires the name of the texture coordinate set that
//               supplies the tangent and binormal, as well as the
//               specific light to generate coordinates for.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3949  5 stage 1 3906  4 mode 1 3730  11 source_name 1 3924  5 light 1 3950  8 priority 1 3889  
927 14 Dtool_nJyorgep 4 572 3890 0 14 Dtool_nJyorgep 607 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.  This version of this
//               method is useful when setting M_light_vector, which
//               requires the name of the texture coordinate set that
//               supplies the tangent and binormal, as well as the
//               specific light to generate coordinates for.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3949  5 stage 1 3906  4 mode 1 3730  11 source_name 1 3924  5 light 1 3950  
928 14 Dtool_nJyoEZu2 4 572 3890 0 14 Dtool_nJyoEZu2 318 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 stage 1 3906  4 mode 1 3730  8 priority 1 3889  
929 14 Dtool_nJyoz8w0 4 572 3890 0 14 Dtool_nJyoz8w0 318 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_gen
//       Access: Published
//  Description: Enables automatic texture coordinate generation for
//               the indicated texture stage.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  5 stage 1 3906  4 mode 1 3730  
930 14 Dtool_nJyoiojB 4 573 3890 0 14 Dtool_nJyoiojB 324 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Removes the texture coordinate generation mode from
//               all texture stages on this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
931 14 Dtool_nJyoY_YK 4 573 3890 0 14 Dtool_nJyoY_YK 321 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_gen
//       Access: Published
//  Description: Disables automatic texture coordinate generation for
//               the indicated texture stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 stage 1 3906  
932 14 Dtool_nJyoePbA 6 574 3866 0 14 Dtool_nJyoePbA 371 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_gen
//       Access: Published
//  Description: Returns true if there is a mode for automatic texture
//               coordinate generation on the current node for the
//               given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
933 14 Dtool_nJyo7MOY 6 575 3730 0 14 Dtool_nJyo7MOY 385 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_gen
//       Access: Published
//  Description: Returns the texture coordinate generation mode for
//               the given stage, or M_off if there is no explicit
//               mode set for the given stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
934 14 Dtool_nJyouoW2 7 576 3949 2863 14 Dtool_nJyouoW2 486 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_gen_light
//       Access: Published
//  Description: Returns the particular Light set for the indicated
//               texgen mode's texture stage, or empty NodePath if no
//               light is set.  This is only meaningful if the texgen
//               mode (returned by get_tex_gen()) is M_light_vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
935 14 Dtool_nJyovD7f 4 577 3890 0 14 Dtool_nJyovD7f 674 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tex_projector
//       Access: Published
//  Description: Establishes a TexProjectorEffect on this node, which
//               can be used to establish projective texturing (but
//               see also the NodePath::project_texture() convenience
//               function), or it can be used to bind this node's
//               texture transform to particular node's position in
//               space, allowing a LerpInterval (for instance) to
//               adjust this node's texture coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 stage 1 3906  4 from 1 3950  2 to 1 3950  
936 14 Dtool_nJyofHQL 4 578 3890 0 14 Dtool_nJyofHQL 307 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for all stages from
//               this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
937 14 Dtool_nJyoYLcC 4 578 3890 0 14 Dtool_nJyoYLcC 316 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tex_projector
//       Access: Published
//  Description: Removes the TexProjectorEffect for the indicated
//               stage from this node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 stage 1 3906  
938 14 Dtool_nJyomg0n 6 579 3866 0 14 Dtool_nJyomg0n 336 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tex_projector
//       Access: Published
//  Description: Returns true if this node has a TexProjectorEffect
//               for the indicated stage, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
939 14 Dtool_nJyoqz7d 7 580 3949 2863 14 Dtool_nJyoqz7d 510 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
940 14 Dtool_nJyoQ1wy 7 581 3949 2863 14 Dtool_nJyoQ1wy 506 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tex_projector_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
941 14 Dtool_nJyoyMJ7 4 582 3890 0 14 Dtool_nJyoyMJ7 440 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::project_texture
//       Access: Published
//  Description: A convenience function to enable projective texturing
//               at this node level and below, using the indicated
//               NodePath (which should contain a LensNode) as the
//               projector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  5 stage 1 3906  3 tex 1 3965  9 projector 1 3950  
942 14 Dtool_nJyofb_F 4 583 3890 0 14 Dtool_nJyofb_F 270 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_project_texture
//       Access: Published
//  Description: Undoes the effect of project_texture().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 stage 1 3906  
943 14 Dtool_nJyoYC8w 4 584 3890 0 14 Dtool_nJyoYC8w 1173 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_normal_map
//       Access: Published
//  Description: A convenience function to set up a normal map on this
//               geometry.  This uses the single highest-priority
//               light on the object only.  It also requires
//               multitexture, and consumes at least two texture
//               stages, in addition to what may already be in use.
//
//               The normal_map parameter is the texture that contains
//               the normal map information (with a 3-d delta vector
//               encoded into the r,g,b of each texel).  texcoord_name is
//               the name of the texture coordinate set that contains
//               the tangent and binormal we wish to use.  If
//               preserve_color is true, then one additional texture
//               stage is consumed to blend in the geometry's original
//               vertex color.
//
//               Only one normal map may be in effect through this
//               interface at any given time.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  10 normal_map 1 3965  13 texcoord_name 1 3924  14 preserve_color 1 3866  
944 14 Dtool_nJyoJu3s 4 584 3890 0 14 Dtool_nJyoJu3s 1173 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_normal_map
//       Access: Published
//  Description: A convenience function to set up a normal map on this
//               geometry.  This uses the single highest-priority
//               light on the object only.  It also requires
//               multitexture, and consumes at least two texture
//               stages, in addition to what may already be in use.
//
//               The normal_map parameter is the texture that contains
//               the normal map information (with a 3-d delta vector
//               encoded into the r,g,b of each texel).  texcoord_name is
//               the name of the texture coordinate set that contains
//               the tangent and binormal we wish to use.  If
//               preserve_color is true, then one additional texture
//               stage is consumed to blend in the geometry's original
//               vertex color.
//
//               Only one normal map may be in effect through this
//               interface at any given time.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  10 normal_map 1 3965  13 texcoord_name 1 3924  
945 14 Dtool_nJyoKP3Z 4 584 3890 0 14 Dtool_nJyoKP3Z 1173 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_normal_map
//       Access: Published
//  Description: A convenience function to set up a normal map on this
//               geometry.  This uses the single highest-priority
//               light on the object only.  It also requires
//               multitexture, and consumes at least two texture
//               stages, in addition to what may already be in use.
//
//               The normal_map parameter is the texture that contains
//               the normal map information (with a 3-d delta vector
//               encoded into the r,g,b of each texel).  texcoord_name is
//               the name of the texture coordinate set that contains
//               the tangent and binormal we wish to use.  If
//               preserve_color is true, then one additional texture
//               stage is consumed to blend in the geometry's original
//               vertex color.
//
//               Only one normal map may be in effect through this
//               interface at any given time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  10 normal_map 1 3965  
946 14 Dtool_nJyo8D80 4 585 3890 0 14 Dtool_nJyo8D80 300 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_normal_map
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_normal_map().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
947 14 Dtool_nJyobkyv 6 586 3866 0 14 Dtool_nJyobkyv 467 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_texcoord
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that use the named texture
//               coordinate set, false otherwise.  Pass the empty
//               string for the default texture coordinate set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  13 texcoord_name 1 3924  
948 14 Dtool_nJyoO0Oo 6 587 3866 0 14 Dtool_nJyoO0Oo 598 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_vertex_column
//       Access: Published
//  Description: Returns true if there are at least some vertices at
//               this node and below that contain a reference to the
//               indicated vertex data column name, false otherwise.
//
//               This is particularly useful for testing whether a
//               particular model has a given texture coordinate set
//               (but see has_texcoord()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3996  
949 14 Dtool_nJyo5Dji 7 588 3998 3229 14 Dtool_nJyo5Dji 352 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
950 14 Dtool_nJyoOz5o 7 588 3998 3229 14 Dtool_nJyoOz5o 456 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_vertex_columns
//       Access: Published
//  Description: Returns a list of all vertex array columns stored on
//               some geometry found at this node level and below that
//               match the indicated name (which may contain wildcard
//               characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3924  
951 14 Dtool_nJyoUJtH 7 589 3998 3229 14 Dtool_nJyoUJtH 341 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
952 14 Dtool_nJyow73q 7 589 3998 3229 14 Dtool_nJyow73q 445 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texcoords
//       Access: Published
//  Description: Returns a list of all texture coordinate sets used by
//               any geometry at this node level and below that match
//               the indicated name (which may contain wildcard
//               characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3924  
953 14 Dtool_nJyolksv 7 590 3965 0 14 Dtool_nJyolksv 454 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that is assigned to the
//               indicated texture stage.  Returns the texture if it
//               is found, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
954 14 Dtool_nJyoj98A 7 590 3965 0 14 Dtool_nJyoj98A 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture
//       Access: Published
//  Description: Returns the first texture found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the texture
//               if it is found, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3924  
955 14 Dtool_nJyo_z1D 7 591 4000 0 14 Dtool_nJyo_z1D 316 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
956 14 Dtool_nJyoZ8Sw 7 591 4000 0 14 Dtool_nJyoZ8Sw 374 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures on geometry at
//               this node and below that are assigned to the
//               indicated texture stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 stage 1 3906  
957 14 Dtool_nJyoEW3S 7 591 4000 0 14 Dtool_nJyoEW3S 403 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_textures
//       Access: Published
//  Description: Returns a list of a textures applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3924  
958 14 Dtool_nJyoLz_1 7 592 3906 0 14 Dtool_nJyoLz_1 500 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_texture_stage
//       Access: Published
//  Description: Returns the first TextureStage found applied to
//               geometry at this node or below that matches the
//               indicated name (which may contain wildcards).
//               Returns the TextureStage if it is found, or NULL if
//               it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3924  
959 14 Dtool_nJyocefu 7 593 4001 3620 14 Dtool_nJyocefu 327 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
960 14 Dtool_nJyovG20 7 593 4001 3620 14 Dtool_nJyovG20 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_texture_stages
//       Access: Published
//  Description: Returns a list of a TextureStages applied to geometry
//               at this node and below that match the indicated name
//               (which may contain wildcard characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3924  
961 14 Dtool_nJyoPvtN 4 594 3890 0 14 Dtool_nJyoPvtN 615 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::unify_texture_stages
//       Access: Published
//  Description: Searches through all TextureStages at this node and
//               below.  Any TextureStages that share the same name as
//               the indicated TextureStage object are replaced with
//               this object, thus ensuring that all geometry at this
//               node and below with a particular TextureStage name is
//               using the same TextureStage object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  5 stage 1 3906  
962 14 Dtool_nJyolB4h 7 595 4003 0 14 Dtool_nJyolB4h 471 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_material
//       Access: Published
//  Description: Returns the first material found applied to geometry
//               at this node or below that matches the indicated name
//               (which may contain wildcards).  Returns the material
//               if it is found, or NULL if it is not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3924  
963 14 Dtool_nJyonq8r 7 596 4004 3343 14 Dtool_nJyonq8r 318 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
964 14 Dtool_nJyo66GP 7 596 4004 3343 14 Dtool_nJyo66GP 405 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_all_materials
//       Access: Published
//  Description: Returns a list of a materials applied to geometry at
//               this node and below that match the indicated name
//               (which may contain wildcard characters).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 name 1 3924  
965 14 Dtool_nJyofZam 4 597 3890 0 14 Dtool_nJyofZam 486 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated material.
//
//               Previously, this operation made a copy of the
//               material structure, but nowadays it assigns the
//               pointer directly.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  3 tex 1 4003  8 priority 1 3889  
966 14 Dtool_nJyo2Xcl 4 597 3890 0 14 Dtool_nJyo2Xcl 486 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated material.
//
//               Previously, this operation made a copy of the
//               material structure, but nowadays it assigns the
//               pointer directly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 tex 1 4003  
967 14 Dtool_nJyogcpR 4 598 3890 0 14 Dtool_nJyogcpR 567 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no material.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_material() at a higher node level (or, with a
//               priority, to override a set_material() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
968 14 Dtool_nJyo_bEb 4 598 3890 0 14 Dtool_nJyo_bEb 567 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_material_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no material.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_material() at a higher node level (or, with a
//               priority, to override a set_material() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
969 14 Dtool_nJyoBVUw 4 599 3890 0 14 Dtool_nJyoBVUw 369 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_material
//       Access: Published
//  Description: Completely removes any material adjustment that may
//               have been set via set_material() from this particular
//               node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
970 14 Dtool_nJyoV_e6 6 600 3866 0 14 Dtool_nJyoV_e6 343 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_material
//       Access: Published
//  Description: Returns true if a material has been applied to this
//               particular node via set_material(), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
971 14 Dtool_nJyor_RS 7 601 4003 0 14 Dtool_nJyor_RS 609 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_material
//       Access: Published
//  Description: Returns the material that has been set on this
//               particular node, or NULL if no material has been set.
//               This is not necessarily the material that will be
//               applied to the geometry at or below this level, as
//               another material at a higher or lower level may
//               override.
//               See also find_material().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
972 14 Dtool_nJyomIDI 4 602 3890 0 14 Dtool_nJyomIDI 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated fog.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  3 fog 1 4005  8 priority 1 3889  
973 14 Dtool_nJyovA0X 4 602 3890 0 14 Dtool_nJyovA0X 310 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using the indicated fog.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 fog 1 4005  
974 14 Dtool_nJyo9qa5 4 603 3890 0 14 Dtool_nJyo9qa5 547 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no fog.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_fog() at a higher node level (or, with a
//               priority, to override a set_fog() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
975 14 Dtool_nJyofgI_ 4 603 3890 0 14 Dtool_nJyofgI_ 547 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_fog_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no fog.  This is normally the default, but
//               it may be useful to use this to contradict
//               set_fog() at a higher node level (or, with a
//               priority, to override a set_fog() at a lower
//               level).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
976 14 Dtool_nJyoPL5h 4 604 3890 0 14 Dtool_nJyoPL5h 491 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_fog
//       Access: Published
//  Description: Completely removes any fog adjustment that may
//               have been set via set_fog() or set_fog_off()
//               from this particular node.  This allows whatever
//               fogs might be otherwise affecting the geometry to
//               show instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
977 14 Dtool_nJyoJ3dh 6 605 3866 0 14 Dtool_nJyoJ3dh 556 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog
//       Access: Published
//  Description: Returns true if a fog has been applied to this
//               particular node via set_fog(), false otherwise.
//               This is not the same thing as asking whether the
//               geometry at this node will be rendered with
//               fog, as there may be a fog in effect from a higher or
//               lower level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
978 14 Dtool_nJyoXW1z 6 606 3866 0 14 Dtool_nJyoXW1z 579 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_fog_off
//       Access: Published
//  Description: Returns true if a fog has been specifically
//               disabled on this particular node via
//               set_fog_off(), false otherwise.  This is not the
//               same thing as asking whether the geometry at this
//               node will be rendered unfogged, as there may be a
//               fog in effect from a higher or lower level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
979 14 Dtool_nJyoW3Q5 7 607 4005 2411 14 Dtool_nJyoW3Q5 541 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_fog
//       Access: Published
//  Description: Returns the fog that has been set on this
//               particular node, or NULL if no fog has been set.
//               This is not necessarily the fog that will be
//               applied to the geometry at or below this level, as
//               another fog at a higher or lower level may
//               override.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
980 14 Dtool_nJyo3mJB 4 608 3890 0 14 Dtool_nJyo3mJB 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_wireframe
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in wireframe mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
981 14 Dtool_nJyoE5Vy 4 608 3890 0 14 Dtool_nJyoE5Vy 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_wireframe
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in wireframe mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
982 14 Dtool_nJyoGdFx 4 609 3890 0 14 Dtool_nJyoGdFx 377 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_filled
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in filled (i.e. not wireframe)
//               mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
983 14 Dtool_nJyoMX6K 4 609 3890 0 14 Dtool_nJyoMX6K 377 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_filled
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in filled (i.e. not wireframe)
//               mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
984 14 Dtool_nJyoUTvr 4 610 3890 0 14 Dtool_nJyoUTvr 690 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_thickness
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as thick points (that is, billboarded
//               quads).  The thickness is in pixels, unless
//               set_render_mode_perspective is also true, in which
//               case it is in 3-D units.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  9 thickness 1 3874  8 priority 1 3889  
985 14 Dtool_nJyo2aA_ 4 610 3890 0 14 Dtool_nJyo2aA_ 690 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_thickness
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as thick points (that is, billboarded
//               quads).  The thickness is in pixels, unless
//               set_render_mode_perspective is also true, in which
//               case it is in 3-D units.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  9 thickness 1 3874  
986 14 Dtool_nJyoaI_p 4 611 3890 0 14 Dtool_nJyoaI_p 822 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_perspective
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as perspective sprites (that is, billboarded
//               quads).  The thickness, as specified with
//               set_render_mode_thickness(), is the width of each
//               point in 3-D units, unless it is overridden on a
//               per-vertex basis.  This does not affect geometry
//               other than points.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  11 perspective 1 3866  8 priority 1 3889  
987 14 Dtool_nJyo0c2x 4 611 3890 0 14 Dtool_nJyo0c2x 822 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode_perspective
//       Access: Published
//  Description: Sets up the point geometry at this level and below to
//               render as perspective sprites (that is, billboarded
//               quads).  The thickness, as specified with
//               set_render_mode_thickness(), is the width of each
//               point in 3-D units, unless it is overridden on a
//               per-vertex basis.  This does not affect geometry
//               other than points.
//
//               If you want the quads to be individually textured,
//               you should also set a TexGenAttrib::M_point_sprite on
//               the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  11 perspective 1 3866  
988 14 Dtool_nJyoTIPs 4 612 3890 0 14 Dtool_nJyoTIPs 407 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in the specified mode and with
//               the indicated line and/or point thickness.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  4 mode 1 3732  9 thickness 1 3874  8 priority 1 3889  
989 14 Dtool_nJyoGV0g 4 612 3890 0 14 Dtool_nJyoGV0g 407 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_render_mode
//       Access: Published
//  Description: Sets up the geometry at this level and below (unless
//               overridden) to render in the specified mode and with
//               the indicated line and/or point thickness.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  4 mode 1 3732  9 thickness 1 3874  
990 14 Dtool_nJyo65TZ 4 613 3890 0 14 Dtool_nJyo65TZ 420 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_render_mode
//       Access: Published
//  Description: Completely removes any render mode adjustment that
//               may have been set on this node via
//               set_render_mode_wireframe() or
//               set_render_mode_filled().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
991 14 Dtool_nJyonDaf 6 614 3866 0 14 Dtool_nJyonDaf 454 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_render_mode
//       Access: Published
//  Description: Returns true if a render mode has been explicitly set
//               on this particular node via set_render_mode() (or
//               set_render_mode_wireframe() or
//               set_render_mode_filled()), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
992 14 Dtool_nJyoACN3 6 615 3732 0 14 Dtool_nJyoACN3 389 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode
//       Access: Published
//  Description: Returns the render mode that has been specifically
//               set on this node via set_render_mode(), or
//               M_unchanged if nothing has been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
993 14 Dtool_nJyoUPaP 6 616 3874 0 14 Dtool_nJyoUPaP 401 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode_thickness
//       Access: Published
//  Description: Returns the render mode thickness that has been
//               specifically set on this node via set_render_mode(),
//               or 1.0 if nothing has been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
994 14 Dtool_nJyopnN2 6 617 3866 0 14 Dtool_nJyopnN2 387 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_render_mode_perspective
//       Access: Published
//  Description: Returns the flag that has been set on this node via
//               set_render_mode_perspective(), or false if no flag
//               has been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
995 14 Dtool_nJyoUKd_ 4 618 3890 0 14 Dtool_nJyoUKd_ 511 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_two_sided
//       Access: Published
//  Description: Specifically sets or disables two-sided rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause backfacing polygons to be
//               drawn (in two-sided mode, true) or culled (in
//               one-sided mode, false).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  9 two_sided 1 3866  8 priority 1 3889  
996 14 Dtool_nJyo_M_e 4 618 3890 0 14 Dtool_nJyo_M_e 511 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_two_sided
//       Access: Published
//  Description: Specifically sets or disables two-sided rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause backfacing polygons to be
//               drawn (in two-sided mode, true) or culled (in
//               one-sided mode, false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  9 two_sided 1 3866  
997 14 Dtool_nJyooJBF 4 619 3890 0 14 Dtool_nJyooJBF 640 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_two_sided
//       Access: Published
//  Description: Completely removes any two-sided adjustment that
//               may have been set on this node via set_two_sided().
//               The geometry at this level and below will
//               subsequently be rendered either two-sided or
//               one-sided, according to whatever other nodes may have
//               had set_two_sided() on it, or according to the
//               initial state otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
998 14 Dtool_nJyootTb 6 620 3866 0 14 Dtool_nJyootTb 489 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_two_sided
//       Access: Published
//  Description: Returns true if a two-sided adjustment has been
//               explicitly set on this particular node via
//               set_two_sided().  If this returns true, then
//               get_two_sided() may be called to determine which has
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
999 14 Dtool_nJyoFtGz 6 621 3866 0 14 Dtool_nJyoFtGz 681 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_two_sided
//       Access: Published
//  Description: Returns true if two-sided rendering has been
//               specifically set on this node via set_two_sided(), or
//               false if one-sided rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_two_sided().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               two-sided, as there may be other nodes that override.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1000 14 Dtool_nJyoY7DP 4 622 3890 0 14 Dtool_nJyoY7DP 511 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_test
//       Access: Published
//  Description: Specifically sets or disables the testing of the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  10 depth_test 1 3866  8 priority 1 3889  
1001 14 Dtool_nJyo2UQ_ 4 622 3890 0 14 Dtool_nJyo2UQ_ 511 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_test
//       Access: Published
//  Description: Specifically sets or disables the testing of the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  10 depth_test 1 3866  
1002 14 Dtool_nJyoMMNz 4 623 3890 0 14 Dtool_nJyoMMNz 345 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_test
//       Access: Published
//  Description: Completely removes any depth-test adjustment that
//               may have been set on this node via set_depth_test().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1003 14 Dtool_nJyogl7H 6 624 3866 0 14 Dtool_nJyogl7H 493 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_test
//       Access: Published
//  Description: Returns true if a depth-test adjustment has been
//               explicitly set on this particular node via
//               set_depth_test().  If this returns true, then
//               get_depth_test() may be called to determine which has
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1004 14 Dtool_nJyoNiuf 6 625 3866 0 14 Dtool_nJyoNiuf 535 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_test
//       Access: Published
//  Description: Returns true if depth-test rendering has been
//               specifically set on this node via set_depth_test(), or
//               false if depth-test rendering has been specifically
//               disabled.  If nothing has been specifically set,
//               returns true.  See also has_depth_test().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1005 14 Dtool_nJyorwkt 4 626 3890 0 14 Dtool_nJyorwkt 512 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_write
//       Access: Published
//  Description: Specifically sets or disables the writing to the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  11 depth_write 1 3866  8 priority 1 3889  
1006 14 Dtool_nJyoADOz 4 626 3890 0 14 Dtool_nJyoADOz 512 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_write
//       Access: Published
//  Description: Specifically sets or disables the writing to the
//               depth buffer on this particular node.  This is
//               normally on in the 3-d scene graph and off in the 2-d
//               scene graph; it should be on for rendering most 3-d
//               objects properly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  11 depth_write 1 3866  
1007 14 Dtool_nJyowNqE 4 627 3890 0 14 Dtool_nJyowNqE 348 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_write
//       Access: Published
//  Description: Completely removes any depth-write adjustment that
//               may have been set on this node via set_depth_write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1008 14 Dtool_nJyoQs8G 6 628 3866 0 14 Dtool_nJyoQs8G 497 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_write
//       Access: Published
//  Description: Returns true if a depth-write adjustment has been
//               explicitly set on this particular node via
//               set_depth_write().  If this returns true, then
//               get_depth_write() may be called to determine which has
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1009 14 Dtool_nJyoTsve 6 629 3866 0 14 Dtool_nJyoTsve 540 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_write
//       Access: Published
//  Description: Returns true if depth-write rendering has been
//               specifically set on this node via set_depth_write(), or
//               false if depth-write rendering has been specifically
//               disabled.  If nothing has been specifically set,
//               returns true.  See also has_depth_write().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1010 14 Dtool_nJyoKKf_ 4 630 3890 0 14 Dtool_nJyoKKf_ 906 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_offset
//       Access: Published
//  Description: This instructs the graphics driver to apply an
//               offset or bias to the generated depth values for
//               rendered polygons, before they are written to the
//               depth buffer. This can be used to shift polygons
//               forward slightly, to resolve depth conflicts, or
//               self-shadowing artifacts on thin objects.
//               The bias is always an integer number, and each
//               integer increment represents the smallest possible
//               increment in Z that is sufficient to completely
//               resolve two coplanar polygons. Positive numbers
//               are closer towards the camera.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  4 bias 1 3889  8 priority 1 3889  
1011 14 Dtool_nJyognKF 4 630 3890 0 14 Dtool_nJyognKF 906 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_depth_offset
//       Access: Published
//  Description: This instructs the graphics driver to apply an
//               offset or bias to the generated depth values for
//               rendered polygons, before they are written to the
//               depth buffer. This can be used to shift polygons
//               forward slightly, to resolve depth conflicts, or
//               self-shadowing artifacts on thin objects.
//               The bias is always an integer number, and each
//               integer increment represents the smallest possible
//               increment in Z that is sufficient to completely
//               resolve two coplanar polygons. Positive numbers
//               are closer towards the camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 bias 1 3889  
1012 14 Dtool_nJyoijjA 4 631 3890 0 14 Dtool_nJyoijjA 351 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_depth_offset
//       Access: Published
//  Description: Completely removes any depth-offset adjustment that
//               may have been set on this node via set_depth_offset().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1013 14 Dtool_nJyoDnrS 6 632 3866 0 14 Dtool_nJyoDnrS 501 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_depth_offset
//       Access: Published
//  Description: Returns true if a depth-offset adjustment has been
//               explicitly set on this particular node via
//               set_depth_offset().  If this returns true, then
//               get_depth_offset() may be called to determine which has
//               been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1014 14 Dtool_nJyoeneq 6 633 3889 0 14 Dtool_nJyoeneq 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_depth_offset
//       Access: Published
//  Description: Returns the depth offset value if it has been
//               specified using set_depth_offset, or 0 if not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1015 14 Dtool_nJyoOIal 4 634 3890 0 14 Dtool_nJyoOIal 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_axis
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to heads_up().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  6 camera 1 3950  6 offset 1 3874  
1016 14 Dtool_nJyobkbl 4 635 3890 0 14 Dtool_nJyobkbl 546 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_eye
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at(),
//               although the point_eye billboard effect cannot be
//               achieved using the ordinary look_at() call.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  6 camera 1 3950  6 offset 1 3874  
1017 14 Dtool_nJyoXJcU 4 636 3890 0 14 Dtool_nJyoXJcU 420 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::do_billboard_point_world
//       Access: Published
//  Description: Performs a billboard-type rotate to the indicated
//               camera node, one time only, and leaves the object
//               rotated.  This is similar in principle to look_at().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  6 camera 1 3950  6 offset 1 3874  
1018 14 Dtool_nJyonoHV 4 637 3890 0 14 Dtool_nJyonoHV 444 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis,
//               towards a specified "camera" instead of to the
//               viewing camera.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  6 camera 1 3950  6 offset 1 3874  
1019 14 Dtool_nJyoMHYU 4 637 3890 0 14 Dtool_nJyoMHYU 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  6 offset 1 3874  
1020 14 Dtool_nJyoxiDy 4 637 3890 0 14 Dtool_nJyoxiDy 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_axis
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in two dimensions around the up axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1021 14 Dtool_nJyo3opV 4 638 3890 0 14 Dtool_nJyo3opV 523 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera, towards a specified "camera" instead of to
//               the viewing camera.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  6 camera 1 3950  6 offset 1 3874  
1022 14 Dtool_nJyog0MU 4 638 3890 0 14 Dtool_nJyog0MU 443 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  6 offset 1 3874  
1023 14 Dtool_nJyoXCeP 4 638 3890 0 14 Dtool_nJyoXCeP 443 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_eye
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the top of the
//               camera.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1024 14 Dtool_nJyonjg2 4 639 3890 0 14 Dtool_nJyonjg2 494 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky, towards a
//               specified "camera" instead of to the viewing camera.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  6 camera 1 3950  6 offset 1 3874  
1025 14 Dtool_nJyoOaqP 4 639 3890 0 14 Dtool_nJyoOaqP 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  6 offset 1 3874  
1026 14 Dtool_nJyoKJae 4 639 3890 0 14 Dtool_nJyoKJae 414 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_billboard_point_world
//       Access: Published
//  Description: Puts a billboard transition on the node such that it
//               will rotate in three dimensions about the origin,
//               keeping its up vector oriented to the sky.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1027 14 Dtool_nJyoaATv 4 640 3890 0 14 Dtool_nJyoaATv 268 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_billboard
//       Access: Published
//  Description: Removes any billboard effect from the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1028 14 Dtool_nJyo3oWg 6 641 3866 0 14 Dtool_nJyo3oWg 298 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_billboard
//       Access: Published
//  Description: Returns true if there is any billboard effect on
//               the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1029 14 Dtool_nJyoLfMs 4 642 3890 0 14 Dtool_nJyoLfMs 459 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_compass
//       Access: Published
//  Description: Puts a compass effect on the node, so that it will
//               retain a fixed rotation relative to the reference
//               node (or render if the reference node is empty)
//               regardless of the transforms above it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  9 reference 1 3950  
1030 14 Dtool_nJyopaNt 4 642 3890 0 14 Dtool_nJyopaNt 459 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_compass
//       Access: Published
//  Description: Puts a compass effect on the node, so that it will
//               retain a fixed rotation relative to the reference
//               node (or render if the reference node is empty)
//               regardless of the transforms above it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1031 14 Dtool_nJyoT898 4 643 3890 0 14 Dtool_nJyoT898 264 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_compass
//       Access: Published
//  Description: Removes any compass effect from the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1032 14 Dtool_nJyoqX5i 6 644 3866 0 14 Dtool_nJyoqX5i 294 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_compass
//       Access: Published
//  Description: Returns true if there is any compass effect on
//               the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1033 14 Dtool_nJyoqfz0 4 645 3890 0 14 Dtool_nJyoqfz0 482 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transparency
//       Access: Published
//  Description: Specifically sets or disables transparent rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause items with a non-1 value
//               for alpha color to be rendered partially transparent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  4 mode 1 3748  8 priority 1 3889  
1034 14 Dtool_nJyodYx9 4 645 3890 0 14 Dtool_nJyodYx9 482 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_transparency
//       Access: Published
//  Description: Specifically sets or disables transparent rendering
//               mode on this particular node.  If no other nodes
//               override, this will cause items with a non-1 value
//               for alpha color to be rendered partially transparent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 mode 1 3748  
1035 14 Dtool_nJyocU7Z 4 646 3890 0 14 Dtool_nJyocU7Z 578 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_transparency
//       Access: Published
//  Description: Completely removes any transparency adjustment that
//               may have been set on this node via set_transparency().
//               The geometry at this level and below will
//               subsequently be rendered either transparent or not,
//               to whatever other nodes may have had
//               set_transparency() on them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1036 14 Dtool_nJyofD3E 6 647 3866 0 14 Dtool_nJyofD3E 594 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_transparency
//       Access: Published
//  Description: Returns true if a transparent-rendering adjustment
//               has been explicitly set on this particular node via
//               set_transparency().  If this returns true, then
//               get_transparency() may be called to determine whether
//               transparency has been explicitly enabled or
//               explicitly disabled for this node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1037 14 Dtool_nJyo4Coc 6 648 3748 0 14 Dtool_nJyo4Coc 701 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_transparency
//       Access: Published
//  Description: Returns the transparent rendering that has been
//               specifically set on this node via set_transparency(), or
//               M_none if nontransparent rendering has been specifically
//               set, or if nothing has been specifically set.  See
//               also has_transparency().  This does not necessarily
//               imply that the geometry will or will not be rendered
//               transparent, as there may be other nodes that override.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1038 14 Dtool_nJyoC4tu 4 649 3890 0 14 Dtool_nJyoC4tu 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_antialias
//       Access: Published
//  Description: Specifies the antialiasing type that should be
//               applied at this node and below.  See AntialiasAttrib.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  4 mode 1 3917  8 priority 1 3889  
1039 14 Dtool_nJyoLHl2 4 649 3890 0 14 Dtool_nJyoLHl2 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_antialias
//       Access: Published
//  Description: Specifies the antialiasing type that should be
//               applied at this node and below.  See AntialiasAttrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 mode 1 3917  
1040 14 Dtool_nJyoVKqH 4 650 3890 0 14 Dtool_nJyoVKqH 339 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_antialias
//       Access: Published
//  Description: Completely removes any antialias setting that
//               may have been set on this node via set_antialias().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1041 14 Dtool_nJyoSWgH 6 651 3866 0 14 Dtool_nJyoSWgH 490 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_antialias
//       Access: Published
//  Description: Returns true if an antialias setting has been
//               explicitly mode on this particular node via
//               set_antialias().  If this returns true, then
//               get_antialias() may be called to determine what the
//               setting was.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1042 14 Dtool_nJyo9RTf 6 652 3917 0 14 Dtool_nJyo9RTf 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_antialias
//       Access: Published
//  Description: Returns the antialias setting that has been
//               specifically set on this node via set_antialias(), or
//               M_none if no setting has been made.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1043 14 Dtool_nJyog2wE 6 653 3866 0 14 Dtool_nJyog2wE 457 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_audio_volume
//       Access: Published
//  Description: Returns true if an audio volume has been applied
//               to the referenced node, false otherwise.  It is still
//               possible that volume at this node might have been
//               scaled by an ancestor node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1044 14 Dtool_nJyokl6M 4 654 3890 0 14 Dtool_nJyokl6M 504 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_audio_volume
//       Access: Published
//  Description: Completely removes any audio volume from the
//               referenced node.  This is preferable to simply
//               setting the audio volume to identity, as it also
//               removes the overhead associated with having an audio
//               volume at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1045 14 Dtool_nJyoVn34 4 655 3890 0 14 Dtool_nJyoVn34 274 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume
//       Access: Published
//  Description: Sets the audio volume component of the transform
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  6 volume 1 3874  8 priority 1 3889  
1046 14 Dtool_nJyonX3K 4 655 3890 0 14 Dtool_nJyonX3K 274 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume
//       Access: Published
//  Description: Sets the audio volume component of the transform
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  6 volume 1 3874  
1047 14 Dtool_nJyo1cXV 4 656 3890 0 14 Dtool_nJyo1cXV 787 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume_off
//       Access: Published
//  Description: Disables any audio volume attribute inherited from
//               above.  This is not the same thing as
//               clear_audio_volume(), which undoes any previous
//               set_audio_volume() operation on this node; rather,
//               this actively disables any set_audio_volume() that
//               might be inherited from a parent node.
//
//               It is legal to specify a new volume on the same
//               node with a subsequent call to set_audio_volume();
//               this new scale will apply to lower nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 priority 1 3889  
1048 14 Dtool_nJyovp9t 4 656 3890 0 14 Dtool_nJyovp9t 787 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_audio_volume_off
//       Access: Published
//  Description: Disables any audio volume attribute inherited from
//               above.  This is not the same thing as
//               clear_audio_volume(), which undoes any previous
//               set_audio_volume() operation on this node; rather,
//               this actively disables any set_audio_volume() that
//               might be inherited from a parent node.
//
//               It is legal to specify a new volume on the same
//               node with a subsequent call to set_audio_volume();
//               this new scale will apply to lower nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1049 14 Dtool_nJyo92jc 6 657 3874 0 14 Dtool_nJyo92jc 460 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_audio_volume
//       Access: Published
//  Description: Returns the complete audio volume that has been
//               applied to this node via a previous call to
//               set_audio_volume(), or 1. (identity) if no volume has
//               been applied to this particular node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1050 14 Dtool_nJyoCLIx 6 658 3874 0 14 Dtool_nJyoCLIx 342 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_audio_volume
//       Access: Published
//  Description: Returns the complete audio volume for this node
//               taking highers nodes in the graph into account.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1051 14 Dtool_nJyoblUl 4 659 3890 0 14 Dtool_nJyoblUl 649 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::adjust_all_priorities
//       Access: Published
//  Description: Adds the indicated adjustment amount (which may be
//               negative) to the priority for all transitions on the
//               referenced node, and for all nodes in the subgraph
//               below.  This can be used to force these nodes not to
//               be overridden by a high-level state change above.  If
//               the priority would drop below zero, it is set to
//               zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  10 adjustment 1 3889  
1052 14 Dtool_nJyoDwv_ 4 660 3890 0 14 Dtool_nJyoDwv_ 493 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Undoes the effect of a previous hide() on this node:
//               makes the referenced node (and the entire subgraph
//               below this node) visible to all cameras.
//
//               This will not reveal the node if a parent node has
//               been hidden.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1053 14 Dtool_nJyo4Srv 4 660 3890 0 14 Dtool_nJyo4Srv 526 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This undoes the effect of a previous hide() call.  It
//               will not reveal the node if a parent node has been
//               hidden.  However, see show_through().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  11 camera_mask 1 3931  
1054 14 Dtool_nJyo9Pk3 4 661 3890 0 14 Dtool_nJyo9Pk3 513 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden, thus "showing through" a
//               parent's hide().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1055 14 Dtool_nJyowpqz 4 661 3890 0 14 Dtool_nJyowpqz 705 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_through
//       Access: Published
//  Description: Makes the referenced node visible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               Unlike show(), this will reveal the node even if a
//               parent node has been hidden via the one-parameter
//               hide() method, thus "showing through" a parent's
//               hide().  (However, it will not show through a
//               parent's hide() call if the no-parameter form of
//               hide() was used.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  11 camera_mask 1 3931  
1056 14 Dtool_nJyorDIm 4 662 3890 0 14 Dtool_nJyorDIm 533 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node (and the entire subgraph
//               below this node) invisible to all cameras.  It
//               remains part of the scene graph, its bounding volume
//               still contributes to its parent's bounding volume,
//               and it will still be involved in collision tests.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1057 14 Dtool_nJyonwFX 4 662 3890 0 14 Dtool_nJyonwFX 604 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide
//       Access: Published
//  Description: Makes the referenced node invisible just to the
//               cameras whose camera_mask shares the indicated bits.
//
//               This will also hide any nodes below this node in the
//               scene graph, including those nodes for which show()
//               has been called, but it will not hide descendent
//               nodes for which show_through() has been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  11 camera_mask 1 3931  
1058 14 Dtool_nJyo9FXE 6 663 3866 0 14 Dtool_nJyo9FXE 380 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_hidden
//       Access: Published
//  Description: Returns true if the referenced node is hidden from
//               the indicated camera(s) either directly, or because
//               some ancestor is hidden.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  11 camera_mask 1 3931  
1059 14 Dtool_nJyoYTUU 6 663 3866 0 14 Dtool_nJyoYTUU 380 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_hidden
//       Access: Published
//  Description: Returns true if the referenced node is hidden from
//               the indicated camera(s) either directly, or because
//               some ancestor is hidden.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1060 14 Dtool_nJyoXbPy 7 664 3949 2863 14 Dtool_nJyoXbPy 478 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hidden_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is hidden to the indicated camera(s), or an
//               empty NodePath if no ancestor of the referenced node
//               is hidden (and the node should be visible).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  11 camera_mask 1 3931  14 current_thread 1 3928  
1061 14 Dtool_nJyonaCb 7 664 3949 2863 14 Dtool_nJyonaCb 478 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hidden_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is hidden to the indicated camera(s), or an
//               empty NodePath if no ancestor of the referenced node
//               is hidden (and the node should be visible).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  11 camera_mask 1 3931  
1062 14 Dtool_nJyoICma 7 664 3949 2863 14 Dtool_nJyoICma 478 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_hidden_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is hidden to the indicated camera(s), or an
//               empty NodePath if no ancestor of the referenced node
//               is hidden (and the node should be visible).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1063 14 Dtool_nJyotlrQ 4 665 3890 0 14 Dtool_nJyotlrQ 819 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash
//       Access: Published
//  Description: Removes the referenced node (and the entire subgraph
//               below this node) from the scene graph in any normal
//               sense.  The node will no longer be visible and is not
//               tested for collisions; furthermore, no normal scene
//               graph traversal will visit the node.  The node's
//               bounding volume no longer contributes to its parent's
//               bounding volume.
//
//               A stashed node cannot be located by a normal find()
//               operation (although a special find string can still
//               retrieve it).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  4 sort 1 3889  14 current_thread 1 3928  
1064 14 Dtool_nJyo2Ms1 4 665 3890 0 14 Dtool_nJyo2Ms1 819 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash
//       Access: Published
//  Description: Removes the referenced node (and the entire subgraph
//               below this node) from the scene graph in any normal
//               sense.  The node will no longer be visible and is not
//               tested for collisions; furthermore, no normal scene
//               graph traversal will visit the node.  The node's
//               bounding volume no longer contributes to its parent's
//               bounding volume.
//
//               A stashed node cannot be located by a normal find()
//               operation (although a special find string can still
//               retrieve it).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 sort 1 3889  
1065 14 Dtool_nJyoinzQ 4 665 3890 0 14 Dtool_nJyoinzQ 819 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::stash
//       Access: Published
//  Description: Removes the referenced node (and the entire subgraph
//               below this node) from the scene graph in any normal
//               sense.  The node will no longer be visible and is not
//               tested for collisions; furthermore, no normal scene
//               graph traversal will visit the node.  The node's
//               bounding volume no longer contributes to its parent's
//               bounding volume.
//
//               A stashed node cannot be located by a normal find()
//               operation (although a special find string can still
//               retrieve it).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1066 14 Dtool_nJyo01HZ 4 666 3890 0 14 Dtool_nJyo01HZ 425 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash
//       Access: Published
//  Description: Undoes the effect of a previous stash() on this
//               node: makes the referenced node (and the entire
//               subgraph below this node) once again part of the
//               scene graph.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  4 sort 1 3889  14 current_thread 1 3928  
1067 14 Dtool_nJyobNQv 4 666 3890 0 14 Dtool_nJyobNQv 425 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash
//       Access: Published
//  Description: Undoes the effect of a previous stash() on this
//               node: makes the referenced node (and the entire
//               subgraph below this node) once again part of the
//               scene graph.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 sort 1 3889  
1068 14 Dtool_nJyoMkf6 4 666 3890 0 14 Dtool_nJyoMkf6 425 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash
//       Access: Published
//  Description: Undoes the effect of a previous stash() on this
//               node: makes the referenced node (and the entire
//               subgraph below this node) once again part of the
//               scene graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1069 14 Dtool_nJyo6_Bh 4 667 3890 0 14 Dtool_nJyo6_Bh 269 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash_all
//       Access: Published
//  Description: Unstashes this node and all stashed child nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  14 current_thread 1 3928  
1070 14 Dtool_nJyow2AF 4 667 3890 0 14 Dtool_nJyow2AF 269 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::unstash_all
//       Access: Published
//  Description: Unstashes this node and all stashed child nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1071 14 Dtool_nJyo_PEj 6 668 3866 0 14 Dtool_nJyo_PEj 337 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::is_stashed
//       Access: Published
//  Description: Returns true if the referenced node is stashed either
//               directly, or because some ancestor is stashed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1072 14 Dtool_nJyo7VVR 7 669 3949 2863 14 Dtool_nJyo7VVR 454 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is stashed, or an empty NodePath if no ancestor
//               of the referenced node is stashed (and the node should
//               be visible).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
1073 14 Dtool_nJyoZTAQ 7 669 3949 2863 14 Dtool_nJyoZTAQ 454 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_stashed_ancestor
//       Access: Published
//  Description: Returns the NodePath at or above the referenced node
//               that is stashed, or an empty NodePath if no ancestor
//               of the referenced node is stashed (and the node should
//               be visible).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1074 14 Dtool_nJyoBdNw 7 670 3931 0 14 Dtool_nJyoBdNw 600 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1075 14 Dtool_nJyoffJ3 4 671 3890 0 14 Dtool_nJyoffJ3 839 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  If node_type is not TypeHandle::none(), then
//               only nodes matching (or inheriting from) the
//               indicated PandaNode subclass are modified.
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3949  8 new_mask 1 3931  14 bits_to_change 1 3931  9 node_type 1 3896  
1076 14 Dtool_nJyoMlkA 4 671 3890 0 14 Dtool_nJyoMlkA 839 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  If node_type is not TypeHandle::none(), then
//               only nodes matching (or inheriting from) the
//               indicated PandaNode subclass are modified.
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  8 new_mask 1 3931  14 bits_to_change 1 3931  
1077 14 Dtool_nJyoUN_z 4 671 3890 0 14 Dtool_nJyoUN_z 839 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  If node_type is not TypeHandle::none(), then
//               only nodes matching (or inheriting from) the
//               indicated PandaNode subclass are modified.
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  8 new_mask 1 3931  
1078 14 Dtool_nJyozIl9 6 672 3866 0 14 Dtool_nJyozIl9 367 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator ==
//       Access: Published
//  Description: Returns true if the two paths are equivalent; that
//               is, if they contain the same list of nodes in the same
//               order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
1079 14 Dtool_nJyoROU9 6 673 3866 0 14 Dtool_nJyoROU9 270 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator !=
//       Access: Published
//  Description: Returns true if the two paths are not equivalent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
1080 14 Dtool_nJyoM90s 6 674 3866 0 14 Dtool_nJyoM90s 521 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator <
//       Access: Published
//  Description: Returns true if this NodePath sorts before the other
//               one, false otherwise.  The sorting order of two
//               nonequivalent NodePaths is consistent but undefined,
//               and is useful only for storing NodePaths in a sorted
//               container like an STL set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
1081 14 Dtool_nJyoHPj2 6 675 3889 0 14 Dtool_nJyoHPj2 830 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this NodePath
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two NodePaths are considered equivalent if they
//               consist of exactly the same list of nodes in the same
//               order.  Otherwise, they are different; different
//               NodePaths will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the NodePaths in a sorted container like an
//               STL set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  5 other 1 3950  
1082 14 Dtool_nJyoAcUK 6 676 3866 0 14 Dtool_nJyoAcUK 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::verify_complete
//       Access: Published
//  Description: Returns true if all of the nodes described in the
//               NodePath are connected, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
1083 14 Dtool_nJyoTqrp 6 676 3866 0 14 Dtool_nJyoTqrp 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::verify_complete
//       Access: Published
//  Description: Returns true if all of the nodes described in the
//               NodePath are connected, or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1084 14 Dtool_nJyogz7H 4 677 3890 0 14 Dtool_nJyogz7H 749 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::premunge_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and internally adjusts any GeomVertexFormats
//               for optimal rendering on the indicated GSG.  If this
//               step is not done prior to rendering, the formats will
//               be optimized at render time instead, for a small
//               cost.
//
//               It is not normally necessary to do this on a model
//               loaded directly from disk, since the loader will do
//               this by default.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 gsg 1 3932  
1085 14 Dtool_nJyoXuCN 4 677 3890 0 14 Dtool_nJyoXuCN 749 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::premunge_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and internally adjusts any GeomVertexFormats
//               for optimal rendering on the indicated GSG.  If this
//               step is not done prior to rendering, the formats will
//               be optimized at render time instead, for a small
//               cost.
//
//               It is not normally necessary to do this on a model
//               loaded directly from disk, since the loader will do
//               this by default.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1086 14 Dtool_nJyo0HH0 4 678 3890 0 14 Dtool_nJyo0HH0 854 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::prepare_scene
//       Access: Published
//  Description: Walks through the scene graph beginning at the bottom
//               node, and does whatever initialization is required to
//               render the scene properly with the indicated GSG.  It
//               is not strictly necessary to call this, since the GSG
//               will initialize itself when the scene is rendered,
//               but this may take some of the overhead away from that
//               process.
//
//               In particular, this will ensure that textures within
//               the scene are loaded in texture memory, and display
//               lists are built up from static geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 gsg 1 3932  
1087 14 Dtool_nJyo1psR 4 679 3890 0 14 Dtool_nJyo1psR 542 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_bounds
//       Access: Published
//  Description: Causes the bounding volume of the bottom node and all
//               of its descendants (that is, the bounding volume
//               associated with the the bottom arc) to be rendered,
//               if possible.  The rendering method is less than
//               optimal; this is intended primarily for debugging.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1088 14 Dtool_nJyopl7q 4 680 3890 0 14 Dtool_nJyopl7q 580 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::show_tight_bounds
//       Access: Published
//  Description: Similar to show_bounds(), this draws a bounding box
//               representing the "tight" bounds of this node and all
//               of its descendants.  The bounding box is recomputed
//               every frame by reexamining all of the vertices; this
//               is far from efficient, but this is intended for
//               debugging.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1089 14 Dtool_nJyo0fG5 4 681 3890 0 14 Dtool_nJyo0fG5 306 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::hide_bounds
//       Access: Published
//  Description: Stops the rendering of the bounding volume begun with
//               show_bounds().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1090 14 Dtool_nJyofllh 7 682 4006 0 14 Dtool_nJyofllh 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bounds
//       Access: Published
//  Description: Returns a newly-allocated bounding volume containing
//               the bottom node and all of its descendants.  This is
//               the bounding volume on the bottom arc, converted to
//               the local coordinate space of the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  14 current_thread 1 3928  
1091 14 Dtool_nJyopOSR 7 682 4006 0 14 Dtool_nJyopOSR 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_bounds
//       Access: Published
//  Description: Returns a newly-allocated bounding volume containing
//               the bottom node and all of its descendants.  This is
//               the bounding volume on the bottom arc, converted to
//               the local coordinate space of the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1092 14 Dtool_nJyotE3U 4 683 3890 0 14 Dtool_nJyotE3U 890 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::force_recompute_bounds
//       Access: Published
//  Description: Forces the recomputing of all the bounding volumes at
//               every node in the subgraph beginning at this node and
//               below.
//
//               This should not normally need to be called, since the
//               bounding volumes are supposed to be recomputed
//               automatically when necessary.  It may be useful when
//               debugging, to verify that the bounding volumes have
//               not become inadvertently stale; it may also be useful
//               to force animated characters to update their bounding
//               volumes (which does not presently happen
//               automatically).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1093 14 Dtool_nJyo2vwc 4 684 3890 0 14 Dtool_nJyo2vwc 385 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bounds
//       Access: Published
//  Description: Writes a description of the bounding volume
//               containing the bottom node and all of its descendants
//               to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 out 1 3893  
1094 14 Dtool_nJyo36kV 6 685 3866 0 14 Dtool_nJyo36kV 672 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               Geoms at this NodePath's bottom node and below.  This
//               is a tight bounding box; it will generally be tighter
//               than the bounding volume returned by get_bounds()
//               (but it is more expensive to compute).
//
//               The return value is true if any points are within the
//               bounding volume, or false if none are.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3950  9 min_point 1 3953  9 max_point 1 3953  14 current_thread 1 3928  
1095 14 Dtool_nJyooyKP 6 685 3866 0 14 Dtool_nJyooyKP 672 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               Geoms at this NodePath's bottom node and below.  This
//               is a tight bounding box; it will generally be tighter
//               than the bounding volume returned by get_bounds()
//               (but it is more expensive to compute).
//
//               The return value is true if any points are within the
//               bounding volume, or false if none are.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  9 min_point 1 3953  9 max_point 1 3953  
1096 14 Dtool_nJyoznLC 6 686 3889 0 14 Dtool_nJyoznLC 1259 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_light
//       Access: Published
//  Description: Lightly flattens out the hierarchy below this node by
//               applying transforms, colors, and texture matrices
//               from the nodes onto the vertices, but does not remove
//               any nodes.
//
//               This can result in improved rendering performance
//               because there will be fewer transforms in the
//               resulting scene graph, but the number of nodes will
//               remain the same.
//
//               In particular, any NodePaths that reference nodes
//               within this hierarchy will not be damaged.  However,
//               since this operation will remove transforms from the
//               scene graph, it may be dangerous to apply to nodes
//               where you expect to dynamically modify the transform,
//               or where you expect the geometry to remain in a
//               particular local coordinate system.
//
//               The return value is always 0, since flatten_light
//               does not remove any nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1097 14 Dtool_nJyoqVep 6 687 3889 0 14 Dtool_nJyoqVep 836 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_medium
//       Access: Published
//  Description: A more thorough flattening than flatten_light(), this
//               first applies all the transforms, colors, and texture
//               matrices from the nodes onto the vertices, and then
//               removes unneeded grouping nodes--nodes that have
//               exactly one child, for instance, but have no special
//               properties in themselves.
//
//               This results in improved performance over
//               flatten_light() because the number of nodes in the
//               scene graph is reduced.
//
//               The return value is the number of nodes removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1098 14 Dtool_nJyogdaT 6 688 3889 0 14 Dtool_nJyogdaT 1005 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::flatten_strong
//       Access: Published
//  Description: The strongest possible flattening.  This first
//               applies all of the transforms to the vertices, as in
//               flatten_medium(), but then it will combine sibling
//               nodes together when possible, in addition to removing
//               unnecessary parent-child nodes.  This can result in
//               substantially fewer nodes, but any nicely-grouped
//               hierachical bounding volumes may be lost.
//
//               It is generally a good idea to apply this kind of
//               flattening only to nodes that will be culled largely
//               as a single unit, like a car.  Applying this to an
//               entire scene may result in overall poorer performance
//               because of less-effective culling.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1099 14 Dtool_nJyo7D5n 4 689 3890 0 14 Dtool_nJyo7D5n 1105 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::apply_texture_colors
//       Access: Published
//  Description: Removes textures from Geoms at this node and below by
//               applying the texture colors to the vertices.  This is
//               primarily useful to simplify a low-LOD model.  The
//               texture colors are replaced by flat colors that
//               approximate the original textures.
//
//               Only the bottommost texture on each Geom is used (if
//               there is more than one), and it is applied as if it
//               were M_modulate, and WM_repeat, regardless of its
//               actual settings.  If the texture has a
//               simple_ram_image, this may be used if the main image
//               isn't resident.
//
//               After this call, there will be no texturing specified
//               at this level and below.  Of course, there might
//               still be texturing inherited from above.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1100 14 Dtool_nJyohlC6 6 690 3889 0 14 Dtool_nJyohlC6 604 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_model_nodes
//       Access: Published
//  Description: Recursively walks through the scene graph at this
//               level and below, looking for ModelNodes, and calls
//               model_node->set_preserve_transform(PT_drop_node) on
//               each one.  This allows a subsequent call to
//               flatten_strong() to eliminate all of the ModelNodes.
//
//               Returns the number of ModelNodes found.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3949  
1101 14 Dtool_nJyoBD_p 4 691 3890 0 14 Dtool_nJyoBD_p 700 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_tag
//       Access: Published
//  Description: Associates a user-defined value with a user-defined
//               key which is stored on the node.  This value has no
//               meaning to Panda; but it is stored indefinitely on
//               the node until it is requested again.
//
//               Each unique key stores a different string value.
//               There is no effective limit on the number of
//               different keys that may be stored or on the length of
//               any one key's value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  3 key 1 3924  5 value 1 3924  
1102 14 Dtool_nJyozT5q 6 692 3924 0 14 Dtool_nJyozT5q 458 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_tag
//       Access: Published
//  Description: Retrieves the user-defined value that was previously
//               set on this node for the particular key, if any.  If
//               no value has been previously set, returns the empty
//               string.  See also get_net_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1103 14 Dtool_nJyoWQGT 6 693 3866 0 14 Dtool_nJyoWQGT 445 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_tag
//       Access: Published
//  Description: Returns true if a value has been defined on this node
//               for the particular key (even if that value is the
//               empty string), or false if no value has been set.
//               See also has_net_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1104 14 Dtool_nJyoHk6_ 4 694 3890 0 14 Dtool_nJyoHk6_ 397 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_tag
//       Access: Published
//  Description: Removes the value defined for this key on this
//               particular node.  After a call to clear_tag(),
//               has_tag() will return false for the indicated key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 key 1 3924  
1105 14 Dtool_nJyo4VAu 6 695 3924 0 14 Dtool_nJyo4VAu 519 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_tag
//       Access: Published
//  Description: Returns the tag value that has been defined on this
//               node, or the nearest ancestor node, for the indicated
//               key.  If no value has been defined for the indicated
//               key on any ancestor node, returns the empty string.
//               See also get_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1106 14 Dtool_nJyobVNW 6 696 3866 0 14 Dtool_nJyobVNW 390 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_net_tag
//       Access: Published
//  Description: Returns true if the indicated tag value has been
//               defined on this node or on any ancestor node, or
//               false otherwise.  See also has_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1107 14 Dtool_nJyopJhq 7 697 3949 2863 14 Dtool_nJyopJhq 471 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_net_tag
//       Access: Published
//  Description: Returns the lowest ancestor of this node that
//               contains a tag definition with the indicated key, if
//               any, or an empty NodePath if no ancestor of this node
//               contains this tag definition.  See set_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1108 14 Dtool_nJyoSNAU 4 698 3890 0 14 Dtool_nJyoSNAU 716 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_python_tag
//       Access: Published
//  Description: Associates an arbitrary Python object with a
//               user-defined key which is stored on the node.  This
//               object has no meaning to Panda; but it is stored
//               indefinitely on the node until it is requested again.
//
//               Each unique key stores a different Python object.
//               There is no effective limit on the number of
//               different keys that may be stored or on the nature of
//               any one key's object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3949  3 key 1 3924  5 value 1 3891  
1109 14 Dtool_nJyoeudG 6 699 3891 0 14 Dtool_nJyoeudG 455 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_python_tag
//       Access: Published
//  Description: Retrieves the Python object that was previously
//               set on this node for the particular key, if any.  If
//               no object has been previously set, returns None.
//               See also get_net_python_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1110 14 Dtool_nJyogtqu 6 700 3866 0 14 Dtool_nJyogtqu 468 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_python_tag
//       Access: Published
//  Description: Returns true if a Python object has been defined on
//               this node for the particular key (even if that value
//               is the empty string), or false if no value has been
//               set.  See also has_net_python_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1111 14 Dtool_nJyoYEBN 4 701 3890 0 14 Dtool_nJyoYEBN 443 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::clear_python_tag
//       Access: Published
//  Description: Removes the Python object defined for this key on this
//               particular node.  After a call to clear_python_tag(),
//               has_python_tag() will return false for the indicated
//               key.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  3 key 1 3924  
1112 14 Dtool_nJyoeVt_ 6 702 3891 0 14 Dtool_nJyoeVt_ 525 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_net_python_tag
//       Access: Published
//  Description: Returns the Python object that has been defined on
//               this node, or the nearest ancestor node, for the
//               indicated key.  If no value has been defined for the
//               indicated key on any ancestor node, returns None.
//               See also get_python_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1113 14 Dtool_nJyo5V6n 6 703 3866 0 14 Dtool_nJyo5V6n 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::has_net_python_tag
//       Access: Published
//  Description: Returns true if the indicated Python object has been
//               defined on this node or on any ancestor node, or
//               false otherwise.  See also has_python_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1114 14 Dtool_nJyoc_lh 7 704 3949 2863 14 Dtool_nJyoc_lh 485 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::find_net_python_tag
//       Access: Published
//  Description: Returns the lowest ancestor of this node that
//               contains a tag definition with the indicated key, if
//               any, or an empty NodePath if no ancestor of this node
//               contains this tag definition.  See set_python_tag().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 key 1 3924  
1115 14 Dtool_nJyoM5gv 4 705 3890 0 14 Dtool_nJyoM5gv 404 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePath::list_tags
//       Access: Published
//  Description: Lists the tags to the nout stream, one per line.  See
//               PandaNode::list_tags() for a variant that allows you
//               to specify the output stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1116 14 Dtool_nJyo2Rjw 4 706 3890 0 14 Dtool_nJyo2Rjw 258 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::set_name
//       Access: Published
//  Description: Changes the name of the referenced node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3949  4 name 1 3924  
1117 14 Dtool_nJyobkeW 6 707 3924 0 14 Dtool_nJyobkeW 258 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::get_name
//       Access: Published
//  Description: Returns the name of the referenced node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1118 14 Dtool_nJyoDjrd 6 708 3866 0 14 Dtool_nJyoDjrd 519 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bam_file
//       Access: Published
//  Description: Writes the contents of this node and below out to a
//               bam file with the indicated filename.  This file may
//               then be read in again, as is, at some later point.
//               Returns true if successful, false on some kind of
//               error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  8 filename 1 3924  
1119 14 Dtool_nJyoLhBq 6 709 3866 0 14 Dtool_nJyoLhBq 314 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::write_bam_stream
//       Access: Published
//  Description: Writes the contents of this node and below out to the
//               indicated stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  3 out 1 3893  
1120 14 Dtool_nJyoHnyV 6 710 3924 0 14 Dtool_nJyoHnyV 595 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::encode_to_bam_stream
//       Access: Published
//  Description: Converts the NodePath object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.  This is similar to write_bam_stream().
//
//               This method is used by __reduce__ to handle streaming
//               of NodePaths to a pickle file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1121 14 Dtool_nJyohA6i 6 710 3866 0 14 Dtool_nJyohA6i 1580 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::encode_to_bam_stream
//       Access: Published
//  Description: Converts the NodePath object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               If the BamWriter is NULL, this behaves the same way
//               as NodePath::write_bam_stream() and
//               PandaNode::encode_to_bam_stream(), in the sense that
//               it only writes this node and all nodes below it.
//
//               However, if the BamWriter is not NULL, it behaves
//               very differently.  In this case, it encodes the
//               *entire graph* of all nodes connected to the
//               NodePath, including all parent nodes and siblings.
//               This is necessary for correct streaming of related
//               NodePaths and restoration of instances, etc., but it
//               does mean you must detach() a node before writing it
//               if you want to limit the nodes that get written.
//
//               This method is used by __reduce__ to handle streaming
//               of NodePaths to a pickle file.  The BamWriter case is
//               used by the direct.stdpy.pickle module, while the
//               saner, non-BamWriter case is used when the standard
//               pickle module calls this function.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3950  4 data 1 4007  6 writer 1 4009  
1122 14 Dtool_nJyoN7se 6 710 3866 0 14 Dtool_nJyoN7se 1580 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::encode_to_bam_stream
//       Access: Published
//  Description: Converts the NodePath object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               If the BamWriter is NULL, this behaves the same way
//               as NodePath::write_bam_stream() and
//               PandaNode::encode_to_bam_stream(), in the sense that
//               it only writes this node and all nodes below it.
//
//               However, if the BamWriter is not NULL, it behaves
//               very differently.  In this case, it encodes the
//               *entire graph* of all nodes connected to the
//               NodePath, including all parent nodes and siblings.
//               This is necessary for correct streaming of related
//               NodePaths and restoration of instances, etc., but it
//               does mean you must detach() a node before writing it
//               if you want to limit the nodes that get written.
//
//               This method is used by __reduce__ to handle streaming
//               of NodePaths to a pickle file.  The BamWriter case is
//               used by the direct.stdpy.pickle module, while the
//               saner, non-BamWriter case is used when the standard
//               pickle module calls this function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3950  4 data 1 4007  
1123 14 Dtool_nJyodAES 7 711 3949 2863 14 Dtool_nJyodAES 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and
//               returns the NodePath on that string.  Returns NULL on
//               error.
//////////////////////////////////////////////////////////////////// 2 4 data 1 3924  6 reader 1 3941  
1124 14 Dtool_nJyowSol 7 711 3949 2863 14 Dtool_nJyowSol 439 ////////////////////////////////////////////////////////////////////
//     Function: NodePath::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and
//               returns the NodePath on that string.  Returns NULL on
//               error.
//////////////////////////////////////////////////////////////////// 1 4 data 1 3924  
1125 14 Dtool_nJyot3wh 7 712 3896 0 14 Dtool_nJyot3wh 0 0 
1126 14 Dtool_nJyoHpLG 6 388 3866 0 14 Dtool_nJyoHpLG 339 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePath::operator bool
//       Access: Published
//  Description: Returns true if the NodePath is valid (not empty),
//               or false if it contains no nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3950  
1127 14 Dtool_nJyoMzpU 4 717 3890 0 14 Dtool_nJyoMzpU 919 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::add_node
//       Access: Published
//  Description: Adds the indicated NodePath to the registry.  The
//               name and type of the node are noted at the time of
//               this call; if the name changes later, it will not
//               update the registry index.
//
//               The NodePath must reference some kind of an attribute
//               node, such as a LightNode or a PlaneNode.  When bam
//               files that reference an attribute node of the same
//               type and the same name are loaded, they will quietly
//               be redirected to reference this NodePath.
//
//               If there is already a node matching the indicated
//               name and type, it will be replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4011  11 attrib_node 1 3950  
1128 14 Dtool_nJyoihoG 6 718 3866 0 14 Dtool_nJyoihoG 629 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::remove_node
//       Access: Published
//  Description: Removes the indicated NodePath from the registry.
//               The name of the node must not have changed since the
//               matching call to add_node(), or it will not be
//               successfully removed.
//
//               Returns true if the NodePath is found and removed,
//               false if it is not found (for instance, because the
//               name has changed).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4011  11 attrib_node 1 3950  
1129 14 Dtool_nJyoag03 4 718 3890 0 14 Dtool_nJyoag03 270 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::remove_node
//       Access: Published
//  Description: Removes the nth node from the registry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4011  1 n 1 3889  
1130 14 Dtool_nJyo4oNa 7 719 3949 2863 14 Dtool_nJyo4oNa 480 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::lookup_node
//       Access: Published
//  Description: Looks up the indicated NodePath in the registry.  If
//               there is a node already in the registry with the
//               matching name and type, returns that NodePath
//               instead; otherwise, returns the original NodePath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4012  9 orig_node 1 3950  
1131 14 Dtool_nJyomLQW 6 720 3889 0 14 Dtool_nJyomLQW 283 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_num_nodes
//       Access: Published
//  Description: Returns the total number of nodes in the registry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4012  
1132 14 Dtool_nJyoRM96 7 721 3949 2863 14 Dtool_nJyoRM96 278 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node
//       Access: Published
//  Description: Returns the nth NodePath recorded in the registry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4012  1 n 1 3889  
1133 14 Dtool_nJyoJtGc 7 722 3896 0 14 Dtool_nJyoJtGc 312 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node_type
//       Access: Published
//  Description: Returns the type of the nth node, as recorded in the
//               registry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4012  1 n 1 3889  
1134 14 Dtool_nJyofabJ 6 723 3924 0 14 Dtool_nJyofabJ 520 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_node_name
//       Access: Published
//  Description: Returns the name of the nth node, as recorded in the
//               registry.  This will be the node name as it was at
//               the time the node was recorded; if the node has
//               changed names since then, this will still return the
//               original name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4012  1 n 1 3889  
1135 14 Dtool_nJyoAj89 6 724 3889 0 14 Dtool_nJyoAj89 521 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::find_node
//       Access: Published
//  Description: Returns the index number of the indicated NodePath in
//               the registry (assuming its name hasn't changed since
//               it was recorded in the registry), or -1 if the
//               NodePath cannot be found (for instance, because its
//               name has changed).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4012  11 attrib_node 1 3950  
1136 14 Dtool_nJyoRdep 6 724 3889 0 14 Dtool_nJyoRdep 397 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::find_node
//       Access: Published
//  Description: Returns the index number of the node with the
//               indicated type and name in the registry, or -1 if
//               there is no such node in the registry.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4012  4 type 1 3896  4 name 1 3924  
1137 14 Dtool_nJyomYwZ 4 725 3890 0 14 Dtool_nJyomYwZ 261 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::clear
//       Access: Published
//  Description: Removes all nodes from the registry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4011  
1138 14 Dtool_nJyoHJW1 4 726 3890 0 14 Dtool_nJyoHJW1 226 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4012  3 out 1 3893  
1139 14 Dtool_nJyoX6bN 4 727 3890 0 14 Dtool_nJyoX6bN 225 ////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4012  3 out 1 3893  
1140 14 Dtool_nJyoPd0L 6 728 4011 0 14 Dtool_nJyoPd0L 736 // Filename: attribNodeRegistry.I
// Created by:  drose (07Jul07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AttribNodeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1141 14 Dtool_nJyozNRA 7 731 3901 0 14 Dtool_nJyozNRA 283 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs an identity audio volume attrib.
//////////////////////////////////////////////////////////////////// 0 
1142 14 Dtool_nJyoItPH 7 732 3901 0 14 Dtool_nJyoItPH 359 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make
//       Access: Published, Static
//  Description: Constructs a new AudioVolumeAttrib object that indicates
//               audio volume should be scaled by the indicated factor.
//////////////////////////////////////////////////////////////////// 1 6 volume 1 3874  
1143 14 Dtool_nJyoxnf_ 7 733 3901 0 14 Dtool_nJyoxnf_ 482 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new AudioVolumeAttrib object that ignores
//               any AudioVolumeAttrib inherited from above.  You may
//               also specify an additional volume scale to apply to
//               geometry below (using set_volume()).
//////////////////////////////////////////////////////////////////// 0 
1144 14 Dtool_nJyoYhRD 7 734 3901 0 14 Dtool_nJyoYhRD 404 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1145 14 Dtool_nJyods1J 6 735 3866 0 14 Dtool_nJyods1J 529 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::is_off
//       Access: Published
//  Description: Returns true if the AudioVolumeAttrib will ignore any
//               color scales inherited from above, false otherwise.
//               This is not the same thing as !has_scale(); a
//               AudioVolumeAttrib may have the "off" flag set and also
//               have another scale specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4014  
1146 14 Dtool_nJyovujx 6 736 3866 0 14 Dtool_nJyovujx 408 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::has_volume
//       Access: Published
//  Description: Returns true if the AudioVolumeAttrib has a
//               non-identity volume, false otherwise (in which case it
//               might be an off attrib or an identity attrib).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4014  
1147 14 Dtool_nJyosIhc 6 737 3874 0 14 Dtool_nJyosIhc 272 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::get_volume
//       Access: Published
//  Description: Returns the volume to be applied to sounds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4014  
1148 14 Dtool_nJyosXcl 7 738 3901 0 14 Dtool_nJyosXcl 350 ////////////////////////////////////////////////////////////////////
//     Function: AudioVolumeAttrib::set_volume
//       Access: Published
//  Description: Returns a new AudioVolumeAttrib, just like this one, but
//               with the volume changed to the indicated value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4014  6 volume 1 3874  
1149 14 Dtool_nJyoUw12 6 739 3889 0 14 Dtool_nJyoUw12 0 0 
1150 14 Dtool_nJyoCUjz 7 740 3896 0 14 Dtool_nJyoCUjz 0 0 
1151 14 Dtool_nJyof01Z 7 744 3901 0 14 Dtool_nJyof01Z 277 ////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a default AuxBitplaneAttrib object.
//////////////////////////////////////////////////////////////////// 0 
1152 14 Dtool_nJyokyOL 7 744 3901 0 14 Dtool_nJyokyOL 279 ////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a specified AuxBitplaneAttrib object.
//////////////////////////////////////////////////////////////////// 1 7 outputs 1 3889  
1153 14 Dtool_nJyoXUCH 7 745 3901 0 14 Dtool_nJyoXUCH 404 ////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1154 14 Dtool_nJyomZU0 6 746 3889 0 14 Dtool_nJyomZU0 272 ////////////////////////////////////////////////////////////////////
//     Function: AuxBitplaneAttrib::get_outputs
//       Access: Published
//  Description: Returns the AuxBitplaneAttrib output bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4016  
1155 14 Dtool_nJyoRln6 6 747 3889 0 14 Dtool_nJyoRln6 0 0 
1156 14 Dtool_nJyoHDU3 7 748 3896 0 14 Dtool_nJyoHDU3 0 0 
1157 14 Dtool_nJyoMBDR 4 752 3890 0 14 Dtool_nJyoMBDR 402 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_duration
//       Access: Public
//  Description: Specifies the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4018  8 duration 1 3993  
1158 14 Dtool_nJyowhQH 6 753 3993 0 14 Dtool_nJyowhQH 400 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_duration
//       Access: Public
//  Description: Returns the minimum length in time, in seconds, to
//               keep this AuxSceneData object around in the scene
//               graph after the last time it was rendered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4019  
1159 14 Dtool_nJyordrX 4 754 3890 0 14 Dtool_nJyordrX 345 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::set_last_render_time
//       Access: Public
//  Description: Should be called with the current frame_time each
//               time the AuxSceneData is used during traversal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4018  11 render_time 1 3993  
1160 14 Dtool_nJyozXEn 6 755 3993 0 14 Dtool_nJyozXEn 346 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_last_render_time
//       Access: Public
//  Description: Returns the last time this object was used during
//               traversal (according to set_last_render_time()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4019  
1161 14 Dtool_nJyoLlWf 6 756 3993 0 14 Dtool_nJyoLlWf 379 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::get_expiration_time
//       Access: Public
//  Description: Returns the frame_time at which this AuxSceneData
//               object is currently scheduled to be removed from the
//               scene graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4019  
1162 14 Dtool_nJyood_2 4 757 3890 0 14 Dtool_nJyood_2 229 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4019  3 out 1 3893  
1163 14 Dtool_nJyocHFH 4 758 3890 0 14 Dtool_nJyocHFH 228 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4019  3 out 1 3893  12 indent_level 1 3889  
1164 14 Dtool_nJyoovWf 4 758 3890 0 14 Dtool_nJyoovWf 228 ////////////////////////////////////////////////////////////////////
//     Function: AuxSceneData::write
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4019  3 out 1 3893  
1165 14 Dtool_nJyosxVE 7 759 3896 0 14 Dtool_nJyosxVE 0 0 
1166 14 Dtool_nJyocXSJ 7 763 4021 2906 14 Dtool_nJyocXSJ 216 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1167 14 Dtool_nJyoZ5gF 6 765 3866 0 14 Dtool_nJyoZ5gF 328 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated filename for reading.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4021  12 bam_filename 1 4022  13 report_errors 1 3866  
1168 14 Dtool_nJyozHfD 6 765 3866 0 14 Dtool_nJyozHfD 328 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated filename for reading.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4021  12 bam_filename 1 4022  
1169 14 Dtool_nJyoWZ_Q 6 765 3866 0 14 Dtool_nJyoWZ_Q 395 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated stream for reading.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4021  2 in 1 4025  12 bam_filename 1 3924  13 report_errors 1 3866  
1170 14 Dtool_nJyodf6U 6 765 3866 0 14 Dtool_nJyodf6U 395 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated stream for reading.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4021  2 in 1 4025  12 bam_filename 1 3924  
1171 14 Dtool_nJyoOKs6 6 765 3866 0 14 Dtool_nJyoOKs6 395 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_read
//       Access: Public
//  Description: Attempts to open the indicated stream for reading.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4021  2 in 1 4025  
1172 14 Dtool_nJyoERNy 6 766 3943 0 14 Dtool_nJyoERNy 592 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_object
//       Access: Public
//  Description: Reads and returns the next object from the Bam file,
//               or NULL if the end of the file has been reached, or
//               if there is an error condition.  Use is_eof() to
//               differentiate these two cases.
//
//               The pointers returned by this method will not be
//               valid for use until resolve() is subsequently called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1173 14 Dtool_nJyoyZvF 6 767 3866 0 14 Dtool_nJyoyZvF 370 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_eof
//       Access: Public
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4027  
1174 14 Dtool_nJyoxWXF 6 768 3866 0 14 Dtool_nJyoxWXF 650 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::resolve
//       Access: Public
//  Description: This must be called after one or more objects have
//               been read via calls to read_object() in order to
//               resolve all internal pointer references in the
//               objects read and make all the pointers valid.  It
//               returns true if all objects are successfully
//               resolved, or false if some have not been (in which
//               case you must call resolve() again later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1175 14 Dtool_nJyoYvGY 7 769 3925 2411 14 Dtool_nJyoYvGY 1170 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_node
//       Access: Public
//  Description: Although the bam file format is general enough to
//               store a list of objects of arbitrary type, bam files
//               on disk usually contain just one object, a PandaNode
//               that is the root of a scene graph.  (Bam files that
//               store other kinds of things are usually given the
//               extension "boo", for "binary other objects", to
//               differentiate them from the normal scene graph type
//               file.)
//
//               This is a convenience method for when you believe you
//               are reading a scene graph bam file.  It reads the one
//               PandaNode and returns it.  It also calls resolve() to
//               fully resolve the object, since we expect this will
//               be the only object in the file.
//
//               If the bam file contains something other than a
//               PandaNode, an error is printed and NULL is returned.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4021  13 report_errors 1 3866  
1176 14 Dtool_nJyohEoM 7 769 3925 2411 14 Dtool_nJyohEoM 1170 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::read_node
//       Access: Public
//  Description: Although the bam file format is general enough to
//               store a list of objects of arbitrary type, bam files
//               on disk usually contain just one object, a PandaNode
//               that is the root of a scene graph.  (Bam files that
//               store other kinds of things are usually given the
//               extension "boo", for "binary other objects", to
//               differentiate them from the normal scene graph type
//               file.)
//
//               This is a convenience method for when you believe you
//               are reading a scene graph bam file.  It reads the one
//               PandaNode and returns it.  It also calls resolve() to
//               fully resolve the object, since we expect this will
//               be the only object in the file.
//
//               If the bam file contains something other than a
//               PandaNode, an error is printed and NULL is returned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1177 14 Dtool_nJyoUyE3 6 770 3866 0 14 Dtool_nJyoUyE3 440 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated file for writing.  If
//               another file by the same name already exists, it will
//               be silently removed.  Returns true if successful,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4021  12 bam_filename 1 4022  13 report_errors 1 3866  
1178 14 Dtool_nJyoAij1 6 770 3866 0 14 Dtool_nJyoAij1 440 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated file for writing.  If
//               another file by the same name already exists, it will
//               be silently removed.  Returns true if successful,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4021  12 bam_filename 1 4022  
1179 14 Dtool_nJyoMGvp 6 770 3866 0 14 Dtool_nJyoMGvp 396 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated stream for writing.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4021  3 out 1 3893  12 bam_filename 1 3924  13 report_errors 1 3866  
1180 14 Dtool_nJyoHPsn 6 770 3866 0 14 Dtool_nJyoHPsn 396 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated stream for writing.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4021  3 out 1 3893  12 bam_filename 1 3924  
1181 14 Dtool_nJyom4Ne 6 770 3866 0 14 Dtool_nJyom4Ne 396 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::open_write
//       Access: Public
//  Description: Attempts to open the indicated stream for writing.
//               The filename is just for information purposes only.
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4021  3 out 1 3893  
1182 14 Dtool_nJyot9v_ 6 771 3866 0 14 Dtool_nJyot9v_ 324 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::write_object
//       Access: Public
//  Description: Writes the indicated object to the Bam file.  Returns
//               true if successful, false on error.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4021  6 object 1 4029  
1183 14 Dtool_nJyo7bSi 4 772 3890 0 14 Dtool_nJyo7bSi 245 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::close
//       Access: Public
//  Description: Closes the input or output stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1184 14 Dtool_nJyoSD_c 6 773 3866 0 14 Dtool_nJyoSD_c 846 // Filename: bamFile.I
// Created by:  drose (02Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_read
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               reading with no errors so far detected, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4027  
1185 14 Dtool_nJyoYb0C 6 774 3866 0 14 Dtool_nJyoYb0C 364 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::is_valid_write
//       Access: Public
//  Description: Returns true if the Bam file is open and ready for
//               writing with no errors so far detected, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4027  
1186 14 Dtool_nJyoW3p0 6 775 3889 0 14 Dtool_nJyoW3p0 426 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_major_ver
//       Access: Public
//  Description: Returns the major version number of the file
//               currently being read, or the system current major
//               version number if no file is currently open for
//               reading.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1187 14 Dtool_nJyoKw61 6 776 3889 0 14 Dtool_nJyoKw61 426 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_minor_ver
//       Access: Public
//  Description: Returns the minor version number of the file
//               currently being read, or the system current minor
//               version number if no file is currently open for
//               reading.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1188 14 Dtool_nJyo2GM6 6 777 4031 0 14 Dtool_nJyo2GM6 326 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_file_endian
//       Access: Public
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read or written.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4027  
1189 14 Dtool_nJyolKS_ 6 778 3889 0 14 Dtool_nJyolKS_ 386 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_major_ver
//       Access: Public
//  Description: Returns the system current major version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1190 14 Dtool_nJyoNdy5 6 779 3889 0 14 Dtool_nJyoNdy5 386 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_current_minor_ver
//       Access: Public
//  Description: Returns the system current minor version number.
//               This is the version number that will be assigned to
//               any generated Bam files.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1191 14 Dtool_nJyoRuSP 6 780 3941 0 14 Dtool_nJyoRuSP 370 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_reader
//       Access: Public
//  Description: Returns the BamReader in charge of performing the
//               read operations.  This will return NULL unless
//               open_read() was called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1192 14 Dtool_nJyolFLg 6 781 4009 0 14 Dtool_nJyolFLg 372 ////////////////////////////////////////////////////////////////////
//     Function: BamFile::get_writer
//       Access: Public
//  Description: Returns the BamWriter in charge of performing the
//               write operations.  This will return NULL unless
//               open_write() was called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4021  
1193 14 Dtool_nJyoMLb2 7 783 3920 0 14 Dtool_nJyoMLb2 316 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make
//       Access: Published, Static
//  Description: Constructs a new BillboardEffect object with the
//               indicated properties.
//////////////////////////////////////////////////////////////////// 6 9 up_vector 1 3959  12 eye_relative 1 3866  12 axial_rotate 1 3866  6 offset 1 3874  7 look_at 1 3950  13 look_at_point 1 3884  
1194 14 Dtool_nJyoZkox 7 784 3920 0 14 Dtool_nJyoZkox 316 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_axis
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               axis-rotating billboard.
//////////////////////////////////////////////////////////////////// 0 
1195 14 Dtool_nJyoKjao 7 785 3920 0 14 Dtool_nJyoKjao 335 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_eye
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               eye-relative point-rotating billboard.
//////////////////////////////////////////////////////////////////// 0 
1196 14 Dtool_nJyo5nHa 7 786 3920 0 14 Dtool_nJyo5nHa 339 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::make_point_world
//       Access: Published, Static
//  Description: A convenience function to make a typical
//               world-relative point-rotating billboard.
//////////////////////////////////////////////////////////////////// 0 
1197 14 Dtool_nJyoFuxD 6 787 3866 0 14 Dtool_nJyoFuxD 625 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::is_off
//       Access: Published
//  Description: Returns true if the BillboardEffect is an 'off'
//               BillboardEffect, indicating that it does not enable
//               billboarding.  This kind of BillboardEffect isn't
//               particularly useful and isn't normally created or
//               stored in the graph; it might be implicitly
//               discovered as the result of a
//               NodePath::get_rel_state().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4032  
1198 14 Dtool_nJyoamrP 6 788 3959 0 14 Dtool_nJyoamrP 281 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_up_vector
//       Access: Published
//  Description: Returns the up vector in effect for this billboard.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4032  
1199 14 Dtool_nJyoDPkT 6 789 3866 0 14 Dtool_nJyoDPkT 387 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_eye_relative
//       Access: Published
//  Description: Returns true if this billboard interprets the up
//               vector relative to the camera, or false if it is
//               relative to the world.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4032  
1200 14 Dtool_nJyojfqI 6 790 3866 0 14 Dtool_nJyojfqI 395 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_axial_rotate
//       Access: Published
//  Description: Returns true if this billboard rotates only around
//               the axis of the up vector, or false if it rotates
//               freely in three dimensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4032  
1201 14 Dtool_nJyoJ6nm 6 791 3874 0 14 Dtool_nJyoJ6nm 465 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_offset
//       Access: Published
//  Description: Returns the distance toward the camera (or the
//               look_at_point) the billboard is moved towards, after
//               rotating.  This can be used to ensure the billboard
//               is not obscured by nearby geometry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4032  
1202 14 Dtool_nJyoeWpx 6 792 3950 0 14 Dtool_nJyoeWpx 450 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at
//       Access: Published
//  Description: Returns the node this billboard will rotate to look
//               towards.  If this is empty, it means the billboard
//               will rotate towards the current camera node, wherever
//               that might be.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4032  
1203 14 Dtool_nJyoA3tu 6 793 3884 0 14 Dtool_nJyoA3tu 386 ////////////////////////////////////////////////////////////////////
//     Function: BillboardEffect::get_look_at_point
//       Access: Published
//  Description: Returns the point, relative to the look_at node,
//               towards which the billboard will rotate.  Normally
//               this is (0, 0, 0).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4032  
1204 14 Dtool_nJyoEm5V 7 794 3896 0 14 Dtool_nJyoEm5V 0 0 
1205 14 Dtool_nJyovtd7 7 797 4036 2949 14 Dtool_nJyovtd7 220 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 3924  4 lens 1 4034  
1206 14 Dtool_nJyoZGLe 7 797 4036 2949 14 Dtool_nJyoZGLe 220 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
1207 14 Dtool_nJyo1vNW 4 798 3890 0 14 Dtool_nJyo1vNW 888 // Filename: lensNode.I
// Created by:  drose (26Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LensNode::copy_lens
//       Access: Published
//  Description: Sets up the LensNode using a copy of the
//               indicated Lens.  If the original Lens is
//               changed or destroyed, this LensNode is not
//               affected.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4036  4 lens 1 4037  
1208 14 Dtool_nJyom46f 4 798 3890 0 14 Dtool_nJyom46f 269 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::copy_lens
//       Access: Published
//  Description: Copies the indicated lens into the specified slot.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4036  5 index 1 3889  4 lens 1 4037  
1209 14 Dtool_nJyo_2fA 4 799 3890 0 14 Dtool_nJyo_2fA 403 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens
//       Access: Published
//  Description: Sets up the LensNode using this particular Lens
//               pointer.  If the lens is subsequently modified, the
//               LensNode properties immediately reflect the change.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4036  4 lens 1 4034  
1210 14 Dtool_nJyoxtno 4 799 3890 0 14 Dtool_nJyoxtno 585 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens
//       Access: Published
//  Description: Sets the indicated lens.  Although a LensNode
//               normally holds only one lens, it may optionally
//               include multiple lenses, each with a different index
//               number.  The different lenses may be referenced by
//               index number on the DisplayRegion.  Adding a new lens
//               automatically makes it active.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4036  5 index 1 3889  4 lens 1 4034  
1211 14 Dtool_nJyo9zXB 7 800 4034 0 14 Dtool_nJyo9zXB 443 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens
//       Access: Published
//  Description: Returns a pointer to the particular Lens
//               associated with this LensNode, or NULL if there is
//               not yet a Lens associated.  If an index number is
//               specified, returns the nth lens.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4039  5 index 1 3889  
1212 14 Dtool_nJyod5Ow 7 800 4034 0 14 Dtool_nJyod5Ow 443 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens
//       Access: Published
//  Description: Returns a pointer to the particular Lens
//               associated with this LensNode, or NULL if there is
//               not yet a Lens associated.  If an index number is
//               specified, returns the nth lens.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4039  
1213 14 Dtool_nJyoPGgB 6 801 3866 0 14 Dtool_nJyoPGgB 536 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::set_lens_active
//       Access: Published
//  Description: Sets the active flag for the nth lens.  When a lens
//               is inactive, it is not used for rendering, and any
//               DisplayRegions associated with it are implicitly
//               inactive as well.  Returns true if the flag is
//               changed, false if it already had this value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4036  5 index 1 3889  6 active 1 3866  
1214 14 Dtool_nJyoLTIn 6 802 3866 0 14 Dtool_nJyoLTIn 266 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::get_lens_active
//       Access: Published
//  Description: Returns the active flag for the nth lens.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4039  5 index 1 3889  
1215 14 Dtool_nJyo1JkY 6 803 3866 0 14 Dtool_nJyo1JkY 294 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::activate_lens
//       Access: Published
//  Description: An alternate way to call set_lens_active(index,
//               true).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4036  5 index 1 3889  
1216 14 Dtool_nJyoSl8u 6 804 3866 0 14 Dtool_nJyoSl8u 297 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::deactivate_lens
//       Access: Published
//  Description: An alternate way to call set_lens_active(index,
//               false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4036  5 index 1 3889  
1217 14 Dtool_nJyoUo66 6 805 3866 0 14 Dtool_nJyoUo66 374 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::is_in_view
//       Access: Published
//  Description: Returns true if the given point is within the bounds
//               of the lens of the LensNode (i.e. if the camera can
//               see the point).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4036  3 pos 1 3884  
1218 14 Dtool_nJyoDOXI 6 805 3866 0 14 Dtool_nJyoDOXI 374 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::is_in_view
//       Access: Published
//  Description: Returns true if the given point is within the bounds
//               of the lens of the LensNode (i.e. if the camera can
//               see the point).
//////////////////////////////////////////////////////////////////// 3 4 this 3 4036  5 index 1 3889  3 pos 1 3884  
1219 14 Dtool_nJyoCdMV 4 806 3890 0 14 Dtool_nJyoCdMV 391 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::show_frustum
//       Access: Published
//  Description: Enables the drawing of the lens's frustum to aid in
//               visualization.  This actually creates a GeomNode
//               which is parented to the LensNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4036  
1220 14 Dtool_nJyoZDm8 4 807 3890 0 14 Dtool_nJyoZDm8 306 ////////////////////////////////////////////////////////////////////
//     Function: LensNode::hide_frustum
//       Access: Published
//  Description: Disables the drawing of the lens's frustum to aid in
//               visualization.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4036  
1221 14 Dtool_nJyoF6_K 7 808 3896 0 14 Dtool_nJyoF6_K 0 0 
1222 14 Dtool_nJyom2Nz 7 811 4043 2949 14 Dtool_nJyom2Nz 223 ////////////////////////////////////////////////////////////////////
//     Function: Camera::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4041  
1223 14 Dtool_nJyoaMFn 7 811 4043 2949 14 Dtool_nJyoaMFn 218 ////////////////////////////////////////////////////////////////////
//     Function: Camera::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 3924  4 lens 1 4034  
1224 14 Dtool_nJyoDDNS 7 811 4043 2949 14 Dtool_nJyoDDNS 218 ////////////////////////////////////////////////////////////////////
//     Function: Camera::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
1225 14 Dtool_nJyo3QAN 4 812 3890 0 14 Dtool_nJyo3QAN 810 // Filename: camera.I
// Created by:  drose (26Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Camera::set_active
//       Access: Published
//  Description: Sets the active flag on the camera.  When the camera
//               is not active, nothing will be rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  6 active 1 3866  
1226 14 Dtool_nJyoQY9N 6 813 3866 0 14 Dtool_nJyoQY9N 295 ////////////////////////////////////////////////////////////////////
//     Function: Camera::is_active
//       Access: Published
//  Description: Returns the current setting of the active flag on the
//               camera.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4041  
1227 14 Dtool_nJyo1aj6 4 814 3890 0 14 Dtool_nJyo1aj6 801 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_scene
//       Access: Published
//  Description: Sets the scene that will be rendered by the camera.
//               This is normally the root node of a scene graph,
//               typically a node called 'render', although it could
//               represent the root of any subgraph.
//
//               Note that the use of this method is now deprecated.
//               In the absence of an explicit scene set on the
//               camera, the camera will render whatever scene it is
//               parented into.  This is the preferred way to specify
//               the scene, since it is the more intuitive mechanism.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  5 scene 1 3950  
1228 14 Dtool_nJyo_CJc 6 815 3950 0 14 Dtool_nJyo_CJc 306 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_scene
//       Access: Published
//  Description: Returns the scene that will be rendered by the
//               camera.  See set_scene().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4041  
1229 14 Dtool_nJyofkXi 6 816 3889 0 14 Dtool_nJyofkXi 313 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_num_display_regions
//       Access: Published
//  Description: Returns the number of display regions associated with
//               the camera.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4041  
1230 14 Dtool_nJyoHanc 7 817 4045 0 14 Dtool_nJyoHanc 301 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_display_region
//       Access: Published
//  Description: Returns the nth display region associated with the
//               camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4041  1 n 1 3889  
1231 14 Dtool_nJyoSRdR 4 818 3890 0 14 Dtool_nJyoSRdR 717 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_camera_mask
//       Access: Published
//  Description: Changes the set of bits that represent the subset of
//               the scene graph the camera will render.
//
//               During the cull traversal, a node is not visited if
//               none of its draw mask bits intersect with the
//               camera's camera mask bits.  These masks can be used
//               to selectively hide and show different parts of the
//               scene graph from different cameras that are otherwise
//               viewing the same scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  4 mask 1 3931  
1232 14 Dtool_nJyoXHXi 7 819 3931 0 14 Dtool_nJyoXHXi 373 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_camera_mask
//       Access: Published
//  Description: Returns the set of bits that represent the subset of
//               the scene graph the camera will render.  See
//               set_camera_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4041  
1233 14 Dtool_nJyodwtU 4 820 3890 0 14 Dtool_nJyodwtU 606 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_cull_center
//       Access: Published
//  Description: Specifies the point from which the culling operations
//               are performed.  Normally, this is the same as the
//               camera, and that is the default if this is not
//               specified; but it may sometimes be useful to perform
//               the culling from some other viewpoint, particularly
//               when you are debugging the culling itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  11 cull_center 1 3950  
1234 14 Dtool_nJyoYdSn 6 821 3950 0 14 Dtool_nJyoYdSn 396 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_cull_center
//       Access: Published
//  Description: Returns the point from which the culling operations
//               will be performed, if it was set by
//               set_cull_center(), or the empty NodePath otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4041  
1235 14 Dtool_nJyoA5qa 4 822 3890 0 14 Dtool_nJyoA5qa 680 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_lod_center
//       Access: Published
//  Description: Specifies the point from which the LOD distances
//               are measured.  Normally, this is the same as the
//               camera, and that is the default if this is not
//               specified; but it may sometimes be useful to perform
//               the distance test from some other viewpoint.  This
//               may be used, for instance, to reduce LOD popping when
//               the camera rotates in a small circle about an avatar.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  10 lod_center 1 3950  
1236 14 Dtool_nJyoX15y 6 823 3950 0 14 Dtool_nJyoX15y 388 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_lod_center
//       Access: Published
//  Description: Returns the point from which the LOD distances will
//               be measured, if it was set by set_lod_center(), or
//               the empty NodePath otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4041  
1237 14 Dtool_nJyoRVZ2 4 824 3890 0 14 Dtool_nJyoRVZ2 374 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_initial_state
//       Access: Published
//  Description: Sets the initial state which is applied to all nodes
//               in the scene, as if it were set at the top of the
//               scene graph.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  5 state 1 3910  
1238 14 Dtool_nJyoD4v3 7 825 3910 0 14 Dtool_nJyoD4v3 317 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_initial_state
//       Access: Published
//  Description: Returns the initial state as set by a previous call
//               to set_initial_state().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4041  
1239 14 Dtool_nJyoCBek 4 826 3890 0 14 Dtool_nJyoCBek 477 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state_key
//       Access: Published
//  Description: Sets the tag key which, when encountered as a tag on
//               nodes in the scene graph, causes this Camera to apply
//               an arbitrary state transition based on the value of
//               the tag (as specified to set_tag_state()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  13 tag_state_key 1 3924  
1240 14 Dtool_nJyooh3v 6 827 3924 0 14 Dtool_nJyooh3v 311 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state_key
//       Access: Published
//  Description: Returns the tag key as set by a previous call to
//               set_tag_state_key().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4041  
1241 14 Dtool_nJyoT5SH 4 828 3890 0 14 Dtool_nJyoT5SH 959 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_tag_state
//       Access: Published
//  Description: Associates a particular state transition with the
//               indicated tag value.  When a node is encountered
//               during traversal with the tag key specified by
//               set_tag_state_key(), if the value of that tag matches
//               tag_state, then the indicated state is applied to
//               this node--but only when it is rendered by this
//               camera.
//
//               This can be used to apply special effects to nodes
//               when they are rendered by certain cameras.  It is
//               particularly useful for multipass rendering, in which
//               specialty cameras might be needed to render the scene
//               with a particular set of effects.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4043  9 tag_state 1 3924  5 state 1 3910  
1242 14 Dtool_nJyotFjq 4 829 3890 0 14 Dtool_nJyotFjq 314 ////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_tag_state
//       Access: Published
//  Description: Removes the association established by a previous
//               call to set_tag_state().
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  9 tag_state 1 3924  
1243 14 Dtool_nJyo388o 6 830 3866 0 14 Dtool_nJyo388o 343 ////////////////////////////////////////////////////////////////////
//     Function: Camera::has_tag_state
//       Access: Published
//  Description: Returns true if set_tag_state() has previously been
//               called with the indicated tag state, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4041  9 tag_state 1 3924  
1244 14 Dtool_nJyo7bRn 7 831 3910 0 14 Dtool_nJyo7bRn 402 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_tag_state
//       Access: Published
//  Description: Returns the state associated with the indicated tag
//               state by a previous call to set_tag_state(), or the
//               empty state if nothing has been associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4041  9 tag_state 1 3924  
1245 14 Dtool_nJyorz56 4 832 3890 0 14 Dtool_nJyorz56 403 ////////////////////////////////////////////////////////////////////
//     Function: Camera::set_aux_scene_data
//       Access: Published
//  Description: Associates the indicated AuxSceneData object with the
//               given NodePath, possibly replacing a previous
//               data defined for the same NodePath, if any.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4043  9 node_path 1 3950  4 data 1 4018  
1246 14 Dtool_nJyogEb_ 6 833 3866 0 14 Dtool_nJyogEb_ 401 ////////////////////////////////////////////////////////////////////
//     Function: Camera::clear_aux_scene_data
//       Access: Published
//  Description: Removes the AuxSceneData associated with the
//               indicated NodePath.  Returns true if it is removed
//               successfully, false if it was already gone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  9 node_path 1 3950  
1247 14 Dtool_nJyo9tPd 7 834 4018 2904 14 Dtool_nJyo9tPd 341 ////////////////////////////////////////////////////////////////////
//     Function: Camera::get_aux_scene_data
//       Access: Published
//  Description: Returns the AuxSceneData associated with the
//               indicated NodePath, or NULL if nothing is associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4041  9 node_path 1 3950  
1248 14 Dtool_nJyo72v7 4 835 3890 0 14 Dtool_nJyo72v7 298 ////////////////////////////////////////////////////////////////////
//     Function: Camera::list_aux_scene_data
//       Access: Published
//  Description: Outputs all of the NodePaths and AuxSceneDatas in
//               use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4041  3 out 1 3893  
1249 14 Dtool_nJyoUUgw 6 836 3889 0 14 Dtool_nJyoUUgw 443 ////////////////////////////////////////////////////////////////////
//     Function: Camera::cleanup_aux_scene_data
//       Access: Published
//  Description: Walks through the list of currently-assigned
//               AuxSceneData objects and releases any that are
//               past their expiration times.  Returns the number of
//               elements released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4043  14 current_thread 1 3928  
1250 14 Dtool_nJyoARBt 6 836 3889 0 14 Dtool_nJyoARBt 443 ////////////////////////////////////////////////////////////////////
//     Function: Camera::cleanup_aux_scene_data
//       Access: Published
//  Description: Walks through the list of currently-assigned
//               AuxSceneData objects and releases any that are
//               past their expiration times.  Returns the number of
//               elements released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4043  
1251 14 Dtool_nJyo7jVC 7 837 3896 0 14 Dtool_nJyo7jVC 0 0 
1252 14 Dtool_nJyoTfC3 7 839 4049 2987 14 Dtool_nJyoTfC3 218 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 3924  5 plane 1 4046  
1253 14 Dtool_nJyoTudM 7 839 4049 2987 14 Dtool_nJyoTudM 218 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
1254 14 Dtool_nJyoBb4d 4 840 3890 0 14 Dtool_nJyoBb4d 289 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_plane
//       Access: Public
//  Description: Sets the particular plane represented by the
//               PlaneNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  5 plane 1 4046  
1255 14 Dtool_nJyoPSiz 6 841 4046 0 14 Dtool_nJyoPSiz 264 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_plane
//       Access: Public
//  Description: Returns the plane represented by the PlaneNode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4050  
1256 14 Dtool_nJyoFb_8 4 842 3890 0 14 Dtool_nJyoFb_8 339 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_viz_scale
//       Access: Public
//  Description: Specifies the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  9 viz_scale 1 3874  
1257 14 Dtool_nJyoLHV4 6 843 3874 0 14 Dtool_nJyoLHV4 337 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_viz_scale
//       Access: Public
//  Description: Returns the size of the visual representation of
//               the plane that is drawn if the PlaneNode is shown.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4050  
1258 14 Dtool_nJyonpzN 4 844 3890 0 14 Dtool_nJyonpzN 784 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_priority
//       Access: Published
//  Description: Changes the relative importance of this PlaneNode
//               (when it is used as a clip plane) relative to the
//               other clip planes that are applied simultaneously.
//
//               The priority number is used to decide which of the
//               requested clip planes are to be activated when more
//               clip planes are requested than the hardware will
//               support.  The highest-priority n planes are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  8 priority 1 3889  
1259 14 Dtool_nJyohUDr 6 845 3889 0 14 Dtool_nJyohUDr 314 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_priority
//       Access: Published
//  Description: Returns the priority associated with this clip
//               plane.  See set_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4050  
1260 14 Dtool_nJyomaMf 4 847 3890 0 14 Dtool_nJyomaMf 755 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::set_clip_effect
//       Access: Published
//  Description: Specifies the sort of things this plane will actually
//               clip (when it is used as a clip plane).  This is a
//               bitmask union of ClipEffect values.  If it includes
//               CE_visible, then it will clip visible geometry; if it
//               includes CE_collision, then it will clip collision
//               polygons.  If it includes neither bit, it will still
//               affect culling, but objects will either be wholly
//               behind the clipping plane, or wholly present.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4049  11 clip_effect 1 3889  
1261 14 Dtool_nJyo0HJo 6 848 3889 0 14 Dtool_nJyo0HJo 315 ////////////////////////////////////////////////////////////////////
//     Function: PlaneNode::get_clip_effect
//       Access: Published
//  Description: Returns the clip_effect bits for this clip plane.
//               See set_clip_effect().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4050  
1262 14 Dtool_nJyoajRh 7 849 3896 0 14 Dtool_nJyoajRh 0 0 
1263 14 Dtool_nJyoMFqO 7 853 3901 0 14 Dtool_nJyoMFqO 304 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that does
//               nothing.
//////////////////////////////////////////////////////////////////// 0 
1264 14 Dtool_nJyoSf11 7 853 3901 0 14 Dtool_nJyoSf11 469 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that enables (or
//               disables, according to op) the indicated plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 2 2 op 1 3765  5 plane 1 4049  
1265 14 Dtool_nJyoAiXQ 7 853 3901 0 14 Dtool_nJyoAiXQ 464 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 3 2 op 1 3765  6 plane1 1 4049  6 plane2 1 4049  
1266 14 Dtool_nJyoCohu 7 853 3901 0 14 Dtool_nJyoCohu 464 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 4 2 op 1 3765  6 plane1 1 4049  6 plane2 1 4049  6 plane3 1 4049  
1267 14 Dtool_nJyouzti 7 853 3901 0 14 Dtool_nJyouzti 464 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that turns on (or
//               off, according to op) the indicate plane(s).
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 5 2 op 1 3765  6 plane1 1 4049  6 plane2 1 4049  6 plane3 1 4049  6 plane4 1 4049  
1268 14 Dtool_nJyoLVlb 7 854 3901 0 14 Dtool_nJyoLVlb 402 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1269 14 Dtool_nJyojfgg 6 855 3765 0 14 Dtool_nJyojfgg 900 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the ClipPlaneAttrib.
//               If this is O_set, the planes listed here completely
//               replace any planes that were already on.  If this is
//               O_add, the planes here are added to the set of of
//               planes that were already on, and if O_remove, the
//               planes here are removed from the set of planes that
//               were on.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4052  
1270 14 Dtool_nJyohARe 6 856 3889 0 14 Dtool_nJyohARe 530 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_planes
//       Access: Published
//  Description: Returns the number of planes listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4052  
1271 14 Dtool_nJyoS5RG 7 857 4049 2987 14 Dtool_nJyoS5RG 518 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_plane
//       Access: Published
//  Description: Returns the nth plane listed in the attribute.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  1 n 1 3889  
1272 14 Dtool_nJyoxcJo 6 858 3866 0 14 Dtool_nJyoxcJo 566 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_plane
//       Access: Published
//  Description: Returns true if the indicated plane is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  ClipPlaneAttribs
//               nowadays have a separate list of on_planes and
//               off_planes, so this method doesn't make sense.  Query
//               the lists independently.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  5 plane 1 4049  
1273 14 Dtool_nJyohmfX 7 859 3901 0 14 Dtool_nJyohmfX 467 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes.
//
//               This method is now deprecated.  Use add_on_plane() or
//               add_off_plane() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  5 plane 1 4049  
1274 14 Dtool_nJyor4Ff 7 860 3901 0 14 Dtool_nJyor4Ff 497 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes.
//
//               This method is now deprecated.  Use remove_on_plane()
//               or remove_off_plane() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  5 plane 1 4049  
1275 14 Dtool_nJyoIhtw 7 861 3901 0 14 Dtool_nJyoIhtw 350 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new ClipPlaneAttrib object that disables 
//               all planes (and hence disables clipping).
//////////////////////////////////////////////////////////////////// 0 
1276 14 Dtool_nJyomD9r 6 862 3889 0 14 Dtool_nJyomD9r 314 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_on_planes
//       Access: Published
//  Description: Returns the number of planes that are enabled by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4052  
1277 14 Dtool_nJyoc731 7 863 3949 2863 14 Dtool_nJyoc731 317 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_on_plane
//       Access: Published
//  Description: Returns the nth plane enabled by the attribute,
//               sorted in render order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  1 n 1 3889  
1278 14 Dtool_nJyo5ejJ 6 864 3866 0 14 Dtool_nJyo5ejJ 324 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_on_plane
//       Access: Published
//  Description: Returns true if the indicated plane is enabled by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  5 plane 1 3950  
1279 14 Dtool_nJyoiwoK 6 865 3889 0 14 Dtool_nJyoiwoK 316 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_num_off_planes
//       Access: Published
//  Description: Returns the number of planes that are disabled by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4052  
1280 14 Dtool_nJyoQHx4 7 866 3949 2863 14 Dtool_nJyoQHx4 332 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::get_off_plane
//       Access: Published
//  Description: Returns the nth plane disabled by the attribute,
//               sorted in arbitrary (pointer) order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  1 n 1 3889  
1281 14 Dtool_nJyoW4PJ 6 867 3866 0 14 Dtool_nJyoW4PJ 326 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_off_plane
//       Access: Published
//  Description: Returns true if the indicated plane is disabled by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  5 plane 1 3950  
1282 14 Dtool_nJyo77yZ 6 868 3866 0 14 Dtool_nJyo77yZ 328 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib disables all planes
//               (although it may also enable some).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4052  
1283 14 Dtool_nJyo1m0T 6 869 3866 0 14 Dtool_nJyo1m0T 333 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of planes in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4052  
1284 14 Dtool_nJyoOV44 7 870 3901 0 14 Dtool_nJyoOV44 394 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               enabled by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  5 plane 1 3950  
1285 14 Dtool_nJyoZNYP 7 871 3901 0 14 Dtool_nJyoZNYP 401 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_on_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes enabled by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  5 plane 1 3950  
1286 14 Dtool_nJyohtl4 7 872 3901 0 14 Dtool_nJyohtl4 396 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::add_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane added to the list of planes
//               disabled by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  5 plane 1 3950  
1287 14 Dtool_nJyondra 7 873 3901 0 14 Dtool_nJyondra 403 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::remove_off_plane
//       Access: Published
//  Description: Returns a new ClipPlaneAttrib, just like this one, but
//               with the indicated plane removed from the list of
//               planes disabled by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  5 plane 1 3950  
1288 14 Dtool_nJyo7mpB 7 874 4052 0 14 Dtool_nJyo7mpB 477 ////////////////////////////////////////////////////////////////////
//     Function: ClipPlaneAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new ClipPlaneAttrib, very much like this one,
//               but with the number of on_planes reduced to be no
//               more than max_clip_planes.  The number of off_planes in
//               the new ClipPlaneAttrib is undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4052  15 max_clip_planes 1 3889  
1289 14 Dtool_nJyoQZ_S 6 875 3889 0 14 Dtool_nJyoQZ_S 0 0 
1290 14 Dtool_nJyoiYmd 7 876 3896 0 14 Dtool_nJyoiYmd 0 0 
1291 14 Dtool_nJyoVIQx 7 880 3901 0 14 Dtool_nJyoVIQx 379 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_vertex
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered according to its own
//               vertex color.
//////////////////////////////////////////////////////////////////// 0 
1292 14 Dtool_nJyo_AHD 7 881 3901 0 14 Dtool_nJyo_AHD 349 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_flat
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered in the indicated color.
//////////////////////////////////////////////////////////////////// 1 5 color 1 3961  
1293 14 Dtool_nJyotNeS 7 882 3901 0 14 Dtool_nJyotNeS 334 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorAttrib object that indicates
//               geometry should be rendered in white.
//////////////////////////////////////////////////////////////////// 0 
1294 14 Dtool_nJyoXNi2 7 883 3901 0 14 Dtool_nJyoXNi2 398 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1295 14 Dtool_nJyouDIc 6 884 3767 0 14 Dtool_nJyouDIc 648 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color_type
//       Access: Published
//  Description: Returns the type of color specified by this
//               ColorAttrib.  The options are:
//
//                 T_vertex - use the vertex color specified in the
//                 geometry itself.
//
//                 T_flat - use the color specified in this
//                 ColorAttrib for all geometry.  You can get this
//                 color via get_color().
//
//                 T_off - use the color white.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4054  
1296 14 Dtool_nJyofxu6 6 885 3961 0 14 Dtool_nJyofxu6 391 ////////////////////////////////////////////////////////////////////
//     Function: ColorAttrib::get_color
//       Access: Published
//  Description: If the type is T_flat or T_off, this returns the
//               color that will be applied to geometry.  If the type
//               is T_vertex, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4054  
1297 14 Dtool_nJyo_3Vt 6 886 3889 0 14 Dtool_nJyo_3Vt 0 0 
1298 14 Dtool_nJyoNqSX 7 887 3896 0 14 Dtool_nJyoNqSX 0 0 
1299 14 Dtool_nJyo5AXJ 7 892 3901 0 14 Dtool_nJyo5AXJ 396 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that
//               disables special-effect blending, allowing normal
//               transparency to be used instead.
//////////////////////////////////////////////////////////////////// 0 
1300 14 Dtool_nJyo5Fac 7 893 3901 0 14 Dtool_nJyo5Fac 404 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object.  This
//               constructor is deprecated; use the one below, which
//               takes three or four parameters, instead.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3769  
1301 14 Dtool_nJyo_Hc8 7 893 3901 0 14 Dtool_nJyo_Hc8 373 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that enables
//               special-effect blending.  This supercedes
//               transparency.
//////////////////////////////////////////////////////////////////// 4 4 mode 1 3769  1 a 1 3770  1 b 1 3770  5 color 1 3961  
1302 14 Dtool_nJyoVZIK 7 893 3901 0 14 Dtool_nJyoVZIK 373 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorBlendAttrib object that enables
//               special-effect blending.  This supercedes
//               transparency.
//////////////////////////////////////////////////////////////////// 3 4 mode 1 3769  1 a 1 3770  1 b 1 3770  
1303 14 Dtool_nJyo_UhR 7 894 3901 0 14 Dtool_nJyo_UhR 403 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1304 14 Dtool_nJyoVa3Z 6 895 3769 0 14 Dtool_nJyoVa3Z 254 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_mode
//       Access: Published
//  Description: Returns the colorBlend mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1305 14 Dtool_nJyo2xBv 6 896 3770 0 14 Dtool_nJyo2xBv 278 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_a
//       Access: Published
//  Description: Returns the multiplier for the first component.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1306 14 Dtool_nJyo2oPw 6 897 3770 0 14 Dtool_nJyo2oPw 279 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_operand_b
//       Access: Published
//  Description: Returns the multiplier for the second component.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1307 14 Dtool_nJyolK1Z 7 898 3964 0 14 Dtool_nJyolK1Z 281 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::get_color
//       Access: Published
//  Description: Returns the constant color associated with the attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1308 14 Dtool_nJyos1UW 6 899 3866 0 14 Dtool_nJyos1UW 331 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               constant color, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1309 14 Dtool_nJyoZuVD 6 899 3866 0 14 Dtool_nJyoZuVD 345 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_constant_color
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               constant color, false otherwise.
//////////////////////////////////////////////////////////////////// 1 7 operand 1 3770  
1310 14 Dtool_nJyoPd_w 6 900 3866 0 14 Dtool_nJyoPd_w 332 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published
//  Description: Returns true if the this attrib uses the
//               color scale attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4056  
1311 14 Dtool_nJyoDAnV 6 900 3866 0 14 Dtool_nJyoDAnV 346 ////////////////////////////////////////////////////////////////////
//     Function: ColorBlendAttrib::involves_color_scale
//       Access: Published, Static
//  Description: Returns true if the indicated operand uses the
//               color scale attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 1 7 operand 1 3770  
1312 14 Dtool_nJyozdH_ 6 901 3889 0 14 Dtool_nJyozdH_ 0 0 
1313 14 Dtool_nJyodCAT 7 902 3896 0 14 Dtool_nJyodCAT 0 0 
1314 14 Dtool_nJyoHjWB 7 905 3901 0 14 Dtool_nJyoHjWB 275 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs an identity scale attrib.
//////////////////////////////////////////////////////////////////// 0 
1315 14 Dtool_nJyoqphH 7 906 3901 0 14 Dtool_nJyoqphH 353 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that indicates
//               geometry should be scaled by the indicated factor.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3961  
1316 14 Dtool_nJyoiYTX 7 907 3901 0 14 Dtool_nJyoiYTX 477 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ColorScaleAttrib object that ignores
//               any ColorScaleAttrib inherited from above.  You may
//               also specify an additional color scale to apply to
//               geometry below (using set_scale()).
//////////////////////////////////////////////////////////////////// 0 
1317 14 Dtool_nJyogycf 7 908 3901 0 14 Dtool_nJyogycf 403 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1318 14 Dtool_nJyo4gpd 6 909 3866 0 14 Dtool_nJyo4gpd 526 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_off
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib will ignore any
//               color scales inherited from above, false otherwise.
//               This is not the same thing as !has_scale(); a
//               ColorScaleAttrib may have the "off" flag set and also
//               have another scale specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4058  
1319 14 Dtool_nJyobEZp 6 910 3866 0 14 Dtool_nJyobEZp 377 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::is_identity
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib is an identity
//               attrib, false if it is either an off attrib or it has
//               a scale.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4058  
1320 14 Dtool_nJyo5XjN 6 911 3866 0 14 Dtool_nJyo5XjN 404 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale, false otherwise (in which case it
//               might be an off attrib or an identity attrib).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4058  
1321 14 Dtool_nJyosOha 6 912 3866 0 14 Dtool_nJyosOha 386 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_rgb_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale in the RGB components (ignoring
//               alpha), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4058  
1322 14 Dtool_nJyo08u4 6 913 3866 0 14 Dtool_nJyo08u4 387 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::has_alpha_scale
//       Access: Published
//  Description: Returns true if the ColorScaleAttrib has a
//               non-identity scale in the alpha component (ignoring
//               RGB), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4058  
1323 14 Dtool_nJyolY5G 6 914 3961 0 14 Dtool_nJyolY5G 269 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::get_scale
//       Access: Published
//  Description: Returns the scale to be applied to colors.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4058  
1324 14 Dtool_nJyoB7C2 7 915 3901 0 14 Dtool_nJyoB7C2 346 ////////////////////////////////////////////////////////////////////
//     Function: ColorScaleAttrib::set_scale
//       Access: Published
//  Description: Returns a new ColorScaleAttrib, just like this one, but
//               with the scale changed to the indicated value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4058  5 scale 1 3961  
1325 14 Dtool_nJyotLFN 6 916 3889 0 14 Dtool_nJyotLFN 0 0 
1326 14 Dtool_nJyokV8g 7 917 3896 0 14 Dtool_nJyokV8g 0 0 
1327 14 Dtool_nJyozjc0 7 921 3901 0 14 Dtool_nJyozjc0 271 ////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ColorWriteAttrib object.
//////////////////////////////////////////////////////////////////// 1 8 channels 1 3867  
1328 14 Dtool_nJyo3IW4 7 922 3901 0 14 Dtool_nJyo3IW4 403 ////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1329 14 Dtool_nJyoUAsG 6 923 3867 0 14 Dtool_nJyoUAsG 314 ////////////////////////////////////////////////////////////////////
//     Function: ColorWriteAttrib::get_channels
//       Access: Published
//  Description: Returns the mask of color channels that are enabled
//               by this attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4060  
1330 14 Dtool_nJyo0n8l 6 924 3889 0 14 Dtool_nJyo0n8l 0 0 
1331 14 Dtool_nJyoP935 7 925 3896 0 14 Dtool_nJyoP935 0 0 
1332 14 Dtool_nJyo1e7i 7 929 3920 0 14 Dtool_nJyo1e7i 660 ////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::make
//       Access: Published, Static
//  Description: Constructs a new CompassEffect object.  If the
//               reference is an empty NodePath, it means the
//               CompassEffect is relative to the root of the scene
//               graph; otherwise, it's relative to the indicated
//               node.  The properties bitmask specifies the set of
//               properties that the compass node inherits from the
//               reference instead of from its parent.
//////////////////////////////////////////////////////////////////// 2 9 reference 1 3950  10 properties 1 3889  
1333 14 Dtool_nJyoo3bC 7 929 3920 0 14 Dtool_nJyoo3bC 660 ////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::make
//       Access: Published, Static
//  Description: Constructs a new CompassEffect object.  If the
//               reference is an empty NodePath, it means the
//               CompassEffect is relative to the root of the scene
//               graph; otherwise, it's relative to the indicated
//               node.  The properties bitmask specifies the set of
//               properties that the compass node inherits from the
//               reference instead of from its parent.
//////////////////////////////////////////////////////////////////// 1 9 reference 1 3950  
1334 14 Dtool_nJyo9Dfu 6 930 3950 0 14 Dtool_nJyo9Dfu 398 ////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::get_reference
//       Access: Published
//  Description: Returns the reference node from which the
//               CompassEffect inherits its transform.  If this is
//               empty, it means the root of the scene graph.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4062  
1335 14 Dtool_nJyoNQdF 6 931 3889 0 14 Dtool_nJyoNQdF 398 ////////////////////////////////////////////////////////////////////
//     Function: CompassEffect::get_properties
//       Access: Published
//  Description: 
//               Returns the bitmask of properties that this
//               CompassEffect object inherits from its reference node
//               (or from the root).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4062  
1336 14 Dtool_nJyoeHvU 7 932 3896 0 14 Dtool_nJyoeHvU 0 0 
1337 14 Dtool_nJyo9_4q 7 938 3901 0 14 Dtool_nJyo9_4q 589 ////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullBinAttrib assigning geometry
//               into the named bin.  If the bin name is the empty
//               string, the default bin is used.
//
//               The draw_order specifies further ordering information
//               which is relevant only to certain kinds of bins (in
//               particular CullBinFixed type bins).
//////////////////////////////////////////////////////////////////// 2 8 bin_name 1 3924  10 draw_order 1 3889  
1338 14 Dtool_nJyoahaw 7 939 3901 0 14 Dtool_nJyoahaw 400 ////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1339 14 Dtool_nJyoKDax 6 940 3924 0 14 Dtool_nJyoKDax 373 ////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin this attribute specifies.
//               If this is the empty string, it refers to the default
//               bin.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4064  
1340 14 Dtool_nJyoK03U 6 941 3889 0 14 Dtool_nJyoK03U 448 ////////////////////////////////////////////////////////////////////
//     Function: CullBinAttrib::get_draw_order
//       Access: Published
//  Description: Returns the draw order this attribute specifies.
//               Some bins (in particular, CullBinFixed bins) use this
//               to further specify the order in which objects should
//               be rendered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4064  
1341 14 Dtool_nJyoJUhp 6 942 3889 0 14 Dtool_nJyoJUhp 0 0 
1342 14 Dtool_nJyoW020 7 943 3896 0 14 Dtool_nJyoW020 0 0 
1343 14 Dtool_nJyoJenF 6 946 3889 0 14 Dtool_nJyoJenF 507 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::add_bin
//       Access: Published
//  Description: Defines a new bin with the indicated name, and
//               returns the new bin_index.  If there is already a bin
//               with the same name returns its bin_index if it had
//               the same properties; otherwise, reports an error and
//               returns -1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4066  4 name 1 3924  4 type 1 3777  4 sort 1 3889  
1344 14 Dtool_nJyobswe 4 947 3890 0 14 Dtool_nJyobswe 663 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::remove_bin
//       Access: Published
//  Description: Permanently removes the indicated bin.  This
//               operation is not protected from the pipeline and will
//               disturb whatever is currently rendering in draw.  You
//               should not call this during the normal course of
//               rendering a frame; it is intended only as an aid to
//               development, to allow the developer to interactively
//               fiddle with the set of bins.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4066  9 bin_index 1 3889  
1345 14 Dtool_nJyoj_LX 6 948 3889 0 14 Dtool_nJyoj_LX 268 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_num_bins
//       Access: Published
//  Description: Returns the number of bins in the world.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4067  
1346 14 Dtool_nJyooytP 6 949 3889 0 14 Dtool_nJyooytP 511 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin
//       Access: Published
//  Description: Returns the bin_index of the nth bin in the set,
//               where n is a number between 0 and get_num_bins().
//               This returns the list of bin_index numbers, in sorted
//               order (that is, in the order in which the bins should
//               be rendered).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  1 n 1 3889  
1347 14 Dtool_nJyo5zCj 6 950 3889 0 14 Dtool_nJyo5zCj 336 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::find_bin
//       Access: Published
//  Description: Returns the bin_index associated with the bin of the
//               given name, or -1 if no bin has that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  4 name 1 3924  
1348 14 Dtool_nJyoo76W 6 951 3924 0 14 Dtool_nJyoo76W 458 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_name
//       Access: Published
//  Description: Returns the name of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).  The bin's name may not be changed
//               during the life of the bin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  9 bin_index 1 3889  
1349 14 Dtool_nJyoWa3_ 6 952 3777 0 14 Dtool_nJyoWa3_ 297 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  4 name 1 3924  
1350 14 Dtool_nJyoxiQg 6 952 3777 0 14 Dtool_nJyoxiQg 378 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_type
//       Access: Published
//  Description: Returns the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  9 bin_index 1 3889  
1351 14 Dtool_nJyoBZ6R 4 953 3890 0 14 Dtool_nJyoBZ6R 456 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               name.
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4066  4 name 1 3924  4 type 1 3777  
1352 14 Dtool_nJyo8mzD 4 953 3890 0 14 Dtool_nJyo8mzD 537 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_type
//       Access: Published
//  Description: Changes the type of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The change might be effective immediately, or it
//               might take place next frame, depending on the bin
//               type.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4066  9 bin_index 1 3889  4 type 1 3777  
1353 14 Dtool_nJyowm68 6 954 3889 0 14 Dtool_nJyowm68 486 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  4 name 1 3924  
1354 14 Dtool_nJyoJVUe 6 954 3889 0 14 Dtool_nJyoJVUe 567 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_sort
//       Access: Published
//  Description: Returns the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  9 bin_index 1 3889  
1355 14 Dtool_nJyoZvJ2 4 955 3890 0 14 Dtool_nJyoZvJ2 486 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               name.
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4066  4 name 1 3924  4 sort 1 3889  
1356 14 Dtool_nJyoU8RN 4 955 3890 0 14 Dtool_nJyoU8RN 567 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_sort
//       Access: Published
//  Description: Changes the sort order of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               The bins are rendered in increasing order by their
//               sort order; this number may be changed from time to
//               time to reorder the bins.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4066  9 bin_index 1 3889  4 sort 1 3889  
1357 14 Dtool_nJyocE_B 6 956 3866 0 14 Dtool_nJyocE_B 419 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  4 name 1 3924  
1358 14 Dtool_nJyowCRb 6 956 3866 0 14 Dtool_nJyowCRb 500 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_bin_active
//       Access: Published
//  Description: Returns the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  9 bin_index 1 3889  
1359 14 Dtool_nJyoUwxh 4 957 3890 0 14 Dtool_nJyoUwxh 419 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               name.
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4066  4 name 1 3924  6 active 1 3866  
1360 14 Dtool_nJyogtxI 4 957 3890 0 14 Dtool_nJyogtxI 500 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::set_bin_active
//       Access: Published
//  Description: Changes the active flag of the bin with the indicated
//               bin_index (where bin_index was retrieved by get_bin()
//               or find_bin()).
//
//               When a bin is marked inactive, all geometry assigned
//               to it is not rendered.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4066  9 bin_index 1 3889  6 active 1 3866  
1361 14 Dtool_nJyoShRp 4 958 3890 0 14 Dtool_nJyoShRp 221 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4067  3 out 1 3893  
1362 14 Dtool_nJyo_lYP 6 959 4066 0 14 Dtool_nJyo_lYP 311 ////////////////////////////////////////////////////////////////////
//     Function: CullBinManager::get_global_ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global CullBinManager
//               object.
//////////////////////////////////////////////////////////////////// 0 
1363 14 Dtool_nJyoIubb 7 962 3901 0 14 Dtool_nJyoIubb 739 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that specifies
//               how to cull geometry.  By Panda convention, vertices
//               are ordered counterclockwise when seen from the
//               front, so the M_cull_clockwise will cull backfacing
//               polygons.
//
//               M_cull_unchanged is an identity attrib; if this is
//               applied to vertices without any other intervening
//               attrib, it is the same as applying the default
//               attrib.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3781  
1364 14 Dtool_nJyonry7 7 962 3901 0 14 Dtool_nJyonry7 739 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that specifies
//               how to cull geometry.  By Panda convention, vertices
//               are ordered counterclockwise when seen from the
//               front, so the M_cull_clockwise will cull backfacing
//               polygons.
//
//               M_cull_unchanged is an identity attrib; if this is
//               applied to vertices without any other intervening
//               attrib, it is the same as applying the default
//               attrib.
//////////////////////////////////////////////////////////////////// 0 
1365 14 Dtool_nJyo1_sE 7 963 3901 0 14 Dtool_nJyo1_sE 529 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make_reverse
//       Access: Published, Static
//  Description: Constructs a new CullFaceAttrib object that reverses
//               the effects of any other CullFaceAttrib objects in
//               the scene graph.  M_cull_clockwise will be treated as
//               M_cull_counter_clockwise, and vice-versa.
//               M_cull_none is unchanged.
//////////////////////////////////////////////////////////////////// 0 
1366 14 Dtool_nJyoaQNy 7 964 3901 0 14 Dtool_nJyoaQNy 401 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1367 14 Dtool_nJyotw1_ 6 965 3781 0 14 Dtool_nJyotw1_ 382 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_actual_mode
//       Access: Published
//  Description: Returns the actual culling mode, without considering
//               the effects of the reverse flag.  See also
//               get_effective_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4069  
1368 14 Dtool_nJyoZ_zu 6 966 3866 0 14 Dtool_nJyoZ_zu 608 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_reverse
//       Access: Published
//  Description: Returns the 'reverse' flag.  If this is true, the
//               actual cull direction (clockwise
//               vs. counterclockwise) is the reverse of what is
//               specified here.  This allows support for
//               make_reverse(), which defines a CullFaceAttrib that
//               reverses whatever the sense of culling would have
//               been.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4069  
1369 14 Dtool_nJyoN1y1 6 967 3781 0 14 Dtool_nJyoN1y1 487 ////////////////////////////////////////////////////////////////////
//     Function: CullFaceAttrib::get_effective_mode
//       Access: Published
//  Description: Returns the effective culling mode.  This is the same
//               as the actual culling mode, unless the reverse flag
//               is set, which swaps CW for CCW and vice-versa.  Also,
//               M_cull_unchanged is mapped to M_cull_none.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4069  
1370 14 Dtool_nJyoO84V 6 968 3889 0 14 Dtool_nJyoO84V 0 0 
1371 14 Dtool_nJyodcRA 7 969 3896 0 14 Dtool_nJyodcRA 0 0 
1372 14 Dtool_nJyo3eFF 7 972 4071 2411 14 Dtool_nJyo3eFF 220 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
1373 14 Dtool_nJyo1Bv8 4 973 3890 0 14 Dtool_nJyo1Bv8 850 // Filename: geomNode.I
// Created by:  drose (23Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_preserved
//       Access: Published
//  Description: Sets the "preserved" flag.  When this is true, the
//               GeomNode will be left untouched by any flatten
//               operations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4071  5 value 1 3866  
1374 14 Dtool_nJyoiZ2Q 6 974 3866 0 14 Dtool_nJyoiZ2Q 369 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_preserved
//       Access: Published
//  Description: Returns the "preserved" flag.  When this is true, the
//               GeomNode will be left untouched by any flatten
//               operations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4072  
1375 14 Dtool_nJyoI0Ys 6 975 3889 0 14 Dtool_nJyoI0Ys 263 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_num_geoms
//       Access: Published
//  Description: Returns the number of geoms in the node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4072  
1376 14 Dtool_nJyoAgFb 7 976 4076 0 14 Dtool_nJyoAgFb 438 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom
//       Access: Published
//  Description: Returns the nth geom of the node.  This object should
//               not be modified, since the same object might be
//               shared between multiple different GeomNodes, but see
//               modify_geom().
//////////////////////////////////////////////////////////////////// 2 4 this 3 4072  1 n 1 3889  
1377 14 Dtool_nJyoh0cC 7 977 4077 0 14 Dtool_nJyoh0cC 1031 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::modify_geom
//       Access: Published
//  Description: Returns the nth geom of the node, suitable for
//               modifying it.  If the nth Geom has multiple reference
//               counts to it, reassigns it to an identical copy
//               first, and returns the new copy--this provides a
//               "copy on write" that ensures that the Geom that is
//               returned is unique to this GeomNode and is not shared
//               with any other GeomNodes.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4071  1 n 1 3889  
1378 14 Dtool_nJyoeIGG 7 978 3910 0 14 Dtool_nJyoeIGG 585 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_geom_state
//       Access: Published
//  Description: Returns the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4072  1 n 1 3889  
1379 14 Dtool_nJyoqNIz 4 979 3890 0 14 Dtool_nJyoqNIz 965 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom_state
//       Access: Published
//  Description: Changes the RenderState associated with the nth geom
//               of the node.  This is just the RenderState directly
//               associated with the Geom; the actual state in which
//               the Geom is rendered will also be affected by
//               RenderStates that appear on the scene graph in nodes
//               above this GeomNode.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4071  1 n 1 3889  5 state 1 3910  
1380 14 Dtool_nJyoA4ql 4 980 3890 0 14 Dtool_nJyoA4ql 432 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geom
//       Access: Published
//  Description: Adds a new Geom to the node.  The geom is given the
//               indicated state (which may be
//               RenderState::make_empty(), to completely inherit its
//               state from the scene graph).
//////////////////////////////////////////////////////////////////// 3 4 this 3 4071  4 geom 1 4077  5 state 1 3910  
1381 14 Dtool_nJyog1uL 4 980 3890 0 14 Dtool_nJyog1uL 432 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geom
//       Access: Published
//  Description: Adds a new Geom to the node.  The geom is given the
//               indicated state (which may be
//               RenderState::make_empty(), to completely inherit its
//               state from the scene graph).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4071  4 geom 1 4077  
1382 14 Dtool_nJyo06du 4 981 3890 0 14 Dtool_nJyo06du 336 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::add_geoms_from
//       Access: Published
//  Description: Copies the Geoms (and their associated RenderStates)
//               from the indicated GeomNode into this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4071  5 other 1 4072  
1383 14 Dtool_nJyoOrgw 4 982 3890 0 14 Dtool_nJyoOrgw 708 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::set_geom
//       Access: Public
//  Description: Replaces the nth Geom of the node with a new pointer.
//               There must already be a Geom in this slot.
//
//               Note that if this method is called in a downstream
//               stage (for instance, during cull or draw), then it
//               will propagate the new list of Geoms upstream all the
//               way to pipeline stage 0, which may step on changes
//               that were made independently in pipeline stage 0.
//               Use with caution.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4071  1 n 1 3889  4 geom 1 4077  
1384 14 Dtool_nJyoV9b7 4 983 3890 0 14 Dtool_nJyoV9b7 256 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_geom
//       Access: Published
//  Description: Removes the nth geom from the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4071  1 n 1 3889  
1385 14 Dtool_nJyo_NLA 4 984 3890 0 14 Dtool_nJyo_NLA 270 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::remove_all_geoms
//       Access: Published
//  Description: Removes all the geoms from the node at once.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4071  
1386 14 Dtool_nJyos0De 6 985 3866 0 14 Dtool_nJyos0De 453 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::check_valid
//       Access: Published
//  Description: Verifies that the each Geom within the GeomNode
//               reference vertices that actually exist within its
//               GeomVertexData.  Returns true if the GeomNode appears
//               to be valid, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4072  
1387 14 Dtool_nJyozvce 4 986 3890 0 14 Dtool_nJyozvce 755 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::decompose
//       Access: Published
//  Description: Calls decompose() on each Geom with the GeomNode.
//               This decomposes higher-order primitive types, like
//               triangle strips, into lower-order types like indexed
//               triangles.  Normally there is no reason to do this,
//               but it can be useful as an early preprocessing step,
//               to allow a later call to unify() to proceed more
//               quickly.
//
//               See also SceneGraphReducer::decompose(), which is the
//               normal way this is called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4071  
1388 14 Dtool_nJyoX2Y_ 4 987 3890 0 14 Dtool_nJyoX2Y_ 1354 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::unify
//       Access: Published
//  Description: Attempts to unify all of the Geoms contained within
//               this node into a single Geom, or at least as few
//               Geoms as possible.  In turn, the individual
//               GeomPrimitives contained within each resulting Geom
//               are also unified.  The goal is to reduce the number
//               of GeomPrimitives within the node as far as possible.
//               This may result in composite primitives, such as
//               triangle strips and triangle fans, being decomposed
//               into triangles.  See also Geom::unify().
//
//               max_indices represents the maximum number of indices
//               that will be put in any one GeomPrimitive.  If
//               preserve_order is true, then the primitives will not
//               be reordered during the operation, even if this
//               results in a suboptimal result.
//
//               In order for this to be successful, the primitives
//               must reference the same GeomVertexData, have the same
//               fundamental primitive type, and have compatible shade
//               models.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4071  11 max_indices 1 3889  14 preserve_order 1 3866  
1389 14 Dtool_nJyoWbSk 4 988 3890 0 14 Dtool_nJyoWbSk 294 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_geoms
//       Access: Published
//  Description: Writes a short description of all the Geoms in the
//               node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4072  3 out 1 3893  12 indent_level 1 3889  
1390 14 Dtool_nJyoSkiE 4 989 3890 0 14 Dtool_nJyoSkiE 299 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::write_verbose
//       Access: Published
//  Description: Writes a detailed description of all the Geoms in the
//               node.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4072  3 out 1 3893  12 indent_level 1 3889  
1391 14 Dtool_nJyolm7A 7 990 3931 0 14 Dtool_nJyolm7A 323 ////////////////////////////////////////////////////////////////////
//     Function: GeomNode::get_default_collide_mask
//       Access: Published, Static
//  Description: Returns the default into_collide_mask assigned to new
//               GeomNodes.
//////////////////////////////////////////////////////////////////// 0 
1392 14 Dtool_nJyonVK5 7 991 3896 0 14 Dtool_nJyonVK5 0 0 
1393 14 Dtool_nJyovBWr 4 993 3890 0 14 Dtool_nJyovBWr 273 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_display_region
//       Access: Published
//  Description: Specifies the display region for the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4078  14 display_region 1 4079  
1394 14 Dtool_nJyo2fnD 6 994 4079 0 14 Dtool_nJyo2fnD 271 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_display_region
//       Access: Published
//  Description: Returns the display region for the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1395 14 Dtool_nJyoBliz 4 995 3890 0 14 Dtool_nJyoBliz 309 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_viewport_size
//       Access: Published
//  Description: Specifies the size of the viewport (display region),
//               in pixels.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4078  5 width 1 3889  6 height 1 3889  
1396 14 Dtool_nJyoVugH 6 996 3889 0 14 Dtool_nJyoVugH 308 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_viewport_width
//       Access: Published
//  Description: Returns the width of the viewport (display region) in
//               pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1397 14 Dtool_nJyogn7t 6 997 3889 0 14 Dtool_nJyogn7t 310 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_viewport_height
//       Access: Published
//  Description: Returns the height of the viewport (display region) in
//               pixels.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1398 14 Dtool_nJyowD0u 4 998 3890 0 14 Dtool_nJyowD0u 263 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_scene_root
//       Access: Published
//  Description: Specifies the root node of the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4078  10 scene_root 1 3950  
1399 14 Dtool_nJyoXOWk 6 999 3950 0 14 Dtool_nJyoXOWk 261 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_scene_root
//       Access: Published
//  Description: Returns the root node of the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1400 14 Dtool_nJyoQMSk 4 1000 3890 0 14 Dtool_nJyoQMSk 264 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_path
//       Access: Published
//  Description: Specifies the NodePath to the camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4078  11 camera_path 1 3950  
1401 14 Dtool_nJyobVcV 6 1001 3950 0 14 Dtool_nJyobVcV 262 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_path
//       Access: Published
//  Description: Returns the NodePath to the camera.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1402 14 Dtool_nJyo4wa4 4 1002 3890 0 14 Dtool_nJyo4wa4 273 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_node
//       Access: Published
//  Description: Specifies the camera used to render the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4078  11 camera_node 1 4043  
1403 14 Dtool_nJyoLZX1 7 1003 4043 2949 14 Dtool_nJyoLZX1 271 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_node
//       Access: Published
//  Description: Returns the camera used to render the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1404 14 Dtool_nJyo9x7V 4 1004 3890 0 14 Dtool_nJyo9x7V 269 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_lens
//       Access: Published
//  Description: Indicates the particular Lens used for rendering.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4078  4 lens 1 4037  
1405 14 Dtool_nJyoSPnl 7 1005 4037 0 14 Dtool_nJyoSPnl 267 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_lens
//       Access: Published
//  Description: Returns the particular Lens used for rendering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1406 14 Dtool_nJyoCErz 4 1006 3890 0 14 Dtool_nJyoCErz 477 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4078  8 inverted 1 3866  
1407 14 Dtool_nJyo_jwr 6 1007 3866 0 14 Dtool_nJyo_jwr 434 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1408 14 Dtool_nJyoSRuh 6 1008 3950 0 14 Dtool_nJyoSRuh 469 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_cull_center
//       Access: Published
//  Description: Returns the point from which the culling operations
//               will be performed.  This is normally the camera, but
//               if camera->set_cull_center() has been specified, it
//               will be that special node instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1409 14 Dtool_nJyo_voe 4 1009 3890 0 14 Dtool_nJyo_voe 378 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_initial_state
//       Access: Published
//  Description: Sets the initial state which is applied to all nodes
//               in the scene, as if it were set at the top of the
//               scene graph.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4078  13 initial_state 1 3910  
1410 14 Dtool_nJyoVUvy 7 1010 3910 0 14 Dtool_nJyoVUvy 321 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_initial_state
//       Access: Published
//  Description: Returns the initial state as set by a previous call
//               to set_initial_state().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1411 14 Dtool_nJyoaRis 4 1011 3890 0 14 Dtool_nJyoaRis 316 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_camera_transform
//       Access: Published
//  Description: Specifies the position of the camera relative to the
//               starting node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4078  16 camera_transform 1 3864  
1412 14 Dtool_nJyo4DM_ 7 1012 3864 0 14 Dtool_nJyo4DM_ 314 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_camera_transform
//       Access: Published
//  Description: Returns the position of the camera relative to the
//               starting node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1413 14 Dtool_nJyoAzuD 4 1013 3890 0 14 Dtool_nJyoAzuD 378 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::set_world_transform
//       Access: Published
//  Description: Specifies the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4078  15 world_transform 1 3864  
1414 14 Dtool_nJyottUm 7 1014 3864 0 14 Dtool_nJyottUm 376 ////////////////////////////////////////////////////////////////////
//     Function: SceneSetup::get_world_transform
//       Access: Published
//  Description: Returns the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4081  
1415 14 Dtool_nJyovC1m 7 1017 3912 3159 14 Dtool_nJyovC1m 226 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1416 14 Dtool_nJyopnp0 7 1017 3912 3159 14 Dtool_nJyopnp0 231 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4083  
1417 14 Dtool_nJyoEnOx 7 1018 3932 0 14 Dtool_nJyoEnOx 755 // Filename: cullTraverser.I
// Created by:  drose (23Feb02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_gsg
//       Access: Published
//  Description: Returns the GraphicsStateGuardian in effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1418 14 Dtool_nJyoXuzj 7 1019 3928 0 14 Dtool_nJyoXuzj 340 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_current_thread
//       Access: Published
//  Description: Returns the currently-executing thread object, as
//               passed to the CullTraverser constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1419 14 Dtool_nJyoAFzQ 4 1020 3890 0 14 Dtool_nJyoAFzQ 388 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_scene
//       Access: Published, Virtual
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3912  11 scene_setup 1 4078  3 gsg 1 3932  20 dr_incomplete_render 1 3866  
1420 14 Dtool_nJyoZmia 7 1021 4078 3132 14 Dtool_nJyoZmia 254 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_scene
//       Access: Published
//  Description: Returns the SceneSetup object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1421 14 Dtool_nJyo_kmm 6 1022 3866 0 14 Dtool_nJyo_kmm 349 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::has_tag_state_key
//       Access: Published
//  Description: Returns true if a nonempty tag state key has been
//               specified for the scene's camera, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1422 14 Dtool_nJyoCjMW 6 1023 3924 0 14 Dtool_nJyoCjMW 330 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_tag_state_key
//       Access: Published
//  Description: Returns the tag state key that has been specified for
//               the scene's camera, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1423 14 Dtool_nJyoEI0o 4 1024 3890 0 14 Dtool_nJyoEI0o 571 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_camera_mask
//       Access: Published
//  Description: Changes the visibility mask for the camera viewing
//               the scene.  This is normally set automatically
//               at the time setup_scene() is called; you should
//               change this only if you want to render some set of
//               objects different from what the camera normally would
//               draw.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3912  11 camera_mask 1 4085  
1424 14 Dtool_nJyohr4G 6 1025 4085 0 14 Dtool_nJyohr4G 309 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_camera_mask
//       Access: Published
//  Description: Returns the visibility mask from the camera viewing
//               the scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1425 14 Dtool_nJyoy7Kh 7 1026 3864 0 14 Dtool_nJyoy7Kh 317 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_camera_transform
//       Access: Published
//  Description: Returns the position of the camera relative to the
//               starting node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1426 14 Dtool_nJyoCmm_ 7 1027 3864 0 14 Dtool_nJyoCmm_ 689 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_world_transform
//       Access: Published
//  Description: Returns the position of the starting node relative
//               to the camera.  This is the inverse of the camera
//               transform.
//
//               Note that this value is always the position of the
//               starting node, not the current node, even if it is
//               sampled during a traversal.  To get the transform of
//               the current node use
//               CullTraverserData::get_modelview_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1427 14 Dtool_nJyoMgIM 7 1028 3910 0 14 Dtool_nJyoMgIM 401 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_initial_state
//       Access: Published
//  Description: Returns the initial RenderState at the top of the
//               scene graph we are traversing, or the empty state if
//               the initial state was never set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1428 14 Dtool_nJyo55Ad 6 1029 3866 0 14 Dtool_nJyo55Ad 324 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_depth_offset_decals
//       Access: Published
//  Description: Returns the depth_offset_decals flag.  See
//               set_depth_offset_decals().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1429 14 Dtool_nJyosWSU 4 1030 3890 0 14 Dtool_nJyosWSU 405 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_view_frustum
//       Access: Published
//  Description: Specifies the bounding volume that corresponds to the
//               view frustum.  Any primitives that fall entirely
//               outside of this volume are not drawn.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3912  12 view_frustum 1 4087  
1430 14 Dtool_nJyovFFq 7 1031 4087 0 14 Dtool_nJyovFFq 764 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_view_frustum
//       Access: Published
//  Description: Returns the bounding volume that corresponds to the
//               view frustum, or NULL if the view frustum is not in
//               use or has not been set.
//
//               Note that the view frustum returned here is always in
//               the coordinate space of the starting node, not the
//               current node, even if it is sampled during a
//               traversal.  To get the view frustum in the current
//               node's coordinate space, check in the current
//               CullTraverserData.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1431 14 Dtool_nJyot7Ig 4 1032 3890 0 14 Dtool_nJyot7Ig 349 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_cull_handler
//       Access: Published
//  Description: Specifies the object that will receive the culled
//               Geoms.  This must be set before calling traverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3912  12 cull_handler 1 4089  
1432 14 Dtool_nJyonaaa 6 1033 4089 0 14 Dtool_nJyonaaa 302 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_cull_handler
//       Access: Published
//  Description: Returns the object that will receive the culled
//               Geoms.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1433 14 Dtool_nJyoxwdd 4 1034 3890 0 14 Dtool_nJyoxwdd 345 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::set_portal_clipper
//       Access: Published
//  Description: Specifies _portal_clipper object pointer that 
//               subsequent traverse() or traverse_below may use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3912  14 portal_clipper 1 4091  
1434 14 Dtool_nJyojKST 6 1035 4091 0 14 Dtool_nJyojKST 268 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_portal_clipper
//       Access: Published
//  Description: Returns the _portal_clipper pointer
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1435 14 Dtool_nJyo7Iif 6 1036 3866 0 14 Dtool_nJyo7Iif 666 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::get_effective_incomplete_render
//       Access: Published
//  Description: Returns true if the cull traversal is effectively in
//               incomplete_render state, considering both the GSG's
//               incomplete_render and the current DisplayRegion's
//               incomplete_render flags.  This returns the flag
//               during the cull traversal; see
//               GSG::get_effective_incomplete_render() for this same
//               flag during the draw traversal.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4083  
1436 14 Dtool_nJyoq68a 4 1037 3890 0 14 Dtool_nJyoq68a 401 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse
//       Access: Published
//  Description: Traverses from the next node with the given
//               data, which has been constructed with the node but
//               has not yet been converted into the node's space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3912  4 data 1 4093  
1437 14 Dtool_nJyoJG1M 4 1037 3890 0 14 Dtool_nJyoJG1M 268 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse
//       Access: Published
//  Description: Begins the traversal from the indicated node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3912  4 root 1 3950  
1438 14 Dtool_nJyoBjES 4 1038 3890 0 14 Dtool_nJyoBjES 390 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::traverse_below
//       Access: Published, Virtual
//  Description: Traverses all the children of the indicated node,
//               with the given data, which has been converted into
//               the node's space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3912  4 data 1 4093  
1439 14 Dtool_nJyoo6EH 4 1039 3890 0 14 Dtool_nJyoo6EH 397 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::end_traverse
//       Access: Published, Virtual
//  Description: Should be called when the traverser has finished
//               traversing its scene, this gives it a chance to do
//               any necessary finalization.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3912  
1440 14 Dtool_nJyoAEZG 4 1040 3890 0 14 Dtool_nJyoAEZG 284 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::flush_level
//       Access: Published, Static
//  Description: Flushes the PStatCollectors used during traversal.
//////////////////////////////////////////////////////////////////// 0 
1441 14 Dtool_nJyo6O6_ 4 1041 3890 0 14 Dtool_nJyo6O6_ 320 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverser::draw_bounding_volume
//       Access: Published
//  Description: Draws an appropriate visualization of the indicated
//               bounding volume.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3912  3 vol 1 3936  13 net_transform 1 3864  19 modelview_transform 1 3864  
1442 14 Dtool_nJyoX1Dh 7 1042 3896 0 14 Dtool_nJyoX1Dh 0 0 
1443 14 Dtool_nJyoySyw 7 1046 3925 2411 14 Dtool_nJyoySyw 260 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::node
//       Access: Published
//  Description: Returns the node traversed to so far.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3913  
1444 14 Dtool_nJyoqida 7 1047 3864 0 14 Dtool_nJyoqida 344 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_modelview_transform
//       Access: Published
//  Description: Returns the modelview transform: the relative
//               transform from the camera to the model.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3913  4 trav 1 4083  
1445 14 Dtool_nJyot3SC 7 1048 3864 0 14 Dtool_nJyot3SC 352 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::get_net_transform
//       Access: Published
//  Description: Returns the net transform: the relative transform
//               from root of the scene graph to the current node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3913  4 trav 1 4083  
1446 14 Dtool_nJyoJuc_ 6 1049 3866 0 14 Dtool_nJyoJuc_ 529 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::is_in_view
//       Access: Published
//  Description: Returns true if the current node is within the view
//               frustum, false otherwise.  If the node's bounding
//               volume falls completely within the view frustum, this
//               will also reset the view frustum pointer, saving some
//               work for future nodes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4093  11 camera_mask 1 4085  
1447 14 Dtool_nJyo1At1 6 1050 3866 0 14 Dtool_nJyo1At1 523 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::is_this_node_hidden
//       Access: Published
//  Description: Returns true if this particular node is hidden, even
//               though we might be traversing past this node to find
//               a child node that has had show_through() called for
//               it.  If this returns true, the node should not be
//               rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3913  4 trav 1 4083  
1448 14 Dtool_nJyo7cNL 4 1051 3890 0 14 Dtool_nJyo7cNL 392 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::apply_transform_and_state
//       Access: Published
//  Description: Applies the transform and state from the current
//               node onto the current data.  This also evaluates
//               billboards, etc.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4093  4 trav 1 3912  
1449 14 Dtool_nJyo_OVm 4 1051 3890 0 14 Dtool_nJyo_OVm 420 ////////////////////////////////////////////////////////////////////
//     Function: CullTraverserData::apply_transform_and_state
//       Access: Published
//  Description: Applies the indicated transform and state changes
//               (e.g. as extracted from a node) onto the current
//               data.  This also evaluates billboards, etc.
//////////////////////////////////////////////////////////////////// 6 4 this 3 4093  4 trav 1 3912  14 node_transform 1 3864  10 node_state 1 3910  12 node_effects 1 3922  15 off_clip_planes 1 3901  
1450 14 Dtool_nJyotLsg 7 1053 4096 0 14 Dtool_nJyotLsg 440 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::make_next
//       Access: Published
//  Description: Returns a newly-allocated CullResult object that
//               contains a copy of just the subset of the data from
//               this CullResult object that is worth keeping around
//               for next frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4094  
1451 14 Dtool_nJyoQRgp 7 1054 4098 0 14 Dtool_nJyoQRgp 505 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::get_bin
//       Access: Public
//  Description: Returns the CullBin associated with the indicated
//               bin_index, or NULL if the bin_index is invalid.  If
//               there is the first time this bin_index has been
//               requested for this CullResult, creates a new CullBin
//               object on the fly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4096  9 bin_index 1 3889  
1452 14 Dtool_nJyo5gZc 4 1055 3890 0 14 Dtool_nJyo5gZc 394 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::add_object
//       Access: Published
//  Description: Adds the indicated CullableObject to the appropriate
//               bin.  The bin becomes the owner of the object
//               pointer, and will eventually delete it.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4096  6 object 1 4099  9 traverser 1 4083  
1453 14 Dtool_nJyoufru 4 1056 3890 0 14 Dtool_nJyoufru 493 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::finish_cull
//       Access: Published
//  Description: Called after all the geoms have been added, this
//               indicates that the cull process is finished for this
//               frame and gives the bins a chance to do any
//               post-processing (like sorting) before moving on to
//               draw.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4096  11 scene_setup 1 4078  14 current_thread 1 3928  
1454 14 Dtool_nJyo_X4f 4 1057 3890 0 14 Dtool_nJyo_X4f 291 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::draw
//       Access: Published
//  Description: Asks all the bins to draw themselves in the correct
//               order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4096  14 current_thread 1 3928  
1455 14 Dtool_nJyoyJjZ 7 1058 3925 2411 14 Dtool_nJyoyJjZ 865 ////////////////////////////////////////////////////////////////////
//     Function: CullResult::make_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the cull.  This will be a
//               hierarchy of nodes, one node for each bin, each of
//               which will in term be a parent of a number of
//               GeomNodes, representing the geometry drawn in each
//               bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself.  For the low-level cull
//               result, use draw() to efficiently draw the culled
//               scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4096  
1456 14 Dtool_nJyoh4qk 7 1060 3920 0 14 Dtool_nJyoh4qk 261 ////////////////////////////////////////////////////////////////////
//     Function: DecalEffect::make
//       Access: Published, Static
//  Description: Constructs a new DecalEffect object.
//////////////////////////////////////////////////////////////////// 0 
1457 14 Dtool_nJyoH0FU 7 1061 3896 0 14 Dtool_nJyoH0FU 0 0 
1458 14 Dtool_nJyoYYvF 7 1064 3901 0 14 Dtool_nJyoYYvF 403 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthOffsetAttrib object that
//               indicates the relative amount of bias to write to the
//               depth buffer for subsequent geometry.
//////////////////////////////////////////////////////////////////// 1 6 offset 1 3889  
1459 14 Dtool_nJyoTJWU 7 1064 3901 0 14 Dtool_nJyoTJWU 403 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthOffsetAttrib object that
//               indicates the relative amount of bias to write to the
//               depth buffer for subsequent geometry.
//////////////////////////////////////////////////////////////////// 0 
1460 14 Dtool_nJyojyjB 7 1065 3901 0 14 Dtool_nJyojyjB 404 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1461 14 Dtool_nJyoQ48q 6 1066 3889 0 14 Dtool_nJyoQ48q 281 ////////////////////////////////////////////////////////////////////
//     Function: DepthOffsetAttrib::get_offset
//       Access: Published
//  Description: Returns the depth offset represented by this attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4101  
1462 14 Dtool_nJyodAH1 6 1067 3889 0 14 Dtool_nJyodAH1 0 0 
1463 14 Dtool_nJyorc0x 7 1068 3896 0 14 Dtool_nJyorc0x 0 0 
1464 14 Dtool_nJyo4KXK 7 1071 3901 0 14 Dtool_nJyo4KXK 269 ////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthTestAttrib object.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3729  
1465 14 Dtool_nJyonaAF 7 1072 3901 0 14 Dtool_nJyonaAF 402 ////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1466 14 Dtool_nJyokoRd 6 1073 3729 0 14 Dtool_nJyokoRd 254 ////////////////////////////////////////////////////////////////////
//     Function: DepthTestAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4103  
1467 14 Dtool_nJyoGtc8 6 1074 3889 0 14 Dtool_nJyoGtc8 0 0 
1468 14 Dtool_nJyo_bEH 7 1075 3896 0 14 Dtool_nJyo_bEH 0 0 
1469 14 Dtool_nJyoAW_N 7 1079 3901 0 14 Dtool_nJyoAW_N 271 ////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::make
//       Access: Published, Static
//  Description: Constructs a new DepthWriteAttrib object.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3791  
1470 14 Dtool_nJyoyLuc 7 1080 3901 0 14 Dtool_nJyoyLuc 403 ////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1471 14 Dtool_nJyokZFl 6 1081 3791 0 14 Dtool_nJyokZFl 255 ////////////////////////////////////////////////////////////////////
//     Function: DepthWriteAttrib::get_mode
//       Access: Published
//  Description: Returns the depth write mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4105  
1472 14 Dtool_nJyo2oVK 6 1082 3889 0 14 Dtool_nJyo2oVK 0 0 
1473 14 Dtool_nJyoNOPe 7 1083 3896 0 14 Dtool_nJyoNOPe 0 0 
1474 14 Dtool_nJyor4nV 7 1087 4107 0 14 Dtool_nJyor4nV 727 // Filename: eventStorePandaNode.I
// Created by:  drose (13Sep06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: EventStorePandaNode::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 5 value 1 3926  
1475 14 Dtool_nJyoAnPQ 4 1088 3890 0 14 Dtool_nJyoAnPQ 413 ////////////////////////////////////////////////////////////////////
//     Function: EventStorePandaNode::set_value
//       Access: Published
//  Description: Changes the value stored in the parameter.  It is
//               dangerous to do this for a parameter already added to
//               an event, since the parameters may be shared.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4107  5 value 1 3926  
1476 14 Dtool_nJyojG_f 7 1089 3925 2411 14 Dtool_nJyojG_f 274 ////////////////////////////////////////////////////////////////////
//     Function: EventStorePandaNode::get_value
//       Access: Published
//  Description: Retrieves the value stored in the parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4108  
1477 14 Dtool_nJyoMfYM 7 1090 3896 0 14 Dtool_nJyoMfYM 0 0 
1478 14 Dtool_nJyoWpyF 7 1092 4005 2411 14 Dtool_nJyoWpyF 215 ////////////////////////////////////////////////////////////////////
//     Function: Fog::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
1479 14 Dtool_nJyoNq_P 6 1094 3795 0 14 Dtool_nJyoNq_P 691 // Filename: fog.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Fog::get_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 4110  
1480 14 Dtool_nJyoGgPt 4 1095 3890 0 14 Dtool_nJyoGgPt 934 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_mode
//       Access: Published
//  Description: Specifies the computation that is used to determine
//               the fog effect.  If this is M_linear, then the fog
//               will range from linearly from the onset point to the
//               opaque point (or for the distances specified in
//               set_linear_range), and the fog object should be
//               parented into the scene graph, or to the camera.
//
//               If this is anything else, the onset point and opaque
//               point are not used, and the fog effect is based on
//               the value specified to set_exp_density(), and it
//               doesn't matter to which node the fog object is
//               parented, or if it is parented anywhere at all.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4005  4 mode 1 3795  
1481 14 Dtool_nJyoRSgO 6 1096 3961 0 14 Dtool_nJyoRSgO 243 ////////////////////////////////////////////////////////////////////
//     Function: Fog::get_color
//       Access: Published
//  Description: Returns the color of the fog.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4110  
1482 14 Dtool_nJyoJg2n 4 1097 3890 0 14 Dtool_nJyoJg2n 291 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.  The alpha component is
//               not used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4005  5 color 1 3961  
1483 14 Dtool_nJyo_xx3 4 1097 3890 0 14 Dtool_nJyo_xx3 240 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_color
//       Access: Published
//  Description: Sets the color of the fog.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4005  1 r 1 3874  1 g 1 3874  1 b 1 3874  
1484 14 Dtool_nJyo3of3 4 1098 3890 0 14 Dtool_nJyo3of3 711 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_range
//       Access: Published
//  Description: Specifies the effects of the fog in linear distance
//               units.  This is only used if the mode is M_linear.
//
//               This specifies a fog that begins at distance onset
//               units from the origin, and becomes totally opaque at
//               distance opaque units from the origin, along the
//               forward axis (usually Y).
//
//               This function also implicitly sets the mode the
//               M_linear, if it is not already set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4005  5 onset 1 3874  6 opaque 1 3874  
1485 14 Dtool_nJyo9LTt 6 1099 3884 0 14 Dtool_nJyo9LTt 338 ////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_onset_point
//       Access: Published
//  Description: Returns the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4110  
1486 14 Dtool_nJyo6RcW 4 1100 3890 0 14 Dtool_nJyo6RcW 340 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4005  18 linear_onset_point 1 3884  
1487 14 Dtool_nJyo36iG 4 1100 3890 0 14 Dtool_nJyo36iG 340 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_onset_point
//       Access: Published
//  Description: Specifies the point in space at which the fog begins.
//               This is only used if the mode is M_linear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4005  1 x 1 3874  1 y 1 3874  1 z 1 3874  
1488 14 Dtool_nJyojQae 6 1101 3884 0 14 Dtool_nJyojQae 379 ////////////////////////////////////////////////////////////////////
//     Function: Fog::get_linear_opaque_point
//       Access: Published
//  Description: Returns the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4110  
1489 14 Dtool_nJyoHhA1 4 1102 3890 0 14 Dtool_nJyoHhA1 381 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4005  19 linear_opaque_point 1 3884  
1490 14 Dtool_nJyoEcC5 4 1102 3890 0 14 Dtool_nJyoEcC5 381 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_opaque_point
//       Access: Published
//  Description: Specifies the point in space at which the fog
//               completely obscures geometry.  This is only used if
//               the mode is M_linear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4005  1 x 1 3874  1 y 1 3874  1 z 1 3874  
1491 14 Dtool_nJyody8d 4 1103 3890 0 14 Dtool_nJyody8d 2210 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_linear_fallback
//       Access: Published
//  Description: Fog effects are traditionally defined in
//               camera-relative space, but the Panda Fog node has a
//               special mode in which it can define a linear fog
//               effect in an arbitrary coordinate space.
//
//               This is done by specifying 3-d onset and opaque
//               points, and parenting the Fog object somewhere within
//               the scene graph.  In this mode, the fog will be
//               rendered as if it extended along the vector from the
//               onset point to the opaque point, in 3-d space.
//
//               However, the underlying fog effect supported by
//               hardware is generally only one-dimensional, and must
//               be rendered based on linear distance from the camera
//               plane.  Thus, this in-the-world effect is most
//               effective when the fog vector from onset point to
//               opaque point is most nearly parallel to the camera's
//               eye vector.
//
//               As the angle between the fog vector and the eye
//               vector increases, the accuracy of the effect
//               diminishes, up to a complete breakdown of the effect
//               at a 90 degree angle.
//
//               This function exists to define the workaround to this
//               problem.  The linear fallback parameters given here
//               specify how the fog should be rendered when the
//               parameters are exceeded in this way.
//
//               The angle parameter is the minimum angle, in degrees,
//               of the fog vector to the eye vector, at which the
//               fallback effect should be employed.  The onset and
//               opaque parameters specify the camera-relative onset
//               and opaque distances to pass to the rendering
//               hardware when employing the fallback effect.  This
//               supercedes the 3-d onset point and opaque points.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4005  5 angle 1 3874  5 onset 1 3874  6 opaque 1 3874  
1492 14 Dtool_nJyoE35n 6 1104 3874 0 14 Dtool_nJyoE35n 362 ////////////////////////////////////////////////////////////////////
//     Function: Fog::get_exp_density
//       Access: Published
//  Description: Returns the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4110  
1493 14 Dtool_nJyoGCDe 4 1105 3890 0 14 Dtool_nJyoGCDe 489 ////////////////////////////////////////////////////////////////////
//     Function: Fog::set_exp_density
//       Access: Published
//  Description: Sets the density of the fog for exponential
//               calculations.  This is only used if the mode is not
//               M_linear.
//
//               If the mode is currently set to M_linear, this
//               function implicitly sets it to M_exponential.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4005  11 exp_density 1 3874  
1494 14 Dtool_nJyofLii 7 1106 3896 0 14 Dtool_nJyofLii 0 0 
1495 14 Dtool_nJyoen99 7 1108 3901 0 14 Dtool_nJyoen99 329 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering the indicated fog onto geometry.
//////////////////////////////////////////////////////////////////// 1 3 fog 1 4005  
1496 14 Dtool_nJyoDJ_4 7 1109 3901 0 14 Dtool_nJyoDJ_4 317 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new FogAttrib object suitable for
//               rendering unfogd geometry.
//////////////////////////////////////////////////////////////////// 0 
1497 14 Dtool_nJyo4z1A 7 1110 3901 0 14 Dtool_nJyo4z1A 396 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1498 14 Dtool_nJyoCvlR 6 1111 3866 0 14 Dtool_nJyoCvlR 325 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::is_off
//       Access: Published
//  Description: Returns true if the FogAttrib is an 'off' FogAttrib,
//               indicating that it should disable fog.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4112  
1499 14 Dtool_nJyoZ5_2 7 1112 4005 2411 14 Dtool_nJyoZ5_2 356 ////////////////////////////////////////////////////////////////////
//     Function: FogAttrib::get_fog
//       Access: Published
//  Description: If the FogAttrib is not an 'off' FogAttrib,
//               returns the fog that is associated.  Otherwise,
//               return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4112  
1500 14 Dtool_nJyo__rS 6 1113 3889 0 14 Dtool_nJyo__rS 0 0 
1501 14 Dtool_nJyosG1H 7 1114 3896 0 14 Dtool_nJyosG1H 0 0 
1502 14 Dtool_nJyoQ38B 6 1118 4099 0 14 Dtool_nJyoQ38B 312 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_object
//       Access: Published
//  Description: Returns a pointer to the particular object that is
//               being drawn.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4114  
1503 14 Dtool_nJyo1Dme 7 1119 3932 0 14 Dtool_nJyo1Dme 266 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_gsg
//       Access: Published
//  Description: Returns a pointer to the current GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4114  
1504 14 Dtool_nJyoGjpF 6 1120 3866 0 14 Dtool_nJyoGjpF 525 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_force
//       Access: Published
//  Description: Returns true if any required data should be forced
//               into memory if necessary to render the object, or
//               false if the object should be omitted if some of the
//               data is not available (at least until the data
//               becomes available later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4114  
1505 14 Dtool_nJyoxruI 4 1121 3890 0 14 Dtool_nJyoxruI 807 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::set_lost_state
//       Access: Published
//  Description: Sets the lost_state flag.  If this is true, the
//               callback does not have to be quite so careful to
//               clean up after itself; Panda will assume that the
//               graphics state is in an unknown state after the
//               callback has finished, and will issue all the
//               necessary calls to restore it.  If this is false,
//               Panda will assume the callback will leave the
//               graphics state exactly as it came in, and won't
//               bother to try to restore it.  The default is true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4116  10 lost_state 1 3866  
1506 14 Dtool_nJyojTpZ 6 1122 3866 0 14 Dtool_nJyojTpZ 287 ////////////////////////////////////////////////////////////////////
//     Function: GeomDrawCallbackData::get_lost_state
//       Access: Published
//  Description: Returns the lost_state flag.  See set_lost_state().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4114  
1507 14 Dtool_nJyozT92 7 1123 3896 0 14 Dtool_nJyozT92 0 0 
1508 14 Dtool_nJyovkRm 7 1126 3998 3229 14 Dtool_nJyovkRm 234 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1509 14 Dtool_nJyoXDAx 7 1126 3998 3229 14 Dtool_nJyoXDAx 239 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4117  
1510 14 Dtool_nJyojE06 6 1127 3998 0 14 Dtool_nJyojE06 247 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  4 copy 1 4117  
1511 14 Dtool_nJyoBhP7 4 1129 3890 0 14 Dtool_nJyoBhP7 274 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_name
//       Access: Published
//  Description: Adds a new InternalName to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  4 name 1 3970  
1512 14 Dtool_nJyoXg1Z 6 1130 3866 0 14 Dtool_nJyoXg1Z 410 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_name
//       Access: Published
//  Description: Removes the indicated InternalName from the collection.
//               Returns true if the name was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  4 name 1 3970  
1513 14 Dtool_nJyohz4C 4 1131 3890 0 14 Dtool_nJyohz4C 480 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::add_names_from
//       Access: Published
//  Description: Adds all the InternalNames indicated in the other
//               collection to this name.  The other names are simply
//               appended to the end of the names in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 other 1 4117  
1514 14 Dtool_nJyoFH6l 4 1132 3890 0 14 Dtool_nJyoFH6l 343 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_names_from
//       Access: Published
//  Description: Removes from this collection all of the InternalNames
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 other 1 4117  
1515 14 Dtool_nJyosQx_ 4 1133 3890 0 14 Dtool_nJyosQx_ 485 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::remove_duplicate_names
//       Access: Published
//  Description: Removes any duplicate entries of the same InternalNames
//               on this collection.  If a InternalName appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3998  
1516 14 Dtool_nJyo6G0r 6 1134 3866 0 14 Dtool_nJyo6G0r 336 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::has_name
//       Access: Published
//  Description: Returns true if the indicated InternalName appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4117  4 name 1 3970  
1517 14 Dtool_nJyoYUtu 4 1135 3890 0 14 Dtool_nJyoYUtu 275 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::clear
//       Access: Published
//  Description: Removes all InternalNames from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3998  
1518 14 Dtool_nJyoTOFH 6 1136 3889 0 14 Dtool_nJyoTOFH 291 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_num_names
//       Access: Published
//  Description: Returns the number of InternalNames in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4117  
1519 14 Dtool_nJyo6eLj 7 1137 3970 0 14 Dtool_nJyo6eLj 279 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::get_name
//       Access: Published
//  Description: Returns the nth InternalName in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4117  5 index 1 3889  
1520 14 Dtool_nJyoBMpK 7 1138 3970 0 14 Dtool_nJyoBMpK 399 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::operator []
//       Access: Published
//  Description: Returns the nth InternalName in the collection.  This is
//               the same as get_name(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4117  5 index 1 3889  
1521 14 Dtool_nJyobSiY 6 1139 3889 0 14 Dtool_nJyobSiY 335 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::size
//       Access: Published
//  Description: Returns the number of names in the collection.  This
//               is the same thing as get_num_names().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4117  
1522 14 Dtool_nJyoXlrz 6 1140 3998 0 14 Dtool_nJyoXlrz 283 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3998  5 other 1 4117  
1523 14 Dtool_nJyo6xPA 7 1141 3998 3229 14 Dtool_nJyo6xPA 332 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::operator +
//       Access: Published
//  Description: Returns a InternalNameCollection representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4117  5 other 1 4117  
1524 14 Dtool_nJyofSXc 4 1142 3890 0 14 Dtool_nJyofSXc 344 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               InternalNameCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4117  3 out 1 3893  
1525 14 Dtool_nJyou3zc 4 1143 3890 0 14 Dtool_nJyou3zc 348 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               InternalNameCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4117  3 out 1 3893  12 indent_level 1 3889  
1526 14 Dtool_nJyo_B49 4 1143 3890 0 14 Dtool_nJyo_B49 348 ////////////////////////////////////////////////////////////////////
//     Function: InternalNameCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               InternalNameCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4117  3 out 1 3893  
1527 14 Dtool_nJyoOU8w 7 1147 3925 2411 14 Dtool_nJyoOU8w 0 1 4 this 3 3940  
1528 14 Dtool_nJyoEeha 6 1148 3866 0 14 Dtool_nJyoEeha 330 ////////////////////////////////////////////////////////////////////
//     Function: Light::is_ambient_light
//       Access: Published, Virtual
//  Description: Returns true if this is an AmbientLight, false if it
//               is some other kind of light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4119  
1529 14 Dtool_nJyolF_a 6 1149 3961 0 14 Dtool_nJyolF_a 253 ////////////////////////////////////////////////////////////////////
//     Function: Light::get_color
//       Access: Published
//  Description: Returns the basic color of the light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4119  
1530 14 Dtool_nJyo7_hL 4 1150 3890 0 14 Dtool_nJyo7_hL 250 ////////////////////////////////////////////////////////////////////
//     Function: Light::set_color
//       Access: Published
//  Description: Sets the basic color of the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3940  5 color 1 3961  
1531 14 Dtool_nJyotH9b 4 1151 3890 0 14 Dtool_nJyotH9b 740 ////////////////////////////////////////////////////////////////////
//     Function: Light::set_priority
//       Access: Published
//  Description: Changes the relative importance of this light
//               relative to the other lights that are applied
//               simultaneously.
//
//               The priority number is used to decide which of the
//               requested lights are to be selected for rendering
//               when more lights are requested than the hardware will
//               support.  The highest-priority n lights are selected
//               for rendering.
//
//               This is similar to TextureStage::set_priority().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3940  8 priority 1 3889  
1532 14 Dtool_nJyo07Qw 6 1152 3889 0 14 Dtool_nJyo07Qw 305 ////////////////////////////////////////////////////////////////////
//     Function: Light::get_priority
//       Access: Published
//  Description: Returns the priority associated with this light.  See
//               set_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4119  
1533 14 Dtool_nJyoaBVn 6 1153 3889 0 14 Dtool_nJyoaBVn 0 1 4 this 3 4119  
1534 14 Dtool_nJyopidT 7 1154 3896 0 14 Dtool_nJyopidT 0 0 
1535 14 Dtool_nJyoqIAk 7 1145 3946 0 14 Dtool_nJyoqIAk 0 1 4 this 3 3940  
1536 14 Dtool_nJyoZznk 7 1157 3901 0 14 Dtool_nJyoZznk 296 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that does
//               nothing.
//////////////////////////////////////////////////////////////////// 0 
1537 14 Dtool_nJyoasHl 7 1157 3901 0 14 Dtool_nJyoasHl 457 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicated light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 2 2 op 1 3802  5 light 1 3940  
1538 14 Dtool_nJyoVa32 7 1157 3901 0 14 Dtool_nJyoVa32 456 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 3 2 op 1 3802  6 light1 1 3940  6 light2 1 3940  
1539 14 Dtool_nJyoLIAJ 7 1157 3901 0 14 Dtool_nJyoLIAJ 456 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 4 2 op 1 3802  6 light1 1 3940  6 light2 1 3940  6 light3 1 3940  
1540 14 Dtool_nJyo6FSb 7 1157 3901 0 14 Dtool_nJyo6FSb 456 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns on (or
//               off, according to op) the indicate light(s).
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 5 2 op 1 3802  6 light1 1 3940  6 light2 1 3940  6 light3 1 3940  6 light4 1 3940  
1541 14 Dtool_nJyopDSz 7 1158 3901 0 14 Dtool_nJyopDSz 398 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1542 14 Dtool_nJyoI94C 6 1159 3802 0 14 Dtool_nJyoI94C 888 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_operation
//       Access: Published
//  Description: Returns the basic operation type of the LightAttrib.
//               If this is O_set, the lights listed here completely
//               replace any lights that were already on.  If this is
//               O_add, the lights here are added to the set of of
//               lights that were already on, and if O_remove, the
//               lights here are removed from the set of lights that
//               were on.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4121  
1543 14 Dtool_nJyoSNtr 6 1160 3889 0 14 Dtool_nJyoSNtr 522 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_lights
//       Access: Published
//  Description: Returns the number of lights listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4121  
1544 14 Dtool_nJyowj1p 7 1161 3940 3246 14 Dtool_nJyowj1p 510 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_light
//       Access: Published
//  Description: Returns the nth light listed in the attribute.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  1 n 1 3889  
1545 14 Dtool_nJyoTmqi 6 1162 3866 0 14 Dtool_nJyoTmqi 558 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               attrib, false otherwise.
//
//               This method is now deprecated.  LightAttribs nowadays
//               have a separate list of on_lights and off_lights, so
//               this method doesn't make sense.  Query the lists
//               independently.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  5 light 1 3940  
1546 14 Dtool_nJyo4p4X 7 1163 3901 0 14 Dtool_nJyo4p4X 459 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights.
//
//               This method is now deprecated.  Use add_on_light() or
//               add_off_light() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  5 light 1 3940  
1547 14 Dtool_nJyo_Dht 7 1164 3901 0 14 Dtool_nJyo_Dht 489 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights.
//
//               This method is now deprecated.  Use remove_on_light()
//               or remove_off_light() instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  5 light 1 3940  
1548 14 Dtool_nJyo3HyF 7 1165 3901 0 14 Dtool_nJyo3HyF 342 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new LightAttrib object that turns off
//               all lights (and hence disables lighting).
//////////////////////////////////////////////////////////////////// 0 
1549 14 Dtool_nJyo0Byr 6 1166 3889 0 14 Dtool_nJyo0Byr 312 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_on_lights
//       Access: Published
//  Description: Returns the number of lights that are turned on by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4121  
1550 14 Dtool_nJyoGoP5 7 1167 3949 2863 14 Dtool_nJyoGoP5 315 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_on_light
//       Access: Published
//  Description: Returns the nth light turned on by the attribute,
//               sorted in render order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  1 n 1 3889  
1551 14 Dtool_nJyoCXs0 6 1168 3866 0 14 Dtool_nJyoCXs0 322 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_on_light
//       Access: Published
//  Description: Returns true if the indicated light is turned on by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  5 light 1 3950  
1552 14 Dtool_nJyomfMm 6 1169 3889 0 14 Dtool_nJyomfMm 314 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_num_off_lights
//       Access: Published
//  Description: Returns the number of lights that are turned off by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4121  
1553 14 Dtool_nJyo7rCU 7 1170 3949 2863 14 Dtool_nJyo7rCU 330 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_off_light
//       Access: Published
//  Description: Returns the nth light turned off by the attribute,
//               sorted in arbitrary (pointer) order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  1 n 1 3889  
1554 14 Dtool_nJyo4Fzb 6 1171 3866 0 14 Dtool_nJyo4Fzb 324 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_off_light
//       Access: Published
//  Description: Returns true if the indicated light is turned off by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  5 light 1 3950  
1555 14 Dtool_nJyoqnRX 6 1172 3866 0 14 Dtool_nJyoqnRX 326 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all lights
//               (although it may also turn some on).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4121  
1556 14 Dtool_nJyo5lP4 6 1173 3866 0 14 Dtool_nJyo5lP4 329 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of lights in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4121  
1557 14 Dtool_nJyo3_7p 7 1174 3901 0 14 Dtool_nJyo3_7p 388 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned on by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  5 light 1 3950  
1558 14 Dtool_nJyoQ7jl 7 1175 3901 0 14 Dtool_nJyoQ7jl 395 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_on_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned on by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  5 light 1 3950  
1559 14 Dtool_nJyo6_CR 7 1176 3901 0 14 Dtool_nJyo6_CR 390 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::add_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light added to the list of lights
//               turned off by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  5 light 1 3950  
1560 14 Dtool_nJyoIQ_X 7 1177 3901 0 14 Dtool_nJyoIQ_X 397 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::remove_off_light
//       Access: Published
//  Description: Returns a new LightAttrib, just like this one, but
//               with the indicated light removed from the list of
//               lights turned off by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  5 light 1 3950  
1561 14 Dtool_nJyo0aOV 7 1178 4121 0 14 Dtool_nJyo0aOV 705 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::filter_to_max
//       Access: Public
//  Description: Returns a new LightAttrib, very much like this one,
//               but with the number of on_lights reduced to be no
//               more than max_lights.  The number of off_lights in
//               the new LightAttrib is undefined.
//
//               The number of AmbientLights is not included in the
//               count.  All AmbientLights in the original attrib are
//               always included in the result, regardless of the
//               value of max_lights.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4121  10 max_lights 1 3889  
1562 14 Dtool_nJyo1YNJ 7 1179 3949 2863 14 Dtool_nJyo1YNJ 477 ////////////////////////////////////////////////////////////////////
//     Function: LightAttrib::get_most_important_light
//       Access: Public
//  Description: Returns the most important light (that is, the light
//               with the highest priority) in the LightAttrib,
//               excluding any ambient lights.  Returns an empty
//               NodePath if no non-ambient lights are found.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4121  
1563 14 Dtool_nJyoGhFq 6 1180 3889 0 14 Dtool_nJyoGhFq 0 0 
1564 14 Dtool_nJyojHBU 7 1181 3896 0 14 Dtool_nJyojHBU 0 0 
1565 14 Dtool_nJyooIGn 7 1185 3901 0 14 Dtool_nJyooIGn 408 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_default
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This
//               is the standard OpenGL lighting ramp, which clamps
//               the final light total to the 0-1 range.
//////////////////////////////////////////////////////////////////// 0 
1566 14 Dtool_nJyoJ3JY 7 1186 3901 0 14 Dtool_nJyoJ3JY 424 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_identity
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This
//               differs from the usual OpenGL lighting model in that
//               it does not clamp the final lighting total to (0,1).
//////////////////////////////////////////////////////////////////// 0 
1567 14 Dtool_nJyo9mlN 7 1187 3901 0 14 Dtool_nJyo9mlN 624 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_single_threshold
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This 
//               causes the luminance of the diffuse lighting
//               contribution to be quantized using a single threshold:
//
//               if (original_luminance > threshold0) {
//                 luminance = level0;
//               } else {
//                 luminance = 0.0;
//               }
//               
//////////////////////////////////////////////////////////////////// 2 7 thresh0 1 3874  4 lev0 1 3874  
1568 14 Dtool_nJyolowI 7 1188 3901 0 14 Dtool_nJyolowI 707 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_double_threshold
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This 
//               causes the luminance of the diffuse lighting
//               contribution to be quantized using two thresholds:
//
//               if (original_luminance > threshold1) {
//                 luminance = level1;
//               } else if (original_luminance > threshold0) {
//                 luminance = level0;
//               } else {
//                 luminance = 0.0;
//               }
//
//////////////////////////////////////////////////////////////////// 4 7 thresh0 1 3874  4 lev0 1 3874  7 thresh1 1 3874  4 lev1 1 3874  
1569 14 Dtool_nJyoHSPP 7 1189 3901 0 14 Dtool_nJyoHSPP 1206 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr0
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR0 tone mapping operator 'steals'
//               one quarter of that contrast to represent brightnesses in
//               the range 1-infinity.
//
//               FINAL_RGB = (RGB^3 + RGB^2 + RGB) / (RGB^3 + RGB^2 + RGB + 1)
//
//////////////////////////////////////////////////////////////////// 0 
1570 14 Dtool_nJyonW2P 7 1190 3901 0 14 Dtool_nJyonW2P 1188 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr1
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR1 tone mapping operator 'steals'
//               one third of that contrast to represent brightnesses in
//               the range 1-infinity.
//
//               FINAL_RGB = (RGB^2 + RGB) / (RGB^2 + RGB + 1)
//
//////////////////////////////////////////////////////////////////// 0 
1571 14 Dtool_nJyoHLdQ 7 1191 3901 0 14 Dtool_nJyoHLdQ 1171 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::make_hdr2
//       Access: Published, Static
//  Description: Constructs a new LightRampAttrib object.  This causes
//               an HDR tone mapping operation to be applied.
//
//               Normally, brightness values greater than 1 cannot be
//               distinguished from each other, causing very brightly lit
//               objects to wash out white and all detail to be erased.
//               HDR tone mapping remaps brightness values in the range
//               0-infinity into the range (0,1), making it possible to
//               distinguish detail in scenes whose brightness exceeds 1.
//
//               However, the monitor has finite contrast.  Normally, all
//               of that contrast is used to represent brightnesses in
//               the range 0-1.  The HDR2 tone mapping operator 'steals'
//               one half of that contrast to represent brightnesses in
//               the range 1-infinity.
//
//               FINAL_RGB = (RGB) / (RGB + 1)
//
//////////////////////////////////////////////////////////////////// 0 
1572 14 Dtool_nJyoUOW_ 6 1192 3804 0 14 Dtool_nJyoUOW_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_mode
//       Access: Published
//  Description: Returns the LightRampAttrib mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4123  
1573 14 Dtool_nJyoAZyJ 6 1193 3874 0 14 Dtool_nJyoAZyJ 257 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_level
//       Access: Published
//  Description: Returns the nth lighting level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4123  1 n 1 3889  
1574 14 Dtool_nJyow5D2 6 1194 3874 0 14 Dtool_nJyow5D2 262 ////////////////////////////////////////////////////////////////////
//     Function: LightRampAttrib::get_threshold
//       Access: Published
//  Description: Returns the nth threshold level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4123  1 n 1 3889  
1575 14 Dtool_nJyo4che 6 1195 3889 0 14 Dtool_nJyo4che 0 0 
1576 14 Dtool_nJyoFEJp 7 1196 3896 0 14 Dtool_nJyoFEJp 0 0 
1577 14 Dtool_nJyoTg0U 7 1211 4125 3319 14 Dtool_nJyoTg0U 218 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
1578 14 Dtool_nJyoq8fi 7 1211 4125 3319 14 Dtool_nJyoq8fi 218 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1579 14 Dtool_nJyomL1N 4 1212 3890 0 14 Dtool_nJyomL1N 362 ////////////////////////////////////////////////////////////////////
//     Function: Loader::set_task_manager
//       Access: Published
//  Description: Specifies the task manager that is used for
//               asynchronous loads.  The default is the global task
//               manager.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4125  12 task_manager 1 4126  
1580 14 Dtool_nJyof__I 7 1213 4126 0 14 Dtool_nJyof__I 302 ////////////////////////////////////////////////////////////////////
//     Function: Loader::get_task_manager
//       Access: Published
//  Description: Returns the task manager that is used for
//               asynchronous loads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4128  
1581 14 Dtool_nJyosoSx 4 1214 3890 0 14 Dtool_nJyosoSx 372 ////////////////////////////////////////////////////////////////////
//     Function: Loader::set_task_chain
//       Access: Published
//  Description: Specifies the task chain that is used for
//               asynchronous loads.  The default is the initial name
//               of the Loader object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4125  10 task_chain 1 3924  
1582 14 Dtool_nJyoHjyK 6 1215 3924 0 14 Dtool_nJyoHjyK 298 ////////////////////////////////////////////////////////////////////
//     Function: Loader::get_task_chain
//       Access: Published
//  Description: Returns the task chain that is used for
//               asynchronous loads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4128  
1583 14 Dtool_nJyobFzS 4 1216 3890 0 14 Dtool_nJyobFzS 265 ////////////////////////////////////////////////////////////////////
//     Function: Loader::stop_threads
//       Access: Published
//  Description: Stop any threads used for asynchronous loads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4125  
1584 14 Dtool_nJyoehh9 6 1217 3866 0 14 Dtool_nJyoehh9 321 ////////////////////////////////////////////////////////////////////
//     Function: Loader::remove
//       Access: Published
//  Description: Removes a pending asynchronous load request.  Returns
//               true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4125  4 task 1 4130  
1585 14 Dtool_nJyoPkHz 7 1218 3925 2411 14 Dtool_nJyoPkHz 455 ////////////////////////////////////////////////////////////////////
//     Function: Loader::load_sync
//       Access: Published
//  Description: Loads the file immediately, waiting for it to
//               complete.
//
//               If search is true, the file is searched for along the
//               model path; otherwise, only the exact filename is
//               loaded.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4128  8 filename 1 4022  7 options 1 4131  
1586 14 Dtool_nJyoz7yV 7 1218 3925 2411 14 Dtool_nJyoz7yV 455 ////////////////////////////////////////////////////////////////////
//     Function: Loader::load_sync
//       Access: Published
//  Description: Loads the file immediately, waiting for it to
//               complete.
//
//               If search is true, the file is searched for along the
//               model path; otherwise, only the exact filename is
//               loaded.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4128  8 filename 1 4022  
1587 14 Dtool_nJyorRYJ 7 1219 4130 0 14 Dtool_nJyorRYJ 346 ////////////////////////////////////////////////////////////////////
//     Function: Loader::make_async_request
//       Access: Published
//  Description: Returns a new AsyncTask object suitable for adding to
//               load_async() to start an asynchronous model load.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4125  8 filename 1 4022  7 options 1 4131  
1588 14 Dtool_nJyoCUjc 7 1219 4130 0 14 Dtool_nJyoCUjc 346 ////////////////////////////////////////////////////////////////////
//     Function: Loader::make_async_request
//       Access: Published
//  Description: Returns a new AsyncTask object suitable for adding to
//               load_async() to start an asynchronous model load.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4125  8 filename 1 4022  
1589 14 Dtool_nJyoiGlw 4 1220 3890 0 14 Dtool_nJyoiGlw 915 ////////////////////////////////////////////////////////////////////
//     Function: Loader::load_async
//       Access: Published
//  Description: Begins an asynchronous load request.  To use this
//               call, first create a new ModelLoadRequest object with
//               the filename you wish to load, and then add that
//               object to the Loader with load_async.  This function
//               will return immediately, and the model will be loaded
//               in the background.
//
//               To determine when the model has completely loaded,
//               you may poll request->is_ready() from time to time,
//               or set the done_event on the request object and
//               listen for that event.  When the model is ready, you
//               may retrieve it via request->get_model().
//////////////////////////////////////////////////////////////////// 2 4 this 3 4125  7 request 1 4130  
1590 14 Dtool_nJyoBiYS 7 1221 3925 2411 14 Dtool_nJyoBiYS 335 ////////////////////////////////////////////////////////////////////
//     Function: Loader::load_bam_stream
//       Access: Published
//  Description: Attempts to read a bam file from the indicated stream
//               and return the scene graph defined there.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4125  2 in 1 4025  
1591 14 Dtool_nJyoHXQw 4 1222 3890 0 14 Dtool_nJyoHXQw 223 ////////////////////////////////////////////////////////////////////
//     Function: Loader::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4128  3 out 1 3893  
1592 14 Dtool_nJyo4Ib_ 7 1223 4125 3319 14 Dtool_nJyo4Ib_ 344 ////////////////////////////////////////////////////////////////////
//     Function: Loader::get_global_ptr
//       Access: Published
//  Description: Returns a pointer to the global Loader.  This is the
//               Loader that most code should use for loading models.
//////////////////////////////////////////////////////////////////// 0 
1593 14 Dtool_nJyo9reE 7 1224 3896 0 14 Dtool_nJyo9reE 0 0 
1594 14 Dtool_nJyoFJ3o 7 1199 4134 0 14 Dtool_nJyoFJ3o 0 1 4 this 3 4125  
1595 14 Dtool_nJyo5b0G 7 1200 4125 3319 14 Dtool_nJyo5b0G 0 1 4 this 3 4134  
1596 14 Dtool_nJyoEQJP 6 1201 3944 0 14 Dtool_nJyoEQJP 0 1 4 this 3 4125  
1597 14 Dtool_nJyo2lYW 7 1202 4125 3319 14 Dtool_nJyo2lYW 0 1 4 this 3 3944  
1598 14 Dtool_nJyoohem 7 1204 4135 3300 14 Dtool_nJyoohem 708 // Filename: loader.I
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1599 14 Dtool_nJyoRMrN 7 1204 4135 3300 14 Dtool_nJyoRMrN 232 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4136  
1600 14 Dtool_nJyopwhN 6 1205 4135 0 14 Dtool_nJyopwhN 240 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4135  4 copy 1 4136  
1601 14 Dtool_nJyozgfE 4 1207 3890 0 14 Dtool_nJyozgfE 258 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::clear
//       Access: Published
//  Description: Removes all the files from the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4135  
1602 14 Dtool_nJyolk1z 6 1208 3889 0 14 Dtool_nJyolk1z 277 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_num_files
//       Access: Published
//  Description: Returns the number of files on the result list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4136  
1603 14 Dtool_nJyo5XxT 6 1209 4022 0 14 Dtool_nJyo5XxT 265 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file
//       Access: Published
//  Description: Returns the nth file on the result list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4136  1 n 1 3889  
1604 14 Dtool_nJyozNYp 6 1210 4138 0 14 Dtool_nJyozNYp 304 ////////////////////////////////////////////////////////////////////
//     Function: Loader::Results::get_file_type
//       Access: Published
//  Description: Returns the file type of the nth file on the result
//               list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4136  1 n 1 3889  
1605 14 Dtool_nJyoQW1H 6 1228 3924 0 14 Dtool_nJyoQW1H 0 1 4 this 3 4139  
1606 14 Dtool_nJyoaK7M 6 1229 3924 0 14 Dtool_nJyoaK7M 0 1 4 this 3 4139  
1607 14 Dtool_nJyoq3ZJ 6 1230 3924 0 14 Dtool_nJyoq3ZJ 416 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_additional_extensions
//       Access: Published, Virtual
//  Description: Returns a space-separated list of extension, in
//               addition to the one returned by get_extension(), that
//               are recognized by this loader.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4139  
1608 14 Dtool_nJyoyEHo 6 1231 3866 0 14 Dtool_nJyoyEHo 389 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::supports_compressed
//       Access: Published, Virtual
//  Description: Returns true if this file type can transparently load
//               compressed files (with a .pz extension), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4139  
1609 14 Dtool_nJyo6DqR 6 1232 3866 0 14 Dtool_nJyo6DqR 402 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_allow_disk_cache
//       Access: Published, Virtual
//  Description: Returns true if the loader flags allow retrieving the
//               model from the on-disk bam cache (if it is enabled),
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4139  7 options 1 4131  
1610 14 Dtool_nJyoXbBh 6 1233 3866 0 14 Dtool_nJyoXbBh 381 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileType::get_allow_ram_cache
//       Access: Published
//  Description: Returns true if the loader flags allow retrieving the
//               model from the in-memory ModelPool cache, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4139  7 options 1 4131  
1611 14 Dtool_nJyoxWmb 7 1234 3896 0 14 Dtool_nJyoxWmb 0 0 
1612 14 Dtool_nJyo90Sf 6 1237 3889 0 14 Dtool_nJyo90Sf 282 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4141  
1613 14 Dtool_nJyookMd 6 1238 4138 0 14 Dtool_nJyookMd 264 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4141  1 n 1 3889  
1614 14 Dtool_nJyoEeKb 6 1239 4138 0 14 Dtool_nJyoEeKb 430 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Determines the type of the file based on the indicated
//               extension (without a leading dot).  Returns NULL if
//               the extension matches no known file types.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4143  9 extension 1 3924  
1615 14 Dtool_nJyoz1Pq 4 1240 3890 0 14 Dtool_nJyoz1Pq 329 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported file types to the
//               indicated output stream, one per line.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4141  3 out 1 3893  12 indent_level 1 3889  
1616 14 Dtool_nJyoBxUL 4 1240 3890 0 14 Dtool_nJyoBxUL 329 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported file types to the
//               indicated output stream, one per line.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4141  3 out 1 3893  
1617 14 Dtool_nJyoTXOP 6 1241 4143 0 14 Dtool_nJyoTXOP 325 ////////////////////////////////////////////////////////////////////
//     Function: LoaderFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global LoaderFileTypeRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
1618 14 Dtool_nJyo8GwD 7 1243 3901 0 14 Dtool_nJyo8GwD 344 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering the indicated material onto geometry.
//////////////////////////////////////////////////////////////////// 1 8 material 1 4003  
1619 14 Dtool_nJyoGV47 7 1244 3901 0 14 Dtool_nJyoGV47 332 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new MaterialAttrib object suitable for
//               rendering unmateriald geometry.
//////////////////////////////////////////////////////////////////// 0 
1620 14 Dtool_nJyowLkL 7 1245 3901 0 14 Dtool_nJyowLkL 401 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1621 14 Dtool_nJyoyUFt 6 1246 3866 0 14 Dtool_nJyoyUFt 374 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::is_off
//       Access: Published
//  Description: Returns true if the MaterialAttrib is an 'off'
//               MaterialAttrib, indicating that it should disable
//               the use of materials.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4144  
1622 14 Dtool_nJyoJxv4 7 1247 4003 0 14 Dtool_nJyoJxv4 381 ////////////////////////////////////////////////////////////////////
//     Function: MaterialAttrib::get_material
//       Access: Published
//  Description: If the MaterialAttrib is not an 'off' MaterialAttrib,
//               returns the material that is associated.  Otherwise,
//               return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4144  
1623 14 Dtool_nJyobKSv 6 1248 3889 0 14 Dtool_nJyobKSv 0 0 
1624 14 Dtool_nJyo2NoZ 7 1249 3896 0 14 Dtool_nJyo2NoZ 0 0 
1625 14 Dtool_nJyotZnw 7 1252 4004 3343 14 Dtool_nJyotZnw 230 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1626 14 Dtool_nJyo1XPz 7 1252 4004 3343 14 Dtool_nJyo1XPz 235 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4146  
1627 14 Dtool_nJyoggqO 6 1253 4004 0 14 Dtool_nJyoggqO 243 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4004  4 copy 1 4146  
1628 14 Dtool_nJyodzS8 4 1255 3890 0 14 Dtool_nJyodzS8 270 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_material
//       Access: Published
//  Description: Adds a new Material to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4004  13 node_material 1 4003  
1629 14 Dtool_nJyoLMue 6 1256 3866 0 14 Dtool_nJyoLMue 410 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_material
//       Access: Published
//  Description: Removes the indicated Material from the collection.
//               Returns true if the material was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4004  13 node_material 1 4003  
1630 14 Dtool_nJyoNx0z 4 1257 3890 0 14 Dtool_nJyoNx0z 488 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::add_materials_from
//       Access: Published
//  Description: Adds all the Materials indicated in the other
//               collection to this material.  The other materials are simply
//               appended to the end of the materials in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4004  5 other 1 4146  
1631 14 Dtool_nJyo8Nhd 4 1258 3890 0 14 Dtool_nJyo8Nhd 339 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_materials_from
//       Access: Published
//  Description: Removes from this collection all of the Materials
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4004  5 other 1 4146  
1632 14 Dtool_nJyoxQ1g 4 1259 3890 0 14 Dtool_nJyoxQ1g 477 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::remove_duplicate_materials
//       Access: Published
//  Description: Removes any duplicate entries of the same Materials
//               on this collection.  If a Material appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4004  
1633 14 Dtool_nJyoTQqF 6 1260 3866 0 14 Dtool_nJyoTQqF 332 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::has_material
//       Access: Published
//  Description: Returns true if the indicated Material appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4146  8 material 1 4003  
1634 14 Dtool_nJyo_GvS 4 1261 3890 0 14 Dtool_nJyo_GvS 267 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::clear
//       Access: Published
//  Description: Removes all Materials from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4004  
1635 14 Dtool_nJyoFNZE 7 1262 4003 0 14 Dtool_nJyoFNZE 376 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::find_material
//       Access: Published
//  Description: Returns the material in the collection with the
//               indicated name, if any, or NULL if no material has
//               that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4146  4 name 1 3924  
1636 14 Dtool_nJyoXTd2 6 1263 3889 0 14 Dtool_nJyoXTd2 287 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_num_materials
//       Access: Published
//  Description: Returns the number of Materials in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4146  
1637 14 Dtool_nJyoejD6 7 1264 4003 0 14 Dtool_nJyoejD6 275 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::get_material
//       Access: Published
//  Description: Returns the nth Material in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4146  5 index 1 3889  
1638 14 Dtool_nJyotWZS 7 1265 4003 0 14 Dtool_nJyotWZS 395 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::operator []
//       Access: Published
//  Description: Returns the nth Material in the collection.  This is
//               the same as get_material(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4146  5 index 1 3889  
1639 14 Dtool_nJyoqcmw 6 1266 3889 0 14 Dtool_nJyoqcmw 339 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::size
//       Access: Published
//  Description: Returns the number of materials in the collection.  This
//               is the same thing as get_num_materials().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4146  
1640 14 Dtool_nJyo0vQG 6 1267 4004 0 14 Dtool_nJyo0vQG 279 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4004  5 other 1 4146  
1641 14 Dtool_nJyoXSeM 7 1268 4004 3343 14 Dtool_nJyoXSeM 324 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::operator +
//       Access: Published
//  Description: Returns a MaterialCollection representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4146  5 other 1 4146  
1642 14 Dtool_nJyo_GVu 4 1269 3890 0 14 Dtool_nJyo_GVu 336 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               MaterialCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4146  3 out 1 3893  
1643 14 Dtool_nJyoMzN1 4 1270 3890 0 14 Dtool_nJyoMzN1 340 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               MaterialCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4146  3 out 1 3893  12 indent_level 1 3889  
1644 14 Dtool_nJyosTZG 4 1270 3890 0 14 Dtool_nJyosTZG 340 ////////////////////////////////////////////////////////////////////
//     Function: MaterialCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               MaterialCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4146  3 out 1 3893  
1645 14 Dtool_nJyoBn4I 7 1273 4148 3365 14 Dtool_nJyoBn4I 851 // Filename: modelFlattenRequest.I
// Created by:  drose (30Mar07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::Constructor
//       Access: Published
//  Description: Create a new ModelFlattenRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
//////////////////////////////////////////////////////////////////// 1 4 orig 1 3925  
1646 14 Dtool_nJyor0LU 7 1274 3925 2411 14 Dtool_nJyor0LU 268 ////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::get_orig
//       Access: Published
//  Description: Returns the original, unflattened node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4149  
1647 14 Dtool_nJyokIxJ 6 1275 3866 0 14 Dtool_nJyokIxJ 420 ////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the model loaded by calling get_result().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4149  
1648 14 Dtool_nJyoSoXT 7 1276 3925 2411 14 Dtool_nJyoSoXT 348 ////////////////////////////////////////////////////////////////////
//     Function: ModelFlattenRequest::get_model
//       Access: Published
//  Description: Returns the flattened copy of the model.  It is an
//               error to call this unless is_ready() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4149  
1649 14 Dtool_nJyoB1o6 7 1277 3896 0 14 Dtool_nJyoB1o6 0 0 
1650 14 Dtool_nJyo38Jw 7 1280 4151 3373 14 Dtool_nJyo38Jw 350 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::Constructor
//       Access: Published
//  Description: Create a new ModelLoadRequest, and add it to the loader
//               via load_async(), to begin an asynchronous load.
//////////////////////////////////////////////////////////////////// 4 4 name 1 3924  8 filename 1 4022  7 options 1 4131  6 loader 1 4125  
1651 14 Dtool_nJyok0Ji 6 1281 4022 0 14 Dtool_nJyok0Ji 811 // Filename: modelLoadRequest.I
// Created by:  drose (29Aug06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_filename
//       Access: Published
//  Description: Returns the filename associated with this
//               asynchronous ModelLoadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4152  
1652 14 Dtool_nJyoH3hS 6 1282 4131 0 14 Dtool_nJyoH3hS 323 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_options
//       Access: Published
//  Description: Returns the LoaderOptions associated with this
//               asynchronous ModelLoadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4152  
1653 14 Dtool_nJyotYxM 7 1283 4125 3319 14 Dtool_nJyotYxM 322 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_loader
//       Access: Published
//  Description: Returns the Loader object associated with this
//               asynchronous ModelLoadRequest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4152  
1654 14 Dtool_nJyoISGY 6 1284 3866 0 14 Dtool_nJyoISGY 416 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::is_ready
//       Access: Published
//  Description: Returns true if this request has completed, false if
//               it is still pending.  When this returns true, you may
//               retrieve the model loaded by calling get_model().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4152  
1655 14 Dtool_nJyoExGL 7 1285 3925 2411 14 Dtool_nJyoExGL 410 ////////////////////////////////////////////////////////////////////
//     Function: ModelLoadRequest::get_model
//       Access: Published
//  Description: Returns the model that was loaded asynchronously, if
//               any, or NULL if there was an error.  It is an error
//               to call this unless is_ready() returns true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4152  
1656 14 Dtool_nJyo3JUL 7 1286 3896 0 14 Dtool_nJyo3JUL 0 0 
1657 14 Dtool_nJyoUtdT 7 1289 4154 3381 14 Dtool_nJyoUtdT 703 // Filename: modelNode.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
1658 14 Dtool_nJyodAt4 4 1291 3890 0 14 Dtool_nJyodAt4 1760 ////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_transform
//       Access: Public
//  Description: Sets the preserve_transform flag.  This restricts the
//               ability of a flatten operation to affect the
//               transform stored on this node, and/or the node
//               itself.  In the order from weakest to strongest
//               restrictions, the possible flags are:
//
//               PT_drop_node - This node should be removed at the
//               next flatten call.
//
//               PT_none - The transform may be adjusted at will.  The
//               node itself will not be removed.  This is the
//               default.
//
//               PT_net - Preserve the net transform from the root,
//               but it's acceptable to modify the local transform
//               stored on this particular node if necessary, so long
//               as the net transform is not changed.  This eliminates
//               the need to drop an extra transform on the node
//               above.
//
//               PT_local - The local (and net) transform should not
//               be changed in any way.  If necessary, an extra
//               transform will be left on the node above to guarantee
//               this.  This is a stronger restriction than PT_net.
//
//               PT_no_touch - The local transform will not be
//               changed, the node will not be removed, and
//               furthermore any flatten operation will not continue
//               below this node--this node and all descendents are
//               protected from the effects of flatten.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4154  18 preserve_transform 1 3816  
1659 14 Dtool_nJyoEjAF 6 1292 3816 0 14 Dtool_nJyoEjAF 337 ////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_transform
//       Access: Public
//  Description: Returns the current setting of the preserve_transform
//               flag.  See set_preserve_transform().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4155  
1660 14 Dtool_nJyojTxX 4 1293 3890 0 14 Dtool_nJyojTxX 591 ////////////////////////////////////////////////////////////////////
//     Function: ModelNode::set_preserve_attributes
//       Access: Public
//  Description: Sets the preserve_attributes flag.  This restricts the
//               ability of a flatten operation to affect the
//               render attributes stored on this node.
//
//               The value should be the union of bits from
//               SceneGraphReducer::AttribTypes that represent the
//               attributes that should *not* be changed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4154  11 attrib_mask 1 3889  
1661 14 Dtool_nJyoEXJC 6 1294 3889 0 14 Dtool_nJyoEXJC 340 ////////////////////////////////////////////////////////////////////
//     Function: ModelNode::get_preserve_attributes
//       Access: Public
//  Description: Returns the current setting of the preserve_attributes
//               flag.  See set_preserve_attributes().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4155  
1662 14 Dtool_nJyoH54l 4 1295 3890 0 14 Dtool_nJyoH54l 0 2 4 this 3 4154  5 limit 1 3874  
1663 14 Dtool_nJyoYGvp 7 1296 3896 0 14 Dtool_nJyoYGvp 0 0 
1664 14 Dtool_nJyoeSI8 7 1299 4157 3391 14 Dtool_nJyoeSI8 706 // Filename: modelRoot.I
// Created by:  drose (16Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
1665 14 Dtool_nJyo3bzd 6 1300 3889 0 14 Dtool_nJyo3bzd 654 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_model_ref_count
//       Access: Published
//  Description: Returns the number of copies that exist of this
//               particular ModelRoot node.  Each time
//               ModelRoot::copy_subgraph() or make_copy() is called
//               (or some other copying mechanism, such as
//               NodePath.copy_to(), is used), this count will
//               increment by one in all copies; when one of the
//               copies is destructed, this count will decrement.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4158  
1666 14 Dtool_nJyoHEam 6 1301 4022 0 14 Dtool_nJyoHEam 463 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_fullpath
//       Access: Published
//  Description: Returns the full pathname of the model represented by
//               this node, as found on disk.  This is mainly useful
//               for reference purposes, but is also used to index the
//               ModelRoot into the ModelPool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4158  
1667 14 Dtool_nJyoQk2_ 4 1302 3890 0 14 Dtool_nJyoQk2_ 714 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_fullpath
//       Access: Published
//  Description: Sets the full pathname of the model represented by
//               this node, as found on disk.  This is mainly useful
//               for reference purposes, but is also used to index the
//               ModelRoot into the ModelPool.
//
//               This is normally set automatically when a model is
//               loaded, and should not be set directly by the user.
//               If you change this on a loaded model, then
//               ModelPool::release_model() may fail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4157  8 fullpath 1 4022  
1668 14 Dtool_nJyo0Z6t 7 1306 4160 3387 14 Dtool_nJyo0Z6t 604 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::get_reference
//       Access: Published
//  Description: Returns the pointer that represents the object shared
//               between all copies of this ModelRoot.  Since there's
//               not much associated with this object other than a
//               reference count, normally there's not much reason to
//               get the pointer (though it may be compared
//               pointerwise with other ModelRoot objects).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4158  
1669 14 Dtool_nJyobz3K 4 1307 3890 0 14 Dtool_nJyobz3K 469 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::set_reference
//       Access: Published
//  Description: Changes the pointer that represents the object shared
//               between all copies of this ModelRoot.  This will
//               disassociate this ModelRoot from all of its copies.
//               Normally, there's no reason to do this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4157  3 ref 1 4160  
1670 14 Dtool_nJyo86vR 7 1308 3896 0 14 Dtool_nJyo86vR 0 0 
1671 14 Dtool_nJyoE6_L 7 1304 4160 3387 14 Dtool_nJyoE6_L 237 ////////////////////////////////////////////////////////////////////
//     Function: ModelRoot::ModelReference::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1672 14 Dtool_nJyoQAUp 6 1311 3866 0 14 Dtool_nJyoQAUp 791 // Filename: modelPool.I
// Created by:  drose (12Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModelPool::has_model
//       Access: Public, Static
//  Description: Returns true if the model has ever been loaded,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 4022  
1673 14 Dtool_nJyosZBt 6 1312 3866 0 14 Dtool_nJyosZBt 593 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::verify_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_model() with the same model name will
//               return a valid Node pointer.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 4022  
1674 14 Dtool_nJyo59U0 7 1313 4157 3391 14 Dtool_nJyo59U0 528 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::load_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns the new model.
//               If a model with the same filename was previously
//               loaded, returns that one instead.  If the model
//               file cannot be found, returns NULL.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 4022  7 options 1 4131  
1675 14 Dtool_nJyone99 7 1313 4157 3391 14 Dtool_nJyone99 528 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::load_model
//       Access: Public, Static
//  Description: Loads the given filename up as a model, if it has
//               not already been loaded, and returns the new model.
//               If a model with the same filename was previously
//               loaded, returns that one instead.  If the model
//               file cannot be found, returns NULL.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 4022  
1676 14 Dtool_nJyomyVO 4 1314 3890 0 14 Dtool_nJyomyVO 586 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::add_model
//       Access: Public, Static
//  Description: Adds the indicated already-loaded model to the
//               pool.  The model will always replace any
//               previously-loaded model in the pool that had the
//               same filename.
//
//               This two-parameter version of this method is
//               deprecated; use the one-parameter add_model(model)
//               instead.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 4022  5 model 1 4157  
1677 14 Dtool_nJyokjnC 4 1314 3890 0 14 Dtool_nJyokjnC 427 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::add_model
//       Access: Public, Static
//  Description: Adds the indicated already-loaded model to the
//               pool.  The model will always replace any
//               previously-loaded model in the pool that had the
//               same filename.
//////////////////////////////////////////////////////////////////// 1 5 model 1 4157  
1678 14 Dtool_nJyoCeDz 4 1315 3890 0 14 Dtool_nJyoCeDz 657 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_model
//       Access: Public, Static
//  Description: Removes the indicated model from the pool,
//               indicating it will never be loaded again; the model
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every model
//               every loaded, and models will never be freed.
//
//               This version of this method is deprecated; use
//               release_model(model) instead.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 4022  
1679 14 Dtool_nJyoCOUG 4 1315 3890 0 14 Dtool_nJyoCOUG 732 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_model
//       Access: Public, Static
//  Description: Removes the indicated model from the pool,
//               indicating it will never be loaded again; the model
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every model
//               every loaded, and models will never be freed.
//
//               The model's get_fullpath() value should not have been
//               changed during its lifetime, or this function may
//               fail to locate it in the pool.
//////////////////////////////////////////////////////////////////// 1 5 model 1 4157  
1680 14 Dtool_nJyo4zQY 4 1316 3890 0 14 Dtool_nJyo4zQY 324 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::release_all_models
//       Access: Public, Static
//  Description: Releases all models in the pool and restores the
//               pool to the empty state.
//////////////////////////////////////////////////////////////////// 0 
1681 14 Dtool_nJyoqWBO 6 1317 3889 0 14 Dtool_nJyoqWBO 469 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those models in the pool that have a
//               reference count of exactly 1; i.e. only those
//               models that are not being used outside of the pool.
//               Returns the number of models released.
//////////////////////////////////////////////////////////////////// 0 
1682 14 Dtool_nJyoMGWG 4 1318 3890 0 14 Dtool_nJyoMGWG 274 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the model pool to cout.
//////////////////////////////////////////////////////////////////// 0 
1683 14 Dtool_nJyoBOv6 4 1318 3890 0 14 Dtool_nJyoBOv6 314 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
1684 14 Dtool_nJyopGeH 4 1319 3890 0 14 Dtool_nJyopGeH 348 ////////////////////////////////////////////////////////////////////
//     Function: ModelPool::write
//       Access: Published, Static
//  Description: Lists the contents of the model pool to the
//               indicated output stream.
//               Helps with debugging.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
1685 14 Dtool_nJyo3iXv 7 1322 3952 3404 14 Dtool_nJyo3iXv 230 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1686 14 Dtool_nJyo2o9H 7 1322 3952 3404 14 Dtool_nJyo2o9H 235 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4161  
1687 14 Dtool_nJyoMXmF 7 1322 3952 3404 14 Dtool_nJyoMXmF 458 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Constructor
//       Access: Published
//  Description: This special constructor accepts a Python list of
//               NodePaths.  Since this constructor accepts a generic
//               PyObject *, it should be the last constructor listed
//               in the class record.
//////////////////////////////////////////////////////////////////// 2 4 self 1 3891  8 sequence 1 3891  
1688 14 Dtool_nJyohGif 6 1323 3952 0 14 Dtool_nJyohGif 243 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  4 copy 1 4161  
1689 14 Dtool_nJyopn77 6 1325 3891 0 14 Dtool_nJyopn77 328 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4161  4 self 1 3891  
1690 14 Dtool_nJyooj7i 4 1326 3890 0 14 Dtool_nJyooj7i 281 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_path
//       Access: Published
//  Description: Adds a new NodePath to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  9 node_path 1 3950  
1691 14 Dtool_nJyo_4Zw 6 1327 3866 0 14 Dtool_nJyo_4Zw 402 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_path
//       Access: Published
//  Description: Removes the indicated NodePath from the collection.
//               Returns true if the path was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  9 node_path 1 3950  
1692 14 Dtool_nJyoD16c 4 1328 3890 0 14 Dtool_nJyoD16c 472 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::add_paths_from
//       Access: Published
//  Description: Adds all the NodePaths indicated in the other
//               collection to this path.  The other paths are simply
//               appended to the end of the paths in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 other 1 4161  
1693 14 Dtool_nJyoPgsC 4 1329 3890 0 14 Dtool_nJyoPgsC 335 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_paths_from
//       Access: Published
//  Description: Removes from this collection all of the NodePaths
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 other 1 4161  
1694 14 Dtool_nJyofBHO 4 1330 3890 0 14 Dtool_nJyofBHO 473 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::remove_duplicate_paths
//       Access: Published
//  Description: Removes any duplicate entries of the same NodePaths
//               on this collection.  If a NodePath appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1695 14 Dtool_nJyoW5qJ 6 1331 3866 0 14 Dtool_nJyoW5qJ 328 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::has_path
//       Access: Published
//  Description: Returns true if the indicated NodePath appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4161  4 path 1 3950  
1696 14 Dtool_nJyoOyfl 4 1332 3890 0 14 Dtool_nJyoOyfl 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::clear
//       Access: Published
//  Description: Removes all NodePaths from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1697 14 Dtool_nJyoYTzI 6 1333 3866 0 14 Dtool_nJyoYTzI 319 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no NodePaths in the
//               collection, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4161  
1698 14 Dtool_nJyo6KKi 6 1334 3889 0 14 Dtool_nJyo6KKi 283 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_num_paths
//       Access: Published
//  Description: Returns the number of NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4161  
1699 14 Dtool_nJyo02PJ 7 1335 3949 2863 14 Dtool_nJyo02PJ 271 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_path
//       Access: Published
//  Description: Returns the nth NodePath in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4161  5 index 1 3889  
1700 14 Dtool_nJyoyiIl 7 1336 3949 2863 14 Dtool_nJyoyiIl 391 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::operator []
//       Access: Published
//  Description: Returns the nth NodePath in the collection.  This is
//               the same as get_path(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4161  5 index 1 3889  
1701 14 Dtool_nJyo6EWD 6 1337 3889 0 14 Dtool_nJyo6EWD 331 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::size
//       Access: Published
//  Description: Returns the number of paths in the collection.  This
//               is the same thing as get_num_paths().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4161  
1702 14 Dtool_nJyo5pUd 6 1338 3952 0 14 Dtool_nJyo5pUd 279 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 other 1 4161  
1703 14 Dtool_nJyowPWd 7 1339 3952 3404 14 Dtool_nJyowPWd 324 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::operator +
//       Access: Published
//  Description: Returns a NodePathCollection representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4161  5 other 1 4161  
1704 14 Dtool_nJyo2qmT 4 1340 3890 0 14 Dtool_nJyo2qmT 399 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::append
//       Access: Published
//  Description: Adds a new NodePath to the collection.  This method
//               duplicates the add_path() method; it is provided to
//               satisfy Python's naming convention.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  9 node_path 1 3950  
1705 14 Dtool_nJyoOz1K 4 1341 3890 0 14 Dtool_nJyoOz1K 402 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::extend
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//               This method duplicates the += operator; it is
//               provided to satisfy Python's naming convention.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 other 1 4161  
1706 14 Dtool_nJyo3QA8 4 1342 3890 0 14 Dtool_nJyo3QA8 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4161  
1707 14 Dtool_nJyoRtqi 4 1342 3890 0 14 Dtool_nJyoRtqi 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4161  3 out 1 3893  12 indent_level 1 3889  
1708 14 Dtool_nJyo1d_6 4 1342 3890 0 14 Dtool_nJyo1d_6 315 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::ls
//       Access: Published
//  Description: Lists all the nodes at and below each node in the
//               collection hierarchically.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4161  3 out 1 3893  
1709 14 Dtool_nJyoXeNM 7 1343 3952 3404 14 Dtool_nJyoXeNM 447 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::find_all_matches
//       Access: Published
//  Description: Returns the complete set of all NodePaths that begin
//               with any NodePath in this collection and can be
//               extended by path.  The shortest paths will be listed
//               first.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4161  4 path 1 3924  
1710 14 Dtool_nJyob1jO 4 1344 3890 0 14 Dtool_nJyob1jO 316 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 other 1 3950  
1711 14 Dtool_nJyoqRqE 4 1345 3890 0 14 Dtool_nJyoqRqE 402 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::wrt_reparent_to
//       Access: Published
//  Description: Reparents all the NodePaths in the collection to the
//               indicated node, adjusting each transform so as not to
//               move in world coordinates.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 other 1 3950  
1712 14 Dtool_nJyo7UQK 4 1346 3890 0 14 Dtool_nJyo7UQK 262 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Shows all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1713 14 Dtool_nJyo583n 4 1347 3890 0 14 Dtool_nJyo583n 262 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::show
//       Access: Published
//  Description: Hides all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1714 14 Dtool_nJyoiPiS 4 1348 3890 0 14 Dtool_nJyoiPiS 265 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::stash
//       Access: Published
//  Description: Stashes all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1715 14 Dtool_nJyoLTV5 4 1349 3890 0 14 Dtool_nJyoLTV5 269 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::unstash
//       Access: Published
//  Description: Unstashes all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1716 14 Dtool_nJyoMNIX 4 1350 3890 0 14 Dtool_nJyoMNIX 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::detach
//       Access: Published
//  Description: Detaches all NodePaths in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1717 14 Dtool_nJyoNmTQ 7 1351 3931 0 14 Dtool_nJyoNmTQ 610 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::get_collide_mask
//       Access: Published
//  Description: Returns the union of all of the into_collide_masks
//               for nodes at this level and below.  This is the same
//               thing as node()->get_net_collide_mask().
//
//               If you want to return what the into_collide_mask of
//               this node itself is, without regard to its children,
//               use node()->get_into_collide_mask().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4161  
1718 14 Dtool_nJyo__ns 4 1352 3890 0 14 Dtool_nJyo__ns 694 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  Only nodes 
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3952  8 new_mask 1 3931  14 bits_to_change 1 3931  9 node_type 1 3896  
1719 14 Dtool_nJyon9QS 4 1352 3890 0 14 Dtool_nJyon9QS 694 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  Only nodes 
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  8 new_mask 1 3931  14 bits_to_change 1 3931  
1720 14 Dtool_nJyoJ2mf 4 1352 3890 0 14 Dtool_nJyoJ2mf 694 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_collide_mask
//       Access: Published
//  Description: Recursively applies the indicated CollideMask to the
//               into_collide_masks for all nodes at this level and
//               below.  Only nodes 
//
//               The default is to change all bits, but if
//               bits_to_change is not all bits on, then only the bits
//               that are set in bits_to_change are modified, allowing
//               this call to change only a subset of the bits in the
//               subgraph.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  8 new_mask 1 3931  
1721 14 Dtool_nJyouhXW 4 1353 3890 0 14 Dtool_nJyouhXW 684 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the deprecated single-texture variant of this
//               method; it is now superceded by set_texture() that
//               accepts a stage and texture.  However, this method
//               may be used in the presence of multitexture if you
//               just want to adjust the default stage.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  3 tex 1 3965  8 priority 1 3889  
1722 14 Dtool_nJyocvmo 4 1353 3890 0 14 Dtool_nJyocvmo 684 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the default texture stage.
//
//               This is the deprecated single-texture variant of this
//               method; it is now superceded by set_texture() that
//               accepts a stage and texture.  However, this method
//               may be used in the presence of multitexture if you
//               just want to adjust the default stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  3 tex 1 3965  
1723 14 Dtool_nJyow4DL 4 1353 3890 0 14 Dtool_nJyow4DL 669 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3952  5 stage 1 3906  3 tex 1 3965  8 priority 1 3889  
1724 14 Dtool_nJyofDHK 4 1353 3890 0 14 Dtool_nJyofDHK 669 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture
//       Access: Published
//  Description: Adds the indicated texture to the list of textures
//               that will be rendered on the indicated multitexture
//               stage.  If there are multiple texture stages
//               specified (possibly on multiple different nodes at
//               different levels), they will all be applied to
//               geometry together, according to the stage
//               specification set up in the TextureStage object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  5 stage 1 3906  3 tex 1 3965  
1725 14 Dtool_nJyoG_3G 4 1354 3890 0 14 Dtool_nJyoG_3G 605 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  5 stage 1 3906  8 priority 1 3889  
1726 14 Dtool_nJyon4Jh 4 1354 3890 0 14 Dtool_nJyon4Jh 605 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on the indicated stage.  This is
//               different from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 stage 1 3906  
1727 14 Dtool_nJyonDJh 4 1354 3890 0 14 Dtool_nJyonDJh 595 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  8 priority 1 3889  
1728 14 Dtool_nJyopfVS 4 1354 3890 0 14 Dtool_nJyopfVS 595 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_texture_off
//       Access: Published
//  Description: Sets the geometry at this level and below to render
//               using no texture, on any stage.  This is different
//               from not specifying a texture; rather, this
//               specifically contradicts set_texture() at a higher
//               node level (or, with a priority, overrides a
//               set_texture() at a lower level).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3952  
1729 14 Dtool_nJyoKnbq 4 1355 3890 0 14 Dtool_nJyoKnbq 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  5 color 1 3961  8 priority 1 3889  
1730 14 Dtool_nJyopnAB 4 1355 3890 0 14 Dtool_nJyopnAB 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 color 1 3961  
1731 14 Dtool_nJyoOAR_ 4 1355 3890 0 14 Dtool_nJyoOAR_ 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
//////////////////////////////////////////////////////////////////// 6 4 this 3 3952  1 r 1 3874  1 g 1 3874  1 b 1 3874  1 a 1 3874  8 priority 1 3889  
1732 14 Dtool_nJyoM8OR 4 1355 3890 0 14 Dtool_nJyoM8OR 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
//////////////////////////////////////////////////////////////////// 5 4 this 3 3952  1 r 1 3874  1 g 1 3874  1 b 1 3874  1 a 1 3874  
1733 14 Dtool_nJyofNdA 4 1355 3890 0 14 Dtool_nJyofNdA 267 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color
//       Access: Published
//  Description: Colors all NodePaths in the collection
//////////////////////////////////////////////////////////////////// 4 4 this 3 3952  1 r 1 3874  1 g 1 3874  1 b 1 3874  
1734 14 Dtool_nJyoO4b2 4 1356 3890 0 14 Dtool_nJyoO4b2 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  5 scale 1 3961  8 priority 1 3889  
1735 14 Dtool_nJyone6a 4 1356 3890 0 14 Dtool_nJyone6a 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 scale 1 3961  
1736 14 Dtool_nJyoyfHu 4 1356 3890 0 14 Dtool_nJyoyfHu 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3952  1 r 1 3874  1 g 1 3874  1 b 1 3874  1 a 1 3874  8 priority 1 3889  
1737 14 Dtool_nJyoD3Ks 4 1356 3890 0 14 Dtool_nJyoD3Ks 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3952  1 r 1 3874  1 g 1 3874  1 b 1 3874  1 a 1 3874  
1738 14 Dtool_nJyoQMy4 4 1356 3890 0 14 Dtool_nJyoQMy4 347 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale is replaced.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3952  1 r 1 3874  1 g 1 3874  1 b 1 3874  
1739 14 Dtool_nJyot1Pa 4 1357 3890 0 14 Dtool_nJyot1Pa 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  5 scale 1 3961  8 priority 1 3889  
1740 14 Dtool_nJyoRCj0 4 1357 3890 0 14 Dtool_nJyoRCj0 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  5 scale 1 3961  
1741 14 Dtool_nJyodWqt 4 1357 3890 0 14 Dtool_nJyodWqt 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
//////////////////////////////////////////////////////////////////// 6 4 this 3 3952  1 r 1 3874  1 g 1 3874  1 b 1 3874  1 a 1 3874  8 priority 1 3889  
1742 14 Dtool_nJyo0rj1 4 1357 3890 0 14 Dtool_nJyo0rj1 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3952  1 r 1 3874  1 g 1 3874  1 b 1 3874  1 a 1 3874  
1743 14 Dtool_nJyoDeXy 4 1357 3890 0 14 Dtool_nJyoDeXy 408 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::compose_color_scale
//       Access: Published
//  Description: Applies color scales to all NodePaths in the
//               collection.  The existing color scale, if any, is
//               multiplied by the specified color scale.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3952  1 r 1 3874  1 g 1 3874  1 b 1 3874  
1744 14 Dtool_nJyoWzN6 4 1358 3890 0 14 Dtool_nJyoWzN6 504 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_attrib
//       Access: Published
//  Description: Applies the indicated RenderAttrib to all NodePaths
//               in the collection.  An effort is made to apply the
//               attrib to many NodePaths as quickly as possible;
//               redundant RenderState compositions are not
//               duplicated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3952  6 attrib 1 3901  8 priority 1 3889  
1745 14 Dtool_nJyokrMD 4 1358 3890 0 14 Dtool_nJyokrMD 504 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::set_attrib
//       Access: Published
//  Description: Applies the indicated RenderAttrib to all NodePaths
//               in the collection.  An effort is made to apply the
//               attrib to many NodePaths as quickly as possible;
//               redundant RenderState compositions are not
//               duplicated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3952  6 attrib 1 3901  
1746 14 Dtool_nJyouSFB 4 1359 3890 0 14 Dtool_nJyouSFB 336 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               NodePathCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4161  3 out 1 3893  
1747 14 Dtool_nJyocn9H 4 1360 3890 0 14 Dtool_nJyocn9H 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               NodePathCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4161  3 out 1 3893  12 indent_level 1 3889  
1748 14 Dtool_nJyo_nJZ 4 1360 3890 0 14 Dtool_nJyo_nJZ 340 ////////////////////////////////////////////////////////////////////
//     Function: NodePathCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               NodePathCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4161  3 out 1 3893  
1749 14 Dtool_nJyo92CO 7 1362 3901 0 14 Dtool_nJyo92CO 300 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that does
//               nothing.
//////////////////////////////////////////////////////////////////// 0 
1750 14 Dtool_nJyo0rhz 7 1362 3901 0 14 Dtool_nJyo0rhz 390 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering the indicated texture onto geometry, using
//               the default TextureStage.
//////////////////////////////////////////////////////////////////// 1 3 tex 1 3965  
1751 14 Dtool_nJyoHcOV 7 1363 3901 0 14 Dtool_nJyoHcOV 329 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object suitable for
//               rendering untextured geometry.
//////////////////////////////////////////////////////////////////// 0 
1752 14 Dtool_nJyodQuh 7 1364 3901 0 14 Dtool_nJyodQuh 400 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1753 14 Dtool_nJyoSDxK 6 1365 3866 0 14 Dtool_nJyoSDxK 679 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_off
//       Access: Published
//  Description: Returns true if the TextureAttrib is an 'off'
//               TextureAttrib, indicating that it should disable
//               texturing.
//
//               If multitexture is in effect, a TextureAttrib may not
//               be strictly "on" or "off"; therefore, to get a more
//               precise answer to this question, you should consider
//               using has_all_off() or get_num_off_stages() or
//               has_off_stage() instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4163  
1754 14 Dtool_nJyoa2tR 7 1366 3965 0 14 Dtool_nJyoa2tR 386 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_texture
//       Access: Published
//  Description: If the TextureAttrib is not an 'off' TextureAttrib,
//               returns the base-level texture that is associated.
//               Otherwise, return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4163  
1755 14 Dtool_nJyoiAmG 7 1367 3901 0 14 Dtool_nJyoiAmG 347 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::make_all_off
//       Access: Published, Static
//  Description: Constructs a new TextureAttrib object that turns off
//               all stages (and hence disables texturing).
//////////////////////////////////////////////////////////////////// 0 
1756 14 Dtool_nJyoPts5 6 1368 3889 0 14 Dtool_nJyoPts5 314 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_on_stages
//       Access: Published
//  Description: Returns the number of stages that are turned on by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4163  
1757 14 Dtool_nJyoxAIF 7 1369 3906 0 14 Dtool_nJyoxAIF 317 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_stage
//       Access: Published
//  Description: Returns the nth stage turned on by the attribute,
//               sorted in render order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  1 n 1 3889  
1758 14 Dtool_nJyoM6wU 6 1370 3889 0 14 Dtool_nJyoM6wU 410 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_on_ff_stages
//       Access: Published
//  Description: Returns the number of on-stages that are relevant
//               to the classic fixed function pipeline.  This excludes 
//               texture stages such as normal maps.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4163  
1759 14 Dtool_nJyouP0R 7 1371 3906 0 14 Dtool_nJyouP0R 480 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_render_ff_stage
//       Access: Published
//  Description: Returns the nth stage turned on by the attribute,
//               sorted in render order, including only those relevant
//               to the classic fixed function pipeline.  This excludes 
//               texture stages such as normal maps.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  1 n 1 3889  
1760 14 Dtool_nJyoKGh7 6 1372 3889 0 14 Dtool_nJyoKGh7 610 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_ff_tc_index
//       Access: Published
//  Description: For each TextureStage listed in get_on_ff_stage(),
//               this returns a unique index number for the texture
//               coordinate name used by that TextureStage.  It is
//               guaranteed to remain the same index number for each
//               texcoord name (for a given set of TextureStages),
//               even if the texture render order changes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  1 n 1 3889  
1761 14 Dtool_nJyoJ52n 6 1373 3866 0 14 Dtool_nJyoJ52n 324 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_on_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned on by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  5 stage 1 3906  
1762 14 Dtool_nJyoNSWS 7 1374 3965 0 14 Dtool_nJyoNSWS 339 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_texture
//       Access: Published
//  Description: Returns the texture associated with the indicated
//               stage, or NULL if no texture is associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  5 stage 1 3906  
1763 14 Dtool_nJyol_GX 6 1375 3889 0 14 Dtool_nJyol_GX 316 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_on_stage_override
//       Access: Published
//  Description: Returns the override value associated with the
//               indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  5 stage 1 3906  
1764 14 Dtool_nJyocPt4 6 1376 3889 0 14 Dtool_nJyocPt4 390 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::find_on_stage
//       Access: Published
//  Description: Returns the index number of the indicated
//               TextureStage within the list of on_stages, or -1 if
//               the indicated stage is not listed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  5 stage 1 4165  
1765 14 Dtool_nJyoRCki 6 1377 3889 0 14 Dtool_nJyoRCki 316 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_num_off_stages
//       Access: Published
//  Description: Returns the number of stages that are turned off by
//               the attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4163  
1766 14 Dtool_nJyofsjm 7 1378 3906 0 14 Dtool_nJyofsjm 332 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::get_off_stage
//       Access: Published
//  Description: Returns the nth stage turned off by the attribute,
//               sorted in arbitrary (pointer) order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  1 n 1 3889  
1767 14 Dtool_nJyoIoIC 6 1379 3866 0 14 Dtool_nJyoIoIC 326 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_off_stage
//       Access: Published
//  Description: Returns true if the indicated stage is turned off by
//               the attrib, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  5 stage 1 3906  
1768 14 Dtool_nJyoQEFa 6 1380 3866 0 14 Dtool_nJyoQEFa 328 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::has_all_off
//       Access: Published
//  Description: Returns true if this attrib turns off all stages
//               (although it may also turn some on).
//////////////////////////////////////////////////////////////////// 1 4 this 3 4163  
1769 14 Dtool_nJyoJvNO 6 1381 3866 0 14 Dtool_nJyoJvNO 331 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::is_identity
//       Access: Published
//  Description: Returns true if this is an identity attrib: it does
//               not change the set of stages in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4163  
1770 14 Dtool_nJyo4qWu 7 1382 3901 0 14 Dtool_nJyo4qWu 392 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned on by this attrib.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4163  5 stage 1 3906  3 tex 1 3965  8 override 1 3889  
1771 14 Dtool_nJyoCbpG 7 1382 3901 0 14 Dtool_nJyoCbpG 392 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned on by this attrib.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4163  5 stage 1 3906  3 tex 1 3965  
1772 14 Dtool_nJyopW4_ 7 1383 3901 0 14 Dtool_nJyopW4_ 399 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_on_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned on by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  5 stage 1 3906  
1773 14 Dtool_nJyoMrXC 7 1384 3901 0 14 Dtool_nJyoMrXC 394 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned off by this attrib.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4163  5 stage 1 3906  8 override 1 3889  
1774 14 Dtool_nJyo7rdo 7 1384 3901 0 14 Dtool_nJyo7rdo 394 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::add_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage added to the list of stages
//               turned off by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  5 stage 1 3906  
1775 14 Dtool_nJyopBrg 7 1385 3901 0 14 Dtool_nJyopBrg 401 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::remove_off_stage
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with the indicated stage removed from the list of
//               stages turned off by this attrib.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  5 stage 1 3906  
1776 14 Dtool_nJyo3f6O 7 1386 3901 0 14 Dtool_nJyo3f6O 451 ////////////////////////////////////////////////////////////////////
//     Function: TextureAttrib::unify_texture_stages
//       Access: Published
//  Description: Returns a new TextureAttrib, just like this one, but
//               with any included TextureAttribs that happen to have
//               the same name as the given object replaced with the
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4163  5 stage 1 3906  
1777 14 Dtool_nJyoOj1a 6 1387 3889 0 14 Dtool_nJyoOj1a 0 0 
1778 14 Dtool_nJyopGJm 7 1388 3896 0 14 Dtool_nJyopGJm 0 0 
1779 14 Dtool_nJyomQma 7 1391 3901 0 14 Dtool_nJyomQma 301 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates no stages at
//               all.
//////////////////////////////////////////////////////////////////// 0 
1780 14 Dtool_nJyoLPjv 7 1391 3901 0 14 Dtool_nJyoLPjv 309 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make
//       Access: Published, Static
//  Description: Constructs a TexGenAttrib that generates just the
//               indicated stage.
//////////////////////////////////////////////////////////////////// 2 5 stage 1 3906  4 mode 1 3730  
1781 14 Dtool_nJyo_0Nx 7 1392 3901 0 14 Dtool_nJyo_0Nx 399 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1782 14 Dtool_nJyoV2tb 7 1393 3901 0 14 Dtool_nJyoV2tb 437 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4167  5 stage 1 3906  4 mode 1 3730  
1783 14 Dtool_nJyo_t59 7 1393 3901 0 14 Dtool_nJyo_t59 564 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
//
//               This variant also accepts constant_value, which is
//               only meaningful if mode is M_constant.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4167  5 stage 1 3906  4 mode 1 3730  14 constant_value 1 3884  
1784 14 Dtool_nJyow3gR 7 1393 3901 0 14 Dtool_nJyow3gR 576 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::add_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated generation mode for the given
//               stage.  If this stage already exists, its mode is
//               replaced.
//
//               This variant also accepts source_name and light,
//               which are only meaningful if mode is M_light_vector.
//////////////////////////////////////////////////////////////////// 5 4 this 3 4167  5 stage 1 3906  4 mode 1 3730  11 source_name 1 3924  5 light 1 3950  
1785 14 Dtool_nJyo5OGR 7 1394 3901 0 14 Dtool_nJyo5OGR 331 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexGenAttrib just like this one,
//               with the indicated stage removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4167  5 stage 1 3906  
1786 14 Dtool_nJyoBBIE 6 1395 3866 0 14 Dtool_nJyoBBIE 323 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexGenAttrib, false if at least one is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4167  
1787 14 Dtool_nJyobnHK 6 1396 3866 0 14 Dtool_nJyobnHK 400 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::has_stage
//       Access: Published
//  Description: Returns true if there is a mode associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return M_off).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4167  5 stage 1 3906  
1788 14 Dtool_nJyoeJNN 6 1397 3730 0 14 Dtool_nJyoeJNN 384 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_mode
//       Access: Published
//  Description: Returns the generation mode associated with
//               the named texture stage, or M_off if
//               nothing is associated with the indicated stage.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4167  5 stage 1 3906  
1789 14 Dtool_nJyoWmtc 6 1398 3866 0 14 Dtool_nJyoWmtc 477 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::has_gen_texcoord_stage
//       Access: Published
//  Description: Returns true if the indicated TextureStage will have
//               texture coordinates generated for it automatically
//               (and thus there is no need to upload the texture
//               coordinates encoded in the vertices).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4167  5 stage 1 3906  
1790 14 Dtool_nJyorGMS 6 1399 3924 0 14 Dtool_nJyorGMS 644 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_source_name
//       Access: Published
//  Description: Returns the source name associated with the named
//               texture stage, or the empty string if no name is
//               associated with the indicated stage.  This is only
//               meaningful if the mode is M_light_vector, in which
//               case it indicates the name of the source texture
//               coordinate set from which the tangent and binormal
//               are derived.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4167  5 stage 1 3906  
1791 14 Dtool_nJyoyomo 7 1400 3949 2863 14 Dtool_nJyoyomo 462 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_light
//       Access: Published
//  Description: Returns the Light associated with the named texture
//               stage, or the empty NodePath if no light is
//               associated with the indicated stage.  This is only
//               meaningful if the mode is M_light_vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4167  5 stage 1 3906  
1792 14 Dtool_nJyoYu8z 6 1401 3884 0 14 Dtool_nJyoYu8z 385 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_constant_value
//       Access: Published
//  Description: Returns the constant value associated with the named
//               texture stage.  This is only meaningful if the mode
//               is M_constant.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4167  5 stage 1 3906  
1793 14 Dtool_nJyohRI_ 6 1402 3889 0 14 Dtool_nJyohRI_ 448 ////////////////////////////////////////////////////////////////////
//     Function: TexGenAttrib::get_geom_rendering
//       Access: Published
//  Description: Returns the union of the Geom::GeomRendering bits
//               that will be required once this TexGenAttrib is
//               applied to a geom which includes the indicated
//               geom_rendering bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4167  14 geom_rendering 1 3889  
1794 14 Dtool_nJyoqJ9K 6 1403 3889 0 14 Dtool_nJyoqJ9K 0 0 
1795 14 Dtool_nJyoleUJ 7 1404 3896 0 14 Dtool_nJyoleUJ 0 0 
1796 14 Dtool_nJyoQvIh 7 1408 4169 3520 14 Dtool_nJyoQvIh 303 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::Constructor
//       Access: Published
//  Description: Use PolylightNode() to construct a new
//               PolylightNode object.
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
1797 14 Dtool_nJyoJ7oX 4 1409 3890 0 14 Dtool_nJyoJ7oX 238 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::enable
//       Access: Published
//  Description: Enable this light
//////////////////////////////////////////////////////////////////// 1 4 this 3 4169  
1798 14 Dtool_nJyoqVNP 4 1410 3890 0 14 Dtool_nJyoqVNP 240 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::disable
//       Access: Published
//  Description: Disable this light
//////////////////////////////////////////////////////////////////// 1 4 this 3 4169  
1799 14 Dtool_nJyo5EU0 4 1411 3890 0 14 Dtool_nJyo5EU0 247 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  8 position 1 3956  
1800 14 Dtool_nJyol5pP 4 1411 3890 0 14 Dtool_nJyol5pP 247 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_pos
//       Access: Published
//  Description: Set this light's position
//////////////////////////////////////////////////////////////////// 4 4 this 3 4169  1 x 1 3874  1 y 1 3874  1 z 1 3874  
1801 14 Dtool_nJyo6Ddh 7 1412 3956 0 14 Dtool_nJyo6Ddh 252 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_pos
//       Access: Published
//  Description: Returns position as a LPoint3f
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1802 14 Dtool_nJyolWcS 4 1413 3890 0 14 Dtool_nJyolWcS 249 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  5 color 1 3964  
1803 14 Dtool_nJyorXKS 4 1413 3890 0 14 Dtool_nJyorXKS 273 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_color
//       Access: Published
//  Description: Set the light's color... 3 floats between 0 and 1
//////////////////////////////////////////////////////////////////// 4 4 this 3 4169  1 r 1 3874  1 g 1 3874  1 b 1 3874  
1804 14 Dtool_nJyorYAt 7 1414 3964 0 14 Dtool_nJyorYAt 259 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color
//       Access: Published
//  Description: Returns the light's color as Colorf
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1805 14 Dtool_nJyos21Z 7 1415 3964 0 14 Dtool_nJyos21Z 443 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_color_scenegraph
//       Access: Published
//  Description: This differs from get_color in that when applying
//               the light color we need to make sure that a color
//               flattening external to the PolylightNode is not 
//               ignored.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1806 14 Dtool_nJyojENz 4 1416 3890 0 14 Dtool_nJyojENz 265 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_radius
//       Access: Published
//  Description: Set radius of the spherical light volume
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  1 r 1 3874  
1807 14 Dtool_nJyomN_F 6 1417 3874 0 14 Dtool_nJyomN_F 265 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_radius
//       Access: Published
//  Description: Get radius of the spherical light volume
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1808 14 Dtool_nJyoNzMK 6 1418 3866 0 14 Dtool_nJyoNzMK 267 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_attenuation
//       Access: Published
//  Description: Set ALINEAR or AQUADRATIC attenuation
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  4 type 1 3825  
1809 14 Dtool_nJyogukW 6 1419 3825 0 14 Dtool_nJyogukW 274 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_attenuation
//       Access: Published
//  Description: Get "linear" or "quadratic" attenuation type
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1810 14 Dtool_nJyo6AyF 4 1420 3890 0 14 Dtool_nJyo6AyF 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a0
//       Access: Published
//  Description: Set the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  2 a0 1 3874  
1811 14 Dtool_nJyoqeGG 4 1421 3890 0 14 Dtool_nJyoqeGG 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a1
//       Access: Published
//  Description: Set the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  2 a1 1 3874  
1812 14 Dtool_nJyoa8aG 4 1422 3890 0 14 Dtool_nJyoa8aG 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_a2
//       Access: Published
//  Description: Set the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  2 a2 1 3874  
1813 14 Dtool_nJyofYRN 6 1423 3874 0 14 Dtool_nJyofYRN 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a0
//       Access: Published
//  Description: Get the quadratic attenuation factor a0
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1814 14 Dtool_nJyov_lN 6 1424 3874 0 14 Dtool_nJyov_lN 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a1
//       Access: Published
//  Description: Get the quadratic attenuation factor a1
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1815 14 Dtool_nJyo_c4N 6 1425 3874 0 14 Dtool_nJyo_c4N 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_a2
//       Access: Published
//  Description: Get the quadratic attenuation factor a2
//               fd = 1 / ( a0 + a1*distance + a2*distance*distance)
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1816 14 Dtool_nJyo6XFe 4 1426 3890 0 14 Dtool_nJyo6XFe 332 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_on
//       Access: Published
//  Description: Set flickering to true so at every loop this light's
//               color is varied based on flicker_type
//////////////////////////////////////////////////////////////////// 1 4 this 3 4169  
1817 14 Dtool_nJyoTEHE 4 1427 3890 0 14 Dtool_nJyoTEHE 245 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::flicker_off
//       Access: Published
//  Description: Turn flickering off
//////////////////////////////////////////////////////////////////// 1 4 this 3 4169  
1818 14 Dtool_nJyoLCTy 6 1428 3866 0 14 Dtool_nJyoLCTy 261 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_flickering
//       Access: Published
//  Description: Check is this light is flickering
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1819 14 Dtool_nJyorALY 6 1429 3866 0 14 Dtool_nJyorALY 446 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_flicker_type
//       Access: Published
//  Description: Flicker type can be FRANDOM or FSIN
//               At a later point there might be a FCUSTOM
//               Custom flicker will be a set of fix points recorded
//               by animating the light's intensity
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  4 type 1 3824  
1820 14 Dtool_nJyol3py 6 1430 3824 0 14 Dtool_nJyol3py 254 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_flicker_type
//       Access: Published
//  Description: Returns FRANDOM or FSIN
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1821 14 Dtool_nJyopyo8 4 1431 3890 0 14 Dtool_nJyopyo8 387 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_offset
//       Access: Published
//  Description: Set the offset value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is added to the variation
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  6 offset 1 3874  
1822 14 Dtool_nJyoy2YP 6 1432 3874 0 14 Dtool_nJyoy2YP 304 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_offset
//       Access: Published
//  Description: Get the offset value for the random and sin
//               flicker variations
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1823 14 Dtool_nJyo5u_H 4 1433 3890 0 14 Dtool_nJyo5u_H 392 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_scale
//       Access: Published
//  Description: Set the scale value for the random and sin
//               flicker variations... used to tweak the flicker
//               This value is multiplied with the variation
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  5 scale 1 3874  
1824 14 Dtool_nJyoriye 6 1434 3874 0 14 Dtool_nJyoriye 302 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_scale
//       Access: Published
//  Description: Get the scale value for the random and sin
//               flicker variations
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1825 14 Dtool_nJyoN2Pf 4 1435 3890 0 14 Dtool_nJyoN2Pf 381 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_step_size
//       Access: Published
//  Description: Set the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  4 step 1 3874  
1826 14 Dtool_nJyoCj7S 6 1436 3874 0 14 Dtool_nJyoCj7S 381 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_step_size
//       Access: Published
//  Description: Get the step size for the sin function in flicker
//               This is the increment size for the value supplied
//               to the sin function
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1827 14 Dtool_nJyo_d8J 4 1437 3890 0 14 Dtool_nJyo_d8J 251 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::set_freq
//       Access: Published
//  Description: Set frequency of sin flicker
//////////////////////////////////////////////////////////////////// 2 4 this 3 4169  1 f 1 3874  
1828 14 Dtool_nJyopD4C 6 1438 3874 0 14 Dtool_nJyopD4C 251 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::get_freq
//       Access: Published
//  Description: Get frequency of sin flicker
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1829 14 Dtool_nJyoE3DF 6 1439 3866 0 14 Dtool_nJyoE3DF 825 // Filename: PolylightNodeEffect.I
// Created by:  sshodhan (02Jun04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::operator ==
//       Access: Published
//  Description: Returns true if the two lights are equivalent
//               that is, all their properties are same
//////////////////////////////////////////////////////////////////// 2 4 this 3 4170  5 other 1 4170  
1830 14 Dtool_nJyo4ihE 6 1440 3866 0 14 Dtool_nJyo4ihE 276 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::operator !=
//       Access: Published
//  Description: Returns true if the two lights are not equivalent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4170  5 other 1 4170  
1831 14 Dtool_nJyotfyl 6 1441 3866 0 14 Dtool_nJyotfyl 541 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::operator <
//       Access: Published
//  Description: Returns true if this PolylightNode sorts before the other
//               one, false otherwise.  The sorting order of two
//               nonequivalent PolylightNodes is consistent but undefined,
//               and is useful only for storing PolylightNodes in a sorted
//               container like an STL set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4170  5 other 1 4170  
1832 14 Dtool_nJyo2MS5 6 1442 3889 0 14 Dtool_nJyo2MS5 832 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this PolylightNode
//               sorts before the other one, greater than zero if it
//               sorts after, or zero if they are equivalent.
//
//               Two PolylightNodes are considered equivalent if they
//               consist of exactly the same properties
//               Otherwise, they are different; different
//               PolylightNodes will be ranked in a consistent but
//               undefined ordering; the ordering is useful only for
//               placing the PolylightNodes in a sorted container like an
//               STL set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4170  5 other 1 4170  
1833 14 Dtool_nJyohYfZ 6 1443 3866 0 14 Dtool_nJyohYfZ 259 ////////////////////////////////////////////////////////////////////
//     Function: PolylightNode::is_enabled
//       Access: Published
//  Description: Is this light is enabled/disabled?
//////////////////////////////////////////////////////////////////// 1 4 this 3 4170  
1834 14 Dtool_nJyoz1P9 7 1444 3896 0 14 Dtool_nJyoz1P9 0 0 
1835 14 Dtool_nJyoX4w6 7 1448 3920 0 14 Dtool_nJyoX4w6 269 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
//////////////////////////////////////////////////////////////////// 0 
1836 14 Dtool_nJyowQWw 7 1448 3920 0 14 Dtool_nJyowQWw 269 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
//////////////////////////////////////////////////////////////////// 3 6 weight 1 3874  7 contrib 1 3827  13 effect_center 1 3953  
1837 14 Dtool_nJyogXbG 7 1448 3920 0 14 Dtool_nJyogXbG 269 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::make
//       Access: Published, Static
//  Description: Constructs a new PolylightEffect object.
//////////////////////////////////////////////////////////////////// 4 6 weight 1 3874  7 contrib 1 3827  13 effect_center 1 3953  6 lights 1 4172  
1838 14 Dtool_nJyo5iCT 7 1449 3920 0 14 Dtool_nJyo5iCT 308 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::add_light
//       Access: Published
//  Description: Add a PolylightNode object to this effect and return
//               a new effect
//////////////////////////////////////////////////////////////////// 2 4 this 3 4175  8 newlight 1 3950  
1839 14 Dtool_nJyoneGr 7 1450 3920 0 14 Dtool_nJyoneGr 308 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::remove_light
//       Access: Published
//  Description: Remove a light from this effect. Return the new updated
//               effect
//////////////////////////////////////////////////////////////////// 2 4 this 3 4175  8 newlight 1 3950  
1840 14 Dtool_nJyo5_KQ 7 1451 3920 0 14 Dtool_nJyo5_KQ 517 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_weight
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
//////////////////////////////////////////////////////////////////// 2 4 this 3 4175  1 w 1 3874  
1841 14 Dtool_nJyoqn_x 7 1452 3920 0 14 Dtool_nJyoqn_x 524 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_contrib
//       Access: Published
//  Description: Set Contrib Type and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
//////////////////////////////////////////////////////////////////// 2 4 this 3 4175  1 c 1 3827  
1842 14 Dtool_nJyo2mzF 7 1453 3920 0 14 Dtool_nJyo2mzF 524 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::set_effect_center
//       Access: Published
//  Description: Set weight and return a new effect... the reason
//               this couldnt be done through make was because
//               that would return a new effect without the 
//               lightgroup which is static and cant be accessed
//               Here, we just pass that to the make
//////////////////////////////////////////////////////////////////// 2 4 this 3 4175  2 ec 1 3953  
1843 14 Dtool_nJyoTSvb 6 1454 3874 0 14 Dtool_nJyoTSvb 247 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_weight
//       Access: Published
//  Description: Get the weight value
//////////////////////////////////////////////////////////////////// 1 4 this 3 4175  
1844 14 Dtool_nJyoQ433 6 1455 3827 0 14 Dtool_nJyoQ433 257 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_contrib
//       Access: Published
//  Description: Returns CT_all or CT_proximal
//////////////////////////////////////////////////////////////////// 1 4 this 3 4175  
1845 14 Dtool_nJyoGfeT 7 1456 3953 0 14 Dtool_nJyoGfeT 272 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::get_effect_center
//       Access: Published
//  Description: Return the value of the _effect_center
//////////////////////////////////////////////////////////////////// 1 4 this 3 4175  
1846 14 Dtool_nJyoedsj 6 1457 3866 0 14 Dtool_nJyoedsj 329 ////////////////////////////////////////////////////////////////////
//     Function: PolylightEffect::has_light
//       Access: Published
//  Description: Returns true if the indicated light is listed in the
//               PolylightEffect, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4175  5 light 1 3950  
1847 14 Dtool_nJyoTUuJ 7 1458 3896 0 14 Dtool_nJyoTUuJ 0 0 
1848 14 Dtool_nJyo_hmr 7 1462 4177 0 14 Dtool_nJyo_hmr 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 mat 1 3881  8 priority 1 3889  
1849 14 Dtool_nJyol15F 7 1462 4177 0 14 Dtool_nJyol15F 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 mat 1 3881  
1850 14 Dtool_nJyo33nr 7 1462 4177 0 14 Dtool_nJyo33nr 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 mat 1 3875  8 priority 1 3889  
1851 14 Dtool_nJyosD6F 7 1462 4177 0 14 Dtool_nJyosD6F 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 mat 1 3875  
1852 14 Dtool_nJyo5r30 7 1462 4177 0 14 Dtool_nJyo5r30 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 vec 1 3878  8 priority 1 3889  
1853 14 Dtool_nJyoUI29 7 1462 4177 0 14 Dtool_nJyoUI29 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 vec 1 3878  
1854 14 Dtool_nJyoZWe1 7 1462 4177 0 14 Dtool_nJyoZWe1 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 vec 1 3868  8 priority 1 3889  
1855 14 Dtool_nJyo0Xd_ 7 1462 4177 0 14 Dtool_nJyo0Xd_ 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 vec 1 3868  
1856 14 Dtool_nJyo5SF2 7 1462 4177 0 14 Dtool_nJyo5SF2 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 vec 1 3961  8 priority 1 3889  
1857 14 Dtool_nJyoUTE_ 7 1462 4177 0 14 Dtool_nJyoUTE_ 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 vec 1 3961  
1858 14 Dtool_nJyoBUp4 7 1462 4177 0 14 Dtool_nJyoBUp4 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  2 np 1 3950  8 priority 1 3889  
1859 14 Dtool_nJyoI1f7 7 1462 4177 0 14 Dtool_nJyoI1f7 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  2 np 1 3950  
1860 14 Dtool_nJyosYY6 7 1462 4177 0 14 Dtool_nJyosYY6 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 ptr 1 3972  8 priority 1 3889  
1861 14 Dtool_nJyotwz7 7 1462 4177 0 14 Dtool_nJyotwz7 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 ptr 1 3972  
1862 14 Dtool_nJyos0Q_ 7 1462 4177 0 14 Dtool_nJyos0Q_ 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 ptr 1 3975  8 priority 1 3889  
1863 14 Dtool_nJyosUrA 7 1462 4177 0 14 Dtool_nJyosUrA 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 ptr 1 3975  
1864 14 Dtool_nJyoJ1n5 7 1462 4177 0 14 Dtool_nJyoJ1n5 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 ptr 1 3978  8 priority 1 3889  
1865 14 Dtool_nJyoolwm 7 1462 4177 0 14 Dtool_nJyoolwm 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 ptr 1 3978  
1866 14 Dtool_nJyoM11V 7 1462 4177 0 14 Dtool_nJyoM11V 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 ptr 1 3981  8 priority 1 3889  
1867 14 Dtool_nJyotl_C 7 1462 4177 0 14 Dtool_nJyotl_C 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 ptr 1 3981  
1868 14 Dtool_nJyoC1Dy 7 1462 4177 0 14 Dtool_nJyoC1Dy 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 ptr 1 3984  8 priority 1 3889  
1869 14 Dtool_nJyozlMf 7 1462 4177 0 14 Dtool_nJyozlMf 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 ptr 1 3984  
1870 14 Dtool_nJyosY3L 7 1462 4177 0 14 Dtool_nJyosY3L 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 ptr 1 3987  8 priority 1 3889  
1871 14 Dtool_nJyo_UGe 7 1462 4177 0 14 Dtool_nJyo_UGe 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 ptr 1 3987  
1872 14 Dtool_nJyotvUf 7 1462 4177 0 14 Dtool_nJyotvUf 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 ptr 1 3990  8 priority 1 3889  
1873 14 Dtool_nJyoSd41 7 1462 4177 0 14 Dtool_nJyoSd41 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 ptr 1 3990  
1874 14 Dtool_nJyosD1_ 7 1462 4177 0 14 Dtool_nJyosD1_ 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 2 id 1 3970  3 tex 1 3965  8 priority 1 3889  
1875 14 Dtool_nJyoR_Ia 7 1462 4177 0 14 Dtool_nJyoR_Ia 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  3 tex 1 3965  
1876 14 Dtool_nJyoDQp5 7 1462 4177 0 14 Dtool_nJyoDQp5 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 2 id 1 3970  8 priority 1 3889  
1877 14 Dtool_nJyodFZ6 7 1462 4177 0 14 Dtool_nJyodFZ6 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 2 id 1 3970  
1878 14 Dtool_nJyoB963 7 1461 3994 0 14 Dtool_nJyoB963 371 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_blank
//       Access: Public, Static
//  Description: Returns a static ShaderInput object with
//               name NULL, priority zero, type INVALID, and
//               all value-fields cleared.
//////////////////////////////////////////////////////////////////// 0 
1879 14 Dtool_nJyo72k1 7 1464 3970 0 14 Dtool_nJyo72k1 221 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_name
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3994  
1880 14 Dtool_nJyo2Nv1 6 1465 3889 0 14 Dtool_nJyo2Nv1 227 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_value_type
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3994  
1881 14 Dtool_nJyovnas 6 1466 3889 0 14 Dtool_nJyovnas 225 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_priority
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3994  
1882 14 Dtool_nJyoB_Q3 7 1467 3965 0 14 Dtool_nJyoB_Q3 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_texture
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3994  
1883 14 Dtool_nJyonygk 6 1468 3950 0 14 Dtool_nJyonygk 225 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_nodepath
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3994  
1884 14 Dtool_nJyoXBST 6 1469 4178 0 14 Dtool_nJyoXBST 223 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_vector
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3994  
1885 14 Dtool_nJyoYJVa 6 1470 4181 0 14 Dtool_nJyoYJVa 220 ////////////////////////////////////////////////////////////////////
//     Function: ShaderInput::get_ptr
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3994  
1886 14 Dtool_nJyoIk03 7 1471 3896 0 14 Dtool_nJyoIk03 0 0 
1887 14 Dtool_nJyo56zk 7 1473 3901 0 14 Dtool_nJyo56zk 297 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object with nothing
//               set.
//////////////////////////////////////////////////////////////////// 0 
1888 14 Dtool_nJyoonB5 7 1474 3901 0 14 Dtool_nJyoonB5 383 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ShaderAttrib object that disables
//               the use of shaders (it does not clear out all shader
//               data, however.)
//////////////////////////////////////////////////////////////////// 0 
1889 14 Dtool_nJyoUka7 7 1475 3901 0 14 Dtool_nJyoUka7 399 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
1890 14 Dtool_nJyogTqm 6 1476 3866 0 14 Dtool_nJyogTqm 336 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::has_shader
//       Access: Published
//  Description: If true, the shader field of this attribute overrides
//               the shader field of the parent attribute.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1891 14 Dtool_nJyos1Xg 6 1477 3866 0 14 Dtool_nJyos1Xg 387 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_shader
//       Access: Published
//  Description: If true, then this ShaderAttrib does not contain an
//               explicit shader - instead, it requests the automatic
//               generation of a shader.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1892 14 Dtool_nJyoaasp 6 1478 3889 0 14 Dtool_nJyoaasp 233 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_priority
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1893 14 Dtool_nJyoht1f 6 1479 3889 0 14 Dtool_nJyoht1f 339 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_instance_count
//       Access: Published
//  Description: Returns the number of geometry instances. A value
//               of 0 means not to use instancing at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1894 14 Dtool_nJyo5AlN 6 1480 3866 0 14 Dtool_nJyo5AlN 239 //weifengh
////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_normal_on
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1895 14 Dtool_nJyoKnY9 6 1481 3866 0 14 Dtool_nJyoKnY9 226 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_glow_on
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1896 14 Dtool_nJyof28T 6 1482 3866 0 14 Dtool_nJyof28T 227 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_gloss_on
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1897 14 Dtool_nJyoNQj7 6 1483 3866 0 14 Dtool_nJyoNQj7 226 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_ramp_on
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1898 14 Dtool_nJyoFYxN 6 1484 3866 0 14 Dtool_nJyoFYxN 228 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::auto_shadow_on
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1899 14 Dtool_nJyoRCIc 7 1485 3901 0 14 Dtool_nJyoRCIc 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  1 s 1 3967  8 priority 1 3889  
1900 14 Dtool_nJyoeBO9 7 1485 3901 0 14 Dtool_nJyoeBO9 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  1 s 1 3967  
1901 14 Dtool_nJyovUho 7 1486 3901 0 14 Dtool_nJyovUho 228 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_off
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  8 priority 1 3889  
1902 14 Dtool_nJyoAR_j 7 1486 3901 0 14 Dtool_nJyoAR_j 228 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_off
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1903 14 Dtool_nJyoAZt_ 7 1487 3901 0 14 Dtool_nJyoAZt_ 323 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description: Set auto shader with bitmask to customize use,
//  e.g., to keep normal, glow, etc., on or off
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  13 shader_switch 1 3931  8 priority 1 3889  
1904 14 Dtool_nJyo8qPI 7 1487 3901 0 14 Dtool_nJyo8qPI 323 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description: Set auto shader with bitmask to customize use,
//  e.g., to keep normal, glow, etc., on or off
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  13 shader_switch 1 3931  
1905 14 Dtool_nJyoytdZ 7 1487 3901 0 14 Dtool_nJyoytdZ 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  8 priority 1 3889  
1906 14 Dtool_nJyodl0H 7 1487 3901 0 14 Dtool_nJyodl0H 229 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_auto
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1907 14 Dtool_nJyoROF5 7 1488 3901 0 14 Dtool_nJyoROF5 226 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1908 14 Dtool_nJyoSRMB 7 1489 3901 0 14 Dtool_nJyoSRMB 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3881  8 priority 1 3889  
1909 14 Dtool_nJyoRAgZ 7 1489 3901 0 14 Dtool_nJyoRAgZ 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3881  
1910 14 Dtool_nJyoSYaC 7 1489 3901 0 14 Dtool_nJyoSYaC 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3875  8 priority 1 3889  
1911 14 Dtool_nJyoRZua 7 1489 3901 0 14 Dtool_nJyoRZua 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3875  
1912 14 Dtool_nJyo_PRJ 7 1489 3901 0 14 Dtool_nJyo_PRJ 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3878  8 priority 1 3889  
1913 14 Dtool_nJyoJByS 7 1489 3901 0 14 Dtool_nJyoJByS 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3878  
1914 14 Dtool_nJyo_vSw 7 1489 3901 0 14 Dtool_nJyo_vSw 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3868  8 priority 1 3889  
1915 14 Dtool_nJyoJh25 7 1489 3901 0 14 Dtool_nJyoJh25 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3868  
1916 14 Dtool_nJyo_PWX 7 1489 3901 0 14 Dtool_nJyo_PWX 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3961  8 priority 1 3889  
1917 14 Dtool_nJyoKB5g 7 1489 3901 0 14 Dtool_nJyoKB5g 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3961  
1918 14 Dtool_nJyoMvHV 7 1489 3901 0 14 Dtool_nJyoMvHV 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  2 np 1 3950  8 priority 1 3889  
1919 14 Dtool_nJyoX65n 7 1489 3901 0 14 Dtool_nJyoX65n 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  2 np 1 3950  
1920 14 Dtool_nJyo4TCl 7 1489 3901 0 14 Dtool_nJyo4TCl 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3972  8 priority 1 3889  
1921 14 Dtool_nJyokqcu 7 1489 3901 0 14 Dtool_nJyokqcu 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3972  
1922 14 Dtool_nJyo_Ted 7 1489 3901 0 14 Dtool_nJyo_Ted 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3975  8 priority 1 3889  
1923 14 Dtool_nJyovq4m 7 1489 3901 0 14 Dtool_nJyovq4m 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3975  
1924 14 Dtool_nJyorKIL 7 1489 3901 0 14 Dtool_nJyorKIL 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3978  8 priority 1 3889  
1925 14 Dtool_nJyoHWS3 7 1489 3901 0 14 Dtool_nJyoHWS3 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3978  
1926 14 Dtool_nJyoP0IZ 7 1489 3901 0 14 Dtool_nJyoP0IZ 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3981  8 priority 1 3889  
1927 14 Dtool_nJyoiUSF 7 1489 3901 0 14 Dtool_nJyoiUSF 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3981  
1928 14 Dtool_nJyojxIn 7 1489 3901 0 14 Dtool_nJyojxIn 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3984  8 priority 1 3889  
1929 14 Dtool_nJyoObST 7 1489 3901 0 14 Dtool_nJyoObST 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3984  
1930 14 Dtool_nJyoSUw7 7 1489 3901 0 14 Dtool_nJyoSUw7 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3987  8 priority 1 3889  
1931 14 Dtool_nJyoynK_ 7 1489 3901 0 14 Dtool_nJyoynK_ 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3987  
1932 14 Dtool_nJyoHDMb 7 1489 3901 0 14 Dtool_nJyoHDMb 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  1 v 1 3990  8 priority 1 3889  
1933 14 Dtool_nJyoFTSx 7 1489 3901 0 14 Dtool_nJyoFTSx 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  1 v 1 3990  
1934 14 Dtool_nJyokUJP 7 1489 3901 0 14 Dtool_nJyokUJP 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  3 tex 1 3965  8 priority 1 3889  
1935 14 Dtool_nJyogUdn 7 1489 3901 0 14 Dtool_nJyogUdn 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  3 tex 1 3965  
1936 14 Dtool_nJyoo_Ew 7 1489 3901 0 14 Dtool_nJyoo_Ew 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 7 4 this 3 4184  2 id 1 3970  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  2 n4 1 3993  8 priority 1 3889  
1937 14 Dtool_nJyoeWWI 7 1489 3901 0 14 Dtool_nJyoeWWI 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 6 4 this 3 4184  2 id 1 3970  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  2 n4 1 3993  
1938 14 Dtool_nJyoxqNG 7 1489 3901 0 14 Dtool_nJyoxqNG 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 5 4 this 3 4184  2 id 1 3970  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  
1939 14 Dtool_nJyoM4hV 7 1489 3901 0 14 Dtool_nJyoM4hV 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3970  2 n1 1 3993  2 n2 1 3993  
1940 14 Dtool_nJyosBRn 7 1489 3901 0 14 Dtool_nJyosBRn 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3970  2 n1 1 3993  
1941 14 Dtool_nJyog0Hl 7 1489 3901 0 14 Dtool_nJyog0Hl 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3970  
1942 14 Dtool_nJyos2JU 7 1489 3901 0 14 Dtool_nJyos2JU 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  3 inp 1 3994  
1943 14 Dtool_nJyotqN0 7 1489 3901 0 14 Dtool_nJyotqN0 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3881  8 priority 1 3889  
1944 14 Dtool_nJyoCjPH 7 1489 3901 0 14 Dtool_nJyoCjPH 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3881  
1945 14 Dtool_nJyoTqUC 7 1489 3901 0 14 Dtool_nJyoTqUC 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3875  8 priority 1 3889  
1946 14 Dtool_nJyoDjWV 7 1489 3901 0 14 Dtool_nJyoDjWV 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3875  
1947 14 Dtool_nJyoeBX5 7 1489 3901 0 14 Dtool_nJyoeBX5 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3878  8 priority 1 3889  
1948 14 Dtool_nJyoQEba 7 1489 3901 0 14 Dtool_nJyoQEba 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3878  
1949 14 Dtool_nJyoHA38 7 1489 3901 0 14 Dtool_nJyoHA38 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3868  8 priority 1 3889  
1950 14 Dtool_nJyoJH7d 7 1489 3901 0 14 Dtool_nJyoJH7d 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3868  
1951 14 Dtool_nJyomNWA 7 1489 3901 0 14 Dtool_nJyomNWA 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3961  8 priority 1 3889  
1952 14 Dtool_nJyomHbh 7 1489 3901 0 14 Dtool_nJyomHbh 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3961  
1953 14 Dtool_nJyoqZJv 7 1489 3901 0 14 Dtool_nJyoqZJv 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  2 np 1 3950  8 priority 1 3889  
1954 14 Dtool_nJyokLvf 7 1489 3901 0 14 Dtool_nJyokLvf 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  2 np 1 3950  
1955 14 Dtool_nJyoX4Dt 7 1489 3901 0 14 Dtool_nJyoX4Dt 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3972  8 priority 1 3889  
1956 14 Dtool_nJyoEpXF 7 1489 3901 0 14 Dtool_nJyoEpXF 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3972  
1957 14 Dtool_nJyoQ_DJ 7 1489 3901 0 14 Dtool_nJyoQ_DJ 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3975  8 priority 1 3889  
1958 14 Dtool_nJyoMsXh 7 1489 3901 0 14 Dtool_nJyoMsXh 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3975  
1959 14 Dtool_nJyo_vEy 7 1489 3901 0 14 Dtool_nJyo_vEy 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3978  8 priority 1 3889  
1960 14 Dtool_nJyo5Om7 7 1489 3901 0 14 Dtool_nJyo5Om7 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3978  
1961 14 Dtool_nJyohDHy 7 1489 3901 0 14 Dtool_nJyohDHy 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3981  8 priority 1 3889  
1962 14 Dtool_nJyo3io7 7 1489 3901 0 14 Dtool_nJyo3io7 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3981  
1963 14 Dtool_nJyoTnJy 7 1489 3901 0 14 Dtool_nJyoTnJy 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3984  8 priority 1 3889  
1964 14 Dtool_nJyoFGt7 7 1489 3901 0 14 Dtool_nJyoFGt7 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3984  
1965 14 Dtool_nJyoI_3a 7 1489 3901 0 14 Dtool_nJyoI_3a 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3987  8 priority 1 3889  
1966 14 Dtool_nJyoFYKz 7 1489 3901 0 14 Dtool_nJyoFYKz 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3987  
1967 14 Dtool_nJyoGCk1 7 1489 3901 0 14 Dtool_nJyoGCk1 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  1 v 1 3990  8 priority 1 3889  
1968 14 Dtool_nJyoLQX6 7 1489 3901 0 14 Dtool_nJyoLQX6 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  1 v 1 3990  
1969 14 Dtool_nJyof_Sw 7 1489 3901 0 14 Dtool_nJyof_Sw 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  3 tex 1 3965  8 priority 1 3889  
1970 14 Dtool_nJyo4EVD 7 1489 3901 0 14 Dtool_nJyo4EVD 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  3 tex 1 3965  
1971 14 Dtool_nJyoU6dv 7 1489 3901 0 14 Dtool_nJyoU6dv 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 7 4 this 3 4184  2 id 1 3924  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  2 n4 1 3993  8 priority 1 3889  
1972 14 Dtool_nJyoECpA 7 1489 3901 0 14 Dtool_nJyoECpA 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 6 4 this 3 4184  2 id 1 3924  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  2 n4 1 3993  
1973 14 Dtool_nJyoPoh0 7 1489 3901 0 14 Dtool_nJyoPoh0 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 5 4 this 3 4184  2 id 1 3924  2 n1 1 3993  2 n2 1 3993  2 n3 1 3993  
1974 14 Dtool_nJyofZ9I 7 1489 3901 0 14 Dtool_nJyofZ9I 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 4184  2 id 1 3924  2 n1 1 3993  2 n2 1 3993  
1975 14 Dtool_nJyo__c4 7 1489 3901 0 14 Dtool_nJyo__c4 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  2 id 1 3924  2 n1 1 3993  
1976 14 Dtool_nJyo7TTs 7 1489 3901 0 14 Dtool_nJyo7TTs 230 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3924  
1977 14 Dtool_nJyodxLU 7 1490 3901 0 14 Dtool_nJyodxLU 475 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_instance_count
//       Access: Published
//  Description: Sets the geometry instance count. Do not confuse
//               this with instanceTo, which is used for animation
//               instancing, and has nothing to do with this.
//               A value of 0 means not to use instancing at all.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  14 instance_count 1 3889  
1978 14 Dtool_nJyoiWwU 7 1491 3901 0 14 Dtool_nJyoiWwU 222 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::set_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 4184  4 flag 1 3889  5 value 1 3866  
1979 14 Dtool_nJyoNhAi 7 1492 3901 0 14 Dtool_nJyoNhAi 224 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  4 flag 1 3889  
1980 14 Dtool_nJyoQ9Oa 7 1493 3901 0 14 Dtool_nJyoQ9Oa 232 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3970  
1981 14 Dtool_nJyoxmfl 7 1493 3901 0 14 Dtool_nJyoxmfl 232 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_shader_input
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3924  
1982 14 Dtool_nJyo8KLn 7 1494 3901 0 14 Dtool_nJyo8KLn 280 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::clear_all_shader_inputs
//       Access: Published
//  Description: Clears all the shader inputs on the attrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1983 14 Dtool_nJyowD4v 6 1495 3866 0 14 Dtool_nJyowD4v 222 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_flag
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  4 flag 1 3889  
1984 14 Dtool_nJyo9RI8 7 1496 3967 0 14 Dtool_nJyo9RI8 444 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader
//       Access: Published
//  Description: Returns the shader object associated with the node.
//               If get_override returns true, but get_shader 
//               returns NULL, that means that this attribute should
//               disable the shader.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4184  
1985 14 Dtool_nJyoVpDl 7 1497 3994 0 14 Dtool_nJyoVpDl 408 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3970  
1986 14 Dtool_nJyoslPs 7 1497 3994 0 14 Dtool_nJyoslPs 408 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input
//       Access: Published
//  Description: Returns the ShaderInput of the given name.  If
//               no such name is found, this function does not return
//               NULL --- it returns the "blank" ShaderInput.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3924  
1987 14 Dtool_nJyoMQ9_ 6 1498 3950 0 14 Dtool_nJyoMQ9_ 358 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_nodepath
//       Access: Published
//  Description: Returns the ShaderInput as a nodepath.  Assertion 
//               fails if there is none, or if it is not a nodepath.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3970  
1988 14 Dtool_nJyoZy3W 6 1499 4178 0 14 Dtool_nJyoZy3W 352 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_vector
//       Access: Published
//  Description: Returns the ShaderInput as a vector.  Assertion 
//               fails if there is none, or if it is not a vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3970  
1989 14 Dtool_nJyo3I3j 7 1500 3965 0 14 Dtool_nJyo3I3j 355 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_texture
//       Access: Published
//  Description: Returns the ShaderInput as a texture.  Assertion 
//               fails if there is none, or if it is not a texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3970  
1990 14 Dtool_nJyouyHA 6 1501 4181 0 14 Dtool_nJyouyHA 390 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::get_shader_input_ptr
//       Access: Published
//  Description: Returns the ShaderInput as a ShaderPtrData struct. 
//               Assertion fails if there is none. or if it is not 
//               a PTA(double/float)
//////////////////////////////////////////////////////////////////// 2 4 this 3 4184  2 id 1 3970  
1991 14 Dtool_nJyoFVkO 4 1502 3890 0 14 Dtool_nJyoFVkO 287 ////////////////////////////////////////////////////////////////////
//     Function: ShaderAttrib::register_with_read_factory
//       Access: Public, Static
//  Description: Factory method to generate a Shader object
//////////////////////////////////////////////////////////////////// 0 
1992 14 Dtool_nJyoZXKV 6 1503 3889 0 14 Dtool_nJyoZXKV 0 0 
1993 14 Dtool_nJyog_gT 7 1504 3896 0 14 Dtool_nJyog_gT 0 0 
1994 14 Dtool_nJyoZA7W 7 1507 3920 0 14 Dtool_nJyoZA7W 271 ////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::make
//       Access: Published, Static
//  Description: Constructs a new ShowBoundsEffect object.
//////////////////////////////////////////////////////////////////// 1 5 tight 1 3866  
1995 14 Dtool_nJyo9fNi 7 1507 3920 0 14 Dtool_nJyo9fNi 271 ////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::make
//       Access: Published, Static
//  Description: Constructs a new ShowBoundsEffect object.
//////////////////////////////////////////////////////////////////// 0 
1996 14 Dtool_nJyow6EW 6 1508 3866 0 14 Dtool_nJyow6EW 404 ////////////////////////////////////////////////////////////////////
//     Function: ShowBoundsEffect::get_tight
//       Access: Published
//  Description: Returns true if the "tight" flag was set, meaning the
//               effect should compute and draw the tight bounding-box
//               of the node's vertices every frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4186  
1997 14 Dtool_nJyo6KHB 7 1509 3896 0 14 Dtool_nJyo6KHB 0 0 
1998 14 Dtool_nJyoDEqP 7 1512 3920 0 14 Dtool_nJyoDEqP 312 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::make
//       Access: Published, Static
//  Description: Constructs a TexProjectorEffect that modifies
//               no stages at all.
//////////////////////////////////////////////////////////////////// 0 
1999 14 Dtool_nJyohiLA 7 1513 3920 0 14 Dtool_nJyohiLA 800 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::add_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated projection for the given stage.
//               If this stage already exists, its projection
//               definition is replaced.
//
//               The relative transform between the "from" and the
//               "to" nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.
//////////////////////////////////////////////////////////////////// 4 4 this 3 4188  5 stage 1 3906  4 from 1 3950  2 to 1 3950  
2000 14 Dtool_nJyoA6h1 7 1514 3920 0 14 Dtool_nJyoA6h1 343 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::remove_stage
//       Access: Published, Static
//  Description: Returns a new TexProjectorEffect just like this one,
//               with the indicated stage removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4188  5 stage 1 3906  
2001 14 Dtool_nJyomEHy 6 1515 3866 0 14 Dtool_nJyomEHy 335 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::is_empty
//       Access: Published
//  Description: Returns true if no stages are defined in the
//               TexProjectorEffect, false if at least one is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4188  
2002 14 Dtool_nJyogRPz 6 1516 3866 0 14 Dtool_nJyogRPz 445 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::has_stage
//       Access: Published
//  Description: Returns true if there is a transform associated with
//               the indicated stage, or false otherwise (in which
//               case get_transform(stage) will return the identity
//               transform).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4188  5 stage 1 3906  
2003 14 Dtool_nJyoKzra 7 1517 3949 2863 14 Dtool_nJyoKzra 506 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_from
//       Access: Published
//  Description: Returns the "from" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4188  5 stage 1 3906  
2004 14 Dtool_nJyoM8Eo 7 1518 3949 2863 14 Dtool_nJyoM8Eo 665 ////////////////////////////////////////////////////////////////////
//     Function: TexProjectorEffect::get_to
//       Access: Published
//  Description: Returns the "to" node associated with the
//               TexProjectorEffect on the indicated stage.  The
//               relative transform between the "from" and the "to"
//               nodes is automatically applied to the texture
//               transform each frame.
//
//               Furthermore, if the "to" node is a LensNode, its
//               projection matrix is also applied to the texture
//               transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4188  5 stage 1 3906  
2005 14 Dtool_nJyoC85_ 7 1519 3896 0 14 Dtool_nJyoC85_ 0 0 
2006 14 Dtool_nJyoYr7Q 7 1521 3920 0 14 Dtool_nJyoYr7Q 420 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_screen
//       Access: Published, Static
//  Description: Constructs a new screen-relative ScissorEffect.  The
//               frame defines a left, right, bottom, top region,
//               relative to the DisplayRegion.  See ScissorAttrib.
//////////////////////////////////////////////////////////////////// 2 5 frame 1 3961  4 clip 1 3866  
2007 14 Dtool_nJyoPbvI 7 1521 3920 0 14 Dtool_nJyoPbvI 420 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_screen
//       Access: Published, Static
//  Description: Constructs a new screen-relative ScissorEffect.  The
//               frame defines a left, right, bottom, top region,
//               relative to the DisplayRegion.  See ScissorAttrib.
//////////////////////////////////////////////////////////////////// 1 5 frame 1 3961  
2008 14 Dtool_nJyoBQmx 7 1522 3920 0 14 Dtool_nJyoBQmx 529 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               four points are understood to be relative to the
//               indicated node, or the current node if the indicated
//               NodePath is empty, and determine four points
//               surrounding the scissor region.
//////////////////////////////////////////////////////////////////// 5 1 a 1 3884  1 b 1 3884  1 c 1 3884  1 d 1 3884  4 node 1 3950  
2009 14 Dtool_nJyokBew 7 1522 3920 0 14 Dtool_nJyokBew 529 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               four points are understood to be relative to the
//               indicated node, or the current node if the indicated
//               NodePath is empty, and determine four points
//               surrounding the scissor region.
//////////////////////////////////////////////////////////////////// 4 1 a 1 3884  1 b 1 3884  1 c 1 3884  1 d 1 3884  
2010 14 Dtool_nJyoADC1 7 1522 3920 0 14 Dtool_nJyoADC1 529 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               two points are understood to be relative to the
//               indicated node, or the current node if the NodePath
//               is empty, and determine the diagonally opposite
//               corners of the scissor region.
//////////////////////////////////////////////////////////////////// 3 1 a 1 3884  1 b 1 3884  4 node 1 3950  
2011 14 Dtool_nJyowb_A 7 1522 3920 0 14 Dtool_nJyowb_A 529 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect.  The
//               two points are understood to be relative to the
//               indicated node, or the current node if the NodePath
//               is empty, and determine the diagonally opposite
//               corners of the scissor region.
//////////////////////////////////////////////////////////////////// 2 1 a 1 3884  1 b 1 3884  
2012 14 Dtool_nJyo6X0q 7 1522 3920 0 14 Dtool_nJyo6X0q 463 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect, with no
//               points.  This empty ScissorEffect does nothing.  You
//               must then call add_point a number of times to add the
//               points you require.
//////////////////////////////////////////////////////////////////// 1 4 clip 1 3866  
2013 14 Dtool_nJyo_UsN 7 1522 3920 0 14 Dtool_nJyo_UsN 463 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::make_node
//       Access: Published, Static
//  Description: Constructs a new node-relative ScissorEffect, with no
//               points.  This empty ScissorEffect does nothing.  You
//               must then call add_point a number of times to add the
//               points you require.
//////////////////////////////////////////////////////////////////// 0 
2014 14 Dtool_nJyow2IL 7 1523 3920 0 14 Dtool_nJyow2IL 628 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::add_point
//       Access: Published
//  Description: Returns a new ScissorEffect with the indicated point
//               added.  It is only valid to call this on a "node"
//               type ScissorEffect.  The full set of points,
//               projected into screen space, defines the bounding
//               volume of the rectangular scissor region.
//
//               Each point may be relative to a different node, if
//               desired.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4190  5 point 1 3884  4 node 1 3950  
2015 14 Dtool_nJyoefqt 7 1523 3920 0 14 Dtool_nJyoefqt 628 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::add_point
//       Access: Published
//  Description: Returns a new ScissorEffect with the indicated point
//               added.  It is only valid to call this on a "node"
//               type ScissorEffect.  The full set of points,
//               projected into screen space, defines the bounding
//               volume of the rectangular scissor region.
//
//               Each point may be relative to a different node, if
//               desired.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4190  5 point 1 3884  
2016 14 Dtool_nJyodO6I 6 1524 3866 0 14 Dtool_nJyodO6I 882 // Filename: scissorEffect.I
// Created by:  drose (30Jul08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::is_screen
//       Access: Published
//  Description: Returns true if the ScissorEffect is a screen-based
//               effect, meaning get_frame() has a meaningful value,
//               but get_a() and get_b() do not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4190  
2017 14 Dtool_nJyozaVH 6 1525 3961 0 14 Dtool_nJyozaVH 524 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_frame
//       Access: Published
//  Description: If is_screen() returns true, this method may be
//               called to query the screen-based scissor frame.  This
//               is a series of left, right, bottom, top, representing
//               the scissor frame relative to the current
//               DisplayRegion.  See ScissorAttrib.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4190  
2018 14 Dtool_nJyo8Mg5 6 1526 3889 0 14 Dtool_nJyo8Mg5 312 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_num_points
//       Access: Published
//  Description: Returns the number of node-based scissor points.  See
//               get_point().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4190  
2019 14 Dtool_nJyoxp5n 6 1527 3884 0 14 Dtool_nJyoxp5n 582 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_point
//       Access: Published
//  Description: If is_screen() returns false, then get_num_points() and
//               get_point() may be called to query the node-based scissor
//               frame.  These return n points (at least two), which
//               are understood to be in the space of this node, and
//               which define any opposite corners of the scissor
//               frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4190  1 n 1 3889  
2020 14 Dtool_nJyoZ09A 7 1528 3949 2863 14 Dtool_nJyoZ09A 340 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_node
//       Access: Published
//  Description: Returns the node to which the nth point is relative,
//               or empty NodePath to indicate the current node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4190  1 n 1 3889  
2021 14 Dtool_nJyofGSb 6 1529 3866 0 14 Dtool_nJyofGSb 330 ////////////////////////////////////////////////////////////////////
//     Function: ScissorEffect::get_clip
//       Access: Published
//  Description: Returns true if this ScissorEffect actually enables
//               scissoring, or false if it culls only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4190  
2022 14 Dtool_nJyoMP4I 7 1530 3896 0 14 Dtool_nJyoMP4I 0 0 
2023 14 Dtool_nJyo35FV 7 1533 4192 3600 14 Dtool_nJyo35FV 722 // Filename: sceneGraphReducer.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 gsg 1 3932  
2024 14 Dtool_nJyoZ4fC 7 1533 4192 3600 14 Dtool_nJyoZ4fC 722 // Filename: sceneGraphReducer.I
// Created by:  drose (14Mar02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2025 14 Dtool_nJyoeKDE 4 1539 3890 0 14 Dtool_nJyoeKDE 664 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::set_gsg
//       Access: Published
//  Description: Specifies the particular GraphicsStateGuardian that
//               this object will attempt to optimize to.  The GSG may
//               specify parameters such as maximum number of vertices
//               per vertex data, max number of vertices per
//               primitive, and whether triangle strips are preferred.
//               It also affects the types of vertex column data that
//               is created by premunge().
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  3 gsg 1 3932  
2026 14 Dtool_nJyogV3J 4 1540 3890 0 14 Dtool_nJyogV3J 480 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::clear_gsg
//       Access: Published
//  Description: Specifies that no particular GraphicsStateGuardian
//               will be used to guide the optimization.  The
//               SceneGraphReducer will instead use config variables
//               such as max-collect-vertices and max-collect-indices.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4192  
2027 14 Dtool_nJyogCJ8 7 1541 3932 0 14 Dtool_nJyogCJ8 366 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::get_gsg
//       Access: Published
//  Description: Returns the particular GraphicsStateGuardian that
//               this object will attempt to optimize to. 
//               See set_gsg().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4193  
2028 14 Dtool_nJyoLWXy 4 1542 3890 0 14 Dtool_nJyoLWXy 757 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::set_combine_radius
//       Access: Published
//  Description: Specifies the radius that is used in conjunction with
//               CS_within_radius to decide whether a subgraph's
//               siblings should be combined into a single node or
//               not.
//
//               If the CS_within_radius bit is included in the
//               combine_siblings_bits parameter passed to flatten,
//               than any nodes whose bounding volume is smaller than
//               the indicated radius will be combined together (as if
//               CS_other were set).
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  14 combine_radius 1 3874  
2029 14 Dtool_nJyonG9A 6 1543 3874 0 14 Dtool_nJyonG9A 350 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::get_combine_radius
//       Access: Published
//  Description: Returns the radius that is used in conjunction with
//               CS_within_radius.  See set_combine_radius().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4193  
2030 14 Dtool_nJyo8UjV 4 1544 3890 0 14 Dtool_nJyo8UjV 524 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: This flavor of apply_attribs() can be called
//               recursively from within another flatten process
//               (e.g. from PandaNode::apply_attribs_to_vertices()).
//               The parameters were presumably received from a parent
//               SceneGraphReducer object.
//////////////////////////////////////////////////////////////////// 5 4 this 3 4192  4 node 1 3925  7 attribs 1 4195  12 attrib_types 1 3889  11 transformer 1 4198  
2031 14 Dtool_nJyoTFiF 4 1544 3890 0 14 Dtool_nJyoTFiF 883 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: Walks the scene graph, accumulating attribs of
//               the indicated types, applying them to the vertices,
//               and removing them from the scene graph.  This has a
//               performance optimization benefit in itself, but is
//               especially useful to pave the way for a call to
//               flatten() and greatly improve the effectiveness of
//               the flattening operation.
//
//               Multiply instanced geometry is duplicated before the
//               attribs are applied.
//
//               Of course, this operation does make certain dynamic
//               operations impossible.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4192  4 node 1 3925  12 attrib_types 1 3889  
2032 14 Dtool_nJyoVc_G 4 1544 3890 0 14 Dtool_nJyoVc_G 883 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::apply_attribs
//       Access: Published
//  Description: Walks the scene graph, accumulating attribs of
//               the indicated types, applying them to the vertices,
//               and removing them from the scene graph.  This has a
//               performance optimization benefit in itself, but is
//               especially useful to pave the way for a call to
//               flatten() and greatly improve the effectiveness of
//               the flattening operation.
//
//               Multiply instanced geometry is duplicated before the
//               attribs are applied.
//
//               Of course, this operation does make certain dynamic
//               operations impossible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  4 node 1 3925  
2033 14 Dtool_nJyo_6fT 6 1545 3889 0 14 Dtool_nJyo_6fT 940 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::flatten
//       Access: Published
//  Description: Simplifies the graph by removing unnecessary nodes
//               and nodes.
//
//               In general, a node (and its parent node) is a
//               candidate for removal if the node has no siblings and
//               the node has no special properties.
//
//               If combine_siblings_bits is nonzero, some sibling
//               nodes (according to the bits set in
//               combine_siblings_bits) may also be collapsed into a
//               single node.  This will further reduce scene graph
//               complexity, sometimes substantially, at the cost of
//               reduced spatial separation.
//
//               Returns the number of nodes removed from the graph.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4192  4 root 1 3925  21 combine_siblings_bits 1 3889  
2034 14 Dtool_nJyosSFD 6 1546 3889 0 14 Dtool_nJyosSFD 406 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::remove_column
//       Access: Published
//  Description: Removes the indicated data column from any
//               GeomVertexDatas found at the indicated root and
//               below.  Returns the number of GeomNodes modified.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4192  4 root 1 3925  6 column 1 3996  
2035 14 Dtool_nJyo0hLU 6 1547 3889 0 14 Dtool_nJyo0hLU 542 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_compatible_state
//       Access: Published
//  Description: Searches for GeomNodes that contain multiple Geoms
//               that differ only in their ColorAttribs.  If such a
//               GeomNode is found, then all the colors are pushed
//               down into the vertices.  This makes it feasible for
//               the geoms to be unified later.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  4 root 1 3925  
2036 14 Dtool_nJyoYpIW 6 1548 3889 0 14 Dtool_nJyoYpIW 1154 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_compatible_format
//       Access: Published
//  Description: Walks through the tree at this node and below and
//               unifies the GeomVertexFormat for any GeomVertexData
//               objects that are found, so that all eligible vdatas
//               (according to collect_bits; see collect_vertex_data)
//               will share the same vertex format.
//
//               This will add unused columns where necessary to match
//               formats.  It can result in suboptimal performance if
//               used needlessly.
//
//               There is usually no reason to call this explicitly,
//               since collect_vertex_data() will do this anyway if it
//               has not been done already.  However, calling it ahead
//               of time can make that future call to
//               collect_vertex_data() run a little bit faster.
//
//               The return value is the number of vertex datas
//               modified.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4192  4 root 1 3925  12 collect_bits 1 3889  
2037 14 Dtool_nJyoDCUG 6 1548 3889 0 14 Dtool_nJyoDCUG 1154 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_compatible_format
//       Access: Published
//  Description: Walks through the tree at this node and below and
//               unifies the GeomVertexFormat for any GeomVertexData
//               objects that are found, so that all eligible vdatas
//               (according to collect_bits; see collect_vertex_data)
//               will share the same vertex format.
//
//               This will add unused columns where necessary to match
//               formats.  It can result in suboptimal performance if
//               used needlessly.
//
//               There is usually no reason to call this explicitly,
//               since collect_vertex_data() will do this anyway if it
//               has not been done already.  However, calling it ahead
//               of time can make that future call to
//               collect_vertex_data() run a little bit faster.
//
//               The return value is the number of vertex datas
//               modified.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  4 root 1 3925  
2038 14 Dtool_nJyonM_2 4 1549 3890 0 14 Dtool_nJyonM_2 716 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::decompose
//       Access: Published
//  Description: Calls decompose() on every GeomNode at this level and
//               below.
//
//               There is usually no reason to call this explicitly,
//               since unify() will do this anyway if it needs to be
//               done.  However, calling it ahead of time can make
//               that future call to unify() run a little bit faster.
//
//               This operation has no effect if the config variable
//               preserve-triangle-strips has been set true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  4 root 1 3925  
2039 14 Dtool_nJyoO4J5 6 1550 3889 0 14 Dtool_nJyoO4J5 955 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::collect_vertex_data
//       Access: Published
//  Description: Collects all different GeomVertexData blocks that
//               have compatible formats at this node and below into a
//               single, unified block (or at least multiple larger
//               blocks).  This is intended to reduce rendering
//               overhead incurred by switching vertex buffers.  It
//               can also make a subsequent call to unify() much more
//               effective than it would have been otherwise.
//
//               The set of bits passed in collect_bits indicates
//               which properties are used to differentiate
//               GeomVertexData blocks.  If it is 0, then more blocks
//               will be combined together than if it is nonzero.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4192  4 root 1 3925  12 collect_bits 1 3889  
2040 14 Dtool_nJyonPcT 6 1550 3889 0 14 Dtool_nJyonPcT 955 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::collect_vertex_data
//       Access: Published
//  Description: Collects all different GeomVertexData blocks that
//               have compatible formats at this node and below into a
//               single, unified block (or at least multiple larger
//               blocks).  This is intended to reduce rendering
//               overhead incurred by switching vertex buffers.  It
//               can also make a subsequent call to unify() much more
//               effective than it would have been otherwise.
//
//               The set of bits passed in collect_bits indicates
//               which properties are used to differentiate
//               GeomVertexData blocks.  If it is 0, then more blocks
//               will be combined together than if it is nonzero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  4 root 1 3925  
2041 14 Dtool_nJyoqC3R 6 1551 3889 0 14 Dtool_nJyoqC3R 604 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_nonindexed
//       Access: Published
//  Description: Converts indexed geometry to nonindexed geometry at
//               the indicated node and below, by duplicating vertices
//               where necessary.  The parameter nonindexed_bits is a
//               union of bits defined in
//               SceneGraphReducer::MakeNonindexed, which specifes
//               which types of geometry to avoid making nonindexed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4192  4 root 1 3925  15 nonindexed_bits 1 3889  
2042 14 Dtool_nJyoITX2 6 1551 3889 0 14 Dtool_nJyoITX2 604 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::make_nonindexed
//       Access: Published
//  Description: Converts indexed geometry to nonindexed geometry at
//               the indicated node and below, by duplicating vertices
//               where necessary.  The parameter nonindexed_bits is a
//               union of bits defined in
//               SceneGraphReducer::MakeNonindexed, which specifes
//               which types of geometry to avoid making nonindexed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  4 root 1 3925  
2043 14 Dtool_nJyovm1Y 4 1552 3890 0 14 Dtool_nJyovm1Y 499 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::unify
//       Access: Published
//  Description: Calls unify() on every GeomNode at this level and
//               below.  This attempts to reduce the total number of
//               individual Geoms and GeomPrimitives by combining
//               these objects wherever possible.  See
//               GeomNode::unify().
//////////////////////////////////////////////////////////////////// 3 4 this 3 4192  4 root 1 3925  14 preserve_order 1 3866  
2044 14 Dtool_nJyoJFO9 4 1553 3890 0 14 Dtool_nJyoJFO9 579 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::remove_unused_vertices
//       Access: Published
//  Description: Removes any vertices in GeomVertexDatas that are no
//               longer used at this level and below.  This requires
//               remapping vertex indices in all of the
//               GeomPrimitives, to remove holes in the
//               GeomVertexDatas.  It is normally not necessary to
//               call this explicitly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  4 root 1 3925  
2045 14 Dtool_nJyovpNB 4 1554 3890 0 14 Dtool_nJyovpNB 609 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::premunge
//       Access: Published
//  Description: Walks the scene graph rooted at this node and below,
//               and uses the indicated GSG to premunge every Geom
//               found to optimize it for eventual rendering on the
//               indicated GSG.  If there is no GSG indicated for the
//               SceneGraphReducer, this is a no-op.
//
//               This operation will also apply to stashed children.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4192  4 root 1 3925  13 initial_state 1 3910  
2046 14 Dtool_nJyo_7dE 6 1555 3866 0 14 Dtool_nJyo_7dE 672 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphReducer::check_live_flatten
//       Access: Published
//  Description: In a non-release build, returns false if the node is
//               correctly not in a live scene graph.  (Calling
//               flatten on a node that is part of a live scene graph,
//               for instance, a node somewhere under render, can
//               cause problems in a multithreaded environment.)
//
//               If allow_live_flatten is true, or in a release build,
//               this always returns true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4192  4 node 1 3925  
2047 14 Dtool_nJyoxpnH 7 1557 4001 3620 14 Dtool_nJyoxpnH 234 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2048 14 Dtool_nJyoWv2z 7 1557 4001 3620 14 Dtool_nJyoWv2z 239 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 4200  
2049 14 Dtool_nJyoNQDB 6 1558 4001 0 14 Dtool_nJyoNQDB 247 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 4001  4 copy 1 4200  
2050 14 Dtool_nJyoGIjY 4 1560 3890 0 14 Dtool_nJyoGIjY 283 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stage
//       Access: Published
//  Description: Adds a new TextureStage to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4001  18 node_texture_stage 1 3906  
2051 14 Dtool_nJyoZ9r9 6 1561 3866 0 14 Dtool_nJyoZ9r9 428 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stage
//       Access: Published
//  Description: Removes the indicated TextureStage from the collection.
//               Returns true if the texture_stage was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4001  18 node_texture_stage 1 3906  
2052 14 Dtool_nJyoVfWB 4 1562 3890 0 14 Dtool_nJyoVfWB 516 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::add_texture_stages_from
//       Access: Published
//  Description: Adds all the TextureStages indicated in the other
//               collection to this texture_stage.  The other texture_stages are simply
//               appended to the end of the texture_stages in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4001  5 other 1 4200  
2053 14 Dtool_nJyo8M8q 4 1563 3890 0 14 Dtool_nJyo8M8q 352 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_texture_stages_from
//       Access: Published
//  Description: Removes from this collection all of the TextureStages
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4001  5 other 1 4200  
2054 14 Dtool_nJyorJqC 4 1564 3890 0 14 Dtool_nJyorJqC 494 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::remove_duplicate_texture_stages
//       Access: Published
//  Description: Removes any duplicate entries of the same TextureStages
//               on this collection.  If a TextureStage appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4001  
2055 14 Dtool_nJyoXvY1 6 1565 3866 0 14 Dtool_nJyoXvY1 345 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::has_texture_stage
//       Access: Published
//  Description: Returns true if the indicated TextureStage appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4200  13 texture_stage 1 3906  
2056 14 Dtool_nJyoT2Xf 4 1566 3890 0 14 Dtool_nJyoT2Xf 275 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::clear
//       Access: Published
//  Description: Removes all TextureStages from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4001  
2057 14 Dtool_nJyo_5YH 7 1567 3906 0 14 Dtool_nJyo_5YH 395 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::find_texture_stage
//       Access: Published
//  Description: Returns the texture_stage in the collection with the
//               indicated name, if any, or NULL if no texture_stage has
//               that name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4200  4 name 1 3924  
2058 14 Dtool_nJyotfCs 6 1568 3889 0 14 Dtool_nJyotfCs 300 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_num_texture_stages
//       Access: Published
//  Description: Returns the number of TextureStages in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4200  
2059 14 Dtool_nJyo9Uz2 7 1569 3906 0 14 Dtool_nJyo9Uz2 288 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::get_texture_stage
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4200  5 index 1 3889  
2060 14 Dtool_nJyo5fT7 7 1570 3906 0 14 Dtool_nJyo5fT7 408 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::operator []
//       Access: Published
//  Description: Returns the nth TextureStage in the collection.  This is
//               the same as get_texture_stage(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4200  5 index 1 3889  
2061 14 Dtool_nJyoVONJ 6 1571 3889 0 14 Dtool_nJyoVONJ 370 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::size
//       Access: Published
//  Description: Returns the number of texture stages in the
//               collection.  This is the same thing as
//               get_num_texture_stages().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4200  
2062 14 Dtool_nJyobCnW 6 1572 4001 0 14 Dtool_nJyobCnW 283 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4001  5 other 1 4200  
2063 14 Dtool_nJyoA0eG 7 1573 4001 3620 14 Dtool_nJyoA0eG 332 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::operator +
//       Access: Published
//  Description: Returns a TextureStageCollection representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4200  5 other 1 4200  
2064 14 Dtool_nJyolg51 4 1574 3890 0 14 Dtool_nJyolg51 347 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::sort
//       Access: Published
//  Description: Sorts the TextureStages in this collection into order
//               by TextureStage::sort(), from lowest to highest.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4001  
2065 14 Dtool_nJyoI4CN 4 1575 3890 0 14 Dtool_nJyoI4CN 344 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               TextureStageCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4200  3 out 1 3893  
2066 14 Dtool_nJyo5JdN 4 1576 3890 0 14 Dtool_nJyo5JdN 348 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureStageCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 4200  3 out 1 3893  12 indent_level 1 3889  
2067 14 Dtool_nJyoqJju 4 1576 3890 0 14 Dtool_nJyoqJju 348 ////////////////////////////////////////////////////////////////////
//     Function: TextureStageCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               TextureStageCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4200  3 out 1 3893  
2068 14 Dtool_nJyoV2Ej 7 1579 4202 0 14 Dtool_nJyoV2Ej 0 3 2 np 1 3949  5 start 1 3953  3 end 1 3953  
2069 14 Dtool_nJyonzZ1 7 1579 4202 0 14 Dtool_nJyonzZ1 0 4 2 np 1 3949  5 start 1 3953  3 end 1 3953  3 wrt 1 3949  
2070 14 Dtool_nJyomjeD 7 1579 4202 0 14 Dtool_nJyomjeD 0 7 2 np 1 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 ex 1 3874  2 ey 1 3874  2 ez 1 3874  
2071 14 Dtool_nJyo_CcA 7 1579 4202 0 14 Dtool_nJyo_CcA 0 8 2 np 1 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 ex 1 3874  2 ey 1 3874  2 ez 1 3874  3 wrt 1 3949  
2072 14 Dtool_nJyoZRn_ 7 1580 3896 0 14 Dtool_nJyoZRn_ 27 // now for typehandle stuff 0 
2073 14 Dtool_nJyoqTQ4 7 1583 4203 0 14 Dtool_nJyoqTQ4 0 3 2 np 1 3949  5 start 1 3956  3 end 1 3956  
2074 14 Dtool_nJyoziY5 7 1583 4203 0 14 Dtool_nJyoziY5 0 4 2 np 1 3949  5 start 1 3956  3 end 1 3956  3 wrt 1 3949  
2075 14 Dtool_nJyor6ke 7 1583 4203 0 14 Dtool_nJyor6ke 0 7 2 np 1 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 ex 1 3874  2 ey 1 3874  2 ez 1 3874  
2076 14 Dtool_nJyobDib 7 1583 4203 0 14 Dtool_nJyobDib 0 8 2 np 1 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 ex 1 3874  2 ey 1 3874  2 ez 1 3874  3 wrt 1 3949  
2077 14 Dtool_nJyoO8qB 4 1584 3890 0 14 Dtool_nJyoO8qB 0 1 4 this 3 4203  
2078 14 Dtool_nJyo_PLx 4 1585 3890 0 14 Dtool_nJyo_PLx 0 1 4 this 3 4203  
2079 14 Dtool_nJyohuir 7 1586 3896 0 14 Dtool_nJyohuir 27 // now for typehandle stuff 0 
2080 14 Dtool_nJyoP7Ek 7 1588 4204 0 14 Dtool_nJyoP7Ek 0 3 2 np 1 3949  5 start 1 3956  3 end 1 3956  
2081 14 Dtool_nJyocsJY 7 1588 4204 0 14 Dtool_nJyocsJY 0 4 2 np 1 3949  5 start 1 3956  3 end 1 3956  3 wrt 1 3949  
2082 14 Dtool_nJyooNcS 7 1588 4204 0 14 Dtool_nJyooNcS 0 7 2 np 1 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 ex 1 3874  2 ey 1 3874  2 ez 1 3874  
2083 14 Dtool_nJyo3jPG 7 1588 4204 0 14 Dtool_nJyo3jPG 0 8 2 np 1 3949  2 sx 1 3874  2 sy 1 3874  2 sz 1 3874  2 ex 1 3874  2 ey 1 3874  2 ez 1 3874  3 wrt 1 3949  
2084 14 Dtool_nJyo_dcM 7 1589 3896 0 14 Dtool_nJyo_dcM 27 // now for typehandle stuff 0 
2085 14 Dtool_nJyoEMQr 7 1592 4205 0 14 Dtool_nJyoEMQr 0 3 2 np 1 3949  5 start 1 3964  3 end 1 3964  
2086 14 Dtool_nJyoUrVf 7 1592 4205 0 14 Dtool_nJyoUrVf 0 4 2 np 1 3949  5 start 1 3964  3 end 1 3964  3 wrt 1 3949  
2087 14 Dtool_nJyonAHg 7 1592 4205 0 14 Dtool_nJyonAHg 0 9 2 np 1 3949  2 sr 1 3874  2 sg 1 3874  2 sb 1 3874  2 sa 1 3874  2 er 1 3874  2 eg 1 3874  2 eb 1 3874  2 ea 1 3874  
2088 14 Dtool_nJyoALC9 7 1592 4205 0 14 Dtool_nJyoALC9 0 10 2 np 1 3949  2 sr 1 3874  2 sg 1 3874  2 sb 1 3874  2 sa 1 3874  2 er 1 3874  2 eg 1 3874  2 eb 1 3874  2 ea 1 3874  3 wrt 1 3949  
2089 14 Dtool_nJyouh6o 7 1593 3896 0 14 Dtool_nJyouh6o 27 // now for typehandle stuff 0 
2090 14 Dtool_nJyo_6uU 7 1596 4206 0 14 Dtool_nJyo_6uU 0 5 2 np 1 3949  6 pstart 1 3953  4 pend 1 3953  6 hstart 1 3956  4 hend 1 3956  
2091 14 Dtool_nJyoL66r 7 1596 4206 0 14 Dtool_nJyoL66r 0 6 2 np 1 3949  6 pstart 1 3953  4 pend 1 3953  6 hstart 1 3956  4 hend 1 3956  3 wrt 1 3949  
2092 14 Dtool_nJyoB14f 7 1596 4206 0 14 Dtool_nJyoB14f 0 13 2 np 1 3949  3 psx 1 3874  3 psy 1 3874  3 psz 1 3874  3 pex 1 3874  3 pey 1 3874  3 pez 1 3874  3 hsx 1 3874  3 hsy 1 3874  3 hsz 1 3874  3 hex 1 3874  3 hey 1 3874  3 hez 1 3874  
2093 14 Dtool_nJyoFS2c 7 1596 4206 0 14 Dtool_nJyoFS2c 0 14 2 np 1 3949  3 psx 1 3874  3 psy 1 3874  3 psz 1 3874  3 pex 1 3874  3 pey 1 3874  3 pez 1 3874  3 hsx 1 3874  3 hsy 1 3874  3 hsz 1 3874  3 hex 1 3874  3 hey 1 3874  3 hez 1 3874  3 wrt 1 3949  
2094 14 Dtool_nJyoeK94 4 1597 3890 0 14 Dtool_nJyoeK94 0 1 4 this 3 4206  
2095 14 Dtool_nJyoCAL_ 4 1598 3890 0 14 Dtool_nJyoCAL_ 0 1 4 this 3 4206  
2096 14 Dtool_nJyoDdZH 7 1599 3896 0 14 Dtool_nJyoDdZH 27 // now for typehandle stuff 0 
2097 14 Dtool_nJyo1FgG 7 1601 4207 0 14 Dtool_nJyo1FgG 0 5 2 np 1 3949  6 hstart 1 3956  4 hend 1 3956  6 sstart 1 3956  4 send 1 3956  
2098 14 Dtool_nJyoPeDL 7 1601 4207 0 14 Dtool_nJyoPeDL 0 6 2 np 1 3949  6 hstart 1 3956  4 hend 1 3956  6 sstart 1 3956  4 send 1 3956  3 wrt 1 3949  
2099 14 Dtool_nJyoLBe9 7 1601 4207 0 14 Dtool_nJyoLBe9 0 13 2 np 1 3949  3 hsx 1 3874  3 hsy 1 3874  3 hsz 1 3874  3 hex 1 3874  3 hey 1 3874  3 hez 1 3874  3 ssx 1 3874  3 ssy 1 3874  3 ssz 1 3874  3 sex 1 3874  3 sey 1 3874  3 sez 1 3874  
2100 14 Dtool_nJyoiyRx 7 1601 4207 0 14 Dtool_nJyoiyRx 0 14 2 np 1 3949  3 hsx 1 3874  3 hsy 1 3874  3 hsz 1 3874  3 hex 1 3874  3 hey 1 3874  3 hez 1 3874  3 ssx 1 3874  3 ssy 1 3874  3 ssz 1 3874  3 sex 1 3874  3 sey 1 3874  3 sez 1 3874  3 wrt 1 3949  
2101 14 Dtool_nJyoHLXo 4 1602 3890 0 14 Dtool_nJyoHLXo 0 1 4 this 3 4207  
2102 14 Dtool_nJyoqjaH 4 1603 3890 0 14 Dtool_nJyoqjaH 0 1 4 this 3 4207  
2103 14 Dtool_nJyoB8I8 7 1604 3896 0 14 Dtool_nJyoB8I8 27 // now for typehandle stuff 0 
2104 14 Dtool_nJyoP4RJ 7 1606 4208 0 14 Dtool_nJyoP4RJ 0 7 2 np 1 3949  6 pstart 1 3953  4 pend 1 3953  6 hstart 1 3956  4 hend 1 3956  6 sstart 1 3956  4 send 1 3956  
2105 14 Dtool_nJyotRMm 7 1606 4208 0 14 Dtool_nJyotRMm 0 8 2 np 1 3949  6 pstart 1 3953  4 pend 1 3953  6 hstart 1 3956  4 hend 1 3956  6 sstart 1 3956  4 send 1 3956  3 wrt 1 3949  
2106 14 Dtool_nJyouyws 7 1606 4208 0 14 Dtool_nJyouyws 0 19 2 np 1 3949  3 psx 1 3874  3 psy 1 3874  3 psz 1 3874  3 pex 1 3874  3 pey 1 3874  3 pez 1 3874  3 hsx 1 3874  3 hsy 1 3874  3 hsz 1 3874  3 hex 1 3874  3 hey 1 3874  3 hez 1 3874  3 ssx 1 3874  3 ssy 1 3874  3 ssz 1 3874  3 sex 1 3874  3 sey 1 3874  3 sez 1 3874  
2107 14 Dtool_nJyoPFig 7 1606 4208 0 14 Dtool_nJyoPFig 0 20 2 np 1 3949  3 psx 1 3874  3 psy 1 3874  3 psz 1 3874  3 pex 1 3874  3 pey 1 3874  3 pez 1 3874  3 hsx 1 3874  3 hsy 1 3874  3 hsz 1 3874  3 hex 1 3874  3 hey 1 3874  3 hez 1 3874  3 ssx 1 3874  3 ssy 1 3874  3 ssz 1 3874  3 sex 1 3874  3 sey 1 3874  3 sez 1 3874  3 wrt 1 3949  
2108 14 Dtool_nJyo8q_U 4 1607 3890 0 14 Dtool_nJyo8q_U 0 1 4 this 3 4208  
2109 14 Dtool_nJyoFgah 4 1608 3890 0 14 Dtool_nJyoFgah 0 1 4 this 3 4208  
2110 14 Dtool_nJyo1G7x 7 1609 3896 0 14 Dtool_nJyo1G7x 27 // now for typehandle stuff 0 
2111 14 Dtool_nJyoLC1H 7 1611 4209 0 14 Dtool_nJyoLC1H 0 3 2 np 1 3949  5 start 1 3964  3 end 1 3964  
2112 14 Dtool_nJyoqMFY 7 1611 4209 0 14 Dtool_nJyoqMFY 0 4 2 np 1 3949  5 start 1 3964  3 end 1 3964  3 wrt 1 3949  
2113 14 Dtool_nJyojybb 7 1611 4209 0 14 Dtool_nJyojybb 0 9 2 np 1 3949  2 sr 1 3874  2 sg 1 3874  2 sb 1 3874  2 sa 1 3874  2 er 1 3874  2 eg 1 3874  2 eb 1 3874  2 ea 1 3874  
2114 14 Dtool_nJyoCjMP 7 1611 4209 0 14 Dtool_nJyoCjMP 0 10 2 np 1 3949  2 sr 1 3874  2 sg 1 3874  2 sb 1 3874  2 sa 1 3874  2 er 1 3874  2 eg 1 3874  2 eb 1 3874  2 ea 1 3874  3 wrt 1 3949  
2115 14 Dtool_nJyotvME 7 1612 3896 0 14 Dtool_nJyotvME 27 // now for typehandle stuff 0 
2116 14 Dtool_nJyoI_Vv 7 1614 4210 2411 14 Dtool_nJyoI_Vv 475 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Default constructor, just an empty node, no geo
//               This is used to read portal from model. You can also
//               use this from python to create an empty portal. Then
//               you can set the vertices yourself, with addVertex.
//////////////////////////////////////////////////////////////////// 1 4 name 1 3924  
2117 14 Dtool_nJyoJd3Z 7 1614 4210 2411 14 Dtool_nJyoJd3Z 335 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Create a default rectangle as portal. Use this
//               to create an arbitrary portal and setup from Python
//////////////////////////////////////////////////////////////////// 3 4 name 1 3924  3 pos 1 3953  5 scale 1 3874  
2118 14 Dtool_nJyo1A14 7 1614 4210 2411 14 Dtool_nJyo1A14 335 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::Constructor
//       Access: Public
//  Description: Create a default rectangle as portal. Use this
//               to create an arbitrary portal and setup from Python
//////////////////////////////////////////////////////////////////// 2 4 name 1 3924  3 pos 1 3953  
2119 14 Dtool_nJyoeCYW 4 1615 3890 0 14 Dtool_nJyoeCYW 813 // Filename: portalNode.I
// Created by:  masad (13May04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_mask
//       Access: Published
//  Description: Simultaneously sets both the "from" and "into"
//               PortalMask values to the same thing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  4 mask 1 3931  
2120 14 Dtool_nJyogmFL 4 1616 3890 0 14 Dtool_nJyogmFL 501 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_from_portal_mask
//       Access: Published
//  Description: Sets the "from" PortalMask.  In order for a
//               portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  4 mask 1 3931  
2121 14 Dtool_nJyoTI3L 4 1617 3890 0 14 Dtool_nJyoTI3L 501 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_into_portal_mask
//       Access: Published
//  Description: Sets the "into" PortalMask.  In order for a
//               portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  4 mask 1 3931  
2122 14 Dtool_nJyoK6im 7 1618 3931 0 14 Dtool_nJyoK6im 512 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_from_portal_mask
//       Access: Published
//  Description: Returns the current "from" PortalMask.  In order for
//               a portal to be detected from this object into
//               another object, the intersection of this object's
//               "from" mask and the other object's "into" mask must
//               be nonzero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4211  
2123 14 Dtool_nJyoMSVn 7 1619 3931 0 14 Dtool_nJyoMSVn 512 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_into_portal_mask
//       Access: Published
//  Description: Returns the current "into" PortalMask.  In order for
//               a portal to be detected from another object into
//               this object, the intersection of the other object's
//               "from" mask and this object's "into" mask must be
//               nonzero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4211  
2124 14 Dtool_nJyohvNY 4 1620 3890 0 14 Dtool_nJyohvNY 847 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_portal_geom
//       Access: Published
//  Description: Sets the state of the "portal geom" flag for this
//               PortalNode.  Normally, this is false; when this is
//               set true, the PortalSolids in this node will test
//               for portals with actual renderable geometry, in
//               addition to whatever PortalSolids may be indicated
//               by the from_portal_mask.
//
//               Setting this to true causes this to test *all*
//               GeomNodes for portals.  It is an all-or-none
//               thing; there is no way to portal with only some
//               GeomNodes, as GeomNodes have no into_portal_mask.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  4 flag 1 3866  
2125 14 Dtool_nJyoWqMg 6 1621 3866 0 14 Dtool_nJyoWqMg 317 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_portal_geom
//       Access: Published
//  Description: Returns the current state of the portal_geom flag.
//               See set_portal_geom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 4211  
2126 14 Dtool_nJyojFbb 4 1622 3890 0 14 Dtool_nJyojFbb 278 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::clear_vertices
//       Access: Published
//  Description: Resets the vertices of the portal to the empty list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4210  
2127 14 Dtool_nJyopPIP 4 1623 3890 0 14 Dtool_nJyopPIP 395 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the portal polygon.  The
//               vertices should be defined in a counterclockwise
//               orientation when viewing through the portal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  6 vertex 1 3884  
2128 14 Dtool_nJyo7Gy1 6 1624 3889 0 14 Dtool_nJyo7Gy1 281 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the portal polygon.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4211  
2129 14 Dtool_nJyoXSGA 6 1625 3884 0 14 Dtool_nJyoXSGA 267 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_vertex
//       Access: Published
//  Description: Returns the nth vertex of the portal polygon.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4211  1 n 1 3889  
2130 14 Dtool_nJyo7zo5 4 1626 3890 0 14 Dtool_nJyo7zo5 264 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  4 cell 1 3950  
2131 14 Dtool_nJyoUl43 7 1627 3949 2863 14 Dtool_nJyoUl43 264 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_in
//       Access: Published
//  Description: Sets the cell that this portal belongs to
//////////////////////////////////////////////////////////////////// 1 4 this 3 4211  
2132 14 Dtool_nJyosRjH 4 1628 3890 0 14 Dtool_nJyosRjH 267 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  4 cell 1 3950  
2133 14 Dtool_nJyopkJR 7 1629 3949 2863 14 Dtool_nJyopkJR 267 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::get_cell_out
//       Access: Published
//  Description: Sets the cell that this portal leads out to
//////////////////////////////////////////////////////////////////// 1 4 this 3 4211  
2134 14 Dtool_nJyoysiG 4 1630 3890 0 14 Dtool_nJyoysiG 313 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_clip_plane
//       Access: Published
//  Description: this is set if the portal will clip against its 
//               left and right planes
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  5 value 1 3866  
2135 14 Dtool_nJyoRkXV 6 1631 3866 0 14 Dtool_nJyoRkXV 278 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_clip_plane
//       Access: Published
//  Description: Is this portal clipping against its left-right planes
//////////////////////////////////////////////////////////////////// 1 4 this 3 4210  
2136 14 Dtool_nJyovbBN 4 1632 3890 0 14 Dtool_nJyovbBN 265 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_visible
//       Access: Published
//  Description: this is set if the portal is facing camera
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  5 value 1 3866  
2137 14 Dtool_nJyoKXV7 6 1633 3866 0 14 Dtool_nJyoKXV7 254 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_visible
//       Access: Published
//  Description: Is this portal facing the camera
//////////////////////////////////////////////////////////////////// 1 4 this 3 4210  
2138 14 Dtool_nJyosf7U 4 1634 3890 0 14 Dtool_nJyosf7U 264 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::set_open
//       Access: Published
//  Description: Python sets this based on curent camera zone
//////////////////////////////////////////////////////////////////// 2 4 this 3 4210  5 value 1 3866  
2139 14 Dtool_nJyozTu1 6 1635 3866 0 14 Dtool_nJyozTu1 263 ////////////////////////////////////////////////////////////////////
//     Function: PortalNode::is_open
//       Access: Published
//  Description: Is this portal open from current camera zone
//////////////////////////////////////////////////////////////////// 1 4 this 3 4210  
2140 14 Dtool_nJyo0Yop 7 1636 3896 0 14 Dtool_nJyo0Yop 0 0 
2141 14 Dtool_nJyosZHo 7 1639 3901 0 14 Dtool_nJyosZHo 419 ////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make
//       Access: Published, Static
//  Description: Constructs a new RescaleNormalAttrib object that
//               specifies whether to rescale normals to compensate
//               for transform scales or incorrectly defined normals.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3854  
2142 14 Dtool_nJyoUWoq 7 1640 3901 0 14 Dtool_nJyoUWoq 483 ////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::make_default
//       Access: Published, Static
//  Description: Constructs a RescaleNoramlAttrib object that's
//               suitable for putting at the top of a scene graph.
//               This will contain whatever attrib was suggested by
//               the user's rescale-normals Config variable.
//////////////////////////////////////////////////////////////////// 0 
2143 14 Dtool_nJyoTBI4 6 1641 3854 0 14 Dtool_nJyoTBI4 253 ////////////////////////////////////////////////////////////////////
//     Function: RescaleNormalAttrib::get_mode
//       Access: Published
//  Description: Returns the render mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4213  
2144 14 Dtool_nJyoEHFy 6 1642 3889 0 14 Dtool_nJyoEHFy 0 0 
2145 14 Dtool_nJyoJ1xG 7 1643 3896 0 14 Dtool_nJyoJ1xG 0 0 
2146 14 Dtool_nJyo348V 7 1646 3901 0 14 Dtool_nJyo348V 346 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a new ScissorAttrib object that removes
//               the scissor region and fills the DisplayRegion.
//////////////////////////////////////////////////////////////////// 0 
2147 14 Dtool_nJyoG31_ 7 1647 3901 0 14 Dtool_nJyoG31_ 477 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make
//       Access: Published, Static
//  Description: Constructs a ScissorAttrib that restricts rendering
//               to the indicated frame within the current
//               DisplayRegion.  (0,0) is the lower-left corner of the
//               DisplayRegion, and (1,1) is the upper-right corner.
//////////////////////////////////////////////////////////////////// 1 5 frame 1 3961  
2148 14 Dtool_nJyoKT2j 7 1647 3901 0 14 Dtool_nJyoKT2j 966 // Filename: scissorAttrib.I
// Created by:  drose (29Jul08)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make
//       Access: Published, Static
//  Description: Constructs a ScissorAttrib that restricts rendering
//               to the indicated frame within the current
//               DisplayRegion.  (0,0) is the lower-left corner of the
//               DisplayRegion, and (1,1) is the upper-right corner.
//////////////////////////////////////////////////////////////////// 4 4 left 1 3874  5 right 1 3874  6 bottom 1 3874  3 top 1 3874  
2149 14 Dtool_nJyotlci 7 1648 3901 0 14 Dtool_nJyotlci 400 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
2150 14 Dtool_nJyoSYVl 6 1649 3961 0 14 Dtool_nJyoSYVl 510 ////////////////////////////////////////////////////////////////////
//     Function: ScissorAttrib::get_frame
//       Access: Published
//  Description: Returns the left, right, bottom, top coordinates of
//               the scissor frame.  This defines a frame within the
//               current DisplayRegion, where 0,0 is the lower-left
//               corner of the DisplayRegion, and 1,1 is the
//               upper-right corner.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4215  
2151 14 Dtool_nJyocYjb 6 1650 3889 0 14 Dtool_nJyocYjb 0 0 
2152 14 Dtool_nJyo5p4m 7 1651 3896 0 14 Dtool_nJyo5p4m 0 0 
2153 14 Dtool_nJyolxrR 7 1655 3901 0 14 Dtool_nJyolxrR 399 ////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::make
//       Access: Published, Static
//  Description: Constructs a new ShadeModelAttrib object that specifies
//               whether to draw polygons with flat shading or with
//               per-vertex (smooth) shading.
//////////////////////////////////////////////////////////////////// 1 4 mode 1 3857  
2154 14 Dtool_nJyop1Ye 7 1656 3901 0 14 Dtool_nJyop1Ye 403 ////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
2155 14 Dtool_nJyoV0vm 6 1657 3857 0 14 Dtool_nJyoV0vm 249 ////////////////////////////////////////////////////////////////////
//     Function: ShadeModelAttrib::get_mode
//       Access: Published
//  Description: Returns the shade mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 4217  
2156 14 Dtool_nJyoOPBM 6 1658 3889 0 14 Dtool_nJyoOPBM 0 0 
2157 14 Dtool_nJyoVo4f 7 1659 3896 0 14 Dtool_nJyoVo4f 0 0 
2158 14 Dtool_nJyoESTW 7 1666 3901 0 14 Dtool_nJyoESTW 307 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_off
//       Access: Published, Static
//  Description: Constructs a StencilAttrib that has stenciling 
//               turned off.
//////////////////////////////////////////////////////////////////// 0 
2159 14 Dtool_nJyo6exi 7 1667 3901 0 14 Dtool_nJyo6exi 400 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_default
//       Access: Published, Static
//  Description: Returns a RenderAttrib that corresponds to whatever
//               the standard default properties for render attributes
//               of this type ought to be.
//////////////////////////////////////////////////////////////////// 0 
2160 14 Dtool_nJyomxxL 7 1668 3901 0 14 Dtool_nJyomxxL 265 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make
//       Access: Published, Static
//  Description: Constructs a front face StencilAttrib.
//////////////////////////////////////////////////////////////////// 8 12 front_enable 1 3867  25 front_comparison_function 1 3867  22 stencil_fail_operation 1 3867  29 stencil_pass_z_fail_operation 1 3867  35 front_stencil_pass_z_pass_operation 1 3867  9 reference 1 3867  9 read_mask 1 3867  10 write_mask 1 3867  
2161 14 Dtool_nJyoFjdx 7 1669 3901 0 14 Dtool_nJyoFjdx 272 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_2_sided
//       Access: Published, Static
//  Description: Constructs a two-sided StencilAttrib.
//////////////////////////////////////////////////////////////////// 13 12 front_enable 1 3867  11 back_enable 1 3867  25 front_comparison_function 1 3867  22 stencil_fail_operation 1 3867  29 stencil_pass_z_fail_operation 1 3867  35 front_stencil_pass_z_pass_operation 1 3867  9 reference 1 3867  9 read_mask 1 3867  10 write_mask 1 3867  24 back_comparison_function 1 3867  27 back_stencil_fail_operation 1 3867  34 back_stencil_pass_z_fail_operation 1 3867  34 back_stencil_pass_z_pass_operation 1 3867  
2162 14 Dtool_nJyoGCEU 7 1670 3901 0 14 Dtool_nJyoGCEU 265 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make
//       Access: Published, Static
//  Description: Constructs a front face StencilAttrib.
//////////////////////////////////////////////////////////////////// 10 12 front_enable 1 3867  25 front_comparison_function 1 3867  22 stencil_fail_operation 1 3867  29 stencil_pass_z_fail_operation 1 3867  35 front_stencil_pass_z_pass_operation 1 3867  9 reference 1 3867  9 read_mask 1 3867  10 write_mask 1 3867  5 clear 1 3867  11 clear_value 1 3867  
2163 14 Dtool_nJyop_qW 7 1671 3901 0 14 Dtool_nJyop_qW 272 ////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::make_2_sided
//       Access: Published, Static
//  Description: Constructs a two-sided StencilAttrib.
//////////////////////////////////////////////////////////////////// 15 12 front_enable 1 3867  11 back_enable 1 3867  25 front_comparison_function 1 3867  22 stencil_fail_operation 1 3867  29 stencil_pass_z_fail_operation 1 3867  35 front_stencil_pass_z_pass_operation 1 3867  9 reference 1 3867  9 read_mask 1 3867  10 write_mask 1 3867  24 back_comparison_function 1 3867  27 back_stencil_fail_operation 1 3867  34 back_stencil_pass_z_fail_operation 1 3867  34 back_stencil_pass_z_pass_operation 1 3867  5 clear 1 3867  11 clear_value 1 3867  
2164 14 Dtool_nJyon86b 6 1672 3867 0 14 Dtool_nJyon86b 744 // Filename: stencilAttrib.I
// Created by:  aignacio (18May06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: StencilAttrib::get_render_state
//       Access: Published
//  Description: Returns render state.
//////////////////////////////////////////////////////////////////// 2 4 this 3 4219  23 render_state_identifier 1 3867  
2165 14 Dtool_nJyoNj4b 6 1673 3889 0 14 Dtool_nJyoNj4b 0 0 
2166 14 Dtool_nJyouEMn 7 1674 3896 0 14 Dtool_nJyouEMn 0 0 
2167 14 Dtool_nJyoQpAl 6 1677 3866 0 14 Dtool_nJyoQpAl 796 // Filename: shaderPool.I
// Created by:  aignacio (Mar06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::has_shader
//       Access: Public, Static
//  Description: Returns true if the shader has ever been loaded,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 4022  
2168 14 Dtool_nJyoqTdM 6 1678 3866 0 14 Dtool_nJyoqTdM 602 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::verify_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns true to indicate
//               success, or false to indicate failure.  If this
//               returns true, it is guaranteed that a subsequent call
//               to load_shader() with the same shader name will
//               return a valid Shader pointer.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 4022  
2169 14 Dtool_nJyogLpU 7 1679 3967 0 14 Dtool_nJyogLpU 536 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::load_shader
//       Access: Public, Static
//  Description: Loads the given filename up into a shader, if it has
//               not already been loaded, and returns the new shader.
//               If a shader with the same filename was previously
//               loaded, returns that one instead.  If the shader
//               file cannot be found, returns NULL.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 4022  
2170 14 Dtool_nJyoSimi 4 1680 3890 0 14 Dtool_nJyoSimi 432 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::add_shader
//       Access: Public, Static
//  Description: Adds the indicated already-loaded shader to the
//               pool.  The shader will always replace any
//               previously-loaded shader in the pool that had the
//               same filename.
//////////////////////////////////////////////////////////////////// 2 8 filename 1 4022  6 shader 1 4221  
2171 14 Dtool_nJyoffAR 4 1681 3890 0 14 Dtool_nJyoffAR 549 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_shader
//       Access: Public, Static
//  Description: Removes the indicated shader from the pool,
//               indicating it will never be loaded again; the shader
//               may then be freed.  If this function is never called,
//               a reference count will be maintained on every shader
//               every loaded, and shaders will never be freed.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 4022  
2172 14 Dtool_nJyoVWS0 4 1682 3890 0 14 Dtool_nJyoVWS0 327 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::release_all_shaders
//       Access: Public, Static
//  Description: Releases all shaders in the pool and restores the
//               pool to the empty state.
//////////////////////////////////////////////////////////////////// 0 
2173 14 Dtool_nJyoZabE 6 1683 3889 0 14 Dtool_nJyoZabE 473 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::garbage_collect
//       Access: Public, Static
//  Description: Releases only those shaders in the pool that have a
//               reference count of exactly 1; i.e. only those
//               shaders that are not being used outside of the pool.
//               Returns the number of shaders released.
//////////////////////////////////////////////////////////////////// 0 
2174 14 Dtool_nJyoPPub 4 1684 3890 0 14 Dtool_nJyoPPub 316 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::list_contents
//       Access: Public, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
2175 14 Dtool_nJyoYTty 4 1685 3890 0 14 Dtool_nJyoYTty 311 ////////////////////////////////////////////////////////////////////
//     Function: ShaderPool::write
//       Access: Published, Static
//  Description: Lists the contents of the shader pool to the
//               indicated output stream.
//////////////////////////////////////////////////////////////////// 1 3 out 1 3893  
2176 14 Dtool_nJyoQcNo 7 714 3949 2863 14 Dtool_nJyoQcNo 319 ////////////////////////////////////////////////////////////////////
//     Function: py_decode_NodePath_from_bam_stream
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//////////////////////////////////////////////////////////////////// 1 4 data 1 3924  
2177 14 Dtool_nJyoQ_nt 7 715 3949 2863 14 Dtool_nJyoQ_nt 327 ////////////////////////////////////////////////////////////////////
//     Function: py_decode_NodePath_from_bam_stream_persist
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//////////////////////////////////////////////////////////////////// 2 9 unpickler 1 3891  4 data 1 3924  
498
3724 14 TransformState 75777 14 TransformState 14 TransformState 0 0 0 0 0 0 93 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 0 0 1 0 3725 0 0 0 0 1138
////////////////////////////////////////////////////////////////////
//       Class : TransformState
// Description : Indicates a coordinate-system transform on vertices.
//               TransformStates are the primary means for storing
//               transformations on the scene graph.
//
//               Transforms may be specified in one of two ways:
//               componentwise, with a pos-hpr-scale, or with an
//               arbitrary transform matrix.  If you specify a
//               transform componentwise, it will remember its
//               original components.
//
//               TransformState objects are managed very much like
//               RenderState objects.  They are immutable and
//               reference-counted automatically.
//
//               You should not attempt to create or modify a
//               TransformState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a TransformState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

3725 24 NodeCachedReferenceCount 2049 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 2143
////////////////////////////////////////////////////////////////////
//       Class : NodeCachedReferenceCount
// Description : This class further specializes
//               CachedTypedWritableReferenceCount to also add a
//               node_ref_count, for the purposes of counting the
//               number of times the object is referenced by a "node",
//               presumably a PandaNode.
//
//               This essentially combines the functionality of
//               NodeReferenceCount and
//               CachedTypedWritableReferenceCount, so that a
//               derivative of this object actually has three
//               counters: the standard reference count, the "cache"
//               reference count, and the "node" reference count.
//               Rather than multiply inheriting from the two
//               reference count classes, we inherit only from
//               CachedTypedWritableReferenceCount and simply
//               duplicate the functionality of NodeReferenceCount, to
//               avoid all of the problems associated with multiple
//               inheritance.
//
//               The intended design is to use this as a base class
//               for RenderState and TransformState, both of which are
//               held by PandaNodes, and also have caches which are
//               independently maintained.  By keeping track of how
//               many nodes hold a pointer to a particular object, we
//               can classify each object into node-referenced,
//               cache-referenced, or other, which is primarily useful
//               for PStats reporting.
//
//               As with CachedTypedWritableReferenceCount's
//               cache_ref() and cache_unref(), the new methods
//               node_ref() and node_unref() automatically increment
//               and decrement the primary reference count as well.
//               In this case, however, there does exist a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
////////////////////////////////////////////////////////////////////

3726 20 RenderAttribRegistry 43009 20 RenderAttribRegistry 20 RenderAttribRegistry 0 0 0 0 0 0 11 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 0 0 0 0 0 439
////////////////////////////////////////////////////////////////////
//       Class : RenderAttribRegistry
// Description : This class is used to associate each RenderAttrib
//               with a different slot index at runtime, so we can
//               store a list of RenderAttribs in the RenderState
//               object, and very quickly look them up by type.
////////////////////////////////////////////////////////////////////

3727 12 RenderAttrib 75777 12 RenderAttrib 12 RenderAttrib 0 0 0 0 0 0 12 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 0 0 1 0 3728 0 0 0 2 3729 3730 1564
////////////////////////////////////////////////////////////////////
//       Class : RenderAttrib
// Description : This is the base class for a number of render
//               attributes (other than transform) that may be set on
//               scene graph nodes to control the appearance of
//               geometry.  This includes TextureAttrib, ColorAttrib,
//               etc.
//
//               RenderAttrib represents render attributes that always
//               propagate down to the leaves without regard to the
//               particular node they are assigned to.  A RenderAttrib
//               will have the same effect on a leaf node whether it
//               is assigned to the graph at the leaf or several nodes
//               above.  This is different from RenderEffect, which
//               represents a particular render property that is
//               applied immediately to the node on which it is
//               encountered, like billboarding or decaling.
//
//               You should not attempt to create or modify a
//               RenderAttrib directly; instead, use the make() method
//               of the appropriate kind of attrib you want.  This
//               will allocate and return a new RenderAttrib of the
//               appropriate type, and it may share pointers if
//               possible.  Do not modify the new RenderAttrib if you
//               wish to change its properties; instead, create a new
//               one.
////////////////////////////////////////////////////////////////////

3728 27 TypedWritableReferenceCount 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

3729 16 PandaCompareFunc 794624 30 RenderAttrib::PandaCompareFunc 30 RenderAttrib::PandaCompareFunc 3727 0 0 0 0 0 0 0 0 0 9 6 M_none 20 RenderAttrib::M_none 0 7 M_never 21 RenderAttrib::M_never 1 6 M_less 20 RenderAttrib::M_less 2 7 M_equal 21 RenderAttrib::M_equal 3 12 M_less_equal 26 RenderAttrib::M_less_equal 4 9 M_greater 23 RenderAttrib::M_greater 5 11 M_not_equal 25 RenderAttrib::M_not_equal 6 15 M_greater_equal 29 RenderAttrib::M_greater_equal 7 8 M_always 22 RenderAttrib::M_always 8 0 0

3730 10 TexGenMode 794624 24 RenderAttrib::TexGenMode 24 RenderAttrib::TexGenMode 3727 0 0 0 0 0 0 0 0 0 12 5 M_off 19 RenderAttrib::M_off 0 16 M_eye_sphere_map 30 RenderAttrib::M_eye_sphere_map 1 16 M_world_cube_map 30 RenderAttrib::M_world_cube_map 2 14 M_eye_cube_map 28 RenderAttrib::M_eye_cube_map 3 14 M_world_normal 28 RenderAttrib::M_world_normal 4 12 M_eye_normal 26 RenderAttrib::M_eye_normal 5 16 M_world_position 30 RenderAttrib::M_world_position 6 8 M_unused 22 RenderAttrib::M_unused 7 14 M_eye_position 28 RenderAttrib::M_eye_position 8 14 M_point_sprite 28 RenderAttrib::M_point_sprite 9 14 M_light_vector 28 RenderAttrib::M_light_vector 10 10 M_constant 24 RenderAttrib::M_constant 11 0 179
// This is the enumerated type for TexGenAttrib.  It is inherited
// into TexGenAttrib.  It is defined up at this level only to avoid
// circular dependencies in the header files.

3731 16 RenderModeAttrib 141313 16 RenderModeAttrib 16 RenderModeAttrib 0 0 0 0 2302 0 8 2294 2295 2296 2297 2298 2299 2300 2301 0 0 1 0 3727 0 0 0 1 3732 228
////////////////////////////////////////////////////////////////////
//       Class : RenderModeAttrib
// Description : Specifies how polygons are to be drawn.
////////////////////////////////////////////////////////////////////

3732 4 Mode 794624 22 RenderModeAttrib::Mode 22 RenderModeAttrib::Mode 3731 0 0 0 0 0 0 0 0 0 5 11 M_unchanged 29 RenderModeAttrib::M_unchanged 0 8 M_filled 26 RenderModeAttrib::M_filled 1 11 M_wireframe 29 RenderModeAttrib::M_wireframe 2 7 M_point 25 RenderModeAttrib::M_point 3 13 M_filled_flat 31 RenderModeAttrib::M_filled_flat 4 0 0

3733 15 TexMatrixAttrib 75777 15 TexMatrixAttrib 15 TexMatrixAttrib 0 0 0 0 0 0 14 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 1 4222 0 1 0 3727 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : TexMatrixAttrib
// Description : Applies a transform matrix to UV's before they are
//               rendered.
////////////////////////////////////////////////////////////////////

3734 11 RenderState 75777 11 RenderState 11 RenderState 0 0 0 0 0 0 49 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 0 0 1 0 3725 0 0 0 0 621
////////////////////////////////////////////////////////////////////
//       Class : RenderState
// Description : This represents a unique collection of RenderAttrib
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

3735 15 AlphaTestAttrib 141313 15 AlphaTestAttrib 15 AlphaTestAttrib 0 0 0 0 2372 0 6 2366 2367 2368 2369 2370 2371 0 0 1 0 3727 0 0 0 0 317
////////////////////////////////////////////////////////////////////
//       Class : AlphaTestAttrib
// Description : Enables or disables writing of pixel to framebuffer
//               based on its alpha value relative to a reference alpha value
////////////////////////////////////////////////////////////////////

3736 15 AntialiasAttrib 141313 15 AntialiasAttrib 15 AntialiasAttrib 0 0 0 0 2380 0 7 2373 2374 2375 2376 2377 2378 2379 0 0 1 0 3727 0 0 0 1 3737 291
////////////////////////////////////////////////////////////////////
//       Class : AntialiasAttrib
// Description : Specifies whether or how to enable antialiasing, if
//               supported by the backend renderer.
////////////////////////////////////////////////////////////////////

3737 4 Mode 794624 21 AntialiasAttrib::Mode 21 AntialiasAttrib::Mode 3736 0 0 0 0 0 0 0 0 0 10 6 M_none 23 AntialiasAttrib::M_none 0 7 M_point 24 AntialiasAttrib::M_point 1 6 M_line 23 AntialiasAttrib::M_line 2 9 M_polygon 26 AntialiasAttrib::M_polygon 4 13 M_multisample 30 AntialiasAttrib::M_multisample 8 6 M_auto 23 AntialiasAttrib::M_auto 31 11 M_type_mask 28 AntialiasAttrib::M_type_mask 31 8 M_faster 25 AntialiasAttrib::M_faster 32 8 M_better 25 AntialiasAttrib::M_better 64 11 M_dont_care 28 AntialiasAttrib::M_dont_care 96 0 0

3738 12 RenderEffect 75777 12 RenderEffect 12 RenderEffect 0 0 0 0 0 0 7 2381 2382 2383 2384 2385 2386 2387 0 0 1 0 3728 0 0 0 0 1346
////////////////////////////////////////////////////////////////////
//       Class : RenderEffect
// Description : This is the base class for a number of special render
//               effects that may be set on scene graph nodes to
//               change the way they render.  This includes
//               BillboardEffect, DecalEffect, etc.
//
//               RenderEffect represents render properties that must
//               be applied as soon as they are encountered in the
//               scene graph, rather than propagating down to the
//               leaves.  This is different from RenderAttrib, which
//               represents properties like color and texture that
//               don't do anything until they propagate down to a
//               GeomNode.
//
//               You should not attempt to create or modify a
//               RenderEffect directly; instead, use the make() method
//               of the appropriate kind of effect you want.  This
//               will allocate and return a new RenderEffect of the
//               appropriate type, and it may share pointers if
//               possible.  Do not modify the new RenderEffect if you
//               wish to change its properties; instead, create a new
//               one.
////////////////////////////////////////////////////////////////////

3739 13 RenderEffects 75777 13 RenderEffects 13 RenderEffects 0 0 0 0 0 0 15 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 0 0 1 0 3728 0 0 0 0 627
////////////////////////////////////////////////////////////////////
//       Class : RenderEffects
// Description : This represents a unique collection of RenderEffect
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderEffects object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderEffects object, create a
//               new one.
////////////////////////////////////////////////////////////////////

3740 9 PandaNode 26625 9 PandaNode 9 PandaNode 0 0 0 1 2410 2411 0 107 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 0 0 4 3 3741 2403 2404 3 3742 2405 2406 3 3743 2407 2408 5 3744 2409 0 0 2 3745 3746 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

3741 13 TypedWritable 2049 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 0 0 0 0 0 0 356
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

3742 7 Namable 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

3743 14 LinkedListNode 2049 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 762
////////////////////////////////////////////////////////////////////
//       Class : LinkedListNode
// Description : This just stores the pointers to implement a
//               doubly-linked list of some kind of object.  There are
//               occasions when a hand-rolled linked list is more
//               appropriate than an STL container.
//
//               Typically, each node of the linked list, as well as
//               the root of the list, will inherit from this class.
//
//               Note that this class is not inherently thread-safe;
//               derived classes are responsible for protecting any
//               calls into it within mutexes, if necessary.
////////////////////////////////////////////////////////////////////

3744 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

3745 16 UnexpectedChange 794624 27 PandaNode::UnexpectedChange 27 PandaNode::UnexpectedChange 3740 0 0 0 0 0 0 0 0 0 5 10 UC_parents 21 PandaNode::UC_parents 1 11 UC_children 22 PandaNode::UC_children 2 12 UC_transform 23 PandaNode::UC_transform 4 8 UC_state 19 PandaNode::UC_state 8 12 UC_draw_mask 23 PandaNode::UC_draw_mask 16 0 0

3746 9 FancyBits 794624 20 PandaNode::FancyBits 20 PandaNode::FancyBits 3740 0 0 0 0 0 0 0 0 0 6 12 FB_transform 23 PandaNode::FB_transform 1 8 FB_state 19 PandaNode::FB_state 2 10 FB_effects 21 PandaNode::FB_effects 4 6 FB_tag 17 PandaNode::FB_tag 16 12 FB_draw_mask 23 PandaNode::FB_draw_mask 32 16 FB_cull_callback 27 PandaNode::FB_cull_callback 64 0 0

3747 18 TransparencyAttrib 141313 18 TransparencyAttrib 18 TransparencyAttrib 0 0 0 0 2524 0 5 2519 2520 2521 2522 2523 0 0 1 0 3727 0 0 0 1 3748 727
////////////////////////////////////////////////////////////////////
//       Class : TransparencyAttrib
// Description : This controls the enabling of transparency.  Simply
//               setting an alpha component to non-1 does not in
//               itself make an object transparent; you must also
//               enable transparency mode with a suitable
//               TransparencyAttrib.  Similarly, it is wasteful to
//               render an object with a TransparencyAttrib in
//               effect unless you actually want it to be at least
//               partially transparent (and it has alpha components
//               less than 1).
////////////////////////////////////////////////////////////////////

3748 4 Mode 794624 24 TransparencyAttrib::Mode 24 TransparencyAttrib::Mode 3747 0 0 0 0 0 0 0 0 0 7 6 M_none 26 TransparencyAttrib::M_none 0 7 M_alpha 27 TransparencyAttrib::M_alpha 1 9 M_notused 29 TransparencyAttrib::M_notused 2 13 M_multisample 33 TransparencyAttrib::M_multisample 3 18 M_multisample_mask 38 TransparencyAttrib::M_multisample_mask 4 8 M_binary 28 TransparencyAttrib::M_binary 5 6 M_dual 26 TransparencyAttrib::M_dual 6 0 0

3749 8 NodePath 141313 8 NodePath 8 NodePath 0 0 0 1 2525 2863 0 336 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2 4223 4224 1 2538 0 0 1 3750 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

3750 9 ErrorType 794624 19 NodePath::ErrorType 19 NodePath::ErrorType 3749 0 0 0 0 0 0 0 0 0 4 5 ET_ok 15 NodePath::ET_ok 0 12 ET_not_found 22 NodePath::ET_not_found 1 10 ET_removed 20 NodePath::ET_removed 2 7 ET_fail 17 NodePath::ET_fail 3 0 109
// This enumeration is returned by get_error_type() for an empty
// NodePath to report the reason it's empty.

3751 18 AttribNodeRegistry 141313 18 AttribNodeRegistry 18 AttribNodeRegistry 0 0 0 0 2878 0 12 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 1 4225 0 0 0 0 879
////////////////////////////////////////////////////////////////////
//       Class : AttribNodeRegistry
// Description : This global object records NodePaths that are
//               referenced by scene graph attribs, such as
//               ClipPlaneAttribs and LightAttribs.
//
//               Its primary purpose is to unify attribs that are
//               loaded in from bam files.  Attrib nodes are
//               identified by name and type; when a bam file that
//               contains references to some attrib nodes is loaded,
//               those nodes are first looked up here in the
//               AttribNodeRegistry.  If there is a match (by name and
//               node type), the identified node is used instead of
//               the node referenced within the bam file itself.
////////////////////////////////////////////////////////////////////

3752 17 AudioVolumeAttrib 141313 17 AudioVolumeAttrib 17 AudioVolumeAttrib 0 0 0 0 2889 0 10 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 0 0 1 0 3727 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : AudioVolumeAttrib
// Description : Applies a scale to audio volume for positional sounds
//               in the scene graph.
////////////////////////////////////////////////////////////////////

3753 17 AuxBitplaneAttrib 141313 17 AuxBitplaneAttrib 17 AuxBitplaneAttrib 0 0 0 0 2895 0 5 2890 2891 2892 2893 2894 0 0 1 0 3727 0 0 0 1 3754 1769
////////////////////////////////////////////////////////////////////
//       Class : AuxBitplaneAttrib
// Description : Modern frame buffers can have 'aux' bitplanes, which
//               are additional bitplanes above and beyond the
//               standard depth and color.  This attrib controls what
//               gets rendered into those additional bitplanes.  It
//               can also affect what goes into the alpha channel
//               of the primary color buffer.
//
//               ABO_glow: copy the glow map into the alpha channel
//               of the primary frame buffer.  If there is no glow
//               map, set it to zero.  Caveat: it is not
//               possible to write glow or depth values to the
//               framebuffer alpha channel at the same time as using
//               alpha blending or alpha testing.  Any attempt to use
//               transparency, blending, or alpha testing will cause
//               this flag to be overridden.
//
//               ABO_aux_normal: put the camera-space normal into
//               the into the R,G components of the first auxiliary
//               bitplane.
//
//               ABO_aux_modelz: put the clip-space Z coordinate of
//               the center of the model (after perspective divide)
//               into the B channel of the first auxiliary bitplane.
//
//               ABO_aux_glow: put a copy of the glow map into the
//               alpha channel of the first auxiliary bitplane.
//               If there is no glow map, set it to zero.
//
//               AuxBitplaneAttrib is relevant only when shader
//               generation is enabled. Otherwise, it has no effect.
//
////////////////////////////////////////////////////////////////////

3754 17 AuxBitplaneOutput 794624 36 AuxBitplaneAttrib::AuxBitplaneOutput 36 AuxBitplaneAttrib::AuxBitplaneOutput 3753 0 0 0 0 0 0 0 0 0 3 8 ABO_glow 27 AuxBitplaneAttrib::ABO_glow 1 14 ABO_aux_normal 33 AuxBitplaneAttrib::ABO_aux_normal 2 12 ABO_aux_glow 31 AuxBitplaneAttrib::ABO_aux_glow 4 0 0

3755 12 AuxSceneData 141313 12 AuxSceneData 12 AuxSceneData 0 0 0 0 2904 0 8 2896 2897 2898 2899 2900 2901 2902 2903 0 0 1 0 3756 0 0 0 0 655
////////////////////////////////////////////////////////////////////
//       Class : AuxSceneData
// Description : This is a base class for a generic data structure
//               that can be attached per-instance to the camera, to
//               store per-instance data that must be preserved over
//               multiple frames.
//
//               In particular, this is used to implement the
//               FadeLODNode, which must remember during traversal at
//               what point it is in the fade, separately for each
//               instance and for each camera.
////////////////////////////////////////////////////////////////////

3756 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

3757 7 BamFile 26625 7 BamFile 7 BamFile 0 0 0 1 2905 2906 0 17 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 0 0 1 0 3758 0 0 0 0 889
////////////////////////////////////////////////////////////////////
//       Class : BamFile
// Description : The principle public interface to reading and writing
//               Bam disk files.  See also BamReader and BamWriter,
//               the more general implementation of this class.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
////////////////////////////////////////////////////////////////////

3758 8 BamEnums 2049 8 BamEnums 8 BamEnums 0 0 0 0 0 0 0 0 0 0 0 0 288
////////////////////////////////////////////////////////////////////
//       Class : BamEnums
// Description : This class exists just to provide scoping for the
//               enums shared by BamReader and BamWriter.
////////////////////////////////////////////////////////////////////

3759 15 BillboardEffect 141313 15 BillboardEffect 15 BillboardEffect 0 0 0 0 2936 0 12 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 0 0 1 0 3738 0 0 0 0 335
////////////////////////////////////////////////////////////////////
//       Class : BillboardEffect
// Description : Indicates that geometry at this node should
//               automatically rotate to face the camera, or any other
//               arbitrary node.
////////////////////////////////////////////////////////////////////

3760 8 LensNode 141313 8 LensNode 8 LensNode 0 0 0 1 2937 2949 0 11 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 0 0 1 0 3740 0 0 0 0 396
////////////////////////////////////////////////////////////////////
//       Class : LensNode
// Description : A node that contains a Lens.  The most important
//               example of this kind of node is a Camera, but other
//               kinds of nodes also contain a lens (for instance, a
//               Spotlight).
////////////////////////////////////////////////////////////////////

3761 6 Camera 75777 6 Camera 6 Camera 0 0 0 1 2950 2949 0 26 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 1 4226 0 1 0 3760 0 0 0 0 320
////////////////////////////////////////////////////////////////////
//       Class : Camera
// Description : A node that can be positioned around in the scene
//               graph to represent a point of view for rendering a
//               scene.
////////////////////////////////////////////////////////////////////

3762 9 PlaneNode 141313 9 PlaneNode 9 PlaneNode 0 0 0 1 2977 2987 0 9 2978 2979 2980 2981 2982 2983 2984 2985 2986 0 0 1 0 3740 0 0 0 1 3763 429
////////////////////////////////////////////////////////////////////
//       Class : PlaneNode
// Description : A node that contains a plane.  This is most often
//               used as a clipping plane, but it can serve other
//               purposes as well; whenever a plane is needed to be
//               defined in some coordinate space in the world.
////////////////////////////////////////////////////////////////////

3763 10 ClipEffect 794624 21 PlaneNode::ClipEffect 21 PlaneNode::ClipEffect 3762 0 0 0 0 0 0 0 0 0 2 10 CE_visible 21 PlaneNode::CE_visible 1 12 CE_collision 23 PlaneNode::CE_collision 2 0 0

3764 15 ClipPlaneAttrib 141313 15 ClipPlaneAttrib 15 ClipPlaneAttrib 0 0 0 0 3012 0 24 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 2 4227 4228 0 1 0 3727 0 0 0 1 3765 496
////////////////////////////////////////////////////////////////////
//       Class : ClipPlaneAttrib
// Description : This functions similarly to a LightAttrib.  It
//               indicates the set of clipping planes that modify the
//               geometry at this level and below.  A ClipPlaneAttrib
//               can either add planes or remove planes from the total
//               set of clipping planes in effect.
////////////////////////////////////////////////////////////////////

3765 9 Operation 794624 26 ClipPlaneAttrib::Operation 26 ClipPlaneAttrib::Operation 3764 0 0 0 0 0 0 0 0 0 3 5 O_set 22 ClipPlaneAttrib::O_set 0 5 O_add 22 ClipPlaneAttrib::O_add 1 8 O_remove 25 ClipPlaneAttrib::O_remove 2 0 149
// This is the old, deprecated interface to ClipPlaneAttrib.  Do not
// use any of these methods for new code; these methods will be
// removed soon.

3766 11 ColorAttrib 141313 11 ColorAttrib 11 ColorAttrib 0 0 0 0 3021 0 8 3013 3014 3015 3016 3017 3018 3019 3020 0 0 1 0 3727 0 0 0 1 3767 263
////////////////////////////////////////////////////////////////////
//       Class : ColorAttrib
// Description : Indicates what color should be applied to renderable
//               geometry.
////////////////////////////////////////////////////////////////////

3767 4 Type 794624 17 ColorAttrib::Type 17 ColorAttrib::Type 3766 0 0 0 0 0 0 0 0 0 3 8 T_vertex 21 ColorAttrib::T_vertex 0 6 T_flat 19 ColorAttrib::T_flat 1 5 T_off 18 ColorAttrib::T_off 2 0 0

3768 16 ColorBlendAttrib 141313 16 ColorBlendAttrib 16 ColorBlendAttrib 0 0 0 0 3033 0 11 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 0 0 1 0 3727 0 0 0 2 3769 3770 368
////////////////////////////////////////////////////////////////////
//       Class : ColorBlendAttrib
// Description : This specifies how colors are blended into the frame
//               buffer, for special effects.  This overrides
//               transparency if transparency is also specified.
////////////////////////////////////////////////////////////////////

3769 4 Mode 794624 22 ColorBlendAttrib::Mode 22 ColorBlendAttrib::Mode 3768 0 0 0 0 0 0 0 0 0 6 6 M_none 24 ColorBlendAttrib::M_none 0 5 M_add 23 ColorBlendAttrib::M_add 1 10 M_subtract 28 ColorBlendAttrib::M_subtract 2 14 M_inv_subtract 32 ColorBlendAttrib::M_inv_subtract 3 5 M_min 23 ColorBlendAttrib::M_min 4 5 M_max 23 ColorBlendAttrib::M_max 5 0 0

3770 7 Operand 794624 25 ColorBlendAttrib::Operand 25 ColorBlendAttrib::Operand 3768 0 0 0 0 0 0 0 0 0 19 6 O_zero 24 ColorBlendAttrib::O_zero 0 5 O_one 23 ColorBlendAttrib::O_one 1 16 O_incoming_color 34 ColorBlendAttrib::O_incoming_color 2 26 O_one_minus_incoming_color 44 ColorBlendAttrib::O_one_minus_incoming_color 3 15 O_fbuffer_color 33 ColorBlendAttrib::O_fbuffer_color 4 25 O_one_minus_fbuffer_color 43 ColorBlendAttrib::O_one_minus_fbuffer_color 5 16 O_incoming_alpha 34 ColorBlendAttrib::O_incoming_alpha 6 26 O_one_minus_incoming_alpha 44 ColorBlendAttrib::O_one_minus_incoming_alpha 7 15 O_fbuffer_alpha 33 ColorBlendAttrib::O_fbuffer_alpha 8 25 O_one_minus_fbuffer_alpha 43 ColorBlendAttrib::O_one_minus_fbuffer_alpha 9 16 O_constant_color 34 ColorBlendAttrib::O_constant_color 10 26 O_one_minus_constant_color 44 ColorBlendAttrib::O_one_minus_constant_color 11 16 O_constant_alpha 34 ColorBlendAttrib::O_constant_alpha 12 26 O_one_minus_constant_alpha 44 ColorBlendAttrib::O_one_minus_constant_alpha 13 25 O_incoming_color_saturate 43 ColorBlendAttrib::O_incoming_color_saturate 14 13 O_color_scale 31 ColorBlendAttrib::O_color_scale 15 23 O_one_minus_color_scale 41 ColorBlendAttrib::O_one_minus_color_scale 16 13 O_alpha_scale 31 ColorBlendAttrib::O_alpha_scale 17 23 O_one_minus_alpha_scale 41 ColorBlendAttrib::O_one_minus_alpha_scale 18 0 0

3771 16 ColorScaleAttrib 141313 16 ColorScaleAttrib 16 ColorScaleAttrib 0 0 0 0 3047 0 13 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 0 0 1 0 3727 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//       Class : ColorScaleAttrib
// Description : Applies a scale to colors in the scene graph and on
//               vertices.
////////////////////////////////////////////////////////////////////

3772 16 ColorWriteAttrib 141313 16 ColorWriteAttrib 16 ColorWriteAttrib 0 0 0 0 3053 0 5 3048 3049 3050 3051 3052 0 0 1 0 3727 0 0 0 1 3773 431
////////////////////////////////////////////////////////////////////
//       Class : ColorWriteAttrib
// Description : Enables or disables writing to the color buffer.
//               This is primarily useful for certain special effects
//               in which it is important to write to the depth buffer
//               without affecting the color buffer.
////////////////////////////////////////////////////////////////////

3773 8 Channels 794624 26 ColorWriteAttrib::Channels 26 ColorWriteAttrib::Channels 3772 0 0 0 0 0 0 0 0 0 7 5 C_off 23 ColorWriteAttrib::C_off 0 5 C_red 23 ColorWriteAttrib::C_red 1 7 C_green 25 ColorWriteAttrib::C_green 2 6 C_blue 24 ColorWriteAttrib::C_blue 4 5 C_rgb 23 ColorWriteAttrib::C_rgb 7 7 C_alpha 25 ColorWriteAttrib::C_alpha 8 5 C_all 23 ColorWriteAttrib::C_all 15 0 0

3774 13 CompassEffect 141313 13 CompassEffect 13 CompassEffect 0 0 0 0 3058 0 4 3054 3055 3056 3057 0 0 1 0 3738 0 0 0 1 3775 1758
////////////////////////////////////////////////////////////////////
//       Class : CompassEffect
// Description : A CompassEffect causes a node to inherit its rotation
//               (or pos or scale, if specified) from some other
//               reference node in the graph, or more often from the
//               root.
//
//               In its purest form, a CompassEffect is used to keep
//               the node's rotation fixed relative to the top of the
//               scene graph, despite other transforms that may exist
//               above the node.  Hence the name: the node behaves
//               like a magnetic compass, always pointing in the same
//               direction.
//
//               As an couple of generalizing extensions, the
//               CompassEffect may also be set up to always orient its
//               node according to some other reference node than the
//               root of the scene graph.  Furthermore, it may
//               optionally adjust any of pos, rotation, or scale,
//               instead of necessarily rotation; and it may adjust
//               individual pos and scale components.  (Rotation may
//               not be adjusted on an individual component basis;
//               that's just asking for trouble.)
//
//               Be careful when using the pos and scale modes.  In
//               these modes, it's possible for the CompassEffect to
//               move its node far from its normal bounding volume,
//               causing culling to fail.  If this is an issue, you
//               may need to explicitly set a large (or infinite)
//               bounding volume on the effect node.
////////////////////////////////////////////////////////////////////

3775 10 Properties 794624 25 CompassEffect::Properties 25 CompassEffect::Properties 3774 0 0 0 0 0 0 0 0 0 10 3 P_x 18 CompassEffect::P_x 1 3 P_y 18 CompassEffect::P_y 2 3 P_z 18 CompassEffect::P_z 4 5 P_pos 20 CompassEffect::P_pos 7 5 P_rot 20 CompassEffect::P_rot 8 4 P_sx 19 CompassEffect::P_sx 16 4 P_sy 19 CompassEffect::P_sy 32 4 P_sz 19 CompassEffect::P_sz 64 7 P_scale 22 CompassEffect::P_scale 112 5 P_all 20 CompassEffect::P_all 127 0 0

3776 12 CullBinEnums 141313 12 CullBinEnums 12 CullBinEnums 0 0 0 0 3059 0 0 0 0 0 0 1 3777 280
////////////////////////////////////////////////////////////////////
//       Class : CullBinEnums
// Description : Provides scoping for the enumerated type shared by
//               CullBin and CullBinManager.
////////////////////////////////////////////////////////////////////

3777 7 BinType 794624 21 CullBinEnums::BinType 21 CullBinEnums::BinType 3776 0 0 0 0 0 0 0 0 0 6 10 BT_invalid 24 CullBinEnums::BT_invalid 0 11 BT_unsorted 25 CullBinEnums::BT_unsorted 1 15 BT_state_sorted 29 CullBinEnums::BT_state_sorted 2 16 BT_back_to_front 30 CullBinEnums::BT_back_to_front 3 16 BT_front_to_back 30 CullBinEnums::BT_front_to_back 4 8 BT_fixed 22 CullBinEnums::BT_fixed 5 0 0

3778 13 CullBinAttrib 141313 13 CullBinAttrib 13 CullBinAttrib 0 0 0 0 3066 0 6 3060 3061 3062 3063 3064 3065 0 0 1 0 3727 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : CullBinAttrib
// Description : Assigns geometry to a particular bin by name.  The
//               bins must be created separately via the
//               CullBinManager interface.
////////////////////////////////////////////////////////////////////

3779 14 CullBinManager 43009 14 CullBinManager 14 CullBinManager 0 0 0 0 0 0 14 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 1 4229 0 1 0 3776 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : CullBinManager
// Description : This is a global object that maintains the collection
//               of named CullBins in the world.
////////////////////////////////////////////////////////////////////

3780 14 CullFaceAttrib 141313 14 CullFaceAttrib 14 CullFaceAttrib 0 0 0 0 3089 0 8 3081 3082 3083 3084 3085 3086 3087 3088 0 0 1 0 3727 0 0 0 1 3781 274
////////////////////////////////////////////////////////////////////
//       Class : CullFaceAttrib
// Description : Indicates which faces should be culled based on their
//               vertex ordering.
////////////////////////////////////////////////////////////////////

3781 4 Mode 794624 20 CullFaceAttrib::Mode 20 CullFaceAttrib::Mode 3780 0 0 0 0 0 0 0 0 0 4 11 M_cull_none 27 CullFaceAttrib::M_cull_none 0 16 M_cull_clockwise 32 CullFaceAttrib::M_cull_clockwise 1 24 M_cull_counter_clockwise 40 CullFaceAttrib::M_cull_counter_clockwise 2 16 M_cull_unchanged 32 CullFaceAttrib::M_cull_unchanged 3 0 0

3782 8 GeomNode 75777 8 GeomNode 8 GeomNode 0 0 0 1 3090 2411 0 19 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 2 4230 4231 0 1 0 3740 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

3783 10 SceneSetup 141313 10 SceneSetup 10 SceneSetup 0 0 0 0 3132 0 22 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 0 0 1 0 3744 0 0 0 0 331
////////////////////////////////////////////////////////////////////
//       Class : SceneSetup
// Description : This object holds the camera position, etc., and
//               other general setup information for rendering a
//               particular scene.
////////////////////////////////////////////////////////////////////

3784 13 CullTraverser 141313 13 CullTraverser 13 CullTraverser 0 0 0 1 3133 3159 0 25 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 0 0 1 0 3756 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

3785 17 CullTraverserData 26625 17 CullTraverserData 17 CullTraverserData 0 0 0 0 3160 0 6 3161 3162 3163 3164 3165 3166 0 0 0 0 0 778
////////////////////////////////////////////////////////////////////
//       Class : CullTraverserData
// Description : This collects together the pieces of data that are
//               accumulated for each node while walking the scene
//               graph during the cull traversal.
//
//               Having this as a separate object simplifies the
//               parameter list to CullTraverser::r_traverse(), as
//               well as to other functions like
//               PandaNode::cull_callback().  It also makes it easier
//               to add cull parameters, and provides a place to
//               abstract out some of the cull behavior (like
//               view-frustum culling).
////////////////////////////////////////////////////////////////////

3786 10 CullResult 75777 10 CullResult 10 CullResult 0 0 0 0 0 0 6 3167 3168 3169 3170 3171 3172 0 0 1 0 3744 0 0 0 0 611
////////////////////////////////////////////////////////////////////
//       Class : CullResult
// Description : This stores the result of a BinCullHandler traversal:
//               an ordered collection of CullBins, each of which
//               holds a number of Geoms and RenderStates to be
//               rendered in some defined order.
//
//               This is also used to keep the results of last frame's
//               cull traversal around to make next frame's traversal
//               of the same scene a little easier.
////////////////////////////////////////////////////////////////////

3787 11 DecalEffect 141313 11 DecalEffect 11 DecalEffect 0 0 0 0 3175 0 2 3173 3174 0 0 1 0 3738 0 0 0 0 355
////////////////////////////////////////////////////////////////////
//       Class : DecalEffect
// Description : Applied to a GeomNode to indicate that the children
//               of this GeomNode are coplanar and should be drawn as
//               decals (eliminating Z-fighting).
////////////////////////////////////////////////////////////////////

3788 17 DepthOffsetAttrib 141313 17 DepthOffsetAttrib 17 DepthOffsetAttrib 0 0 0 0 3181 0 5 3176 3177 3178 3179 3180 0 0 1 0 3727 0 0 0 0 1595
////////////////////////////////////////////////////////////////////
//       Class : DepthOffsetAttrib
// Description : This is a special kind of attribute that instructs
//               the graphics driver to apply an offset or bias to the
//               generated depth values for rendered polygons, before
//               they are written to the depth buffer.
//
//               This can be used to shift polygons forward slightly,
//               to resolve depth conflicts.  The cull traverser may
//               optionally use this, for instance, to implement
//               decals.  However, driver support for this feature
//               seems to be spotty, so use with caution.
//
//               The bias is always an integer number, and each
//               integer increment represents the smallest possible
//               increment in Z that is sufficient to completely
//               resolve two coplanar polygons.  Positive numbers are
//               closer towards the camera.
//
//               Nested DepthOffsetAttrib values accumulate; that is,
//               a DepthOffsetAttrib with a value of 1 beneath another
//               DepthOffsetAttrib with a value of 2 presents a net
//               offset of 3.  (A DepthOffsetAttrib will not, however,
//               combine with any other DepthOffsetAttribs with a
//               lower override parameter.)  The net value should
//               probably not exceed 16 or drop below 0 for maximum
//               portability.
////////////////////////////////////////////////////////////////////

3789 15 DepthTestAttrib 141313 15 DepthTestAttrib 15 DepthTestAttrib 0 0 0 0 3187 0 5 3182 3183 3184 3185 3186 0 0 1 0 3727 0 0 0 0 236
////////////////////////////////////////////////////////////////////
//       Class : DepthTestAttrib
// Description : Enables or disables writing to the depth buffer.
////////////////////////////////////////////////////////////////////

3790 16 DepthWriteAttrib 141313 16 DepthWriteAttrib 16 DepthWriteAttrib 0 0 0 0 3193 0 5 3188 3189 3190 3191 3192 0 0 1 0 3727 0 0 0 1 3791 237
////////////////////////////////////////////////////////////////////
//       Class : DepthWriteAttrib
// Description : Enables or disables writing to the depth buffer.
////////////////////////////////////////////////////////////////////

3791 4 Mode 794624 22 DepthWriteAttrib::Mode 22 DepthWriteAttrib::Mode 3790 0 0 0 0 0 0 0 0 0 2 5 M_off 23 DepthWriteAttrib::M_off 0 4 M_on 22 DepthWriteAttrib::M_on 1 0 0

3792 19 EventStorePandaNode 75777 19 EventStorePandaNode 19 EventStorePandaNode 0 0 0 1 3194 0 0 3 3195 3196 3197 0 0 1 0 3793 0 0 0 0 275
////////////////////////////////////////////////////////////////////
//       Class : EventStorePandaNode
// Description : A class object for storing specifically objects of
//               type PandaNode.
////////////////////////////////////////////////////////////////////

3793 19 EventStoreValueBase 2049 19 EventStoreValueBase 19 EventStoreValueBase 0 0 0 0 0 0 0 0 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : EventStoreValueBase
// Description : A non-template base class of EventStoreValue (below),
//               which serves mainly to define the placeholder for the
//               virtual output function.
////////////////////////////////////////////////////////////////////

3794 3 Fog 75777 3 Fog 3 Fog 0 0 0 1 3198 2411 0 13 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 0 0 1 0 3740 0 0 0 1 3795 1150
////////////////////////////////////////////////////////////////////
//       Class : Fog
// Description : Specifies how atmospheric fog effects are applied to
//               geometry.  The Fog object is now a PandaNode, which
//               means it can be used similarly to a Light to define
//               effects relative to a particular coordinate system
//               within the scene graph.
//
//               In exponential mode, the fog effects are always
//               camera-relative, and it does not matter where the Fog
//               node is parented.  However, in linear mode, the onset
//               and opaque distances are defined as offsets along the
//               local forward axis (e.g. the Y axis).  This allows
//               the fog effect to be localized to a particular region
//               in space, rather than always camera-relative.  If the
//               fog object is not parented to any node, it is used to
//               generate traditonal camera-relative fog, as if it
//               were parented to the camera.
////////////////////////////////////////////////////////////////////

3795 4 Mode 794624 9 Fog::Mode 9 Fog::Mode 3794 0 0 0 0 0 0 0 0 0 3 8 M_linear 13 Fog::M_linear 0 13 M_exponential 18 Fog::M_exponential 1 21 M_exponential_squared 26 Fog::M_exponential_squared 2 0 0

3796 9 FogAttrib 141313 9 FogAttrib 9 FogAttrib 0 0 0 0 3219 0 7 3212 3213 3214 3215 3216 3217 3218 0 0 1 0 3727 0 0 0 0 235
////////////////////////////////////////////////////////////////////
//       Class : FogAttrib
// Description : Applies a Fog to the geometry at and below this node.
////////////////////////////////////////////////////////////////////

3797 20 GeomDrawCallbackData 141313 20 GeomDrawCallbackData 20 GeomDrawCallbackData 0 0 0 0 3226 0 6 3220 3221 3222 3223 3224 3225 0 0 1 0 3798 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : GeomDrawCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from deep within the draw
//               traversal, for a particular Geom.
////////////////////////////////////////////////////////////////////

3798 12 CallbackData 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

3799 22 InternalNameCollection 26625 22 InternalNameCollection 22 InternalNameCollection 0 0 0 1 3227 3229 0 16 3228 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 1 4232 0 0 0 0 195
////////////////////////////////////////////////////////////////////
//       Class : InternalNameCollection
// Description : 
////////////////////////////////////////////////////////////////////

3800 5 Light 26625 5 Light 5 Light 0 0 0 0 3246 0 8 3247 3248 3249 3250 3251 3252 3253 3254 0 0 1 5 3744 3245 0 0 0 460
////////////////////////////////////////////////////////////////////
//       Class : Light
// Description : The abstract interface to all kinds of lights.  The
//               actual light objects also inherit from PandaNode, and
//               can therefore be added to the scene graph at some
//               arbitrary point to define the coordinate system of
//               effect.
////////////////////////////////////////////////////////////////////

3801 11 LightAttrib 141313 11 LightAttrib 11 LightAttrib 0 0 0 0 3280 0 25 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 2 4233 4234 0 1 0 3727 0 0 0 1 3802 426
////////////////////////////////////////////////////////////////////
//       Class : LightAttrib
// Description : Indicates which set of lights should be considered
//               "on" to illuminate geometry at this level and below.
//               A LightAttrib can either add lights or remove lights
//               from the total set of "on" lights.
////////////////////////////////////////////////////////////////////

3802 9 Operation 794624 22 LightAttrib::Operation 22 LightAttrib::Operation 3801 0 0 0 0 0 0 0 0 0 3 5 O_set 18 LightAttrib::O_set 0 5 O_add 18 LightAttrib::O_add 1 8 O_remove 21 LightAttrib::O_remove 2 0 145
// This is the old, deprecated interface to LightAttrib.  Do not use
// any of these methods for new code; these methods will be removed
// soon.

3803 15 LightRampAttrib 141313 15 LightRampAttrib 15 LightRampAttrib 0 0 0 0 3293 0 12 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 0 0 1 0 3727 0 0 0 1 3804 556
////////////////////////////////////////////////////////////////////
//       Class : LightRampAttrib
// Description : A Light Ramp is any unary operator that takes a 
//               rendered pixel as input, and adjusts the brightness
//               of that pixel.  For example, gamma correction is a
//               kind of light ramp.  So is HDR tone mapping.  So is
//               cartoon shading.  See the constructors for an
//               explanation of each kind of ramp.
////////////////////////////////////////////////////////////////////

3804 13 LightRampMode 794624 30 LightRampAttrib::LightRampMode 30 LightRampAttrib::LightRampMode 3803 0 0 0 0 0 0 0 0 0 7 11 LRT_default 28 LightRampAttrib::LRT_default 0 12 LRT_identity 29 LightRampAttrib::LRT_identity 1 20 LRT_single_threshold 37 LightRampAttrib::LRT_single_threshold 2 20 LRT_double_threshold 37 LightRampAttrib::LRT_double_threshold 3 8 LRT_hdr0 25 LightRampAttrib::LRT_hdr0 4 8 LRT_hdr1 25 LightRampAttrib::LRT_hdr1 5 8 LRT_hdr2 25 LightRampAttrib::LRT_hdr2 6 0 0

3805 6 Loader 141313 6 Loader 6 Loader 0 0 0 1 3305 3319 0 13 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 0 0 2 3 3756 3294 3295 3 3742 3296 3297 0 1 3806 819
////////////////////////////////////////////////////////////////////
//       Class : Loader
// Description : A convenient class for loading models from disk, in
//               bam or egg format (or any of a number of other
//               formats implemented by a LoaderFileType, such as
//               ptloader).
//
//               This class supports synchronous as well as
//               asynchronous loading.  In asynchronous loading, the
//               model is loaded in the background by a thread, and an
//               event will be generated when the model is available.
//               If threading is not available, the asynchronous
//               loading interface may be used, but it loads
//               synchronously.
////////////////////////////////////////////////////////////////////

3806 7 Results 288769 15 Loader::Results 15 Loader::Results 3805 0 0 1 3298 3300 0 5 3299 3301 3302 3303 3304 2 4235 4236 0 0 0 0 0

3807 14 LoaderFileType 75777 14 LoaderFileType 14 LoaderFileType 0 0 0 0 0 0 7 3320 3321 3322 3323 3324 3325 3326 0 0 1 0 3808 0 0 0 0 436
////////////////////////////////////////////////////////////////////
//       Class : LoaderFileType
// Description : This is the base class for a family of scene-graph
//               file types that the Loader supports.  Each kind of
//               loader that's available should define a corresponding
//               LoaderFileType object and register itself.
////////////////////////////////////////////////////////////////////

3808 11 TypedObject 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3955
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               ---------------------------------------------------
//               In the class definition (.h file)
//               ---------------------------------------------------
//               
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               
//               
//               ----------------------
//               In the class .cxx file
//               ----------------------
//               
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               
//               
//               ----------------------------------------------
//               In the class config_<<<PackageName>>>.cxx file
//               ----------------------------------------------
//               
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               
////////////////////////////////////////////////////////////////////

3809 22 LoaderFileTypeRegistry 26625 22 LoaderFileTypeRegistry 22 LoaderFileTypeRegistry 0 0 0 0 3327 0 5 3328 3329 3330 3331 3332 1 4237 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : LoaderFileTypeRegistry
// Description : This class maintains the set of all known
//               LoaderFileTypes in the universe.
////////////////////////////////////////////////////////////////////

3810 14 MaterialAttrib 141313 14 MaterialAttrib 14 MaterialAttrib 0 0 0 0 3340 0 7 3333 3334 3335 3336 3337 3338 3339 0 0 1 0 3727 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : MaterialAttrib
// Description : Indicates which, if any, material should be applied
//               to geometry.  The material is used primarily to
//               control lighting effects, and isn't necessary (or
//               useful) in the absence of lighting.
////////////////////////////////////////////////////////////////////

3811 18 MaterialCollection 26625 18 MaterialCollection 18 MaterialCollection 0 0 0 1 3341 3343 0 17 3342 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 0 0 0 0 0 191
////////////////////////////////////////////////////////////////////
//       Class : MaterialCollection
// Description : 
////////////////////////////////////////////////////////////////////

3812 19 ModelFlattenRequest 141313 19 ModelFlattenRequest 19 ModelFlattenRequest 0 0 0 1 3360 3365 0 4 3361 3362 3363 3364 0 0 1 0 3813 0 0 0 0 545
////////////////////////////////////////////////////////////////////
//       Class : ModelFlattenRequest
// Description : This class object manages a single asynchronous
//               request to flatten a model.  The model will be
//               duplicated and flattened in a sub-thread (if
//               threading is available), without affecting the
//               original model; and when the result is done it may be
//               retrieved from this object.
////////////////////////////////////////////////////////////////////

3813 9 AsyncTask 2049 9 AsyncTask 9 AsyncTask 0 0 0 0 0 0 0 0 0 0 0 0 434
////////////////////////////////////////////////////////////////////
//       Class : AsyncTask
// Description : This class represents a concrete task performed by an
//               AsyncManager.  Normally, you would subclass from this
//               class, and override do_task(), to define the
//               functionality you wish to have the task perform.
////////////////////////////////////////////////////////////////////

3814 16 ModelLoadRequest 141313 16 ModelLoadRequest 16 ModelLoadRequest 0 0 0 1 3366 3373 0 6 3367 3368 3369 3370 3371 3372 0 0 1 0 3813 0 0 0 0 415
////////////////////////////////////////////////////////////////////
//       Class : ModelLoadRequest
// Description : A class object that manages a single asynchronous
//               model load request.  Create a new ModelLoadRequest,
//               and add it to the loader via load_async(), to begin
//               an asynchronous load.
////////////////////////////////////////////////////////////////////

3815 9 ModelNode 141313 9 ModelNode 9 ModelNode 0 0 0 1 3374 3381 0 6 3375 3376 3377 3378 3379 3380 0 0 1 0 3740 0 0 0 1 3816 683
////////////////////////////////////////////////////////////////////
//       Class : ModelNode
// Description : This node is placed at key points within the scene
//               graph to indicate the roots of "models": subtrees
//               that are conceptually to be treated as a single unit,
//               like a car or a room, for instance.  It doesn't
//               affect rendering or any other operations; it's
//               primarily useful as a high-level model indication.
//
//               ModelNodes are created in response to a <Model> { 1 }
//               flag within an egg file.
////////////////////////////////////////////////////////////////////

3816 17 PreserveTransform 794624 28 ModelNode::PreserveTransform 28 ModelNode::PreserveTransform 3815 0 0 0 0 0 0 0 0 0 5 7 PT_none 18 ModelNode::PT_none 0 8 PT_local 19 ModelNode::PT_local 1 6 PT_net 17 ModelNode::PT_net 2 12 PT_drop_node 23 ModelNode::PT_drop_node 3 11 PT_no_touch 22 ModelNode::PT_no_touch 4 0 0

3817 9 ModelRoot 141313 9 ModelRoot 9 ModelRoot 0 0 0 1 3382 3391 0 6 3383 3384 3385 3388 3389 3390 0 0 1 0 3815 0 0 0 1 3818 561
////////////////////////////////////////////////////////////////////
//       Class : ModelRoot
// Description : A node of this type is created automatically at the
//               root of each model file that is loaded.  It may
//               eventually contain some information about the
//               contents of the model; at the moment, it contains no
//               special information, but can be used as a flag to
//               indicate the presence of a loaded model file.
////////////////////////////////////////////////////////////////////

3818 14 ModelReference 403457 25 ModelRoot::ModelReference 25 ModelRoot::ModelReference 3817 0 0 1 3386 3387 0 0 0 0 1 0 3744 0 0 0 0 60
// This class is used to unify references to the same model.

3819 9 ModelPool 141313 9 ModelPool 9 ModelPool 0 0 0 0 3401 0 9 3392 3393 3394 3395 3396 3397 3398 3399 3400 0 0 0 0 0 1197
////////////////////////////////////////////////////////////////////
//       Class : ModelPool
// Description : This class unifies all references to the same
//               filename, so that multiple attempts to load the same
//               model will return the same pointer.  Note that the
//               default behavior is thus to make instances: use with
//               caution.  Use the copy_subgraph() method on Node (or
//               use NodePath::copy_to) to make modifiable copies of
//               the node.
//
//               Unlike TexturePool, this class does not automatically
//               resolve the model filenames before loading, so a
//               relative path and an absolute path to the same model
//               will appear to be different filenames.
//
//               However, see the Loader class, which is now the
//               preferred interface for loading models.  The Loader
//               class can resolve filenames, supports threaded
//               loading, and can automatically consult the ModelPool,
//               according to the supplied LoaderOptions.
////////////////////////////////////////////////////////////////////

3820 18 NodePathCollection 26625 18 NodePathCollection 18 NodePathCollection 0 0 0 1 3402 3404 0 37 3403 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 1 4238 0 0 0 0 403
////////////////////////////////////////////////////////////////////
//       Class : NodePathCollection
// Description : This is a set of zero or more NodePaths.  It's handy
//               for returning from functions that need to return
//               multiple NodePaths (for instance,
//               NodePaths::get_children).
////////////////////////////////////////////////////////////////////

3821 13 TextureAttrib 141313 13 TextureAttrib 13 TextureAttrib 0 0 0 0 3468 0 27 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3 4239 4240 4241 0 1 0 3727 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : TextureAttrib
// Description : Indicates the set of TextureStages and their
//               associated Textures that should be applied to (or
//               removed from) a node.
////////////////////////////////////////////////////////////////////

3822 12 TexGenAttrib 75777 12 TexGenAttrib 12 TexGenAttrib 0 0 0 0 0 0 14 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 0 0 1 0 3727 0 0 0 0 530
////////////////////////////////////////////////////////////////////
//       Class : TexGenAttrib
// Description : Computes texture coordinates for geometry
//               automatically based on vertex position and/or normal.
//               This can be used to implement reflection and/or
//               refraction maps, for instance to make shiny surfaces,
//               as well as other special effects such as projective
//               texturing.
////////////////////////////////////////////////////////////////////

3823 13 PolylightNode 141313 13 PolylightNode 13 PolylightNode 0 0 0 1 3483 3520 0 36 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 0 0 1 0 3740 0 0 0 2 3824 3825 201
////////////////////////////////////////////////////////////////////
//       Class : PolylightNode
// Description : A PolylightNode
////////////////////////////////////////////////////////////////////

3824 12 Flicker_Type 794624 27 PolylightNode::Flicker_Type 27 PolylightNode::Flicker_Type 3823 0 0 0 0 0 0 0 0 0 3 7 FRANDOM 22 PolylightNode::FRANDOM 0 4 FSIN 19 PolylightNode::FSIN 1 7 FCUSTOM 22 PolylightNode::FCUSTOM 2 0 0

3825 16 Attenuation_Type 794624 31 PolylightNode::Attenuation_Type 31 PolylightNode::Attenuation_Type 3823 0 0 0 0 0 0 0 0 0 2 7 ALINEAR 22 PolylightNode::ALINEAR 0 10 AQUADRATIC 25 PolylightNode::AQUADRATIC 1 0 0

3826 15 PolylightEffect 141313 15 PolylightEffect 15 PolylightEffect 0 0 0 0 3532 0 11 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 0 0 1 0 3738 0 0 0 1 3827 559
////////////////////////////////////////////////////////////////////
//       Class : PolylightEffect
// Description : A PolylightEffect can be used on a node to define a
//               LightGroup  for that node. A LightGroup contains 
//               PolylightNodes which are essentially nodes that add 
//               color to the polygons of a model based on distance.
//               PolylightNode is a cheap way to get lighting effects
//               specially for night scenes
////////////////////////////////////////////////////////////////////

3827 11 ContribType 794624 28 PolylightEffect::ContribType 28 PolylightEffect::ContribType 3826 0 0 0 0 0 0 0 0 0 2 11 CT_proximal 28 PolylightEffect::CT_proximal 0 6 CT_all 23 PolylightEffect::CT_all 1 0 0

3828 11 ShaderInput 75777 11 ShaderInput 11 ShaderInput 0 0 0 1 3534 0 0 9 3533 3535 3536 3537 3538 3539 3540 3541 3542 0 0 1 0 3728 0 0 0 1 3829 331
////////////////////////////////////////////////////////////////////
//       Class : ShaderInput
// Description : This is a small container class that can hold any
//               one of the value types that can be passed as input
//               to a shader.
////////////////////////////////////////////////////////////////////

3829 15 ShaderInputType 794624 28 ShaderInput::ShaderInputType 28 ShaderInput::ShaderInputType 3828 0 0 0 0 0 0 0 0 0 4 9 M_invalid 22 ShaderInput::M_invalid 0 9 M_texture 22 ShaderInput::M_texture 1 10 M_nodepath 23 ShaderInput::M_nodepath 2 9 M_numeric 22 ShaderInput::M_numeric 3 0 0

3830 12 ShaderAttrib 141313 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 3575 0 32 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 3573 3574 0 0 1 0 3727 0 0 0 0 185
////////////////////////////////////////////////////////////////////
//       Class : ShaderAttrib
// Description : 
////////////////////////////////////////////////////////////////////

3831 16 ShowBoundsEffect 141313 16 ShowBoundsEffect 16 ShowBoundsEffect 0 0 0 0 3579 0 3 3576 3577 3578 0 0 1 0 3738 0 0 0 0 412
////////////////////////////////////////////////////////////////////
//       Class : ShowBoundsEffect
// Description : Applied to a GeomNode to cause a visible bounding
//               volume to be drawn for this node.  This is generally
//               used only during development to help identify
//               bounding volume issues.
////////////////////////////////////////////////////////////////////

3832 18 TexProjectorEffect 75777 18 TexProjectorEffect 18 TexProjectorEffect 0 0 0 0 0 0 8 3580 3581 3582 3583 3584 3585 3586 3587 0 0 1 0 3738 0 0 0 0 1911
////////////////////////////////////////////////////////////////////
//       Class : TexProjectorEffect
// Description : This effect automatically applies a computed texture
//               matrix to the specified texture stage, according to
//               the relative position of two specified nodes.
//
//               The relative transform from the "from" node to the
//               "to" node is applied directly to the texture matrix
//               each frame.  If the "to" node happens to be a
//               LensNode, its lens projection matrix is applied as
//               well.
//
//               This can be used to apply a number of special
//               effects.  Fundamentally, it may simply be used to
//               provide a separate PandaNode that may be adjusted
//               (e.g. via a LerpInterval) in order to easily apply a
//               linear transformation to an object's texture
//               coordinates (rather than having to explicitly call
//               NodePath.set_tex_transform() each frame).
//
//               In a more sophisticated case, the TexProjectorEffect
//               is particularly useful in conjunction with a
//               TexGenAttrib that specifies a mode of
//               M_world_position (which copies the world position of
//               each vertex to the texture coordinates).  Then the
//               TexProjector can be used to convert these world
//               coordinates to the relative coordinates of a
//               particular node, causing (for instance) a texture to
//               appear to follow a node around as it moves through
//               the world.  With a LensNode, you can project a
//               texture onto the walls, for instance to apply a
//               flashlight effect or an image-based shadow.
////////////////////////////////////////////////////////////////////

3833 13 ScissorEffect 141313 13 ScissorEffect 13 ScissorEffect 0 0 0 0 3598 0 10 3588 3589 3590 3591 3592 3593 3594 3595 3596 3597 2 4242 4243 0 1 0 3738 0 0 0 0 456
////////////////////////////////////////////////////////////////////
//       Class : ScissorEffect
// Description : This provides a higher-level wrapper around
//               ScissorAttrib.  It allows for the scissor region to
//               be defined via points relative to the current node,
//               and also performs culling based on the scissor
//               region.
////////////////////////////////////////////////////////////////////

3834 17 SceneGraphReducer 26625 17 SceneGraphReducer 17 SceneGraphReducer 0 0 0 1 3599 3600 0 17 3601 3602 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 0 0 0 0 4 3835 3836 3837 3838 610
////////////////////////////////////////////////////////////////////
//       Class : SceneGraphReducer
// Description : An interface for simplifying ("flattening") scene
//               graphs by eliminating unneeded nodes and collapsing
//               out unneeded state changes and transforms.
//
//               This class is designed so that it may be inherited
//               from and specialized, if needed, to fine-tune the
//               flattening behavior, but normally the default
//               behavior is sufficient.
////////////////////////////////////////////////////////////////////

3835 11 AttribTypes 794624 30 SceneGraphReducer::AttribTypes 30 SceneGraphReducer::AttribTypes 3834 0 0 0 0 0 0 0 0 0 8 12 TT_transform 31 SceneGraphReducer::TT_transform 1 8 TT_color 27 SceneGraphReducer::TT_color 2 14 TT_color_scale 33 SceneGraphReducer::TT_color_scale 4 13 TT_tex_matrix 32 SceneGraphReducer::TT_tex_matrix 8 13 TT_clip_plane 32 SceneGraphReducer::TT_clip_plane 16 12 TT_cull_face 31 SceneGraphReducer::TT_cull_face 32 22 TT_apply_texture_color 41 SceneGraphReducer::TT_apply_texture_color 64 8 TT_other 27 SceneGraphReducer::TT_other 128 0 0

3836 15 CombineSiblings 794624 34 SceneGraphReducer::CombineSiblings 34 SceneGraphReducer::CombineSiblings 3834 0 0 0 0 0 0 0 0 0 4 12 CS_geom_node 31 SceneGraphReducer::CS_geom_node 1 16 CS_within_radius 35 SceneGraphReducer::CS_within_radius 2 8 CS_other 27 SceneGraphReducer::CS_other 4 10 CS_recurse 29 SceneGraphReducer::CS_recurse 8 0 0

3837 17 CollectVertexData 794624 36 SceneGraphReducer::CollectVertexData 36 SceneGraphReducer::CollectVertexData 3834 0 0 0 0 0 0 0 0 0 8 8 CVD_name 27 SceneGraphReducer::CVD_name 1 9 CVD_model 28 SceneGraphReducer::CVD_model 2 13 CVD_transform 32 SceneGraphReducer::CVD_transform 4 17 CVD_avoid_dynamic 36 SceneGraphReducer::CVD_avoid_dynamic 8 17 CVD_one_node_only 36 SceneGraphReducer::CVD_one_node_only 16 10 CVD_format 29 SceneGraphReducer::CVD_format 32 14 CVD_usage_hint 33 SceneGraphReducer::CVD_usage_hint 64 18 CVD_animation_type 37 SceneGraphReducer::CVD_animation_type 128 0 0

3838 14 MakeNonindexed 794624 33 SceneGraphReducer::MakeNonindexed 33 SceneGraphReducer::MakeNonindexed 3834 0 0 0 0 0 0 0 0 0 3 17 MN_composite_only 36 SceneGraphReducer::MN_composite_only 1 17 MN_avoid_animated 36 SceneGraphReducer::MN_avoid_animated 2 16 MN_avoid_dynamic 35 SceneGraphReducer::MN_avoid_dynamic 4 0 0

3839 22 TextureStageCollection 26625 22 TextureStageCollection 22 TextureStageCollection 0 0 0 1 3618 3620 0 18 3619 3621 3622 3623 3624 3625 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 1 4244 0 0 0 0 195
////////////////////////////////////////////////////////////////////
//       Class : TextureStageCollection
// Description : 
////////////////////////////////////////////////////////////////////

3840 14 PosLerpFunctor 75777 14 PosLerpFunctor 14 PosLerpFunctor 0 0 0 1 3638 0 0 1 3639 0 0 1 0 3841 0 0 0 0 231
////////////////////////////////////////////////////////////////////
//       Class : PosLerpFunctor
// Description : Class for Lerping between positions in space
////////////////////////////////////////////////////////////////////

3841 29 SimpleLerpFunctor< LPoint3f > 2049 29 SimpleLerpFunctor< LPoint3f > 29 SimpleLerpFunctor< LPoint3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3842 14 HprLerpFunctor 75777 14 HprLerpFunctor 14 HprLerpFunctor 0 0 0 1 3640 0 0 3 3641 3642 3643 0 0 1 0 3843 0 0 0 0 259
// evil bad bad evil HPR
////////////////////////////////////////////////////////////////////
//       Class : HprLerpFunctor
// Description : Class for Lerping between orientations in space
////////////////////////////////////////////////////////////////////

3843 31 SimpleLerpFunctor< LVecBase3f > 2049 31 SimpleLerpFunctor< LVecBase3f > 31 SimpleLerpFunctor< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3844 16 ScaleLerpFunctor 75777 16 ScaleLerpFunctor 16 ScaleLerpFunctor 0 0 0 1 3644 0 0 1 3645 0 0 1 0 3843 0 0 0 0 221
////////////////////////////////////////////////////////////////////
//       Class : ScaleLerpFunctor
// Description : Class for Lerping between scales
////////////////////////////////////////////////////////////////////

3845 16 ColorLerpFunctor 75777 16 ColorLerpFunctor 16 ColorLerpFunctor 0 0 0 1 3646 0 0 1 3647 0 0 1 0 3846 0 0 0 0 221
////////////////////////////////////////////////////////////////////
//       Class : ColorLerpFunctor
// Description : Class for Lerping between colors
////////////////////////////////////////////////////////////////////

3846 31 SimpleLerpFunctor< LVecBase4f > 2049 31 SimpleLerpFunctor< LVecBase4f > 31 SimpleLerpFunctor< LVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3847 17 PosHprLerpFunctor 75777 17 PosHprLerpFunctor 17 PosHprLerpFunctor 0 0 0 1 3648 0 0 3 3649 3650 3651 0 0 1 0 3848 0 0 0 0 268
////////////////////////////////////////////////////////////////////
//       Class : PosHprLerpFunctor
// Description : Class for Lerping between positions and orientations
//               in space
////////////////////////////////////////////////////////////////////

3848 11 LerpFunctor 2049 11 LerpFunctor 11 LerpFunctor 0 0 0 0 0 0 0 0 0 0 0 0 0

3849 19 HprScaleLerpFunctor 75777 19 HprScaleLerpFunctor 19 HprScaleLerpFunctor 0 0 0 1 3652 0 0 3 3653 3654 3655 0 0 1 0 3848 0 0 0 0 256
////////////////////////////////////////////////////////////////////
//       Class : HprScaleLerpFunctor
// Description : Class for Lerping between orientation
//               and scale
////////////////////////////////////////////////////////////////////

3850 22 PosHprScaleLerpFunctor 75777 22 PosHprScaleLerpFunctor 22 PosHprScaleLerpFunctor 0 0 0 1 3656 0 0 3 3657 3658 3659 0 0 1 0 3848 0 0 0 0 270
////////////////////////////////////////////////////////////////////
//       Class : PosHprScaleLerpFunctor
// Description : Class for Lerping between position, orientation,
//               and scale
////////////////////////////////////////////////////////////////////

3851 21 ColorScaleLerpFunctor 75777 21 ColorScaleLerpFunctor 21 ColorScaleLerpFunctor 0 0 0 1 3660 0 0 1 3661 0 0 1 0 3846 0 0 0 0 232
////////////////////////////////////////////////////////////////////
//       Class : ColorScaleLerpFunctor
// Description : Class for Lerping between color scales
////////////////////////////////////////////////////////////////////

3852 10 PortalNode 75777 10 PortalNode 10 PortalNode 0 0 0 1 3662 2411 0 22 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 1 4245 0 1 0 3740 0 0 0 0 483
////////////////////////////////////////////////////////////////////
//       Class : PortalNode 
//       Description : A node in the scene graph that can hold a 
//                     Portal Polygon, which is a rectangle. Other 
//                     types of polygons are not supported for
//                     now. It also holds a PT(PandaNode) Cell that 
//                     this portal is connected to
////////////////////////////////////////////////////////////////////

3853 19 RescaleNormalAttrib 141313 19 RescaleNormalAttrib 19 RescaleNormalAttrib 0 0 0 0 3690 0 5 3685 3686 3687 3688 3689 0 0 1 0 3727 0 0 0 1 3854 231
////////////////////////////////////////////////////////////////////
//       Class : RescaleNormalAttrib
// Description : Specifies how polygons are to be drawn.
////////////////////////////////////////////////////////////////////

3854 4 Mode 794624 25 RescaleNormalAttrib::Mode 25 RescaleNormalAttrib::Mode 3853 0 0 0 0 0 0 0 0 0 4 6 M_none 27 RescaleNormalAttrib::M_none 0 9 M_rescale 30 RescaleNormalAttrib::M_rescale 1 11 M_normalize 32 RescaleNormalAttrib::M_normalize 2 6 M_auto 27 RescaleNormalAttrib::M_auto 3 0 0

3855 13 ScissorAttrib 141313 13 ScissorAttrib 13 ScissorAttrib 0 0 0 0 3697 0 6 3691 3692 3693 3694 3695 3696 0 0 1 0 3727 0 0 0 0 852
////////////////////////////////////////////////////////////////////
//       Class : ScissorAttrib
// Description : This restricts rendering to within a rectangular
//               region of the scene, without otherwise affecting the
//               viewport or lens properties.  Geometry that falls
//               outside the scissor region is not rendered.  It is
//               akin to the OpenGL glScissor() function.
//
//               The ScissorAttrib always specifies its region
//               relative to its enclosing DisplayRegion, in screen
//               space, and performs no culling.
//
//               See ScissorEffect if you wish to define a
//               region relative to 2-D or 3-D coordinates in the
//               scene graph, with culling.
////////////////////////////////////////////////////////////////////

3856 16 ShadeModelAttrib 141313 16 ShadeModelAttrib 16 ShadeModelAttrib 0 0 0 0 3703 0 5 3698 3699 3700 3701 3702 0 0 1 0 3727 0 0 0 1 3857 295
////////////////////////////////////////////////////////////////////
//       Class : ShadeModelAttrib
// Description : Specifies whether flat shading (per-polygon) or
//               smooth shading (per-vertex) is in effect.
////////////////////////////////////////////////////////////////////

3857 4 Mode 794624 22 ShadeModelAttrib::Mode 22 ShadeModelAttrib::Mode 3856 0 0 0 0 0 0 0 0 0 2 6 M_flat 24 ShadeModelAttrib::M_flat 0 8 M_smooth 26 ShadeModelAttrib::M_smooth 1 0 0

3858 13 StencilAttrib 141313 13 StencilAttrib 13 StencilAttrib 0 0 0 0 3713 0 9 3704 3705 3706 3707 3708 3709 3710 3711 3712 0 0 1 0 3727 0 0 0 4 3859 3860 3861 3862 566
////////////////////////////////////////////////////////////////////
//       Class : StencilAttrib
// Description : A StencilAttrib is a collection of all stencil render
//               states.  The render states in a StencilAttrib are 
//               read-only.  A StencilAttrib is created with make or 
//               make_2_sided.  To determine if two sided stencil is 
//               supported, call the function GraphicsStateGuardian::
//               get_supports_two_sided_stencil.
////////////////////////////////////////////////////////////////////

3859 18 StencilRenderState 794624 33 StencilAttrib::StencilRenderState 33 StencilAttrib::StencilRenderState 3858 0 0 0 0 0 0 0 0 0 17 16 SRS_front_enable 31 StencilAttrib::SRS_front_enable 0 15 SRS_back_enable 30 StencilAttrib::SRS_back_enable 1 29 SRS_front_comparison_function 44 StencilAttrib::SRS_front_comparison_function 2 32 SRS_front_stencil_fail_operation 47 StencilAttrib::SRS_front_stencil_fail_operation 3 39 SRS_front_stencil_pass_z_fail_operation 54 StencilAttrib::SRS_front_stencil_pass_z_fail_operation 4 39 SRS_front_stencil_pass_z_pass_operation 54 StencilAttrib::SRS_front_stencil_pass_z_pass_operation 5 13 SRS_reference 28 StencilAttrib::SRS_reference 6 13 SRS_read_mask 28 StencilAttrib::SRS_read_mask 7 14 SRS_write_mask 29 StencilAttrib::SRS_write_mask 8 28 SRS_back_comparison_function 43 StencilAttrib::SRS_back_comparison_function 9 31 SRS_back_stencil_fail_operation 46 StencilAttrib::SRS_back_stencil_fail_operation 10 38 SRS_back_stencil_pass_z_fail_operation 53 StencilAttrib::SRS_back_stencil_pass_z_fail_operation 11 38 SRS_back_stencil_pass_z_pass_operation 53 StencilAttrib::SRS_back_stencil_pass_z_pass_operation 12 9 SRS_clear 24 StencilAttrib::SRS_clear 13 15 SRS_clear_value 30 StencilAttrib::SRS_clear_value 14 9 SRS_total 24 StencilAttrib::SRS_total 15 9 SRS_first 24 StencilAttrib::SRS_first 0 0 77
// enums are duplicated here from class StencilRenderStates for use in Python

3860 25 StencilComparisonFunction 794624 40 StencilAttrib::StencilComparisonFunction 40 StencilAttrib::StencilComparisonFunction 3858 0 0 0 0 0 0 0 0 0 8 9 SCF_never 24 StencilAttrib::SCF_never 0 13 SCF_less_than 28 StencilAttrib::SCF_less_than 1 9 SCF_equal 24 StencilAttrib::SCF_equal 2 22 SCF_less_than_or_equal 37 StencilAttrib::SCF_less_than_or_equal 3 16 SCF_greater_than 31 StencilAttrib::SCF_greater_than 4 13 SCF_not_equal 28 StencilAttrib::SCF_not_equal 5 25 SCF_greater_than_or_equal 40 StencilAttrib::SCF_greater_than_or_equal 6 10 SCF_always 25 StencilAttrib::SCF_always 7 0 0

3861 16 StencilOperation 794624 31 StencilAttrib::StencilOperation 31 StencilAttrib::StencilOperation 3858 0 0 0 0 0 0 0 0 0 8 7 SO_keep 22 StencilAttrib::SO_keep 0 7 SO_zero 22 StencilAttrib::SO_zero 1 10 SO_replace 25 StencilAttrib::SO_replace 2 12 SO_increment 27 StencilAttrib::SO_increment 3 12 SO_decrement 27 StencilAttrib::SO_decrement 4 9 SO_invert 24 StencilAttrib::SO_invert 5 21 SO_increment_saturate 36 StencilAttrib::SO_increment_saturate 6 21 SO_decrement_saturate 36 StencilAttrib::SO_decrement_saturate 7 0 0

3862 11 StencilMask 794624 26 StencilAttrib::StencilMask 26 StencilAttrib::StencilMask 3858 0 0 0 0 0 0 0 0 0 1 10 SM_default 25 StencilAttrib::SM_default -1 0 0

3863 10 ShaderPool 141313 10 ShaderPool 10 ShaderPool 0 0 0 0 3723 0 9 3714 3715 3716 3717 3718 3719 3720 3721 3722 0 0 0 0 0 406
////////////////////////////////////////////////////////////////////
//       Class : ShaderPool
// Description : This is the preferred interface for loading shaders for
//               the TextNode system.  It is similar to ModelPool and
//               TexturePool in that it unifies references to the same
//               filename.
////////////////////////////////////////////////////////////////////

3864 22 TransformState const * 8576 22 TransformState const * 22 TransformState const * 0 0 3865 0 0 0 0 0 0 0 0 0 0

3865 20 TransformState const 8832 20 TransformState const 20 TransformState const 0 0 3724 0 0 0 0 0 0 0 0 0 0

3866 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

3867 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

3868 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 3869 0 0 0 0 0 0 0 0 0 0

3869 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 3870 0 0 0 0 0 0 0 0 0 0

3870 9 RGBColorf 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3871 20 LQuaternionf const * 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 3872 0 0 0 0 0 0 0 0 0 0

3872 18 LQuaternionf const 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 3873 0 0 0 0 0 0 0 0 0 0

3873 12 LQuaternionf 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3874 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

3875 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 3876 0 0 0 0 0 0 0 0 0 0

3876 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 3877 0 0 0 0 0 0 0 0 0 0

3877 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 4246 4247 4248 0 0 0 0 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3878 18 LVecBase2f const * 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 3879 0 0 0 0 0 0 0 0 0 0

3879 16 LVecBase2f const 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 3880 0 0 0 0 0 0 0 0 0 0

3880 10 LVecBase2f 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 805
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3881 17 LMatrix3f const * 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 3882 0 0 0 0 0 0 0 0 0 0

3882 15 LMatrix3f const 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 3883 0 0 0 0 0 0 0 0 0 0

3883 9 LMatrix3f 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 4249 4250 4251 4252 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3884 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 3885 0 0 0 0 0 0 0 0 0 0

3885 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 3886 0 0 0 0 0 0 0 0 0 0

3886 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3887 12 LVecBase2f * 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 3880 0 0 0 0 0 0 0 0 0 0

3888 11 LMatrix3f * 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 3883 0 0 0 0 0 0 0 0 0 0

3889 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

3890 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

3891 10 PyObject * 8576 10 PyObject * 10 PyObject * 0 0 3892 0 0 0 0 0 0 0 0 0 0

3892 8 PyObject 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

3893 9 ostream * 8576 9 ostream * 9 ostream * 0 0 3894 0 0 0 0 0 0 0 0 0 0

3894 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

3895 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

3896 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 3895 0 0 0 0 0 0 0 0 0 0

3897 28 RenderAttribRegistry const * 8576 28 RenderAttribRegistry const * 28 RenderAttribRegistry const * 0 0 3898 0 0 0 0 0 0 0 0 0 0

3898 26 RenderAttribRegistry const 8832 26 RenderAttribRegistry const 26 RenderAttribRegistry const 0 0 3726 0 0 0 0 0 0 0 0 0 0

3899 22 RenderAttribRegistry * 8576 22 RenderAttribRegistry * 22 RenderAttribRegistry * 0 0 3726 0 0 0 0 0 0 0 0 0 0

3900 18 RenderAttrib const 8832 18 RenderAttrib const 18 RenderAttrib const 0 0 3727 0 0 0 0 0 0 0 0 0 0

3901 20 RenderAttrib const * 8576 20 RenderAttrib const * 20 RenderAttrib const * 0 0 3900 0 0 0 0 0 0 0 0 0 0

3902 20 DeletedBufferChain * 8576 20 DeletedBufferChain * 20 DeletedBufferChain * 0 0 3903 0 0 0 0 0 0 0 0 0 0

3903 18 DeletedBufferChain 2048 18 DeletedBufferChain 18 DeletedBufferChain 0 0 0 0 0 0 0 0 0 0 0 0 911
////////////////////////////////////////////////////////////////////
//       Class : DeletedBufferChain
// Description : This template class can be used to provide faster
//               allocation/deallocation for many Panda objects.  It
//               works by maintaining a linked list of deleted buffers
//               that are all of the same size; when a new object is
//               allocated that matches that size, the same space is
//               just reused.
//
//               This class manages untyped buffers of a fixed size.
//               It can be used directly; or it also serves as a
//               backbone for DeletedChain, which is a template class
//               that manages object allocations.
//
//               Use MemoryHook to get a new DeletedBufferChain of a
//               particular size.
////////////////////////////////////////////////////////////////////

3904 24 RenderModeAttrib const * 8576 24 RenderModeAttrib const * 24 RenderModeAttrib const * 0 0 3905 0 0 0 0 0 0 0 0 0 0

3905 22 RenderModeAttrib const 8832 22 RenderModeAttrib const 22 RenderModeAttrib const 0 0 3731 0 0 0 0 0 0 0 0 0 0

3906 14 TextureStage * 8576 14 TextureStage * 14 TextureStage * 0 0 3907 0 0 0 0 0 0 0 0 0 0

3907 12 TextureStage 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

3908 23 TexMatrixAttrib const * 8576 23 TexMatrixAttrib const * 23 TexMatrixAttrib const * 0 0 3909 0 0 0 0 0 0 0 0 0 0

3909 21 TexMatrixAttrib const 8832 21 TexMatrixAttrib const 21 TexMatrixAttrib const 0 0 3733 0 0 0 0 0 0 0 0 0 0

3910 19 RenderState const * 8576 19 RenderState const * 19 RenderState const * 0 0 3911 0 0 0 0 0 0 0 0 0 0

3911 17 RenderState const 8832 17 RenderState const 17 RenderState const 0 0 3734 0 0 0 0 0 0 0 0 0 0

3912 15 CullTraverser * 8576 15 CullTraverser * 15 CullTraverser * 0 0 3784 0 0 0 0 0 0 0 0 0 0

3913 25 CullTraverserData const * 8576 25 CullTraverserData const * 25 CullTraverserData const * 0 0 3914 0 0 0 0 0 0 0 0 0 0

3914 23 CullTraverserData const 8832 23 CullTraverserData const 23 CullTraverserData const 0 0 3785 0 0 0 0 0 0 0 0 0 0

3915 23 AlphaTestAttrib const * 8576 23 AlphaTestAttrib const * 23 AlphaTestAttrib const * 0 0 3916 0 0 0 0 0 0 0 0 0 0

3916 21 AlphaTestAttrib const 8832 21 AlphaTestAttrib const 21 AlphaTestAttrib const 0 0 3735 0 0 0 0 0 0 0 0 0 0

3917 18 unsigned short int 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

3918 23 AntialiasAttrib const * 8576 23 AntialiasAttrib const * 23 AntialiasAttrib const * 0 0 3919 0 0 0 0 0 0 0 0 0 0

3919 21 AntialiasAttrib const 8832 21 AntialiasAttrib const 21 AntialiasAttrib const 0 0 3736 0 0 0 0 0 0 0 0 0 0

3920 20 RenderEffect const * 8576 20 RenderEffect const * 20 RenderEffect const * 0 0 3921 0 0 0 0 0 0 0 0 0 0

3921 18 RenderEffect const 8832 18 RenderEffect const 18 RenderEffect const 0 0 3738 0 0 0 0 0 0 0 0 0 0

3922 21 RenderEffects const * 8576 21 RenderEffects const * 21 RenderEffects const * 0 0 3923 0 0 0 0 0 0 0 0 0 0

3923 19 RenderEffects const 8832 19 RenderEffects const 19 RenderEffects const 0 0 3739 0 0 0 0 0 0 0 0 0 0

3924 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

3925 11 PandaNode * 8576 11 PandaNode * 11 PandaNode * 0 0 3740 0 0 0 0 0 0 0 0 0 0

3926 17 PandaNode const * 8576 17 PandaNode const * 17 PandaNode const * 0 0 3927 0 0 0 0 0 0 0 0 0 0

3927 15 PandaNode const 8832 15 PandaNode const 15 PandaNode const 0 0 3740 0 0 0 0 0 0 0 0 0 0

3928 8 Thread * 8576 8 Thread * 8 Thread * 0 0 3929 0 0 0 0 0 0 0 0 0 0

3929 6 Thread 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

3930 9 BitMask32 2048 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

3931 29 BitMask< unsigned int, 32 > * 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 3930 0 0 0 0 0 0 0 0 0 0

3932 27 GraphicsStateGuardianBase * 8576 27 GraphicsStateGuardianBase * 27 GraphicsStateGuardianBase * 0 0 3933 0 0 0 0 0 0 0 0 0 0

3933 25 GraphicsStateGuardianBase 2048 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 4253 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

3934 10 BoundsType 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 3935 0 0 0 0 0 0 0 0 0 4 10 BT_default 26 BoundingVolume::BT_default 0 7 BT_best 23 BoundingVolume::BT_best 1 9 BT_sphere 25 BoundingVolume::BT_sphere 2 6 BT_box 22 BoundingVolume::BT_box 3 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

3935 14 BoundingVolume 2048 14 BoundingVolume 14 BoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

3936 22 BoundingVolume const * 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 3937 0 0 0 0 0 0 0 0 0 0

3937 20 BoundingVolume const 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 3935 0 0 0 0 0 0 0 0 0 0

3938 11 UpdateSeq * 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 3939 0 0 0 0 0 0 0 0 0 0

3939 9 UpdateSeq 2048 9 UpdateSeq 9 UpdateSeq 0 0 0 0 0 0 0 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : UpdateSeq
// Description : This is a sequence number that increments
//               monotonically.  It can be used to track cache
//               updates, or serve as a kind of timestamp for any
//               changing properties.
//
//               A special class is used instead of simply an int, so
//               we can elegantly handle such things as wraparound and
//               special cases.  There are two special cases.
//               Firstly, a sequence number is 'initial' when it is
//               first created.  This sequence is older than any other
//               sequence number.  Secondly, a sequence number may be
//               explicitly set to 'old'.  This is older than any
//               other sequence number except 'initial'.  Finally, we
//               have the explicit number 'fresh', which is newer
//               than any other sequence number.  All other sequences
//               are numeric and are monotonically increasing.
////////////////////////////////////////////////////////////////////

3940 7 Light * 8576 7 Light * 7 Light * 0 0 3800 0 0 0 0 0 0 0 0 0 0

3941 11 BamReader * 8576 11 BamReader * 11 BamReader * 0 0 3942 0 0 0 0 0 0 0 0 0 0

3942 9 BamReader 2048 9 BamReader 9 BamReader 0 0 0 0 0 0 0 0 0 0 0 0 1870
////////////////////////////////////////////////////////////////////
//       Class : BamReader
// Description : This is the fundamental interface for extracting
//               binary objects from a Bam file, as generated by a
//               BamWriter.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects within the Bam file; the BamReader
//               automatically manages these (with help from code
//               within each class) and restores the pointers
//               correctly.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramGenerator of some kind, which is simply a
//               linear source of Datagrams.  It is probably from a
//               disk file, but it might conceivably be streamed
//               directly from a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

3943 15 TypedWritable * 8576 15 TypedWritable * 15 TypedWritable * 0 0 3741 0 0 0 0 0 0 0 0 0 0

3944 9 Namable * 8576 9 Namable * 9 Namable * 0 0 3742 0 0 0 0 0 0 0 0 0 0

3945 16 LinkedListNode * 8576 16 LinkedListNode * 16 LinkedListNode * 0 0 3743 0 0 0 0 0 0 0 0 0 0

3946 16 ReferenceCount * 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 3744 0 0 0 0 0 0 0 0 0 0

3947 26 TransparencyAttrib const * 8576 26 TransparencyAttrib const * 26 TransparencyAttrib const * 0 0 3948 0 0 0 0 0 0 0 0 0 0

3948 24 TransparencyAttrib const 8832 24 TransparencyAttrib const 24 TransparencyAttrib const 0 0 3747 0 0 0 0 0 0 0 0 0 0

3949 10 NodePath * 8576 10 NodePath * 10 NodePath * 0 0 3749 0 0 0 0 0 0 0 0 0 0

3950 16 NodePath const * 8576 16 NodePath const * 16 NodePath const * 0 0 3951 0 0 0 0 0 0 0 0 0 0

3951 14 NodePath const 8832 14 NodePath const 14 NodePath const 0 0 3749 0 0 0 0 0 0 0 0 0 0

3952 20 NodePathCollection * 8576 20 NodePathCollection * 20 NodePathCollection * 0 0 3820 0 0 0 0 0 0 0 0 0 0

3953 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 3886 0 0 0 0 0 0 0 0 0 0

3954 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3955 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 3954 0 0 0 0 0 0 0 0 0 0

3956 12 LVecBase3f * 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 3870 0 0 0 0 0 0 0 0 0 0

3957 14 LQuaternionf * 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 3873 0 0 0 0 0 0 0 0 0 0

3958 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 3877 0 0 0 0 0 0 0 0 0 0

3959 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 3960 0 0 0 0 0 0 0 0 0 0

3960 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 3954 0 0 0 0 0 0 0 0 0 0

3961 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 3962 0 0 0 0 0 0 0 0 0 0

3962 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 3963 0 0 0 0 0 0 0 0 0 0

3963 6 Colorf 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 754
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3964 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 3963 0 0 0 0 0 0 0 0 0 0

3965 9 Texture * 8576 9 Texture * 9 Texture * 0 0 3966 0 0 0 0 0 0 0 0 0 0

3966 7 Texture 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

3967 14 Shader const * 8576 14 Shader const * 14 Shader const * 0 0 3968 0 0 0 0 0 0 0 0 0 0

3968 12 Shader const 8832 12 Shader const 12 Shader const 0 0 3969 0 0 0 0 0 0 0 0 0 0

3969 6 Shader 2048 6 Shader 6 Shader 0 0 0 0 0 0 0 0 0 0 0 0 421
////////////////////////////////////////////////////////////////////
//       Class : Shader
//      Summary: The Shader class is meant to select the Shader Language,
//               select the available profile, compile the shader, and 
//               finally compile and store the shader parameters  
//               in the appropriate structure.
////////////////////////////////////////////////////////////////////

3970 14 InternalName * 8576 14 InternalName * 14 InternalName * 0 0 3971 0 0 0 0 0 0 0 0 0 0

3971 12 InternalName 2048 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 0 837
////////////////////////////////////////////////////////////////////
//       Class : InternalName
// Description : Encodes a string name in a hash table, mapping it to
//               a pointer.  This is used to tokenify names so they
//               may be used efficiently in low-level Panda
//               structures, for instance to differentiate the
//               multiple sets of texture coordinates that might be
//               stored on a Geom.
//
//               InternalNames are hierarchical, with the '.' used by
//               convention as a separator character.  You can
//               construct a single InternalName as a composition of
//               one or more other names, or by giving it a source
//               string directly.
////////////////////////////////////////////////////////////////////

3972 35 PointerToArray< LMatrix3f > const * 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 3973 0 0 0 0 0 0 0 0 0 0

3973 33 PointerToArray< LMatrix3f > const 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 3974 0 0 0 0 0 0 0 0 0 0

3974 27 PointerToArray< LMatrix3f > 2048 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3975 35 PointerToArray< LMatrix4f > const * 8576 35 PointerToArray< LMatrix4f > const * 35 PointerToArray< LMatrix4f > const * 0 0 3976 0 0 0 0 0 0 0 0 0 0

3976 33 PointerToArray< LMatrix4f > const 8832 33 PointerToArray< LMatrix4f > const 33 PointerToArray< LMatrix4f > const 0 0 3977 0 0 0 0 0 0 0 0 0 0

3977 27 PointerToArray< LMatrix4f > 2048 27 PointerToArray< LMatrix4f > 27 PointerToArray< LMatrix4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3978 36 PointerToArray< LVecBase2f > const * 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 3979 0 0 0 0 0 0 0 0 0 0

3979 34 PointerToArray< LVecBase2f > const 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 3980 0 0 0 0 0 0 0 0 0 0

3980 28 PointerToArray< LVecBase2f > 2048 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3981 36 PointerToArray< LVecBase3f > const * 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 3982 0 0 0 0 0 0 0 0 0 0

3982 34 PointerToArray< LVecBase3f > const 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 3983 0 0 0 0 0 0 0 0 0 0

3983 28 PointerToArray< LVecBase3f > 2048 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3984 36 PointerToArray< LVecBase4f > const * 8576 36 PointerToArray< LVecBase4f > const * 36 PointerToArray< LVecBase4f > const * 0 0 3985 0 0 0 0 0 0 0 0 0 0

3985 34 PointerToArray< LVecBase4f > const 8832 34 PointerToArray< LVecBase4f > const 34 PointerToArray< LVecBase4f > const 0 0 3986 0 0 0 0 0 0 0 0 0 0

3986 28 PointerToArray< LVecBase4f > 2048 28 PointerToArray< LVecBase4f > 28 PointerToArray< LVecBase4f > 0 0 0 0 0 0 0 0 0 0 0 0 0

3987 32 PointerToArray< double > const * 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 3988 0 0 0 0 0 0 0 0 0 0

3988 30 PointerToArray< double > const 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 3989 0 0 0 0 0 0 0 0 0 0

3989 10 PTA_double 2048 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 0 0 0 0 0 0 0 0 0 0

3990 31 PointerToArray< float > const * 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 3991 0 0 0 0 0 0 0 0 0 0

3991 29 PointerToArray< float > const 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 3992 0 0 0 0 0 0 0 0 0 0

3992 9 PTA_float 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

3993 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

3994 19 ShaderInput const * 8576 19 ShaderInput const * 19 ShaderInput const * 0 0 3995 0 0 0 0 0 0 0 0 0 0

3995 17 ShaderInput const 8832 17 ShaderInput const 17 ShaderInput const 0 0 3828 0 0 0 0 0 0 0 0 0 0

3996 20 InternalName const * 8576 20 InternalName const * 20 InternalName const * 0 0 3997 0 0 0 0 0 0 0 0 0 0

3997 18 InternalName const 8832 18 InternalName const 18 InternalName const 0 0 3971 0 0 0 0 0 0 0 0 0 0

3998 24 InternalNameCollection * 8576 24 InternalNameCollection * 24 InternalNameCollection * 0 0 3799 0 0 0 0 0 0 0 0 0 0

3999 17 TextureCollection 2048 17 TextureCollection 17 TextureCollection 0 0 0 0 0 0 0 0 0 0 0 0 290
////////////////////////////////////////////////////////////////////
//       Class : TextureCollection
// Description : Manages a list of Texture objects, as returned by
//               TexturePool::find_all_textures().
////////////////////////////////////////////////////////////////////

4000 19 TextureCollection * 8576 19 TextureCollection * 19 TextureCollection * 0 0 3999 0 0 0 0 0 0 0 0 0 0

4001 24 TextureStageCollection * 8576 24 TextureStageCollection * 24 TextureStageCollection * 0 0 3839 0 0 0 0 0 0 0 0 0 0

4002 8 Material 2048 8 Material 8 Material 0 0 0 0 0 0 0 0 0 0 0 0 373
////////////////////////////////////////////////////////////////////
//       Class : Material
// Description : Defines the way an object appears in the presence of
//               lighting.  A material is only necessary if lighting
//               is to be enabled; otherwise, the material isn't used.
////////////////////////////////////////////////////////////////////

4003 10 Material * 8576 10 Material * 10 Material * 0 0 4002 0 0 0 0 0 0 0 0 0 0

4004 20 MaterialCollection * 8576 20 MaterialCollection * 20 MaterialCollection * 0 0 3811 0 0 0 0 0 0 0 0 0 0

4005 5 Fog * 8576 5 Fog * 5 Fog * 0 0 3794 0 0 0 0 0 0 0 0 0 0

4006 16 BoundingVolume * 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 3935 0 0 0 0 0 0 0 0 0 0

4007 22 basic_string< char > * 8576 22 basic_string< char > * 22 basic_string< char > * 0 0 4008 0 0 0 0 0 0 0 0 0 0

4008 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

4009 11 BamWriter * 8576 11 BamWriter * 11 BamWriter * 0 0 4010 0 0 0 0 0 0 0 0 0 0

4010 9 BamWriter 2048 9 BamWriter 9 BamWriter 0 0 0 0 0 0 0 0 0 0 0 0 1949
////////////////////////////////////////////////////////////////////
//       Class : BamWriter
// Description : This is the fundamental interface for writing binary
//               objects to a Bam file, to be extracted later by a
//               BamReader.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects; the BamWriter automatically manages
//               these (with help from code within each class) and
//               writes all referenced objects to the file in such a
//               way that the pointers may be correctly restored
//               later.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramSink of some kind, which simply accepts a
//               linear stream of Datagrams.  It is probably written
//               to a disk file, but it might conceivably be streamed
//               directly to a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

4011 20 AttribNodeRegistry * 8576 20 AttribNodeRegistry * 20 AttribNodeRegistry * 0 0 3751 0 0 0 0 0 0 0 0 0 0

4012 26 AttribNodeRegistry const * 8576 26 AttribNodeRegistry const * 26 AttribNodeRegistry const * 0 0 4013 0 0 0 0 0 0 0 0 0 0

4013 24 AttribNodeRegistry const 8832 24 AttribNodeRegistry const 24 AttribNodeRegistry const 0 0 3751 0 0 0 0 0 0 0 0 0 0

4014 25 AudioVolumeAttrib const * 8576 25 AudioVolumeAttrib const * 25 AudioVolumeAttrib const * 0 0 4015 0 0 0 0 0 0 0 0 0 0

4015 23 AudioVolumeAttrib const 8832 23 AudioVolumeAttrib const 23 AudioVolumeAttrib const 0 0 3752 0 0 0 0 0 0 0 0 0 0

4016 25 AuxBitplaneAttrib const * 8576 25 AuxBitplaneAttrib const * 25 AuxBitplaneAttrib const * 0 0 4017 0 0 0 0 0 0 0 0 0 0

4017 23 AuxBitplaneAttrib const 8832 23 AuxBitplaneAttrib const 23 AuxBitplaneAttrib const 0 0 3753 0 0 0 0 0 0 0 0 0 0

4018 14 AuxSceneData * 8576 14 AuxSceneData * 14 AuxSceneData * 0 0 3755 0 0 0 0 0 0 0 0 0 0

4019 20 AuxSceneData const * 8576 20 AuxSceneData const * 20 AuxSceneData const * 0 0 4020 0 0 0 0 0 0 0 0 0 0

4020 18 AuxSceneData const 8832 18 AuxSceneData const 18 AuxSceneData const 0 0 3755 0 0 0 0 0 0 0 0 0 0

4021 9 BamFile * 8576 9 BamFile * 9 BamFile * 0 0 3757 0 0 0 0 0 0 0 0 0 0

4022 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 4023 0 0 0 0 0 0 0 0 0 0

4023 14 Filename const 8832 14 Filename const 14 Filename const 0 0 4024 0 0 0 0 0 0 0 0 0 0

4024 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

4025 9 istream * 8576 9 istream * 9 istream * 0 0 4026 0 0 0 0 0 0 0 0 0 0

4026 7 istream 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

4027 15 BamFile const * 8576 15 BamFile const * 15 BamFile const * 0 0 4028 0 0 0 0 0 0 0 0 0 0

4028 13 BamFile const 8832 13 BamFile const 13 BamFile const 0 0 3757 0 0 0 0 0 0 0 0 0 0

4029 21 TypedWritable const * 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 4030 0 0 0 0 0 0 0 0 0 0

4030 19 TypedWritable const 8832 19 TypedWritable const 19 TypedWritable const 0 0 3741 0 0 0 0 0 0 0 0 0 0

4031 9 BamEndian 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 3758 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0 15 BE_littleendian 25 BamEnums::BE_littleendian 1 9 BE_native 19 BamEnums::BE_native 1 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only
// two possible values, either BE_bigendian or BE_littleendian; but
// through a preprocessor trick we also add BE_native, which is the
// same numerically as whichever value the hardware supports natively.

4032 23 BillboardEffect const * 8576 23 BillboardEffect const * 23 BillboardEffect const * 0 0 4033 0 0 0 0 0 0 0 0 0 0

4033 21 BillboardEffect const 8832 21 BillboardEffect const 21 BillboardEffect const 0 0 3759 0 0 0 0 0 0 0 0 0 0

4034 6 Lens * 8576 6 Lens * 6 Lens * 0 0 4035 0 0 0 0 0 0 0 0 0 0

4035 4 Lens 2048 4 Lens 4 Lens 0 0 0 0 0 0 0 0 0 0 0 0 688
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node
//               (defined in sgraph), which defines the fundamental
//               interface to point-of-view for rendering.  Lenses are
//               also used in other contexts, however; for instance, a
//               Spotlight is also defined using a lens.
////////////////////////////////////////////////////////////////////

4036 10 LensNode * 8576 10 LensNode * 10 LensNode * 0 0 3760 0 0 0 0 0 0 0 0 0 0

4037 12 Lens const * 8576 12 Lens const * 12 Lens const * 0 0 4038 0 0 0 0 0 0 0 0 0 0

4038 10 Lens const 8832 10 Lens const 10 Lens const 0 0 4035 0 0 0 0 0 0 0 0 0 0

4039 16 LensNode const * 8576 16 LensNode const * 16 LensNode const * 0 0 4040 0 0 0 0 0 0 0 0 0 0

4040 14 LensNode const 8832 14 LensNode const 14 LensNode const 0 0 3760 0 0 0 0 0 0 0 0 0 0

4041 14 Camera const * 8576 14 Camera const * 14 Camera const * 0 0 4042 0 0 0 0 0 0 0 0 0 0

4042 12 Camera const 8832 12 Camera const 12 Camera const 0 0 3761 0 0 0 0 0 0 0 0 0 0

4043 8 Camera * 8576 8 Camera * 8 Camera * 0 0 3761 0 0 0 0 0 0 0 0 0 0

4044 17 DisplayRegionBase 2048 17 DisplayRegionBase 17 DisplayRegionBase 0 0 0 0 0 0 0 0 0 0 0 0 307
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionBase
// Description : An abstract base class for DisplayRegion, mainly so
//               we can store DisplayRegion pointers in a Camera.
////////////////////////////////////////////////////////////////////

4045 19 DisplayRegionBase * 8576 19 DisplayRegionBase * 19 DisplayRegionBase * 0 0 4044 0 0 0 0 0 0 0 0 0 0

4046 14 Planef const * 8576 14 Planef const * 14 Planef const * 0 0 4047 0 0 0 0 0 0 0 0 0 0

4047 12 Planef const 8832 12 Planef const 12 Planef const 0 0 4048 0 0 0 0 0 0 0 0 0 0

4048 6 Planef 2048 6 Planef 6 Planef 0 0 0 0 0 0 0 0 0 0 0 0 785
// Filename: plane_src.h
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : Plane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

4049 11 PlaneNode * 8576 11 PlaneNode * 11 PlaneNode * 0 0 3762 0 0 0 0 0 0 0 0 0 0

4050 17 PlaneNode const * 8576 17 PlaneNode const * 17 PlaneNode const * 0 0 4051 0 0 0 0 0 0 0 0 0 0

4051 15 PlaneNode const 8832 15 PlaneNode const 15 PlaneNode const 0 0 3762 0 0 0 0 0 0 0 0 0 0

4052 23 ClipPlaneAttrib const * 8576 23 ClipPlaneAttrib const * 23 ClipPlaneAttrib const * 0 0 4053 0 0 0 0 0 0 0 0 0 0

4053 21 ClipPlaneAttrib const 8832 21 ClipPlaneAttrib const 21 ClipPlaneAttrib const 0 0 3764 0 0 0 0 0 0 0 0 0 0

4054 19 ColorAttrib const * 8576 19 ColorAttrib const * 19 ColorAttrib const * 0 0 4055 0 0 0 0 0 0 0 0 0 0

4055 17 ColorAttrib const 8832 17 ColorAttrib const 17 ColorAttrib const 0 0 3766 0 0 0 0 0 0 0 0 0 0

4056 24 ColorBlendAttrib const * 8576 24 ColorBlendAttrib const * 24 ColorBlendAttrib const * 0 0 4057 0 0 0 0 0 0 0 0 0 0

4057 22 ColorBlendAttrib const 8832 22 ColorBlendAttrib const 22 ColorBlendAttrib const 0 0 3768 0 0 0 0 0 0 0 0 0 0

4058 24 ColorScaleAttrib const * 8576 24 ColorScaleAttrib const * 24 ColorScaleAttrib const * 0 0 4059 0 0 0 0 0 0 0 0 0 0

4059 22 ColorScaleAttrib const 8832 22 ColorScaleAttrib const 22 ColorScaleAttrib const 0 0 3771 0 0 0 0 0 0 0 0 0 0

4060 24 ColorWriteAttrib const * 8576 24 ColorWriteAttrib const * 24 ColorWriteAttrib const * 0 0 4061 0 0 0 0 0 0 0 0 0 0

4061 22 ColorWriteAttrib const 8832 22 ColorWriteAttrib const 22 ColorWriteAttrib const 0 0 3772 0 0 0 0 0 0 0 0 0 0

4062 21 CompassEffect const * 8576 21 CompassEffect const * 21 CompassEffect const * 0 0 4063 0 0 0 0 0 0 0 0 0 0

4063 19 CompassEffect const 8832 19 CompassEffect const 19 CompassEffect const 0 0 3774 0 0 0 0 0 0 0 0 0 0

4064 21 CullBinAttrib const * 8576 21 CullBinAttrib const * 21 CullBinAttrib const * 0 0 4065 0 0 0 0 0 0 0 0 0 0

4065 19 CullBinAttrib const 8832 19 CullBinAttrib const 19 CullBinAttrib const 0 0 3778 0 0 0 0 0 0 0 0 0 0

4066 16 CullBinManager * 8576 16 CullBinManager * 16 CullBinManager * 0 0 3779 0 0 0 0 0 0 0 0 0 0

4067 22 CullBinManager const * 8576 22 CullBinManager const * 22 CullBinManager const * 0 0 4068 0 0 0 0 0 0 0 0 0 0

4068 20 CullBinManager const 8832 20 CullBinManager const 20 CullBinManager const 0 0 3779 0 0 0 0 0 0 0 0 0 0

4069 22 CullFaceAttrib const * 8576 22 CullFaceAttrib const * 22 CullFaceAttrib const * 0 0 4070 0 0 0 0 0 0 0 0 0 0

4070 20 CullFaceAttrib const 8832 20 CullFaceAttrib const 20 CullFaceAttrib const 0 0 3780 0 0 0 0 0 0 0 0 0 0

4071 10 GeomNode * 8576 10 GeomNode * 10 GeomNode * 0 0 3782 0 0 0 0 0 0 0 0 0 0

4072 16 GeomNode const * 8576 16 GeomNode const * 16 GeomNode const * 0 0 4073 0 0 0 0 0 0 0 0 0 0

4073 14 GeomNode const 8832 14 GeomNode const 14 GeomNode const 0 0 3782 0 0 0 0 0 0 0 0 0 0

4074 10 Geom const 8832 10 Geom const 10 Geom const 0 0 4075 0 0 0 0 0 0 0 0 0 0

4075 4 Geom 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 1 4254 0 0 0 0 687
////////////////////////////////////////////////////////////////////
//       Class : Geom
// Description : A container for geometry primitives.  This class
//               associates one or more GeomPrimitive objects with a
//               table of vertices defined by a GeomVertexData object.
//               All of the primitives stored in a particular Geom are
//               drawn from the same set of vertices (each primitive
//               uses a subset of all of the vertices in the table),
//               and all of them must be rendered at the same time, in
//               the same graphics state.
////////////////////////////////////////////////////////////////////

4076 12 Geom const * 8576 12 Geom const * 12 Geom const * 0 0 4074 0 0 0 0 0 0 0 0 0 0

4077 6 Geom * 8576 6 Geom * 6 Geom * 0 0 4075 0 0 0 0 0 0 0 0 0 0

4078 12 SceneSetup * 8576 12 SceneSetup * 12 SceneSetup * 0 0 3783 0 0 0 0 0 0 0 0 0 0

4079 15 DisplayRegion * 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 4080 0 0 0 0 0 0 0 0 0 0

4080 13 DisplayRegion 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 0

4081 18 SceneSetup const * 8576 18 SceneSetup const * 18 SceneSetup const * 0 0 4082 0 0 0 0 0 0 0 0 0 0

4082 16 SceneSetup const 8832 16 SceneSetup const 16 SceneSetup const 0 0 3783 0 0 0 0 0 0 0 0 0 0

4083 21 CullTraverser const * 8576 21 CullTraverser const * 21 CullTraverser const * 0 0 4084 0 0 0 0 0 0 0 0 0 0

4084 19 CullTraverser const 8832 19 CullTraverser const 19 CullTraverser const 0 0 3784 0 0 0 0 0 0 0 0 0 0

4085 35 BitMask< unsigned int, 32 > const * 8576 35 BitMask< unsigned int, 32 > const * 35 BitMask< unsigned int, 32 > const * 0 0 4086 0 0 0 0 0 0 0 0 0 0

4086 33 BitMask< unsigned int, 32 > const 8832 33 BitMask< unsigned int, 32 > const 33 BitMask< unsigned int, 32 > const 0 0 3930 0 0 0 0 0 0 0 0 0 0

4087 25 GeometricBoundingVolume * 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 4088 0 0 0 0 0 0 0 0 0 0

4088 23 GeometricBoundingVolume 2048 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 380
////////////////////////////////////////////////////////////////////
//       Class : GeometricBoundingVolume
// Description : This is another abstract class, for a general class
//               of bounding volumes that actually enclose points in
//               3-d space, such as BSP's and bounding spheres.
////////////////////////////////////////////////////////////////////

4089 13 CullHandler * 8576 13 CullHandler * 13 CullHandler * 0 0 4090 0 0 0 0 0 0 0 0 0 0

4090 11 CullHandler 2048 11 CullHandler 11 CullHandler 0 0 0 0 0 0 0 0 0 0 0 0 0

4091 15 PortalClipper * 8576 15 PortalClipper * 15 PortalClipper * 0 0 4092 0 0 0 0 0 0 0 0 0 0

4092 13 PortalClipper 2048 13 PortalClipper 13 PortalClipper 0 0 0 0 0 0 0 0 0 0 0 0 0

4093 19 CullTraverserData * 8576 19 CullTraverserData * 19 CullTraverserData * 0 0 3785 0 0 0 0 0 0 0 0 0 0

4094 18 CullResult const * 8576 18 CullResult const * 18 CullResult const * 0 0 4095 0 0 0 0 0 0 0 0 0 0

4095 16 CullResult const 8832 16 CullResult const 16 CullResult const 0 0 3786 0 0 0 0 0 0 0 0 0 0

4096 12 CullResult * 8576 12 CullResult * 12 CullResult * 0 0 3786 0 0 0 0 0 0 0 0 0 0

4097 7 CullBin 1050624 7 CullBin 7 CullBin 0 0 0 0 0 0 0 0 0 0 0 0 580
////////////////////////////////////////////////////////////////////
//       Class : CullBin
// Description : A collection of Geoms and their associated state, for
//               a particular scene.  The cull traversal (and the
//               BinCullHandler) assigns Geoms to bins as it comes
//               across them.
//
//               This is an abstract base class; derived classes like
//               CullBinStateSorted and CullBinBackToFront provide the
//               actual implementation.
////////////////////////////////////////////////////////////////////

4098 9 CullBin * 8576 9 CullBin * 9 CullBin * 0 0 4097 0 0 0 0 0 0 0 0 0 0

4099 16 CullableObject * 8576 16 CullableObject * 16 CullableObject * 0 0 4100 0 0 0 0 0 0 0 0 0 0

4100 14 CullableObject 1050624 14 CullableObject 14 CullableObject 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : CullableObject
// Description : The smallest atom of cull.  This is normally just a
//               Geom and its associated state, but it also represent
//               a number of Geoms to be drawn together, with a number
//               of Geoms decalled onto them.
////////////////////////////////////////////////////////////////////

4101 25 DepthOffsetAttrib const * 8576 25 DepthOffsetAttrib const * 25 DepthOffsetAttrib const * 0 0 4102 0 0 0 0 0 0 0 0 0 0

4102 23 DepthOffsetAttrib const 8832 23 DepthOffsetAttrib const 23 DepthOffsetAttrib const 0 0 3788 0 0 0 0 0 0 0 0 0 0

4103 23 DepthTestAttrib const * 8576 23 DepthTestAttrib const * 23 DepthTestAttrib const * 0 0 4104 0 0 0 0 0 0 0 0 0 0

4104 21 DepthTestAttrib const 8832 21 DepthTestAttrib const 21 DepthTestAttrib const 0 0 3789 0 0 0 0 0 0 0 0 0 0

4105 24 DepthWriteAttrib const * 8576 24 DepthWriteAttrib const * 24 DepthWriteAttrib const * 0 0 4106 0 0 0 0 0 0 0 0 0 0

4106 22 DepthWriteAttrib const 8832 22 DepthWriteAttrib const 22 DepthWriteAttrib const 0 0 3790 0 0 0 0 0 0 0 0 0 0

4107 21 EventStorePandaNode * 8576 21 EventStorePandaNode * 21 EventStorePandaNode * 0 0 3792 0 0 0 0 0 0 0 0 0 0

4108 27 EventStorePandaNode const * 8576 27 EventStorePandaNode const * 27 EventStorePandaNode const * 0 0 4109 0 0 0 0 0 0 0 0 0 0

4109 25 EventStorePandaNode const 8832 25 EventStorePandaNode const 25 EventStorePandaNode const 0 0 3792 0 0 0 0 0 0 0 0 0 0

4110 11 Fog const * 8576 11 Fog const * 11 Fog const * 0 0 4111 0 0 0 0 0 0 0 0 0 0

4111 9 Fog const 8832 9 Fog const 9 Fog const 0 0 3794 0 0 0 0 0 0 0 0 0 0

4112 17 FogAttrib const * 8576 17 FogAttrib const * 17 FogAttrib const * 0 0 4113 0 0 0 0 0 0 0 0 0 0

4113 15 FogAttrib const 8832 15 FogAttrib const 15 FogAttrib const 0 0 3796 0 0 0 0 0 0 0 0 0 0

4114 28 GeomDrawCallbackData const * 8576 28 GeomDrawCallbackData const * 28 GeomDrawCallbackData const * 0 0 4115 0 0 0 0 0 0 0 0 0 0

4115 26 GeomDrawCallbackData const 8832 26 GeomDrawCallbackData const 26 GeomDrawCallbackData const 0 0 3797 0 0 0 0 0 0 0 0 0 0

4116 22 GeomDrawCallbackData * 8576 22 GeomDrawCallbackData * 22 GeomDrawCallbackData * 0 0 3797 0 0 0 0 0 0 0 0 0 0

4117 30 InternalNameCollection const * 8576 30 InternalNameCollection const * 30 InternalNameCollection const * 0 0 4118 0 0 0 0 0 0 0 0 0 0

4118 28 InternalNameCollection const 8832 28 InternalNameCollection const 28 InternalNameCollection const 0 0 3799 0 0 0 0 0 0 0 0 0 0

4119 13 Light const * 8576 13 Light const * 13 Light const * 0 0 4120 0 0 0 0 0 0 0 0 0 0

4120 11 Light const 8832 11 Light const 11 Light const 0 0 3800 0 0 0 0 0 0 0 0 0 0

4121 19 LightAttrib const * 8576 19 LightAttrib const * 19 LightAttrib const * 0 0 4122 0 0 0 0 0 0 0 0 0 0

4122 17 LightAttrib const 8832 17 LightAttrib const 17 LightAttrib const 0 0 3801 0 0 0 0 0 0 0 0 0 0

4123 23 LightRampAttrib const * 8576 23 LightRampAttrib const * 23 LightRampAttrib const * 0 0 4124 0 0 0 0 0 0 0 0 0 0

4124 21 LightRampAttrib const 8832 21 LightRampAttrib const 21 LightRampAttrib const 0 0 3803 0 0 0 0 0 0 0 0 0 0

4125 8 Loader * 8576 8 Loader * 8 Loader * 0 0 3805 0 0 0 0 0 0 0 0 0 0

4126 18 AsyncTaskManager * 8576 18 AsyncTaskManager * 18 AsyncTaskManager * 0 0 4127 0 0 0 0 0 0 0 0 0 0

4127 16 AsyncTaskManager 2048 16 AsyncTaskManager 16 AsyncTaskManager 0 0 0 0 0 0 0 1 4255 0 0 0 0 1046
////////////////////////////////////////////////////////////////////
//       Class : AsyncTaskManager
// Description : A class to manage a loose queue of isolated tasks,
//               which can be performed either synchronously (in the
//               foreground thread) or asynchronously (by a background
//               thread).
//
//               The AsyncTaskManager is actually a collection of
//               AsyncTaskChains, each of which maintains a list of
//               tasks.  Each chain can be either foreground or
//               background (it may run only in the main thread, or it
//               may be serviced by one or more background threads).
//               See AsyncTaskChain for more information.
//
//               If you do not require background processing, it is
//               perfectly acceptable to create only one
//               AsyncTaskChain, which runs in the main thread.  This
//               is a common configuration.
////////////////////////////////////////////////////////////////////

4128 14 Loader const * 8576 14 Loader const * 14 Loader const * 0 0 4129 0 0 0 0 0 0 0 0 0 0

4129 12 Loader const 8832 12 Loader const 12 Loader const 0 0 3805 0 0 0 0 0 0 0 0 0 0

4130 11 AsyncTask * 8576 11 AsyncTask * 11 AsyncTask * 0 0 3813 0 0 0 0 0 0 0 0 0 0

4131 21 LoaderOptions const * 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 4132 0 0 0 0 0 0 0 0 0 0

4132 19 LoaderOptions const 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 4133 0 0 0 0 0 0 0 0 0 0

4133 13 LoaderOptions 2048 13 LoaderOptions 13 LoaderOptions 0 0 0 0 0 0 0 0 0 0 0 0 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

4134 21 TypedReferenceCount * 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 3756 0 0 0 0 0 0 0 0 0 0

4135 9 Results * 8576 17 Loader::Results * 17 Loader::Results * 0 0 3806 0 0 0 0 0 0 0 0 0 0

4136 15 Results const * 8576 23 Loader::Results const * 23 Loader::Results const * 0 0 4137 0 0 0 0 0 0 0 0 0 0

4137 13 Results const 8832 21 Loader::Results const 21 Loader::Results const 0 0 3806 0 0 0 0 0 0 0 0 0 0

4138 16 LoaderFileType * 8576 16 LoaderFileType * 16 LoaderFileType * 0 0 3807 0 0 0 0 0 0 0 0 0 0

4139 22 LoaderFileType const * 8576 22 LoaderFileType const * 22 LoaderFileType const * 0 0 4140 0 0 0 0 0 0 0 0 0 0

4140 20 LoaderFileType const 8832 20 LoaderFileType const 20 LoaderFileType const 0 0 3807 0 0 0 0 0 0 0 0 0 0

4141 30 LoaderFileTypeRegistry const * 8576 30 LoaderFileTypeRegistry const * 30 LoaderFileTypeRegistry const * 0 0 4142 0 0 0 0 0 0 0 0 0 0

4142 28 LoaderFileTypeRegistry const 8832 28 LoaderFileTypeRegistry const 28 LoaderFileTypeRegistry const 0 0 3809 0 0 0 0 0 0 0 0 0 0

4143 24 LoaderFileTypeRegistry * 8576 24 LoaderFileTypeRegistry * 24 LoaderFileTypeRegistry * 0 0 3809 0 0 0 0 0 0 0 0 0 0

4144 22 MaterialAttrib const * 8576 22 MaterialAttrib const * 22 MaterialAttrib const * 0 0 4145 0 0 0 0 0 0 0 0 0 0

4145 20 MaterialAttrib const 8832 20 MaterialAttrib const 20 MaterialAttrib const 0 0 3810 0 0 0 0 0 0 0 0 0 0

4146 26 MaterialCollection const * 8576 26 MaterialCollection const * 26 MaterialCollection const * 0 0 4147 0 0 0 0 0 0 0 0 0 0

4147 24 MaterialCollection const 8832 24 MaterialCollection const 24 MaterialCollection const 0 0 3811 0 0 0 0 0 0 0 0 0 0

4148 21 ModelFlattenRequest * 8576 21 ModelFlattenRequest * 21 ModelFlattenRequest * 0 0 3812 0 0 0 0 0 0 0 0 0 0

4149 27 ModelFlattenRequest const * 8576 27 ModelFlattenRequest const * 27 ModelFlattenRequest const * 0 0 4150 0 0 0 0 0 0 0 0 0 0

4150 25 ModelFlattenRequest const 8832 25 ModelFlattenRequest const 25 ModelFlattenRequest const 0 0 3812 0 0 0 0 0 0 0 0 0 0

4151 18 ModelLoadRequest * 8576 18 ModelLoadRequest * 18 ModelLoadRequest * 0 0 3814 0 0 0 0 0 0 0 0 0 0

4152 24 ModelLoadRequest const * 8576 24 ModelLoadRequest const * 24 ModelLoadRequest const * 0 0 4153 0 0 0 0 0 0 0 0 0 0

4153 22 ModelLoadRequest const 8832 22 ModelLoadRequest const 22 ModelLoadRequest const 0 0 3814 0 0 0 0 0 0 0 0 0 0

4154 11 ModelNode * 8576 11 ModelNode * 11 ModelNode * 0 0 3815 0 0 0 0 0 0 0 0 0 0

4155 17 ModelNode const * 8576 17 ModelNode const * 17 ModelNode const * 0 0 4156 0 0 0 0 0 0 0 0 0 0

4156 15 ModelNode const 8832 15 ModelNode const 15 ModelNode const 0 0 3815 0 0 0 0 0 0 0 0 0 0

4157 11 ModelRoot * 8576 11 ModelRoot * 11 ModelRoot * 0 0 3817 0 0 0 0 0 0 0 0 0 0

4158 17 ModelRoot const * 8576 17 ModelRoot const * 17 ModelRoot const * 0 0 4159 0 0 0 0 0 0 0 0 0 0

4159 15 ModelRoot const 8832 15 ModelRoot const 15 ModelRoot const 0 0 3817 0 0 0 0 0 0 0 0 0 0

4160 16 ModelReference * 8576 27 ModelRoot::ModelReference * 27 ModelRoot::ModelReference * 0 0 3818 0 0 0 0 0 0 0 0 0 0

4161 26 NodePathCollection const * 8576 26 NodePathCollection const * 26 NodePathCollection const * 0 0 4162 0 0 0 0 0 0 0 0 0 0

4162 24 NodePathCollection const 8832 24 NodePathCollection const 24 NodePathCollection const 0 0 3820 0 0 0 0 0 0 0 0 0 0

4163 21 TextureAttrib const * 8576 21 TextureAttrib const * 21 TextureAttrib const * 0 0 4164 0 0 0 0 0 0 0 0 0 0

4164 19 TextureAttrib const 8832 19 TextureAttrib const 19 TextureAttrib const 0 0 3821 0 0 0 0 0 0 0 0 0 0

4165 20 TextureStage const * 8576 20 TextureStage const * 20 TextureStage const * 0 0 4166 0 0 0 0 0 0 0 0 0 0

4166 18 TextureStage const 8832 18 TextureStage const 18 TextureStage const 0 0 3907 0 0 0 0 0 0 0 0 0 0

4167 20 TexGenAttrib const * 8576 20 TexGenAttrib const * 20 TexGenAttrib const * 0 0 4168 0 0 0 0 0 0 0 0 0 0

4168 18 TexGenAttrib const 8832 18 TexGenAttrib const 18 TexGenAttrib const 0 0 3822 0 0 0 0 0 0 0 0 0 0

4169 15 PolylightNode * 8576 15 PolylightNode * 15 PolylightNode * 0 0 3823 0 0 0 0 0 0 0 0 0 0

4170 21 PolylightNode const * 8576 21 PolylightNode const * 21 PolylightNode const * 0 0 4171 0 0 0 0 0 0 0 0 0 0

4171 19 PolylightNode const 8832 19 PolylightNode const 19 PolylightNode const 0 0 3823 0 0 0 0 0 0 0 0 0 0

4172 26 vector< NodePath > const * 8576 26 vector< NodePath > const * 26 vector< NodePath > const * 0 0 4173 0 0 0 0 0 0 0 0 0 0

4173 24 vector< NodePath > const 8832 24 vector< NodePath > const 24 vector< NodePath > const 0 0 4174 0 0 0 0 0 0 0 0 0 0

4174 18 vector< NodePath > 2048 18 vector< NodePath > 18 vector< NodePath > 0 0 0 0 0 0 0 0 0 0 0 0 0

4175 23 PolylightEffect const * 8576 23 PolylightEffect const * 23 PolylightEffect const * 0 0 4176 0 0 0 0 0 0 0 0 0 0

4176 21 PolylightEffect const 8832 21 PolylightEffect const 21 PolylightEffect const 0 0 3826 0 0 0 0 0 0 0 0 0 0

4177 13 ShaderInput * 8576 13 ShaderInput * 13 ShaderInput * 0 0 3828 0 0 0 0 0 0 0 0 0 0

4178 17 LVector4f const * 8576 17 LVector4f const * 17 LVector4f const * 0 0 4179 0 0 0 0 0 0 0 0 0 0

4179 15 LVector4f const 8832 15 LVector4f const 15 LVector4f const 0 0 4180 0 0 0 0 0 0 0 0 0 0

4180 9 LVector4f 2048 9 LVector4f 9 LVector4f 0 0 0 0 0 0 0 0 0 0 0 0 710
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

4181 21 ShaderPtrData const * 8576 29 Shader::ShaderPtrData const * 29 Shader::ShaderPtrData const * 0 0 4182 0 0 0 0 0 0 0 0 0 0

4182 19 ShaderPtrData const 8832 27 Shader::ShaderPtrData const 27 Shader::ShaderPtrData const 0 0 4183 0 0 0 0 0 0 0 0 0 0

4183 13 ShaderPtrData 263168 21 Shader::ShaderPtrData 21 Shader::ShaderPtrData 3969 0 0 0 0 0 0 0 0 0 0 0 60
// Container structure for data of parameters ShaderPtrSpec.

4184 20 ShaderAttrib const * 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 4185 0 0 0 0 0 0 0 0 0 0

4185 18 ShaderAttrib const 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 3830 0 0 0 0 0 0 0 0 0 0

4186 24 ShowBoundsEffect const * 8576 24 ShowBoundsEffect const * 24 ShowBoundsEffect const * 0 0 4187 0 0 0 0 0 0 0 0 0 0

4187 22 ShowBoundsEffect const 8832 22 ShowBoundsEffect const 22 ShowBoundsEffect const 0 0 3831 0 0 0 0 0 0 0 0 0 0

4188 26 TexProjectorEffect const * 8576 26 TexProjectorEffect const * 26 TexProjectorEffect const * 0 0 4189 0 0 0 0 0 0 0 0 0 0

4189 24 TexProjectorEffect const 8832 24 TexProjectorEffect const 24 TexProjectorEffect const 0 0 3832 0 0 0 0 0 0 0 0 0 0

4190 21 ScissorEffect const * 8576 21 ScissorEffect const * 21 ScissorEffect const * 0 0 4191 0 0 0 0 0 0 0 0 0 0

4191 19 ScissorEffect const 8832 19 ScissorEffect const 19 ScissorEffect const 0 0 3833 0 0 0 0 0 0 0 0 0 0

4192 19 SceneGraphReducer * 8576 19 SceneGraphReducer * 19 SceneGraphReducer * 0 0 3834 0 0 0 0 0 0 0 0 0 0

4193 25 SceneGraphReducer const * 8576 25 SceneGraphReducer const * 25 SceneGraphReducer const * 0 0 4194 0 0 0 0 0 0 0 0 0 0

4194 23 SceneGraphReducer const 8832 23 SceneGraphReducer const 23 SceneGraphReducer const 0 0 3834 0 0 0 0 0 0 0 0 0 0

4195 26 AccumulatedAttribs const * 8576 26 AccumulatedAttribs const * 26 AccumulatedAttribs const * 0 0 4196 0 0 0 0 0 0 0 0 0 0

4196 24 AccumulatedAttribs const 8832 24 AccumulatedAttribs const 24 AccumulatedAttribs const 0 0 4197 0 0 0 0 0 0 0 0 0 0

4197 18 AccumulatedAttribs 1050624 18 AccumulatedAttribs 18 AccumulatedAttribs 0 0 0 0 0 0 0 0 0 0 0 0 431
////////////////////////////////////////////////////////////////////
//       Class : AccumulatedAttribs
// Description : This class is used by the SceneGraphReducer to
//               maintain and accumulate the set of attributes we have
//               encountered on each node that might eventually be
//               applied to the vertices at the leaves.
////////////////////////////////////////////////////////////////////

4198 17 GeomTransformer * 8576 17 GeomTransformer * 17 GeomTransformer * 0 0 4199 0 0 0 0 0 0 0 0 0 0

4199 15 GeomTransformer 1050624 15 GeomTransformer 15 GeomTransformer 0 0 0 0 0 0 0 0 0 0 0 0 970
////////////////////////////////////////////////////////////////////
//       Class : GeomTransformer
// Description : An object specifically designed to transform the
//               vertices of a Geom without disturbing indexing or
//               affecting any other Geoms that may share the same
//               vertex arrays, and without needlessly wasting memory
//               when different Geoms sharing the same vertex arrays
//               are transformed by the same amount.
//
//               If you create a single GeomTransformer and use it to
//               transform a number of different Geoms by various
//               transformations, then those Geoms which happen to
//               share the same arrays and are transformed by the same
//               amounts will still share the same arrays as each
//               other (but different from the original arrays).
////////////////////////////////////////////////////////////////////

4200 30 TextureStageCollection const * 8576 30 TextureStageCollection const * 30 TextureStageCollection const * 0 0 4201 0 0 0 0 0 0 0 0 0 0

4201 28 TextureStageCollection const 8832 28 TextureStageCollection const 28 TextureStageCollection const 0 0 3839 0 0 0 0 0 0 0 0 0 0

4202 16 PosLerpFunctor * 8576 16 PosLerpFunctor * 16 PosLerpFunctor * 0 0 3840 0 0 0 0 0 0 0 0 0 0

4203 16 HprLerpFunctor * 8576 16 HprLerpFunctor * 16 HprLerpFunctor * 0 0 3842 0 0 0 0 0 0 0 0 0 0

4204 18 ScaleLerpFunctor * 8576 18 ScaleLerpFunctor * 18 ScaleLerpFunctor * 0 0 3844 0 0 0 0 0 0 0 0 0 0

4205 18 ColorLerpFunctor * 8576 18 ColorLerpFunctor * 18 ColorLerpFunctor * 0 0 3845 0 0 0 0 0 0 0 0 0 0

4206 19 PosHprLerpFunctor * 8576 19 PosHprLerpFunctor * 19 PosHprLerpFunctor * 0 0 3847 0 0 0 0 0 0 0 0 0 0

4207 21 HprScaleLerpFunctor * 8576 21 HprScaleLerpFunctor * 21 HprScaleLerpFunctor * 0 0 3849 0 0 0 0 0 0 0 0 0 0

4208 24 PosHprScaleLerpFunctor * 8576 24 PosHprScaleLerpFunctor * 24 PosHprScaleLerpFunctor * 0 0 3850 0 0 0 0 0 0 0 0 0 0

4209 23 ColorScaleLerpFunctor * 8576 23 ColorScaleLerpFunctor * 23 ColorScaleLerpFunctor * 0 0 3851 0 0 0 0 0 0 0 0 0 0

4210 12 PortalNode * 8576 12 PortalNode * 12 PortalNode * 0 0 3852 0 0 0 0 0 0 0 0 0 0

4211 18 PortalNode const * 8576 18 PortalNode const * 18 PortalNode const * 0 0 4212 0 0 0 0 0 0 0 0 0 0

4212 16 PortalNode const 8832 16 PortalNode const 16 PortalNode const 0 0 3852 0 0 0 0 0 0 0 0 0 0

4213 27 RescaleNormalAttrib const * 8576 27 RescaleNormalAttrib const * 27 RescaleNormalAttrib const * 0 0 4214 0 0 0 0 0 0 0 0 0 0

4214 25 RescaleNormalAttrib const 8832 25 RescaleNormalAttrib const 25 RescaleNormalAttrib const 0 0 3853 0 0 0 0 0 0 0 0 0 0

4215 21 ScissorAttrib const * 8576 21 ScissorAttrib const * 21 ScissorAttrib const * 0 0 4216 0 0 0 0 0 0 0 0 0 0

4216 19 ScissorAttrib const 8832 19 ScissorAttrib const 19 ScissorAttrib const 0 0 3855 0 0 0 0 0 0 0 0 0 0

4217 24 ShadeModelAttrib const * 8576 24 ShadeModelAttrib const * 24 ShadeModelAttrib const * 0 0 4218 0 0 0 0 0 0 0 0 0 0

4218 22 ShadeModelAttrib const 8832 22 ShadeModelAttrib const 22 ShadeModelAttrib const 0 0 3856 0 0 0 0 0 0 0 0 0 0

4219 21 StencilAttrib const * 8576 21 StencilAttrib const * 21 StencilAttrib const * 0 0 4220 0 0 0 0 0 0 0 0 0 0

4220 19 StencilAttrib const 8832 19 StencilAttrib const 19 StencilAttrib const 0 0 3858 0 0 0 0 0 0 0 0 0 0

4221 8 Shader * 8576 8 Shader * 8 Shader * 0 0 3969 0 0 0 0 0 0 0 0 0 0

0
0
34
4222 0 135 10 get_stages 14 get_num_stages 9 get_stage 
4223 0 373 9 get_nodes 13 get_num_nodes 8 get_node 
4224 0 373 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
4225 0 716 9 get_nodes 13 get_num_nodes 8 get_node 
4226 0 810 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
4227 0 851 13 get_on_planes 17 get_num_on_planes 12 get_on_plane 
4228 0 851 14 get_off_planes 18 get_num_off_planes 13 get_off_plane 
4229 0 945 8 get_bins 12 get_num_bins 7 get_bin 
4230 0 971 9 get_geoms 13 get_num_geoms 8 get_geom 
4231 0 971 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
4232 0 1125 9 get_names 13 get_num_names 8 get_name 
4233 0 1155 13 get_on_lights 17 get_num_on_lights 12 get_on_light 
4234 0 1155 14 get_off_lights 18 get_num_off_lights 13 get_off_light 
4235 0 1203 9 get_files 13 get_num_files 8 get_file 
4236 0 1203 14 get_file_types 13 get_num_files 13 get_file_type 
4237 0 1235 9 get_types 13 get_num_types 8 get_type 
4238 0 1321 9 get_paths 13 get_num_paths 8 get_path 
4239 0 1361 13 get_on_stages 17 get_num_on_stages 12 get_on_stage 
4240 0 1361 16 get_on_ff_stages 20 get_num_on_ff_stages 15 get_on_ff_stage 
4241 0 1361 14 get_off_stages 18 get_num_off_stages 13 get_off_stage 
4242 0 1520 10 get_points 14 get_num_points 9 get_point 
4243 0 1520 9 get_nodes 14 get_num_points 8 get_node 
4244 0 1556 18 get_texture_stages 22 get_num_texture_stages 17 get_texture_stage 
4245 0 1613 12 get_vertices 16 get_num_vertices 10 get_vertex 
4246 0 1717 8 get_rows 4 size 7 get_row 
4247 0 1717 8 get_cols 4 size 7 get_col 
4248 0 1717 9 get_row3s 4 size 8 get_row3 
4249 0 1732 8 get_rows 4 size 7 get_row 
4250 0 1732 8 get_cols 4 size 7 get_col 
4251 0 1732 9 get_col2s 4 size 8 get_col2 
4252 0 1732 9 get_row2s 4 size 8 get_row2 
4253 0 2140 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
4254 0 3281 14 get_primitives 18 get_num_primitives 13 get_primitive 
4255 0 3542 15 get_task_chains 19 get_num_task_chains 14 get_task_chain 
