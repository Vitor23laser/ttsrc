1687212821
2 2
8 libputil 4 flbo 5 panda 
733
773 5 clear 4 1508 56 PointerToBase< ReferenceCountedVector< double > >::clear 0 1 10 0
77
inline void ::PointerToBase< ReferenceCountedVector< double > >::clear(void);

774 6 output 4 1508 57 PointerToBase< ReferenceCountedVector< double > >::output 0 1 11 0
85
void ::PointerToBase< ReferenceCountedVector< double > >::output(ostream &out) const;

775 19 ~PointerToArrayBase 4 1507 49 PointerToArrayBase< double >::~PointerToArrayBase 0 0 0
65
inline ::PointerToArrayBase< double >::~PointerToArrayBase(void);

776 19 ConstPointerToArray 4 1506 50 ConstPointerToArray< double >::ConstPointerToArray 0 2 1 2 0
202
inline ::ConstPointerToArray< double >::ConstPointerToArray(PointerToArray< double > const &copy);
inline ::ConstPointerToArray< double >::ConstPointerToArray(ConstPointerToArray< double > const &copy);

777 4 size 4 1506 35 ConstPointerToArray< double >::size 0 1 3 0
70
inline unsigned int ::ConstPointerToArray< double >::size(void) const;

778 11 get_element 4 1506 42 ConstPointerToArray< double >::get_element 0 1 4 0
88
inline double const &::ConstPointerToArray< double >::get_element(unsigned int n) const;

779 11 __getitem__ 4 1506 42 ConstPointerToArray< double >::__getitem__ 0 1 5 0
88
inline double const &::ConstPointerToArray< double >::__getitem__(unsigned int n) const;

780 8 get_data 4 1506 39 ConstPointerToArray< double >::get_data 0 1 6 0
82
inline basic_string< char > ::ConstPointerToArray< double >::get_data(void) const;

781 11 get_subdata 4 1506 42 ConstPointerToArray< double >::get_subdata 0 1 7 0
115
inline basic_string< char > ::ConstPointerToArray< double >::get_subdata(unsigned int n, unsigned int count) const;

782 13 get_ref_count 4 1506 44 ConstPointerToArray< double >::get_ref_count 0 1 8 0
70
inline int ::ConstPointerToArray< double >::get_ref_count(void) const;

783 18 get_node_ref_count 4 1506 49 ConstPointerToArray< double >::get_node_ref_count 0 1 9 0
75
inline int ::ConstPointerToArray< double >::get_node_ref_count(void) const;

784 20 ~ConstPointerToArray 4 1506 51 ConstPointerToArray< double >::~ConstPointerToArray 0 0 0
60
::ConstPointerToArray< double >::~ConstPointerToArray(void);

785 5 clear 4 1512 68 PointerToBase< ReferenceCountedVector< unsigned short int > >::clear 0 1 21 0
89
inline void ::PointerToBase< ReferenceCountedVector< unsigned short int > >::clear(void);

786 6 output 4 1512 69 PointerToBase< ReferenceCountedVector< unsigned short int > >::output 0 1 22 0
97
void ::PointerToBase< ReferenceCountedVector< unsigned short int > >::output(ostream &out) const;

787 19 ~PointerToArrayBase 4 1511 61 PointerToArrayBase< unsigned short int >::~PointerToArrayBase 0 0 0
77
inline ::PointerToArrayBase< unsigned short int >::~PointerToArrayBase(void);

788 19 ConstPointerToArray 4 1510 62 ConstPointerToArray< unsigned short int >::ConstPointerToArray 0 2 12 13 0
250
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(PointerToArray< unsigned short int > const &copy);
inline ::ConstPointerToArray< unsigned short int >::ConstPointerToArray(ConstPointerToArray< unsigned short int > const &copy);

789 4 size 4 1510 47 ConstPointerToArray< unsigned short int >::size 0 1 14 0
82
inline unsigned int ::ConstPointerToArray< unsigned short int >::size(void) const;

790 11 get_element 4 1510 54 ConstPointerToArray< unsigned short int >::get_element 0 1 15 0
112
inline unsigned short int const &::ConstPointerToArray< unsigned short int >::get_element(unsigned int n) const;

791 11 __getitem__ 4 1510 54 ConstPointerToArray< unsigned short int >::__getitem__ 0 1 16 0
112
inline unsigned short int const &::ConstPointerToArray< unsigned short int >::__getitem__(unsigned int n) const;

792 8 get_data 4 1510 51 ConstPointerToArray< unsigned short int >::get_data 0 1 17 0
94
inline basic_string< char > ::ConstPointerToArray< unsigned short int >::get_data(void) const;

793 11 get_subdata 4 1510 54 ConstPointerToArray< unsigned short int >::get_subdata 0 1 18 0
127
inline basic_string< char > ::ConstPointerToArray< unsigned short int >::get_subdata(unsigned int n, unsigned int count) const;

794 13 get_ref_count 4 1510 56 ConstPointerToArray< unsigned short int >::get_ref_count 0 1 19 0
82
inline int ::ConstPointerToArray< unsigned short int >::get_ref_count(void) const;

795 18 get_node_ref_count 4 1510 61 ConstPointerToArray< unsigned short int >::get_node_ref_count 0 1 20 0
87
inline int ::ConstPointerToArray< unsigned short int >::get_node_ref_count(void) const;

796 20 ~ConstPointerToArray 4 1510 63 ConstPointerToArray< unsigned short int >::~ConstPointerToArray 0 0 0
72
::ConstPointerToArray< unsigned short int >::~ConstPointerToArray(void);

797 13 DoubleBitMask 4 1513 59 DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask 0 2 23 24 0
203
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask(void);
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::DoubleBitMask(DoubleBitMask< BitMask< unsigned int, 32 > > const &copy);

798 10 operator = 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator = 0 1 25 0
170
inline DoubleBitMask< BitMask< unsigned int, 32 > > &::DoubleBitMask< BitMask< unsigned int, 32 > >::operator =(DoubleBitMask< BitMask< unsigned int, 32 > > const &copy);

799 6 all_on 4 1513 52 DoubleBitMask< BitMask< unsigned int, 32 > >::all_on 0 1 26 0
120
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::all_on(void);

800 7 all_off 4 1513 53 DoubleBitMask< BitMask< unsigned int, 32 > >::all_off 0 1 27 0
121
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::all_off(void);

801 8 lower_on 4 1513 54 DoubleBitMask< BitMask< unsigned int, 32 > >::lower_on 0 1 28 0
129
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::lower_on(int on_bits);

802 3 bit 4 1513 49 DoubleBitMask< BitMask< unsigned int, 32 > >::bit 0 1 29 0
122
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::bit(int index);

803 5 range 4 1513 51 DoubleBitMask< BitMask< unsigned int, 32 > >::range 0 1 30 0
136
static inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::range(int low_bit, int size);

804 14 ~DoubleBitMask 4 1513 60 DoubleBitMask< BitMask< unsigned int, 32 > >::~DoubleBitMask 0 0 0
76
inline ::DoubleBitMask< BitMask< unsigned int, 32 > >::~DoubleBitMask(void);

805 16 has_max_num_bits 4 1513 62 DoubleBitMask< BitMask< unsigned int, 32 > >::has_max_num_bits 0 1 31 0
90
static inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_max_num_bits(void);

806 16 get_max_num_bits 4 1513 62 DoubleBitMask< BitMask< unsigned int, 32 > >::get_max_num_bits 0 1 32 0
89
static inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_max_num_bits(void);

807 12 get_num_bits 4 1513 58 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_bits 0 1 33 0
85
static inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_bits(void);

808 7 get_bit 4 1513 53 DoubleBitMask< BitMask< unsigned int, 32 > >::get_bit 0 1 34 0
85
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_bit(int index) const;

809 7 set_bit 4 1513 53 DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit 0 1 35 0
79
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit(int index);

810 9 clear_bit 4 1513 55 DoubleBitMask< BitMask< unsigned int, 32 > >::clear_bit 0 1 36 0
81
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear_bit(int index);

811 10 set_bit_to 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit_to 0 1 37 0
94
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_bit_to(int index, bool value);

812 7 is_zero 4 1513 53 DoubleBitMask< BitMask< unsigned int, 32 > >::is_zero 0 1 38 0
80
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::is_zero(void) const;

813 9 is_all_on 4 1513 55 DoubleBitMask< BitMask< unsigned int, 32 > >::is_all_on 0 1 39 0
82
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::is_all_on(void) const;

814 7 extract 4 1513 53 DoubleBitMask< BitMask< unsigned int, 32 > >::extract 0 1 40 0
105
inline unsigned int ::DoubleBitMask< BitMask< unsigned int, 32 > >::extract(int low_bit, int size) const;

815 5 store 4 1513 51 DoubleBitMask< BitMask< unsigned int, 32 > >::store 0 1 41 0
109
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::store(unsigned int value, int low_bit, int size);

816 10 has_any_of 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::has_any_of 0 1 42 0
100
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_any_of(int low_bit, int size) const;

817 10 has_all_of 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::has_all_of 0 1 43 0
100
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_all_of(int low_bit, int size) const;

818 9 set_range 4 1513 55 DoubleBitMask< BitMask< unsigned int, 32 > >::set_range 0 1 44 0
93
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_range(int low_bit, int size);

819 11 clear_range 4 1513 57 DoubleBitMask< BitMask< unsigned int, 32 > >::clear_range 0 1 45 0
95
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear_range(int low_bit, int size);

820 12 set_range_to 4 1513 58 DoubleBitMask< BitMask< unsigned int, 32 > >::set_range_to 0 1 46 0
108
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::set_range_to(bool value, int low_bit, int size);

821 15 get_num_on_bits 4 1513 61 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_on_bits 0 1 47 0
87
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_on_bits(void) const;

822 16 get_num_off_bits 4 1513 62 DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_off_bits 0 1 48 0
88
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_num_off_bits(void) const;

823 17 get_lowest_on_bit 4 1513 63 DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_on_bit 0 1 49 0
89
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_on_bit(void) const;

824 18 get_lowest_off_bit 4 1513 64 DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_off_bit 0 1 50 0
90
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_lowest_off_bit(void) const;

825 18 get_highest_on_bit 4 1513 64 DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_on_bit 0 1 51 0
90
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_on_bit(void) const;

826 19 get_highest_off_bit 4 1513 65 DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_off_bit 0 1 52 0
91
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_highest_off_bit(void) const;

827 29 get_next_higher_different_bit 4 1513 75 DoubleBitMask< BitMask< unsigned int, 32 > >::get_next_higher_different_bit 0 1 53 0
108
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_next_higher_different_bit(int low_bit) const;

828 15 invert_in_place 4 1513 61 DoubleBitMask< BitMask< unsigned int, 32 > >::invert_in_place 0 1 54 0
82
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::invert_in_place(void);

829 18 has_bits_in_common 4 1513 64 DoubleBitMask< BitMask< unsigned int, 32 > >::has_bits_in_common 0 1 55 0
144
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::has_bits_in_common(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

830 5 clear 4 1513 51 DoubleBitMask< BitMask< unsigned int, 32 > >::clear 0 1 56 0
72
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::clear(void);

831 6 output 4 1513 52 DoubleBitMask< BitMask< unsigned int, 32 > >::output 0 1 57 0
80
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output(ostream &out) const;

832 13 output_binary 4 1513 59 DoubleBitMask< BitMask< unsigned int, 32 > >::output_binary 0 2 58 59 0
111
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output_binary(ostream &out, int spaces_every = (4)) const;

833 10 output_hex 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::output_hex 0 2 60 61 0
108
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::output_hex(ostream &out, int spaces_every = (4)) const;

834 5 write 4 1513 51 DoubleBitMask< BitMask< unsigned int, 32 > >::write 0 2 62 63 0
103
void ::DoubleBitMask< BitMask< unsigned int, 32 > >::write(ostream &out, int indent_level = (0)) const;

835 11 operator == 4 1513 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator == 0 1 64 0
137
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ==(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

836 11 operator != 4 1513 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator != 0 1 65 0
137
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator !=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

837 10 operator < 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator < 0 1 66 0
136
inline bool ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

838 10 compare_to 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::compare_to 0 1 67 0
135
inline int ::DoubleBitMask< BitMask< unsigned int, 32 > >::compare_to(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

839 10 operator & 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator & 0 1 68 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator &(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

840 10 operator | 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator | 0 1 69 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator |(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

841 10 operator ^ 4 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^ 0 1 70 0
176
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^(DoubleBitMask< BitMask< unsigned int, 32 > > const &other) const;

842 10 operator ~ 68 1513 56 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ~ 0 1 71 0
123
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ~(void) const;

843 11 operator << 4 1513 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator << 0 1 72 0
129
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<(int shift) const;

844 11 operator >> 4 1513 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator >> 0 1 73 0
129
inline DoubleBitMask< BitMask< unsigned int, 32 > > ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>(int shift) const;

845 11 operator &= 4 1513 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator &= 0 1 74 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator &=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

846 11 operator |= 4 1513 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator |= 0 1 75 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator |=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

847 11 operator ^= 4 1513 57 DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^= 0 1 76 0
131
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator ^=(DoubleBitMask< BitMask< unsigned int, 32 > > const &other);

848 12 operator <<= 4 1513 58 DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<= 0 1 77 0
84
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator <<=(int shift);

849 12 operator >>= 4 1513 58 DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>= 0 1 78 0
84
inline void ::DoubleBitMask< BitMask< unsigned int, 32 > >::operator >>=(int shift);

850 14 get_class_type 4 1513 60 DoubleBitMask< BitMask< unsigned int, 32 > >::get_class_type 0 1 79 0
87
static TypeHandle ::DoubleBitMask< BitMask< unsigned int, 32 > >::get_class_type(void);

851 13 DoubleBitMask 4 1514 76 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask 0 2 80 81 0
254
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask(void);
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::DoubleBitMask(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &copy);

852 10 operator = 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator = 0 1 82 0
221
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > &::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator =(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &copy);

853 6 all_on 4 1514 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_on 0 1 83 0
154
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_on(void);

854 7 all_off 4 1514 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_off 0 1 84 0
155
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::all_off(void);

855 8 lower_on 4 1514 71 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::lower_on 0 1 85 0
163
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::lower_on(int on_bits);

856 3 bit 4 1514 66 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::bit 0 1 86 0
156
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::bit(int index);

857 5 range 4 1514 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::range 0 1 87 0
170
static inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::range(int low_bit, int size);

858 14 ~DoubleBitMask 4 1514 77 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::~DoubleBitMask 0 0 0
93
inline ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::~DoubleBitMask(void);

859 16 has_max_num_bits 4 1514 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_max_num_bits 0 1 88 0
107
static inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_max_num_bits(void);

860 16 get_max_num_bits 4 1514 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_max_num_bits 0 1 89 0
106
static inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_max_num_bits(void);

861 12 get_num_bits 4 1514 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_bits 0 1 90 0
102
static inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_bits(void);

862 7 get_bit 4 1514 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_bit 0 1 91 0
102
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_bit(int index) const;

863 7 set_bit 4 1514 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit 0 1 92 0
96
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit(int index);

864 9 clear_bit 4 1514 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_bit 0 1 93 0
98
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_bit(int index);

865 10 set_bit_to 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit_to 0 1 94 0
111
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_bit_to(int index, bool value);

866 7 is_zero 4 1514 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_zero 0 1 95 0
97
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_zero(void) const;

867 9 is_all_on 4 1514 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_all_on 0 1 96 0
99
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::is_all_on(void) const;

868 7 extract 4 1514 70 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::extract 0 1 97 0
122
inline unsigned int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::extract(int low_bit, int size) const;

869 5 store 4 1514 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::store 0 1 98 0
126
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::store(unsigned int value, int low_bit, int size);

870 10 has_any_of 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_any_of 0 1 99 0
117
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_any_of(int low_bit, int size) const;

871 10 has_all_of 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_all_of 0 1 100 0
117
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_all_of(int low_bit, int size) const;

872 9 set_range 4 1514 72 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range 0 1 101 0
110
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range(int low_bit, int size);

873 11 clear_range 4 1514 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_range 0 1 102 0
112
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear_range(int low_bit, int size);

874 12 set_range_to 4 1514 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range_to 0 1 103 0
125
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::set_range_to(bool value, int low_bit, int size);

875 15 get_num_on_bits 4 1514 78 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_on_bits 0 1 104 0
104
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_on_bits(void) const;

876 16 get_num_off_bits 4 1514 79 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_off_bits 0 1 105 0
105
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_num_off_bits(void) const;

877 17 get_lowest_on_bit 4 1514 80 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_on_bit 0 1 106 0
106
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_on_bit(void) const;

878 18 get_lowest_off_bit 4 1514 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_off_bit 0 1 107 0
107
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_lowest_off_bit(void) const;

879 18 get_highest_on_bit 4 1514 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_on_bit 0 1 108 0
107
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_on_bit(void) const;

880 19 get_highest_off_bit 4 1514 82 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_off_bit 0 1 109 0
108
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_highest_off_bit(void) const;

881 29 get_next_higher_different_bit 4 1514 92 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_next_higher_different_bit 0 1 110 0
125
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_next_higher_different_bit(int low_bit) const;

882 15 invert_in_place 4 1514 78 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::invert_in_place 0 1 111 0
99
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::invert_in_place(void);

883 18 has_bits_in_common 4 1514 81 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_bits_in_common 0 1 112 0
178
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::has_bits_in_common(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

884 5 clear 4 1514 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear 0 1 113 0
89
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::clear(void);

885 6 output 4 1514 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output 0 1 114 0
97
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output(ostream &out) const;

886 13 output_binary 4 1514 76 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_binary 0 2 115 116 0
128
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_binary(ostream &out, int spaces_every = (4)) const;

887 10 output_hex 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_hex 0 2 117 118 0
125
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::output_hex(ostream &out, int spaces_every = (4)) const;

888 5 write 4 1514 68 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::write 0 2 119 120 0
120
void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::write(ostream &out, int indent_level = (0)) const;

889 11 operator == 4 1514 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator == 0 1 121 0
171
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ==(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

890 11 operator != 4 1514 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator != 0 1 122 0
171
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator !=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

891 10 operator < 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator < 0 1 123 0
170
inline bool ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

892 10 compare_to 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::compare_to 0 1 124 0
169
inline int ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::compare_to(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

893 10 operator & 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator & 0 1 125 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

894 10 operator | 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator | 0 1 126 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

895 10 operator ^ 4 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^ 0 1 127 0
227
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other) const;

896 10 operator ~ 68 1514 73 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ~ 0 1 128 0
157
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ~(void) const;

897 11 operator << 4 1514 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator << 0 1 129 0
163
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<(int shift) const;

898 11 operator >> 4 1514 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >> 0 1 130 0
163
inline DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>(int shift) const;

899 11 operator &= 4 1514 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &= 0 1 131 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator &=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

900 11 operator |= 4 1514 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |= 0 1 132 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator |=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

901 11 operator ^= 4 1514 74 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^= 0 1 133 0
165
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator ^=(DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const &other);

902 12 operator <<= 4 1514 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<= 0 1 134 0
101
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator <<=(int shift);

903 12 operator >>= 4 1514 75 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>= 0 1 135 0
101
inline void ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::operator >>=(int shift);

904 14 get_class_type 4 1514 77 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_class_type 0 1 136 0
104
static TypeHandle ::DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > >::get_class_type(void);

905 14 PointerToArray 4 1515 40 PointerToArray< double >::PointerToArray 0 4 137 138 139 140 0
287
inline ::PointerToArray< double >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((double const *)(0)))));
inline ::PointerToArray< double >::PointerToArray(PointerToArray< double > const &copy);
::PointerToArray< double >::PointerToArray(PyObject *self, PyObject *sequence);

906 11 empty_array 4 1515 37 PointerToArray< double >::empty_array 0 2 141 142 0
163
static inline PointerToArray< double > ::PointerToArray< double >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((double const *)(0)))));

907 4 size 4 1515 30 PointerToArray< double >::size 0 1 143 0
65
inline unsigned int ::PointerToArray< double >::size(void) const;

908 9 push_back 4 1515 35 PointerToArray< double >::push_back 0 1 144 0
67
inline void ::PointerToArray< double >::push_back(double const &x);

909 8 pop_back 4 1515 34 PointerToArray< double >::pop_back 0 1 145 0
55
inline void ::PointerToArray< double >::pop_back(void);

910 11 get_element 4 1515 37 PointerToArray< double >::get_element 0 1 146 0
83
inline double const &::PointerToArray< double >::get_element(unsigned int n) const;

911 11 set_element 4 1515 37 PointerToArray< double >::set_element 0 1 147 0
89
inline void ::PointerToArray< double >::set_element(unsigned int n, double const &value);

912 11 __getitem__ 4 1515 37 PointerToArray< double >::__getitem__ 0 1 148 0
83
inline double const &::PointerToArray< double >::__getitem__(unsigned int n) const;

913 11 __setitem__ 4 1515 37 PointerToArray< double >::__setitem__ 0 1 149 0
89
inline void ::PointerToArray< double >::__setitem__(unsigned int n, double const &value);

914 8 get_data 4 1515 34 PointerToArray< double >::get_data 0 1 150 0
77
inline basic_string< char > ::PointerToArray< double >::get_data(void) const;

915 8 set_data 4 1515 34 PointerToArray< double >::set_data 0 1 151 0
83
inline void ::PointerToArray< double >::set_data(basic_string< char > const &data);

916 11 get_subdata 4 1515 37 PointerToArray< double >::get_subdata 0 1 152 0
110
inline basic_string< char > ::PointerToArray< double >::get_subdata(unsigned int n, unsigned int count) const;

917 11 set_subdata 4 1515 37 PointerToArray< double >::set_subdata 0 1 153 0
122
inline void ::PointerToArray< double >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

918 13 get_ref_count 4 1515 39 PointerToArray< double >::get_ref_count 0 1 154 0
65
inline int ::PointerToArray< double >::get_ref_count(void) const;

919 18 get_node_ref_count 4 1515 44 PointerToArray< double >::get_node_ref_count 0 1 155 0
70
inline int ::PointerToArray< double >::get_node_ref_count(void) const;

920 15 ~PointerToArray 4 1515 41 PointerToArray< double >::~PointerToArray 0 0 0
50
::PointerToArray< double >::~PointerToArray(void);

921 14 PointerToArray 4 1516 52 PointerToArray< unsigned short int >::PointerToArray 0 4 156 157 158 159 0
347
inline ::PointerToArray< unsigned short int >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((unsigned short int const *)(0)))));
inline ::PointerToArray< unsigned short int >::PointerToArray(PointerToArray< unsigned short int > const &copy);
::PointerToArray< unsigned short int >::PointerToArray(PyObject *self, PyObject *sequence);

922 11 empty_array 4 1516 49 PointerToArray< unsigned short int >::empty_array 0 2 160 161 0
199
static inline PointerToArray< unsigned short int > ::PointerToArray< unsigned short int >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((unsigned short int const *)(0)))));

923 4 size 4 1516 42 PointerToArray< unsigned short int >::size 0 1 162 0
77
inline unsigned int ::PointerToArray< unsigned short int >::size(void) const;

924 9 push_back 4 1516 47 PointerToArray< unsigned short int >::push_back 0 1 163 0
91
inline void ::PointerToArray< unsigned short int >::push_back(unsigned short int const &x);

925 8 pop_back 4 1516 46 PointerToArray< unsigned short int >::pop_back 0 1 164 0
67
inline void ::PointerToArray< unsigned short int >::pop_back(void);

926 11 get_element 4 1516 49 PointerToArray< unsigned short int >::get_element 0 1 165 0
107
inline unsigned short int const &::PointerToArray< unsigned short int >::get_element(unsigned int n) const;

927 11 set_element 4 1516 49 PointerToArray< unsigned short int >::set_element 0 1 166 0
113
inline void ::PointerToArray< unsigned short int >::set_element(unsigned int n, unsigned short int const &value);

928 11 __getitem__ 4 1516 49 PointerToArray< unsigned short int >::__getitem__ 0 1 167 0
107
inline unsigned short int const &::PointerToArray< unsigned short int >::__getitem__(unsigned int n) const;

929 11 __setitem__ 4 1516 49 PointerToArray< unsigned short int >::__setitem__ 0 1 168 0
113
inline void ::PointerToArray< unsigned short int >::__setitem__(unsigned int n, unsigned short int const &value);

930 8 get_data 4 1516 46 PointerToArray< unsigned short int >::get_data 0 1 169 0
89
inline basic_string< char > ::PointerToArray< unsigned short int >::get_data(void) const;

931 8 set_data 4 1516 46 PointerToArray< unsigned short int >::set_data 0 1 170 0
95
inline void ::PointerToArray< unsigned short int >::set_data(basic_string< char > const &data);

932 11 get_subdata 4 1516 49 PointerToArray< unsigned short int >::get_subdata 0 1 171 0
122
inline basic_string< char > ::PointerToArray< unsigned short int >::get_subdata(unsigned int n, unsigned int count) const;

933 11 set_subdata 4 1516 49 PointerToArray< unsigned short int >::set_subdata 0 1 172 0
134
inline void ::PointerToArray< unsigned short int >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

934 13 get_ref_count 4 1516 51 PointerToArray< unsigned short int >::get_ref_count 0 1 173 0
77
inline int ::PointerToArray< unsigned short int >::get_ref_count(void) const;

935 18 get_node_ref_count 4 1516 56 PointerToArray< unsigned short int >::get_node_ref_count 0 1 174 0
82
inline int ::PointerToArray< unsigned short int >::get_node_ref_count(void) const;

936 15 ~PointerToArray 4 1516 53 PointerToArray< unsigned short int >::~PointerToArray 0 0 0
62
::PointerToArray< unsigned short int >::~PointerToArray(void);

937 14 ~AnimInterface 4 1518 29 AnimInterface::~AnimInterface 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual AnimInterface::~AnimInterface(void);

938 4 play 4 1518 19 AnimInterface::play 0 2 175 176 1521
// Filename: animInterface.I
// Created by:  drose (20Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the entire animation from beginning to end and
//               stops.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the animation from the frame "from" to and
//               including the frame "to", at which point the
//               animation is stopped.  Both "from" and "to" frame
//               numbers may be outside the range (0,
//               get_num_frames()) and the animation will follow the
//               range correctly, reporting numbers modulo
//               get_num_frames().  For instance, play(0,
//               get_num_frames() * 2) will play the animation twice
//               and then stop.
////////////////////////////////////////////////////////////////////
95
inline void AnimInterface::play(void);
inline void AnimInterface::play(double from, double to);

939 4 loop 4 1518 19 AnimInterface::loop 0 2 177 178 898
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Starts the entire animation looping.  If restart is
//               true, the animation is restarted from the beginning;
//               otherwise, it continues from the current frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", indefinitely.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
////////////////////////////////////////////////////////////////////
117
inline void AnimInterface::loop(bool restart);
inline void AnimInterface::loop(bool restart, double from, double to);

940 8 pingpong 4 1518 23 AnimInterface::pingpong 0 2 179 180 886
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Starts the entire animation bouncing back and forth
//               between its first frame and last frame.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", and then back in the
//               opposite direction, indefinitely.
////////////////////////////////////////////////////////////////////
125
inline void AnimInterface::pingpong(bool restart);
inline void AnimInterface::pingpong(bool restart, double from, double to);

941 4 stop 4 1518 19 AnimInterface::stop 0 1 181 369
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::stop
//       Access: Published
//  Description: Stops a currently playing or looping animation right
//               where it is.  The animation remains posed at the
//               current frame.
////////////////////////////////////////////////////////////////////
38
inline void AnimInterface::stop(void);

942 4 pose 4 1518 19 AnimInterface::pose 0 1 182 297
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pose
//       Access: Published
//  Description: Sets the animation to the indicated frame and holds
//               it there.
////////////////////////////////////////////////////////////////////
46
inline void AnimInterface::pose(double frame);

943 13 set_play_rate 4 1518 28 AnimInterface::set_play_rate 0 1 183 519
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::set_play_rate
//       Access: Published
//  Description: Changes the rate at which the animation plays.  1.0
//               is the normal speed, 2.0 is twice normal speed, and
//               0.5 is half normal speed.  0.0 is legal to pause the
//               animation, and a negative value will play the
//               animation backwards.
////////////////////////////////////////////////////////////////////
59
inline void AnimInterface::set_play_rate(double play_rate);

944 13 get_play_rate 4 1518 28 AnimInterface::get_play_rate 0 1 184 313
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_play_rate
//       Access: Published
//  Description: Returns the rate at which the animation plays.  See
//               set_play_rate().
////////////////////////////////////////////////////////////////////
55
inline double AnimInterface::get_play_rate(void) const;

945 14 get_frame_rate 4 1518 29 AnimInterface::get_frame_rate 0 1 185 514
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame_rate
//       Access: Published
//  Description: Returns the native frame rate of the animation.  This
//               is the number of frames per second that will elapse
//               when the play_rate is set to 1.0.  It is a fixed
//               property of the animation and may not be adjusted by
//               the user.
////////////////////////////////////////////////////////////////////
56
inline double AnimInterface::get_frame_rate(void) const;

946 14 get_num_frames 4 1518 29 AnimInterface::get_num_frames 0 1 186 581
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
////////////////////////////////////////////////////////////////////
54
virtual int AnimInterface::get_num_frames(void) const;

947 9 get_frame 4 1518 24 AnimInterface::get_frame 0 1 187 359
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//               This number will be in the range 0 <= f <
//               get_num_frames().
////////////////////////////////////////////////////////////////////
48
inline int AnimInterface::get_frame(void) const;

948 14 get_next_frame 4 1518 29 AnimInterface::get_next_frame 0 1 188 638
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_next_frame
//       Access: Published
//  Description: Returns the current integer frame number + 1,
//               constrained to the range 0 <= f < get_num_frames().
//
//               If the play mode is PM_play, this will clamp to the
//               same value as get_frame() at the end of the
//               animation.  If the play mode is any other value, this
//               will wrap around to frame 0 at the end of the
//               animation.
////////////////////////////////////////////////////////////////////
53
inline int AnimInterface::get_next_frame(void) const;

949 8 get_frac 4 1518 23 AnimInterface::get_frac 0 1 189 598
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frac
//       Access: Published
//  Description: Returns the fractional part of the current frame.
//               Normally, this is in the range 0.0 <= f < 1.0, but in
//               the one special case of an animation playing to its
//               end frame and stopping, it might exactly equal 1.0.
//
//               It will always be true that get_full_frame() +
//               get_frac() == get_full_fframe().
////////////////////////////////////////////////////////////////////
50
inline double AnimInterface::get_frac(void) const;

950 14 get_full_frame 4 1518 29 AnimInterface::get_full_frame 0 1 190 693
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_fframe(), this
//               return value will never exceed the value passed to
//               to_frame in the play() method.
////////////////////////////////////////////////////////////////////
53
inline int AnimInterface::get_full_frame(void) const;

951 15 get_full_fframe 4 1518 30 AnimInterface::get_full_fframe 0 1 191 841
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_fframe
//       Access: Published
//  Description: Returns the current floating-point frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_frame(), this
//               return value may equal (to_frame + 1.0), when the
//               animation has played to its natural end.  However, in
//               this case the return value of get_full_frame() will
//               be to_frame, not (to_frame + 1).
////////////////////////////////////////////////////////////////////
57
inline double AnimInterface::get_full_fframe(void) const;

952 10 is_playing 4 1518 25 AnimInterface::is_playing 0 1 192 466
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::is_playing
//       Access: Published
//  Description: Returns true if the animation is currently playing,
//               false if it is stopped (e.g. because stop() or pose()
//               was called, or because it reached the end of the
//               animation after play() was called).
////////////////////////////////////////////////////////////////////
50
inline bool AnimInterface::is_playing(void) const;

953 6 output 4 1518 21 AnimInterface::output 0 1 193 230
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
55
virtual void AnimInterface::output(ostream &out) const;

954 14 get_class_type 4 1518 29 AnimInterface::get_class_type 0 1 194 0
54
static TypeHandle AnimInterface::get_class_type(void);

955 9 UpdateSeq 4 1519 20 UpdateSeq::UpdateSeq 0 2 195 196 987
// Filename: updateSeq.I
// Created by:  drose (30Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Default Constructor
//       Access: Published
//  Description: Creates an UpdateSeq in the 'initial' state.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline UpdateSeq::UpdateSeq(void);
inline UpdateSeq::UpdateSeq(UpdateSeq const &copy);

956 7 initial 4 1519 18 UpdateSeq::initial 0 1 197 290
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::initial (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'initial' state.
////////////////////////////////////////////////////////////////////
49
static inline UpdateSeq UpdateSeq::initial(void);

957 3 old 4 1519 14 UpdateSeq::old 0 1 198 282
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::old (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'old' state.
////////////////////////////////////////////////////////////////////
45
static inline UpdateSeq UpdateSeq::old(void);

958 5 fresh 4 1519 16 UpdateSeq::fresh 0 1 199 286
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::fresh (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'fresh' state.
////////////////////////////////////////////////////////////////////
47
static inline UpdateSeq UpdateSeq::fresh(void);

959 10 operator = 4 1519 21 UpdateSeq::operator = 0 1 200 234
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline UpdateSeq &UpdateSeq::operator =(UpdateSeq const &copy);

960 5 clear 4 1519 16 UpdateSeq::clear 0 1 201 260
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::clear
//       Access: Published
//  Description: Resets the UpdateSeq to the 'initial' state.
////////////////////////////////////////////////////////////////////
35
inline void UpdateSeq::clear(void);

961 10 is_initial 4 1519 21 UpdateSeq::is_initial 0 1 202 294
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_initial
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'initial'
//               state.
////////////////////////////////////////////////////////////////////
46
inline bool UpdateSeq::is_initial(void) const;

962 6 is_old 4 1519 17 UpdateSeq::is_old 0 1 203 269
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_old
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'old' state.
////////////////////////////////////////////////////////////////////
42
inline bool UpdateSeq::is_old(void) const;

963 8 is_fresh 4 1519 19 UpdateSeq::is_fresh 0 1 204 290
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_fresh
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'fresh'
//               state.
////////////////////////////////////////////////////////////////////
44
inline bool UpdateSeq::is_fresh(void) const;

964 10 is_special 4 1519 21 UpdateSeq::is_special 0 1 205 328
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_special
//       Access: Published
//  Description: Returns true if the UpdateSeq is in any special
//               states, i.e. 'initial', 'old', or 'fresh'.
////////////////////////////////////////////////////////////////////
46
inline bool UpdateSeq::is_special(void) const;

965 11 operator == 4 1519 22 UpdateSeq::operator == 0 1 206 227
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Equality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator ==(UpdateSeq const &other) const;

966 11 operator != 4 1519 22 UpdateSeq::operator != 0 1 207 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Inequality operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator !=(UpdateSeq const &other) const;

967 10 operator < 4 1519 21 UpdateSeq::operator < 0 1 208 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline bool UpdateSeq::operator <(UpdateSeq const &other) const;

968 11 operator <= 4 1519 22 UpdateSeq::operator <= 0 1 209 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator <=(UpdateSeq const &other) const;

969 10 operator > 4 1519 21 UpdateSeq::operator > 0 1 210 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline bool UpdateSeq::operator >(UpdateSeq const &other) const;

970 11 operator >= 4 1519 22 UpdateSeq::operator >= 0 1 211 229
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool UpdateSeq::operator >=(UpdateSeq const &other) const;

971 11 operator ++ 68 1519 22 UpdateSeq::operator ++ 0 1 212 231
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Preincrement operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline UpdateSeq UpdateSeq::operator ++(void);

972 11 operator ++ 4 1519 22 UpdateSeq::operator ++ 0 1 213 232
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Postincrement operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline UpdateSeq UpdateSeq::operator ++(int );

973 6 output 4 1519 17 UpdateSeq::output 0 1 214 216
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void UpdateSeq::output(ostream &out) const;

974 10 ~UpdateSeq 4 1519 21 UpdateSeq::~UpdateSeq 0 0 0
28
UpdateSeq::~UpdateSeq(void);

975 17 mark_bam_modified 4 1520 32 TypedWritable::mark_bam_modified 0 1 215 653
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::mark_bam_modified
//       Access: Public
//  Description: Increments the bam_modified counter, so that this
//               object will be invalidated and retransmitted on any
//               open bam streams.  This should normally not need to
//               be called by user code; it should be called
//               internally when the object has been changed in a way
//               that legitimately requires its retransmission to any
//               connected clients.
////////////////////////////////////////////////////////////////////
51
inline void TypedWritable::mark_bam_modified(void);

976 16 get_bam_modified 4 1520 31 TypedWritable::get_bam_modified 0 1 216 388
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::get_bam_modified
//       Access: Public
//  Description: Returns the current bam_modified counter.  This
//               counter is normally incremented automatically
//               whenever the object is modified.
////////////////////////////////////////////////////////////////////
61
inline UpdateSeq TypedWritable::get_bam_modified(void) const;

977 10 __reduce__ 4 1520 25 TypedWritable::__reduce__ 0 1 217 492
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
////////////////////////////////////////////////////////////////////
58
PyObject *TypedWritable::__reduce__(PyObject *self) const;

978 18 __reduce_persist__ 4 1520 33 TypedWritable::__reduce_persist__ 0 1 218 709
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::__reduce_persist__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This is similar to __reduce__, but it provides
//               additional support for the missing persistent-state
//               object needed to properly support self-referential
//               BAM objects written to the pickle stream.  This hooks
//               into the pickle and cPickle modules implemented in
//               direct/src/stdpy.
////////////////////////////////////////////////////////////////////
85
PyObject *TypedWritable::__reduce_persist__(PyObject *self, PyObject *pickler) const;

979 20 encode_to_bam_stream 4 1520 35 TypedWritable::encode_to_bam_stream 0 3 219 220 221 1543
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
////////////////////////////////////////////////////////////////////
187
inline basic_string< char > TypedWritable::encode_to_bam_stream(void) const;
bool TypedWritable::encode_to_bam_stream(basic_string< char > &data, BamWriter *writer = ((void *)(0))) const;

980 26 decode_raw_from_bam_stream 4 1520 41 TypedWritable::decode_raw_from_bam_stream 0 0 1476
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::decode_raw_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts the single
//               object on that string.  Returns true on success,
//               false on on error.
//
//               This variant sets the TypedWritable and
//               ReferenceCount pointers separately; both are pointers
//               to the same object.  The reference count is not
//               incremented; it is the caller's responsibility to
//               manage the reference count.
//
//               Note that this method cannot be used to retrieve
//               objects that do not inherit from ReferenceCount,
//               because these objects cannot persist beyond the
//               lifetime of the BamReader that reads them.  To
//               retrieve these objects from a bam stream, you must
//               construct a BamReader directly.
//
//               If you happen to know that the particular object in
//               question inherits from TypedWritableReferenceCount or
//               PandaNode, consider calling the variant of
//               decode_from_bam_stream() defined for those methods,
//               which presents a simpler interface.
////////////////////////////////////////////////////////////////////
170
static bool TypedWritable::decode_raw_from_bam_stream(TypedWritable *&ptr, ReferenceCount *&ref_ptr, basic_string< char > const &data, BamReader *reader = ((void *)(0)));

981 14 get_class_type 4 1520 29 TypedWritable::get_class_type 0 1 222 0
54
static TypeHandle TypedWritable::get_class_type(void);

982 39 py_decode_TypedWritable_from_bam_stream 1 0 39 py_decode_TypedWritable_from_bam_stream 0 1 765 493
////////////////////////////////////////////////////////////////////
//     Function: py_decode_TypedWritable_from_bam_stream
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
////////////////////////////////////////////////////////////////////
106
PyObject *py_decode_TypedWritable_from_bam_stream(PyObject *this_class, basic_string< char > const &data);

983 47 py_decode_TypedWritable_from_bam_stream_persist 1 0 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 766 756
////////////////////////////////////////////////////////////////////
//     Function: py_decode_TypedWritable_from_bam_stream_persist
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//
//               This is similar to
//               py_decode_TypedWritable_from_bam_stream, but it
//               provides additional support for the missing
//               persistent-state object needed to properly support
//               self-referential BAM objects written to the pickle
//               stream.  This hooks into the pickle and cPickle
//               modules implemented in direct/src/stdpy.
////////////////////////////////////////////////////////////////////
135
PyObject *py_decode_TypedWritable_from_bam_stream_persist(PyObject *unpickler, PyObject *this_class, basic_string< char > const &data);

984 23 upcast_to_TypedWritable 12 1522 52 TypedWritableReferenceCount::upcast_to_TypedWritable 0 1 226 56
upcast from TypedWritableReferenceCount to TypedWritable
74
TypedWritable *TypedWritableReferenceCount::upcast_to_TypedWritable(void);

985 39 downcast_to_TypedWritableReferenceCount 12 1520 54 TypedWritable::downcast_to_TypedWritableReferenceCount 0 1 227 58
downcast from TypedWritable to TypedWritableReferenceCount
90
TypedWritableReferenceCount *TypedWritable::downcast_to_TypedWritableReferenceCount(void);

986 24 upcast_to_ReferenceCount 12 1522 53 TypedWritableReferenceCount::upcast_to_ReferenceCount 0 1 228 57
upcast from TypedWritableReferenceCount to ReferenceCount
76
ReferenceCount *TypedWritableReferenceCount::upcast_to_ReferenceCount(void);

987 39 downcast_to_TypedWritableReferenceCount 12 1523 55 ReferenceCount::downcast_to_TypedWritableReferenceCount 0 1 229 59
downcast from ReferenceCount to TypedWritableReferenceCount
91
TypedWritableReferenceCount *ReferenceCount::downcast_to_TypedWritableReferenceCount(void);

988 22 decode_from_bam_stream 4 1522 51 TypedWritableReferenceCount::decode_from_bam_stream 0 2 223 224 872
////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
////////////////////////////////////////////////////////////////////
169
static PointerTo< TypedWritableReferenceCount > TypedWritableReferenceCount::decode_from_bam_stream(basic_string< char > const &data, BamReader *reader = ((void *)(0)));

989 14 get_class_type 4 1522 43 TypedWritableReferenceCount::get_class_type 0 1 225 0
68
static TypeHandle TypedWritableReferenceCount::get_class_type(void);

990 28 ~TypedWritableReferenceCount 4 1522 57 TypedWritableReferenceCount::~TypedWritableReferenceCount 0 0 0
64
TypedWritableReferenceCount::~TypedWritableReferenceCount(void);

991 37 upcast_to_TypedWritableReferenceCount 12 1524 53 BamCacheRecord::upcast_to_TypedWritableReferenceCount 0 1 249 57
upcast from BamCacheRecord to TypedWritableReferenceCount
89
TypedWritableReferenceCount *BamCacheRecord::upcast_to_TypedWritableReferenceCount(void);

992 26 downcast_to_BamCacheRecord 12 1522 55 TypedWritableReferenceCount::downcast_to_BamCacheRecord 0 1 250 59
downcast from TypedWritableReferenceCount to BamCacheRecord
78
BamCacheRecord *TypedWritableReferenceCount::downcast_to_BamCacheRecord(void);

993 24 upcast_to_LinkedListNode 12 1524 40 BamCacheRecord::upcast_to_LinkedListNode 0 0 44
upcast from BamCacheRecord to LinkedListNode
63
LinkedListNode *BamCacheRecord::upcast_to_LinkedListNode(void);

994 26 downcast_to_BamCacheRecord 12 1525 42 LinkedListNode::downcast_to_BamCacheRecord 0 0 46
downcast from LinkedListNode to BamCacheRecord
65
BamCacheRecord *LinkedListNode::downcast_to_BamCacheRecord(void);

995 15 ~BamCacheRecord 4 1524 31 BamCacheRecord::~BamCacheRecord 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::Destructor
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual BamCacheRecord::~BamCacheRecord(void);

996 9 make_copy 4 1524 25 BamCacheRecord::make_copy 0 1 230 928
// Filename: bamCacheRecord.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::make_copy
//       Access: Published
//  Description: Returns a duplicate of the BamCacheRecord.  The
//               duplicate will not have a data pointer set, even
//               though one may have been assigned to the original via
//               set_data().
////////////////////////////////////////////////////////////////////
73
inline PointerTo< BamCacheRecord > BamCacheRecord::make_copy(void) const;

997 11 operator == 4 1524 27 BamCacheRecord::operator == 0 1 231 396
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::operator == 
//       Access: Published
//  Description: Returns true if the record matches the other record
//               in those attributes which get written to disk.  Does
//               not compare the data pointer.
////////////////////////////////////////////////////////////////////
75
inline bool BamCacheRecord::operator ==(BamCacheRecord const &other) const;

998 19 get_source_pathname 4 1524 35 BamCacheRecord::get_source_pathname 0 1 232 523
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_pathname
//       Access: Published
//  Description: Returns the full pathname to the source file that
//               originally generated this cache request.  In some
//               cases, for instance in the case of a of a multipage
//               texture like "cube_#.png", this may not not a true
//               filename on disk.
////////////////////////////////////////////////////////////////////
71
inline Filename const &BamCacheRecord::get_source_pathname(void) const;

999 18 get_cache_filename 4 1524 34 BamCacheRecord::get_cache_filename 0 1 233 516
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_cache_filename
//       Access: Published
//  Description: Returns the name of the cache file as hashed from the
//               source_pathname.  This will be relative to the root
//               of the cache directory, and it will not include any
//               suffixes that may be appended to resolve hash
//               conflicts.
////////////////////////////////////////////////////////////////////
70
inline Filename const &BamCacheRecord::get_cache_filename(void) const;

1000 17 get_recorded_time 4 1524 33 BamCacheRecord::get_recorded_time 0 1 234 323
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_recorded_time
//       Access: Published
//  Description: Returns the time at which this particular record was
//               recorded or updated.
////////////////////////////////////////////////////////////////////
66
inline unsigned int BamCacheRecord::get_recorded_time(void) const;

1001 23 get_num_dependent_files 4 1524 39 BamCacheRecord::get_num_dependent_files 0 1 235 320
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_num_dependent_files
//       Access: Published
//  Description: Returns the number of source files that contribute to
//               the cache.
////////////////////////////////////////////////////////////////////
63
inline int BamCacheRecord::get_num_dependent_files(void) const;

1002 22 get_dependent_pathname 4 1524 38 BamCacheRecord::get_dependent_pathname 0 1 236 335
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_dependent_pathname
//       Access: Published
//  Description: Returns the full pathname of the nth source files
//               that contributes to the cache.
////////////////////////////////////////////////////////////////////
75
inline Filename const &BamCacheRecord::get_dependent_pathname(int n) const;

1003 20 dependents_unchanged 4 1524 36 BamCacheRecord::dependents_unchanged 0 1 237 380
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::dependents_unchanged
//       Access: Published
//  Description: Returns true if all of the dependent files are still
//               the same as when the cache was recorded, false
//               otherwise.
////////////////////////////////////////////////////////////////////
54
bool BamCacheRecord::dependents_unchanged(void) const;

1004 21 clear_dependent_files 4 1524 37 BamCacheRecord::clear_dependent_files 0 1 238 323
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_dependent_files
//       Access: Published
//  Description: Empties the list of files that contribute to the data
//               in this record.
////////////////////////////////////////////////////////////////////
49
void BamCacheRecord::clear_dependent_files(void);

1005 18 add_dependent_file 4 1524 34 BamCacheRecord::add_dependent_file 0 1 239 509
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::add_dependent_file
//       Access: Published
//  Description: Adds the indicated file to the list of files that
//               will be loaded to generate the data in this record.
//               This should be called once for the primary source
//               file, and again for each secondary source file, if
//               any.
////////////////////////////////////////////////////////////////////
66
void BamCacheRecord::add_dependent_file(Filename const &pathname);

1006 8 has_data 4 1524 24 BamCacheRecord::has_data 0 1 240 373
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::has_data
//       Access: Published
//  Description: Returns true if this cache record has an in-memory
//               data object associated--that is, the object stored in
//               the cache.
////////////////////////////////////////////////////////////////////
49
inline bool BamCacheRecord::has_data(void) const;

1007 10 clear_data 4 1524 26 BamCacheRecord::clear_data 0 1 241 394
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_data
//       Access: Published
//  Description: Removes the in-memory data object associated with
//               this record, if any.  This does not affect the
//               on-disk representation of the record.
////////////////////////////////////////////////////////////////////
45
inline void BamCacheRecord::clear_data(void);

1008 8 get_data 4 1524 24 BamCacheRecord::get_data 0 1 242 383
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_data
//       Access: Published
//  Description: Returns a pointer to the data stored in the
//               record, or NULL if there is no data.  The pointer is
//               not removed from the record.
////////////////////////////////////////////////////////////////////
59
inline TypedWritable *BamCacheRecord::get_data(void) const;

1009 12 extract_data 4 1524 28 BamCacheRecord::extract_data 0 0 737
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::extract_data
//       Access: Published
//  Description: Fills ptr and ref_ptr with the two different-typed
//               pointers to the same object, the data stored within
//               this record.  This transfers ownership of the data
//               pointer; the caller will be responsible for managing
//               the reference counts on this object subsequently.
//
//               Returns true if the record contained any data (and
//               the pointers have been filled), false if it didn't
//               (and the pointers are NULL).
////////////////////////////////////////////////////////////////////
88
inline bool BamCacheRecord::extract_data(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1010 8 set_data 4 1524 24 BamCacheRecord::set_data 0 2 243 244 1279
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: Stores a new data object on the record.  You should
//               pass the same pointer twice, to both parameters; this
//               allows the C++ typecasting to automatically convert
//               the pointer into both a TypedWritable and a
//               ReferenceCount pointer, so that the BamCacheRecord
//               object can reliably manage the reference counts.
//
//               You may pass 0 or NULL as the second parameter.  If
//               you do this, the BamCacheRecord will not manage the
//               object's reference count; it will be up to you to
//               ensure the object is not deleted during the lifetime
//               of the BamCacheRecord object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: This variant on set_data() is provided just to allow
//               Python code to pass a 0 as the second parameter.
////////////////////////////////////////////////////////////////////
151
inline void BamCacheRecord::set_data(TypedWritable *ptr, ReferenceCount *ref_ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr, int dummy);

1011 6 output 4 1524 22 BamCacheRecord::output 0 1 245 222
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
void BamCacheRecord::output(ostream &out) const;

1012 5 write 4 1524 21 BamCacheRecord::write 0 2 246 247 221
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
void BamCacheRecord::write(ostream &out, int indent_level = (0)) const;

1013 14 get_class_type 4 1524 30 BamCacheRecord::get_class_type 0 1 248 0
55
static TypeHandle BamCacheRecord::get_class_type(void);

1014 8 BamCache 4 1526 18 BamCache::BamCache 0 1 251 220
////////////////////////////////////////////////////////////////////
//     Function: BamCache::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
25
BamCache::BamCache(void);

1015 9 ~BamCache 4 1526 19 BamCache::~BamCache 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: BamCache::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
26
BamCache::~BamCache(void);

1016 10 set_active 4 1526 20 BamCache::set_active 0 1 252 1130
// Filename: bamCache.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_active
//       Access: Published
//  Description: Changes the state of the active flag.  "active" means
//               that the cache should be consulted automatically on
//               loads, "not active" means that objects should be
//               loaded directly without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
////////////////////////////////////////////////////////////////////
44
inline void BamCache::set_active(bool flag);

1017 10 get_active 4 1526 20 BamCache::get_active 0 1 253 695
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_active
//       Access: Published
//  Description: Returns true if the BamCache is currently active,
//               false if it is not.  "active" means that the cache
//               should be consulted automatically on loads, "not
//               active" means that objects should be loaded directly
//               without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
////////////////////////////////////////////////////////////////////
45
inline bool BamCache::get_active(void) const;

1018 16 set_cache_models 4 1526 26 BamCache::set_cache_models 0 1 254 346
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_models
//       Access: Published
//  Description: Indicates whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
////////////////////////////////////////////////////////////////////
50
inline void BamCache::set_cache_models(bool flag);

1019 16 get_cache_models 4 1526 26 BamCache::get_cache_models 0 1 255 414
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_models
//       Access: Published
//  Description: Returns whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
51
inline bool BamCache::get_cache_models(void) const;

1020 18 set_cache_textures 4 1526 28 BamCache::set_cache_textures 0 1 256 332
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_textures
//       Access: Published
//  Description: Indicates whether texture files will be stored in the
//               cache, as uncompressed txo files.
////////////////////////////////////////////////////////////////////
52
inline void BamCache::set_cache_textures(bool flag);

1021 18 get_cache_textures 4 1526 28 BamCache::get_cache_textures 0 1 257 418
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_textures
//       Access: Published
//  Description: Returns whether texture files (e.g. egg files and bam
//               files) will be stored in the cache, as txo files.
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
53
inline bool BamCache::get_cache_textures(void) const;

1022 29 set_cache_compressed_textures 4 1526 39 BamCache::set_cache_compressed_textures 0 1 258 1143
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_compressed_textures
//       Access: Published
//  Description: Indicates whether compressed texture files will be
//               stored in the cache, as compressed txo files.  The
//               compressed data may either be generated in-CPU, via
//               the squish library, or it may be extracted from the
//               GSG after the texture has been loaded.
//
//               This may be set in conjunction with
//               set_cache_textures(), or independently of it.  If
//               set_cache_textures() is true and this is false, all
//               textures will be cached in their uncompressed form.
//               If set_cache_textures() is false and this is true,
//               only compressed textures will be cached, and they
//               will be cached in their compressed form.  If both are
//               true, all textures will be cached, in their
//               uncompressed or compressed form appropriately.
////////////////////////////////////////////////////////////////////
63
inline void BamCache::set_cache_compressed_textures(bool flag);

1023 29 get_cache_compressed_textures 4 1526 39 BamCache::get_cache_compressed_textures 0 1 259 475
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_compressed_textures
//       Access: Published
//  Description: Returns whether compressed texture files will be
//               stored in the cache, as compressed txo files.  See
//               set_cache_compressed_textures().
//
//               This also returns false if get_active() is false.
////////////////////////////////////////////////////////////////////
64
inline bool BamCache::get_cache_compressed_textures(void) const;

1024 8 set_root 4 1526 18 BamCache::set_root 0 1 260 665
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_root
//       Access: Published
//  Description: Changes the current root pathname of the cache.  This
//               specifies where the cache files are stored on disk.
//               This should name a directory that is on a disk local
//               to the machine (not on a network-mounted disk), for
//               instance, /tmp/panda-cache or /c/panda-cache.
//
//               If the directory does not already exist, it will be
//               created as a result of this call.
////////////////////////////////////////////////////////////////////
46
void BamCache::set_root(Filename const &root);

1025 8 get_root 4 1526 18 BamCache::get_root 0 1 261 299
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_root
//       Access: Published
//  Description: Returns the current root pathname of the cache.  See
//               set_root().
////////////////////////////////////////////////////////////////////
47
inline Filename BamCache::get_root(void) const;

1026 14 set_flush_time 4 1526 24 BamCache::set_flush_time 0 1 262 316
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_flush_time
//       Access: Published
//  Description: Specifies the time in seconds between automatic
//               flushes of the cache index.
////////////////////////////////////////////////////////////////////
53
inline void BamCache::set_flush_time(int flush_time);

1027 14 get_flush_time 4 1526 24 BamCache::get_flush_time 0 1 263 314
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_flush_time
//       Access: Published
//  Description: Returns the time in seconds between automatic
//               flushes of the cache index.
////////////////////////////////////////////////////////////////////
48
inline int BamCache::get_flush_time(void) const;

1028 20 set_cache_max_kbytes 4 1526 30 BamCache::set_cache_max_kbytes 0 1 264 767
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_max_kbytes
//       Access: Published
//  Description: Specifies the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  If a newly cached file
//               would exceed this size, an older file is removed from
//               the cache.
//
//               Note that in the case of multiple different processes
//               simultaneously operating on the same cache directory,
//               the actual cache size may slightly exceed this value
//               from time to time due to latency in checking between
//               the processes.
////////////////////////////////////////////////////////////////////
59
inline void BamCache::set_cache_max_kbytes(int max_kbytes);

1029 20 get_cache_max_kbytes 4 1526 30 BamCache::get_cache_max_kbytes 0 1 265 371
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_max_kbytes
//       Access: Published
//  Description: Returns the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  See
//               set_cache_max_kbytes().
////////////////////////////////////////////////////////////////////
54
inline int BamCache::get_cache_max_kbytes(void) const;

1030 13 set_read_only 4 1526 23 BamCache::set_read_only 0 1 266 523
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_read_only
//       Access: Published
//  Description: Can be used to put the cache in read-only mode,
//               or take it out of read-only mode.  Note that if you
//               put it into read-write mode, and it discovers that
//               it does not have write access, it will put itself
//               right back into read-only mode.
////////////////////////////////////////////////////////////////////
45
inline void BamCache::set_read_only(bool ro);

1031 13 get_read_only 4 1526 23 BamCache::get_read_only 0 1 267 503
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_read_only
//       Access: Published
//  Description: Returns true if the cache is in read-only mode.
//               Normally, the cache starts in read-write mode.  It
//               can put itself into read-only mode automatically if
//               it discovers that it does not have write access to
//               the cache.
////////////////////////////////////////////////////////////////////
48
inline bool BamCache::get_read_only(void) const;

1032 6 lookup 4 1526 16 BamCache::lookup 0 1 268 1211
////////////////////////////////////////////////////////////////////
//     Function: BamCache::lookup
//       Access: Published
//  Description: Looks up a file in the cache.  
//
//               If the file is cacheable, then regardless of whether
//               the file is found in the cache or not, this returns a
//               BamCacheRecord.  On the other hand, if the file
//               cannot be cached, returns NULL.
//
//               If record->has_data() returns true, then the file was
//               found in the cache, and you may call
//               record->extract_data() to get the object.  If
//               record->has_data() returns false, then the file was
//               not found in the cache or the cache was stale; and
//               you should reload the source file (calling
//               record->add_dependent_file() for each file loaded,
//               including the original source file), and then call
//               record->set_data() to record the resulting loaded
//               object; and finally, you should call store() to write
//               the cached record to disk.
////////////////////////////////////////////////////////////////////
123
PointerTo< BamCacheRecord > BamCache::lookup(Filename const &source_filename, basic_string< char > const &cache_extension);

1033 5 store 4 1526 15 BamCache::store 0 1 269 478
////////////////////////////////////////////////////////////////////
//     Function: BamCache::store
//       Access: Published
//  Description: Flushes a cache entry to disk.  You must have
//               retrieved the cache record via a prior call to
//               lookup(), and then stored the data via
//               record->set_data().  Returns true on success, false
//               on failure.
////////////////////////////////////////////////////////////////////
45
bool BamCache::store(BamCacheRecord *record);

1034 20 consider_flush_index 4 1526 30 BamCache::consider_flush_index 0 1 270 325
////////////////////////////////////////////////////////////////////
//     Function: BamCache::consider_flush_index
//       Access: Published
//  Description: Flushes the index if enough time has elapsed since
//               the index was last flushed.
////////////////////////////////////////////////////////////////////
42
void BamCache::consider_flush_index(void);

1035 11 flush_index 4 1526 21 BamCache::flush_index 0 1 271 258
////////////////////////////////////////////////////////////////////
//     Function: BamCache::flush_index
//       Access: Published
//  Description: Ensures the index is written to disk.
////////////////////////////////////////////////////////////////////
33
void BamCache::flush_index(void);

1036 14 get_global_ptr 4 1526 24 BamCache::get_global_ptr 0 1 272 376
////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global BamCache object,
//               which is used automatically by the ModelPool and
//               TexturePool.
////////////////////////////////////////////////////////////////////
55
static inline BamCache *BamCache::get_global_ptr(void);

1037 9 ~BamEnums 4 1527 19 BamEnums::~BamEnums 0 0 0
26
BamEnums::~BamEnums(void);

1038 13 LoaderOptions 4 1531 28 LoaderOptions::LoaderOptions 0 4 273 274 275 276 1173
// Filename: loaderOptions.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
206
LoaderOptions::LoaderOptions(int flags = ((LF_search | LF_report_errors)));
inline LoaderOptions::LoaderOptions(int flags, int texture_flags);
inline LoaderOptions::LoaderOptions(LoaderOptions const &copy);

1039 10 operator = 4 1531 25 LoaderOptions::operator = 0 1 277 238
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void LoaderOptions::operator =(LoaderOptions const &copy);

1040 9 set_flags 4 1531 24 LoaderOptions::set_flags 0 1 278 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LoaderOptions::set_flags(int flags);

1041 9 get_flags 4 1531 24 LoaderOptions::get_flags 0 1 279 223
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline int LoaderOptions::get_flags(void) const;

1042 17 set_texture_flags 4 1531 32 LoaderOptions::set_texture_flags 0 1 280 231
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LoaderOptions::set_texture_flags(int flags);

1043 17 get_texture_flags 4 1531 32 LoaderOptions::get_texture_flags 0 1 281 231
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_flags
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline int LoaderOptions::get_texture_flags(void) const;

1044 6 output 4 1531 21 LoaderOptions::output 0 1 282 221
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
void LoaderOptions::output(ostream &out) const;

1045 14 ~LoaderOptions 4 1531 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

1046 9 BamReader 4 1534 20 BamReader::BamReader 0 3 283 284 285 261
// The primary interface for a caller.

////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
93
BamReader::BamReader(DatagramGenerator *source = ((void *)(0)), Filename const &name = (""));

1047 10 ~BamReader 4 1534 21 BamReader::~BamReader 0 0 260
// The primary interface for a caller.

////////////////////////////////////////////////////////////////////
//     Function: BamReader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
BamReader::~BamReader(void);

1048 10 set_source 4 1534 21 BamReader::set_source 0 1 286 383
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_source
//       Access: Published
//  Description: Changes the source of future datagrams for this
//               BamReader.  This also implicitly calls init() if it
//               has not already been called.
////////////////////////////////////////////////////////////////////
54
void BamReader::set_source(DatagramGenerator *source);

1049 4 init 4 1534 15 BamReader::init 0 1 287 474
////////////////////////////////////////////////////////////////////
//     Function: BamReader::init
//       Access: Published
//  Description: Initializes the BamReader prior to reading any
//               objects from its source.  This includes reading the
//               Bam header.
//
//               This returns true if the BamReader successfully
//               initialized, false otherwise.
////////////////////////////////////////////////////////////////////
27
bool BamReader::init(void);

1050 12 set_aux_data 4 1534 23 BamReader::set_aux_data 0 1 288 1496
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_aux_data
//       Access: Published
//  Description: Associates an arbitrary block of data with the
//               indicated object (or NULL), and the indicated name.
//
//               This is intended to provide a place for temporary
//               storage for objects reading themselves from the bam
//               file.  To use it, inherit from BamReader::AuxData and
//               store whatever data you like there.  Then associate
//               your AuxData with the object as it is being read with
//               set_aux_data().  You may later set the aux data to
//               NULL to remove it; or it will automatically be
//               removed (and deleted) after finalize() is called for
//               the object in question.
//
//               If the TypedWritable pointer is NULL, the the aux
//               data is stored globally for the BamReader in general.
//               This pointer is available to any bam objects, and
//               will not be automatically removed until the BamReader
//               itself destructs.
//
//               In either case, the name is just an arbitrary
//               user-defined key.  If there is already a data pointer
//               stored for the obj/name pair, that data pointer will
//               be replaced (and deleted).
////////////////////////////////////////////////////////////////////
109
void BamReader::set_aux_data(TypedWritable *obj, basic_string< char > const &name, BamReader::AuxData *data);

1051 12 get_aux_data 4 1534 23 BamReader::get_aux_data 0 1 289 413
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_aux_data
//       Access: Published
//  Description: Returns the pointer previously associated with the
//               bam reader by a previous call to set_aux_data(), or
//               NULL if data with the indicated key has not been set.
////////////////////////////////////////////////////////////////////
104
BamReader::AuxData *BamReader::get_aux_data(TypedWritable *obj, basic_string< char > const &name) const;

1052 12 get_filename 4 1534 23 BamReader::get_filename 0 1 290 457
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamReader should
//               contain the name of the file.  This enables the
//               reader to interpret pathnames in the BAM as relative
//               to the directory containing the BAM.
////////////////////////////////////////////////////////////////////
59
inline Filename const &BamReader::get_filename(void) const;

1053 18 get_loader_options 4 1534 29 BamReader::get_loader_options 0 1 291 330
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_loader_options
//       Access: Published
//  Description: Returns the LoaderOptions passed to the loader when
//               the model was requested, if any.
////////////////////////////////////////////////////////////////////
70
inline LoaderOptions const &BamReader::get_loader_options(void) const;

1054 18 set_loader_options 4 1534 29 BamReader::set_loader_options 0 1 292 276
////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_loader_options
//       Access: Published
//  Description: Specifies the LoaderOptions for this BamReader.
////////////////////////////////////////////////////////////////////
72
inline void BamReader::set_loader_options(LoaderOptions const &options);

1055 11 read_object 4 1534 22 BamReader::read_object 0 1 293 2207
////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  If the
//               object type is known, a new object of the appropriate
//               type is created and returned; otherwise, NULL is
//               returned.  NULL is also returned when the end of the
//               file is reached.  is_eof() may be called to
//               differentiate between these two cases.
//
//               This may be called repeatedly to extract out all the
//               objects in the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is retrieved directly
//               from the Bam file: the root of the scene graph.  The
//               remaining objects will all be retrieved recursively
//               by the first object.
//
//               Note that the object returned may not yet be
//               complete.  In particular, some of its pointers may
//               not be filled in; you must call resolve() to fill in
//               all the available pointers before you can safely use
//               any objects returned by read_object().
//
//               This flavor of read_object() requires the caller to
//               know what type of object it has received in order to
//               properly manage the reference counts.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  
//
//               This flavor of read_object() returns both a
//               TypedWritable and a ReferenceCount pointer to the
//               same object, so the reference count may be tracked
//               reliably, without having to know precisely what type
//               of object we have.  It returns true on success, or
//               false on failure.
////////////////////////////////////////////////////////////////////
120
TypedWritable *BamReader::read_object(void);
bool BamReader::read_object(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1056 6 is_eof 4 1534 17 BamReader::is_eof 0 1 294 375
////////////////////////////////////////////////////////////////////
//     Function: BamReader::is_eof
//       Access: Published
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
////////////////////////////////////////////////////////////////////
42
inline bool BamReader::is_eof(void) const;

1057 7 resolve 4 1534 18 BamReader::resolve 0 1 295 935
////////////////////////////////////////////////////////////////////
//     Function: BamReader::resolve
//       Access: Published
//  Description: This may be called at any time during processing of
//               the Bam file to resolve all the known pointers so
//               far.  It is usually called at the end of the
//               processing, after all objects have been read, which
//               is generally the best time to call it.
//
//               This must be called at least once after reading a
//               particular object via get_object() in order to
//               validate that object.
//
//               The return value is true if all objects have been
//               resolved, or false if some objects are still
//               outstanding (in which case you will need to call
//               resolve() again later).
////////////////////////////////////////////////////////////////////
30
bool BamReader::resolve(void);

1058 14 change_pointer 4 1534 25 BamReader::change_pointer 0 1 296 724
////////////////////////////////////////////////////////////////////
//     Function: BamReader::change_pointer
//       Access: Published
//  Description: Indicates that an object recently read from the bam
//               stream should be replaced with a new object.  Any
//               future occurrences of the original object in the
//               stream will henceforth return the new object instead.
//
//               The return value is true if the replacement was
//               successfully made, or false if the object was not
//               read from the stream (or if change_pointer had
//               already been called on it).
////////////////////////////////////////////////////////////////////
100
bool BamReader::change_pointer(TypedWritable const *orig_pointer, TypedWritable const *new_pointer);

1059 18 get_file_major_ver 4 1534 29 BamReader::get_file_major_ver 0 1 297 316
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_major_ver
//       Access: Published
//  Description: Returns the major version number of the Bam file
//               currently being read.
////////////////////////////////////////////////////////////////////
53
inline int BamReader::get_file_major_ver(void) const;

1060 18 get_file_minor_ver 4 1534 29 BamReader::get_file_minor_ver 0 1 298 316
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_minor_ver
//       Access: Published
//  Description: Returns the minor version number of the Bam file
//               currently being read.
////////////////////////////////////////////////////////////////////
53
inline int BamReader::get_file_minor_ver(void) const;

1061 15 get_file_endian 4 1534 26 BamReader::get_file_endian 0 1 299 528
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read.  This does not imply that
//               every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
////////////////////////////////////////////////////////////////////
66
inline BamEnums::BamEndian BamReader::get_file_endian(void) const;

1062 21 get_current_major_ver 4 1534 32 BamReader::get_current_major_ver 0 1 300 440
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_major_ver
//       Access: Published
//  Description: Returns the major version number of Bam files
//               supported by the current code base.  This must match
//               get_file_major_ver() in order to successfully read a
//               file.
////////////////////////////////////////////////////////////////////
56
inline int BamReader::get_current_major_ver(void) const;

1063 21 get_current_minor_ver 4 1534 32 BamReader::get_current_minor_ver 0 1 301 450
////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_minor_ver
//       Access: Published
//  Description: Returns the minor version number of Bam files
//               supported by the current code base.  This must match
//               or exceed get_file_minor_ver() in order to
//               successfully read a file.
////////////////////////////////////////////////////////////////////
56
inline int BamReader::get_current_minor_ver(void) const;

1064 9 BamWriter 4 1535 20 BamWriter::BamWriter 0 3 302 303 304 221
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
BamWriter::BamWriter(DatagramSink *target = ((void *)(0)), Filename const &name = (""));

1065 10 ~BamWriter 4 1535 21 BamWriter::~BamWriter 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
BamWriter::~BamWriter(void);

1066 10 set_target 4 1535 21 BamWriter::set_target 0 1 305 394
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_target
//       Access: Published
//  Description: Changes the destination of future datagrams written
//               by the BamWriter.  This also implicitly calls init()
//               if it has not already been called.
////////////////////////////////////////////////////////////////////
49
void BamWriter::set_target(DatagramSink *target);

1067 4 init 4 1535 15 BamWriter::init 0 1 306 483
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::init
//       Access: Published
//  Description: Initializes the BamWriter prior to writing any
//               objects to its output stream.  This includes writing
//               out the Bam header.
//
//               This returns true if the BamWriter successfully
//               initialized, false otherwise.
////////////////////////////////////////////////////////////////////
27
bool BamWriter::init(void);

1068 12 get_filename 4 1535 23 BamWriter::get_filename 0 1 307 940
// Filename: bamWriter.I
// Created by:  jason (08Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamWriter should
//               contain the name of the file.  This enables the
//               writer to convert pathnames in the BAM to relative
//               to the directory containing the BAM.
////////////////////////////////////////////////////////////////////
59
inline Filename const &BamWriter::get_filename(void) const;

1069 12 write_object 4 1535 23 BamWriter::write_object 0 1 308 1153
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::write_object
//       Access: Published
//  Description: Writes a single object to the Bam file, so that the
//               BamReader::read_object() can later correctly restore
//               the object and all its pointers.
//
//               This implicitly also writes any additional objects
//               this object references (if they haven't already been
//               written), so that pointers may be fully resolved.
//
//               This may be called repeatedly to write a sequence of
//               objects to the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is written directly from
//               the Bam file: the root of the scene graph.  The
//               remaining objects will all be written recursively by
//               the first object.
//
//               Returns true if the object is successfully written,
//               false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BamWriter::write_object(TypedWritable const *obj);

1070 10 has_object 4 1535 21 BamWriter::has_object 0 1 309 408
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::has_object
//       Access: Published
//  Description: Returns true if the object has previously been
//               written (or at least requested to be written) to the
//               bam file, or false if we've never heard of it before.
////////////////////////////////////////////////////////////////////
59
bool BamWriter::has_object(TypedWritable const *obj) const;

1071 5 flush 4 1535 16 BamWriter::flush 0 1 310 307
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::flush
//       Access: Published
//  Description: Ensures that all data written thus far is manifested
//               on the output stream.
////////////////////////////////////////////////////////////////////
28
void BamWriter::flush(void);

1072 15 get_file_endian 4 1535 26 BamWriter::get_file_endian 0 1 311 531
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being written.  This does not imply
//               that every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
////////////////////////////////////////////////////////////////////
66
inline BamEnums::BamEndian BamWriter::get_file_endian(void) const;

1073 21 get_file_texture_mode 4 1535 32 BamWriter::get_file_texture_mode 0 1 312 462
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_texture_mode
//       Access: Published
//  Description: Returns the BamTextureMode preference indicated by
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
////////////////////////////////////////////////////////////////////
77
inline BamEnums::BamTextureMode BamWriter::get_file_texture_mode(void) const;

1074 21 set_file_texture_mode 4 1535 32 BamWriter::set_file_texture_mode 0 1 313 453
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_file_texture_mode
//       Access: Published
//  Description: Changes the BamTextureMode preference for
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
////////////////////////////////////////////////////////////////////
89
inline void BamWriter::set_file_texture_mode(BamEnums::BamTextureMode file_texture_mode);

1075 7 BitMask 4 1536 36 BitMask< unsigned int, 32 >::BitMask 0 3 314 315 316 0
212
inline ::BitMask< unsigned int, 32 >::BitMask(void);
inline ::BitMask< unsigned int, 32 >::BitMask(unsigned int init_value);
inline ::BitMask< unsigned int, 32 >::BitMask(BitMask< unsigned int, 32 > const &copy);

1076 10 operator = 4 1536 39 BitMask< unsigned int, 32 >::operator = 0 1 317 0
119
inline BitMask< unsigned int, 32 > &::BitMask< unsigned int, 32 >::operator =(BitMask< unsigned int, 32 > const &copy);

1077 6 all_on 4 1536 35 BitMask< unsigned int, 32 >::all_on 0 1 318 0
86
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::all_on(void);

1078 7 all_off 4 1536 36 BitMask< unsigned int, 32 >::all_off 0 1 319 0
87
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::all_off(void);

1079 8 lower_on 4 1536 37 BitMask< unsigned int, 32 >::lower_on 0 1 320 0
95
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::lower_on(int on_bits);

1080 3 bit 4 1536 32 BitMask< unsigned int, 32 >::bit 0 1 321 0
88
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::bit(int index);

1081 5 range 4 1536 34 BitMask< unsigned int, 32 >::range 0 1 322 0
102
static inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::range(int low_bit, int size);

1082 8 ~BitMask 4 1536 37 BitMask< unsigned int, 32 >::~BitMask 0 0 0
53
inline ::BitMask< unsigned int, 32 >::~BitMask(void);

1083 16 has_max_num_bits 4 1536 45 BitMask< unsigned int, 32 >::has_max_num_bits 0 1 323 0
73
static inline bool ::BitMask< unsigned int, 32 >::has_max_num_bits(void);

1084 16 get_max_num_bits 4 1536 45 BitMask< unsigned int, 32 >::get_max_num_bits 0 1 324 0
72
static inline int ::BitMask< unsigned int, 32 >::get_max_num_bits(void);

1085 12 get_num_bits 4 1536 41 BitMask< unsigned int, 32 >::get_num_bits 0 1 325 0
68
static inline int ::BitMask< unsigned int, 32 >::get_num_bits(void);

1086 7 get_bit 4 1536 36 BitMask< unsigned int, 32 >::get_bit 0 1 326 0
68
inline bool ::BitMask< unsigned int, 32 >::get_bit(int index) const;

1087 7 set_bit 4 1536 36 BitMask< unsigned int, 32 >::set_bit 0 1 327 0
62
inline void ::BitMask< unsigned int, 32 >::set_bit(int index);

1088 9 clear_bit 4 1536 38 BitMask< unsigned int, 32 >::clear_bit 0 1 328 0
64
inline void ::BitMask< unsigned int, 32 >::clear_bit(int index);

1089 10 set_bit_to 4 1536 39 BitMask< unsigned int, 32 >::set_bit_to 0 1 329 0
77
inline void ::BitMask< unsigned int, 32 >::set_bit_to(int index, bool value);

1090 7 is_zero 4 1536 36 BitMask< unsigned int, 32 >::is_zero 0 1 330 0
63
inline bool ::BitMask< unsigned int, 32 >::is_zero(void) const;

1091 9 is_all_on 4 1536 38 BitMask< unsigned int, 32 >::is_all_on 0 1 331 0
65
inline bool ::BitMask< unsigned int, 32 >::is_all_on(void) const;

1092 7 extract 4 1536 36 BitMask< unsigned int, 32 >::extract 0 1 332 0
88
inline unsigned int ::BitMask< unsigned int, 32 >::extract(int low_bit, int size) const;

1093 5 store 4 1536 34 BitMask< unsigned int, 32 >::store 0 1 333 0
92
inline void ::BitMask< unsigned int, 32 >::store(unsigned int value, int low_bit, int size);

1094 10 has_any_of 4 1536 39 BitMask< unsigned int, 32 >::has_any_of 0 1 334 0
83
inline bool ::BitMask< unsigned int, 32 >::has_any_of(int low_bit, int size) const;

1095 10 has_all_of 4 1536 39 BitMask< unsigned int, 32 >::has_all_of 0 1 335 0
83
inline bool ::BitMask< unsigned int, 32 >::has_all_of(int low_bit, int size) const;

1096 9 set_range 4 1536 38 BitMask< unsigned int, 32 >::set_range 0 1 336 0
76
inline void ::BitMask< unsigned int, 32 >::set_range(int low_bit, int size);

1097 11 clear_range 4 1536 40 BitMask< unsigned int, 32 >::clear_range 0 1 337 0
78
inline void ::BitMask< unsigned int, 32 >::clear_range(int low_bit, int size);

1098 12 set_range_to 4 1536 41 BitMask< unsigned int, 32 >::set_range_to 0 1 338 0
91
inline void ::BitMask< unsigned int, 32 >::set_range_to(bool value, int low_bit, int size);

1099 8 get_word 4 1536 37 BitMask< unsigned int, 32 >::get_word 0 1 339 0
72
inline unsigned int ::BitMask< unsigned int, 32 >::get_word(void) const;

1100 8 set_word 4 1536 37 BitMask< unsigned int, 32 >::set_word 0 1 340 0
72
inline void ::BitMask< unsigned int, 32 >::set_word(unsigned int value);

1101 15 get_num_on_bits 4 1536 44 BitMask< unsigned int, 32 >::get_num_on_bits 0 1 341 0
70
inline int ::BitMask< unsigned int, 32 >::get_num_on_bits(void) const;

1102 16 get_num_off_bits 4 1536 45 BitMask< unsigned int, 32 >::get_num_off_bits 0 1 342 0
71
inline int ::BitMask< unsigned int, 32 >::get_num_off_bits(void) const;

1103 17 get_lowest_on_bit 4 1536 46 BitMask< unsigned int, 32 >::get_lowest_on_bit 0 1 343 0
72
inline int ::BitMask< unsigned int, 32 >::get_lowest_on_bit(void) const;

1104 18 get_lowest_off_bit 4 1536 47 BitMask< unsigned int, 32 >::get_lowest_off_bit 0 1 344 0
73
inline int ::BitMask< unsigned int, 32 >::get_lowest_off_bit(void) const;

1105 18 get_highest_on_bit 4 1536 47 BitMask< unsigned int, 32 >::get_highest_on_bit 0 1 345 0
73
inline int ::BitMask< unsigned int, 32 >::get_highest_on_bit(void) const;

1106 19 get_highest_off_bit 4 1536 48 BitMask< unsigned int, 32 >::get_highest_off_bit 0 1 346 0
74
inline int ::BitMask< unsigned int, 32 >::get_highest_off_bit(void) const;

1107 29 get_next_higher_different_bit 4 1536 58 BitMask< unsigned int, 32 >::get_next_higher_different_bit 0 1 347 0
91
inline int ::BitMask< unsigned int, 32 >::get_next_higher_different_bit(int low_bit) const;

1108 15 invert_in_place 4 1536 44 BitMask< unsigned int, 32 >::invert_in_place 0 1 348 0
65
inline void ::BitMask< unsigned int, 32 >::invert_in_place(void);

1109 18 has_bits_in_common 4 1536 47 BitMask< unsigned int, 32 >::has_bits_in_common 0 1 349 0
110
inline bool ::BitMask< unsigned int, 32 >::has_bits_in_common(BitMask< unsigned int, 32 > const &other) const;

1110 5 clear 4 1536 34 BitMask< unsigned int, 32 >::clear 0 1 350 0
55
inline void ::BitMask< unsigned int, 32 >::clear(void);

1111 6 output 4 1536 35 BitMask< unsigned int, 32 >::output 0 1 351 0
63
void ::BitMask< unsigned int, 32 >::output(ostream &out) const;

1112 13 output_binary 4 1536 42 BitMask< unsigned int, 32 >::output_binary 0 2 352 353 0
94
void ::BitMask< unsigned int, 32 >::output_binary(ostream &out, int spaces_every = (4)) const;

1113 10 output_hex 4 1536 39 BitMask< unsigned int, 32 >::output_hex 0 2 354 355 0
91
void ::BitMask< unsigned int, 32 >::output_hex(ostream &out, int spaces_every = (4)) const;

1114 5 write 4 1536 34 BitMask< unsigned int, 32 >::write 0 2 356 357 0
86
void ::BitMask< unsigned int, 32 >::write(ostream &out, int indent_level = (0)) const;

1115 11 operator == 4 1536 40 BitMask< unsigned int, 32 >::operator == 0 1 358 0
103
inline bool ::BitMask< unsigned int, 32 >::operator ==(BitMask< unsigned int, 32 > const &other) const;

1116 11 operator != 4 1536 40 BitMask< unsigned int, 32 >::operator != 0 1 359 0
103
inline bool ::BitMask< unsigned int, 32 >::operator !=(BitMask< unsigned int, 32 > const &other) const;

1117 10 operator < 4 1536 39 BitMask< unsigned int, 32 >::operator < 0 1 360 0
102
inline bool ::BitMask< unsigned int, 32 >::operator <(BitMask< unsigned int, 32 > const &other) const;

1118 10 compare_to 4 1536 39 BitMask< unsigned int, 32 >::compare_to 0 1 361 0
101
inline int ::BitMask< unsigned int, 32 >::compare_to(BitMask< unsigned int, 32 > const &other) const;

1119 10 operator & 4 1536 39 BitMask< unsigned int, 32 >::operator & 0 1 362 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator &(BitMask< unsigned int, 32 > const &other) const;

1120 10 operator | 4 1536 39 BitMask< unsigned int, 32 >::operator | 0 1 363 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator |(BitMask< unsigned int, 32 > const &other) const;

1121 10 operator ^ 4 1536 39 BitMask< unsigned int, 32 >::operator ^ 0 1 364 0
125
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator ^(BitMask< unsigned int, 32 > const &other) const;

1122 10 operator ~ 68 1536 39 BitMask< unsigned int, 32 >::operator ~ 0 1 365 0
89
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator ~(void) const;

1123 11 operator << 4 1536 40 BitMask< unsigned int, 32 >::operator << 0 1 366 0
95
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator <<(int shift) const;

1124 11 operator >> 4 1536 40 BitMask< unsigned int, 32 >::operator >> 0 1 367 0
95
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::operator >>(int shift) const;

1125 11 operator &= 4 1536 40 BitMask< unsigned int, 32 >::operator &= 0 1 368 0
97
inline void ::BitMask< unsigned int, 32 >::operator &=(BitMask< unsigned int, 32 > const &other);

1126 11 operator |= 4 1536 40 BitMask< unsigned int, 32 >::operator |= 0 1 369 0
97
inline void ::BitMask< unsigned int, 32 >::operator |=(BitMask< unsigned int, 32 > const &other);

1127 11 operator ^= 4 1536 40 BitMask< unsigned int, 32 >::operator ^= 0 1 370 0
97
inline void ::BitMask< unsigned int, 32 >::operator ^=(BitMask< unsigned int, 32 > const &other);

1128 12 operator <<= 4 1536 41 BitMask< unsigned int, 32 >::operator <<= 0 1 371 0
67
inline void ::BitMask< unsigned int, 32 >::operator <<=(int shift);

1129 12 operator >>= 4 1536 41 BitMask< unsigned int, 32 >::operator >>= 0 1 372 0
67
inline void ::BitMask< unsigned int, 32 >::operator >>=(int shift);

1130 19 flood_down_in_place 4 1536 48 BitMask< unsigned int, 32 >::flood_down_in_place 0 1 373 0
69
inline void ::BitMask< unsigned int, 32 >::flood_down_in_place(void);

1131 17 flood_up_in_place 4 1536 46 BitMask< unsigned int, 32 >::flood_up_in_place 0 1 374 0
67
inline void ::BitMask< unsigned int, 32 >::flood_up_in_place(void);

1132 15 flood_bits_down 4 1536 44 BitMask< unsigned int, 32 >::flood_bits_down 0 1 375 0
94
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::flood_bits_down(void) const;

1133 13 flood_bits_up 4 1536 42 BitMask< unsigned int, 32 >::flood_bits_up 0 1 376 0
92
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::flood_bits_up(void) const;

1134 21 keep_next_highest_bit 4 1536 50 BitMask< unsigned int, 32 >::keep_next_highest_bit 0 3 377 378 379 0
343
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_highest_bit(BitMask< unsigned int, 32 > const &other) const;

1135 20 keep_next_lowest_bit 4 1536 49 BitMask< unsigned int, 32 >::keep_next_lowest_bit 0 3 380 381 382 0
340
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned int, 32 > ::BitMask< unsigned int, 32 >::keep_next_lowest_bit(BitMask< unsigned int, 32 > const &other) const;

1136 7 get_key 4 1536 36 BitMask< unsigned int, 32 >::get_key 0 1 383 0
62
inline int ::BitMask< unsigned int, 32 >::get_key(void) const;

1137 14 get_class_type 4 1536 43 BitMask< unsigned int, 32 >::get_class_type 0 1 384 0
70
static TypeHandle ::BitMask< unsigned int, 32 >::get_class_type(void);

1138 7 BitMask 4 1537 40 BitMask< unsigned __int64, 64 >::BitMask 0 3 385 386 387 0
232
inline ::BitMask< unsigned __int64, 64 >::BitMask(void);
inline ::BitMask< unsigned __int64, 64 >::BitMask(unsigned __int64 init_value);
inline ::BitMask< unsigned __int64, 64 >::BitMask(BitMask< unsigned __int64, 64 > const &copy);

1139 10 operator = 4 1537 43 BitMask< unsigned __int64, 64 >::operator = 0 1 388 0
131
inline BitMask< unsigned __int64, 64 > &::BitMask< unsigned __int64, 64 >::operator =(BitMask< unsigned __int64, 64 > const &copy);

1140 6 all_on 4 1537 39 BitMask< unsigned __int64, 64 >::all_on 0 1 389 0
94
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::all_on(void);

1141 7 all_off 4 1537 40 BitMask< unsigned __int64, 64 >::all_off 0 1 390 0
95
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::all_off(void);

1142 8 lower_on 4 1537 41 BitMask< unsigned __int64, 64 >::lower_on 0 1 391 0
103
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::lower_on(int on_bits);

1143 3 bit 4 1537 36 BitMask< unsigned __int64, 64 >::bit 0 1 392 0
96
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::bit(int index);

1144 5 range 4 1537 38 BitMask< unsigned __int64, 64 >::range 0 1 393 0
110
static inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::range(int low_bit, int size);

1145 8 ~BitMask 4 1537 41 BitMask< unsigned __int64, 64 >::~BitMask 0 0 0
57
inline ::BitMask< unsigned __int64, 64 >::~BitMask(void);

1146 16 has_max_num_bits 4 1537 49 BitMask< unsigned __int64, 64 >::has_max_num_bits 0 1 394 0
77
static inline bool ::BitMask< unsigned __int64, 64 >::has_max_num_bits(void);

1147 16 get_max_num_bits 4 1537 49 BitMask< unsigned __int64, 64 >::get_max_num_bits 0 1 395 0
76
static inline int ::BitMask< unsigned __int64, 64 >::get_max_num_bits(void);

1148 12 get_num_bits 4 1537 45 BitMask< unsigned __int64, 64 >::get_num_bits 0 1 396 0
72
static inline int ::BitMask< unsigned __int64, 64 >::get_num_bits(void);

1149 7 get_bit 4 1537 40 BitMask< unsigned __int64, 64 >::get_bit 0 1 397 0
72
inline bool ::BitMask< unsigned __int64, 64 >::get_bit(int index) const;

1150 7 set_bit 4 1537 40 BitMask< unsigned __int64, 64 >::set_bit 0 1 398 0
66
inline void ::BitMask< unsigned __int64, 64 >::set_bit(int index);

1151 9 clear_bit 4 1537 42 BitMask< unsigned __int64, 64 >::clear_bit 0 1 399 0
68
inline void ::BitMask< unsigned __int64, 64 >::clear_bit(int index);

1152 10 set_bit_to 4 1537 43 BitMask< unsigned __int64, 64 >::set_bit_to 0 1 400 0
81
inline void ::BitMask< unsigned __int64, 64 >::set_bit_to(int index, bool value);

1153 7 is_zero 4 1537 40 BitMask< unsigned __int64, 64 >::is_zero 0 1 401 0
67
inline bool ::BitMask< unsigned __int64, 64 >::is_zero(void) const;

1154 9 is_all_on 4 1537 42 BitMask< unsigned __int64, 64 >::is_all_on 0 1 402 0
69
inline bool ::BitMask< unsigned __int64, 64 >::is_all_on(void) const;

1155 7 extract 4 1537 40 BitMask< unsigned __int64, 64 >::extract 0 1 403 0
96
inline unsigned __int64 ::BitMask< unsigned __int64, 64 >::extract(int low_bit, int size) const;

1156 5 store 4 1537 38 BitMask< unsigned __int64, 64 >::store 0 1 404 0
100
inline void ::BitMask< unsigned __int64, 64 >::store(unsigned __int64 value, int low_bit, int size);

1157 10 has_any_of 4 1537 43 BitMask< unsigned __int64, 64 >::has_any_of 0 1 405 0
87
inline bool ::BitMask< unsigned __int64, 64 >::has_any_of(int low_bit, int size) const;

1158 10 has_all_of 4 1537 43 BitMask< unsigned __int64, 64 >::has_all_of 0 1 406 0
87
inline bool ::BitMask< unsigned __int64, 64 >::has_all_of(int low_bit, int size) const;

1159 9 set_range 4 1537 42 BitMask< unsigned __int64, 64 >::set_range 0 1 407 0
80
inline void ::BitMask< unsigned __int64, 64 >::set_range(int low_bit, int size);

1160 11 clear_range 4 1537 44 BitMask< unsigned __int64, 64 >::clear_range 0 1 408 0
82
inline void ::BitMask< unsigned __int64, 64 >::clear_range(int low_bit, int size);

1161 12 set_range_to 4 1537 45 BitMask< unsigned __int64, 64 >::set_range_to 0 1 409 0
95
inline void ::BitMask< unsigned __int64, 64 >::set_range_to(bool value, int low_bit, int size);

1162 8 get_word 4 1537 41 BitMask< unsigned __int64, 64 >::get_word 0 1 410 0
80
inline unsigned __int64 ::BitMask< unsigned __int64, 64 >::get_word(void) const;

1163 8 set_word 4 1537 41 BitMask< unsigned __int64, 64 >::set_word 0 1 411 0
80
inline void ::BitMask< unsigned __int64, 64 >::set_word(unsigned __int64 value);

1164 15 get_num_on_bits 4 1537 48 BitMask< unsigned __int64, 64 >::get_num_on_bits 0 1 412 0
74
inline int ::BitMask< unsigned __int64, 64 >::get_num_on_bits(void) const;

1165 16 get_num_off_bits 4 1537 49 BitMask< unsigned __int64, 64 >::get_num_off_bits 0 1 413 0
75
inline int ::BitMask< unsigned __int64, 64 >::get_num_off_bits(void) const;

1166 17 get_lowest_on_bit 4 1537 50 BitMask< unsigned __int64, 64 >::get_lowest_on_bit 0 1 414 0
76
inline int ::BitMask< unsigned __int64, 64 >::get_lowest_on_bit(void) const;

1167 18 get_lowest_off_bit 4 1537 51 BitMask< unsigned __int64, 64 >::get_lowest_off_bit 0 1 415 0
77
inline int ::BitMask< unsigned __int64, 64 >::get_lowest_off_bit(void) const;

1168 18 get_highest_on_bit 4 1537 51 BitMask< unsigned __int64, 64 >::get_highest_on_bit 0 1 416 0
77
inline int ::BitMask< unsigned __int64, 64 >::get_highest_on_bit(void) const;

1169 19 get_highest_off_bit 4 1537 52 BitMask< unsigned __int64, 64 >::get_highest_off_bit 0 1 417 0
78
inline int ::BitMask< unsigned __int64, 64 >::get_highest_off_bit(void) const;

1170 29 get_next_higher_different_bit 4 1537 62 BitMask< unsigned __int64, 64 >::get_next_higher_different_bit 0 1 418 0
95
inline int ::BitMask< unsigned __int64, 64 >::get_next_higher_different_bit(int low_bit) const;

1171 15 invert_in_place 4 1537 48 BitMask< unsigned __int64, 64 >::invert_in_place 0 1 419 0
69
inline void ::BitMask< unsigned __int64, 64 >::invert_in_place(void);

1172 18 has_bits_in_common 4 1537 51 BitMask< unsigned __int64, 64 >::has_bits_in_common 0 1 420 0
118
inline bool ::BitMask< unsigned __int64, 64 >::has_bits_in_common(BitMask< unsigned __int64, 64 > const &other) const;

1173 5 clear 4 1537 38 BitMask< unsigned __int64, 64 >::clear 0 1 421 0
59
inline void ::BitMask< unsigned __int64, 64 >::clear(void);

1174 6 output 4 1537 39 BitMask< unsigned __int64, 64 >::output 0 1 422 0
67
void ::BitMask< unsigned __int64, 64 >::output(ostream &out) const;

1175 13 output_binary 4 1537 46 BitMask< unsigned __int64, 64 >::output_binary 0 2 423 424 0
98
void ::BitMask< unsigned __int64, 64 >::output_binary(ostream &out, int spaces_every = (4)) const;

1176 10 output_hex 4 1537 43 BitMask< unsigned __int64, 64 >::output_hex 0 2 425 426 0
95
void ::BitMask< unsigned __int64, 64 >::output_hex(ostream &out, int spaces_every = (4)) const;

1177 5 write 4 1537 38 BitMask< unsigned __int64, 64 >::write 0 2 427 428 0
90
void ::BitMask< unsigned __int64, 64 >::write(ostream &out, int indent_level = (0)) const;

1178 11 operator == 4 1537 44 BitMask< unsigned __int64, 64 >::operator == 0 1 429 0
111
inline bool ::BitMask< unsigned __int64, 64 >::operator ==(BitMask< unsigned __int64, 64 > const &other) const;

1179 11 operator != 4 1537 44 BitMask< unsigned __int64, 64 >::operator != 0 1 430 0
111
inline bool ::BitMask< unsigned __int64, 64 >::operator !=(BitMask< unsigned __int64, 64 > const &other) const;

1180 10 operator < 4 1537 43 BitMask< unsigned __int64, 64 >::operator < 0 1 431 0
110
inline bool ::BitMask< unsigned __int64, 64 >::operator <(BitMask< unsigned __int64, 64 > const &other) const;

1181 10 compare_to 4 1537 43 BitMask< unsigned __int64, 64 >::compare_to 0 1 432 0
109
inline int ::BitMask< unsigned __int64, 64 >::compare_to(BitMask< unsigned __int64, 64 > const &other) const;

1182 10 operator & 4 1537 43 BitMask< unsigned __int64, 64 >::operator & 0 1 433 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator &(BitMask< unsigned __int64, 64 > const &other) const;

1183 10 operator | 4 1537 43 BitMask< unsigned __int64, 64 >::operator | 0 1 434 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator |(BitMask< unsigned __int64, 64 > const &other) const;

1184 10 operator ^ 4 1537 43 BitMask< unsigned __int64, 64 >::operator ^ 0 1 435 0
137
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator ^(BitMask< unsigned __int64, 64 > const &other) const;

1185 10 operator ~ 68 1537 43 BitMask< unsigned __int64, 64 >::operator ~ 0 1 436 0
97
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator ~(void) const;

1186 11 operator << 4 1537 44 BitMask< unsigned __int64, 64 >::operator << 0 1 437 0
103
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator <<(int shift) const;

1187 11 operator >> 4 1537 44 BitMask< unsigned __int64, 64 >::operator >> 0 1 438 0
103
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::operator >>(int shift) const;

1188 11 operator &= 4 1537 44 BitMask< unsigned __int64, 64 >::operator &= 0 1 439 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator &=(BitMask< unsigned __int64, 64 > const &other);

1189 11 operator |= 4 1537 44 BitMask< unsigned __int64, 64 >::operator |= 0 1 440 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator |=(BitMask< unsigned __int64, 64 > const &other);

1190 11 operator ^= 4 1537 44 BitMask< unsigned __int64, 64 >::operator ^= 0 1 441 0
105
inline void ::BitMask< unsigned __int64, 64 >::operator ^=(BitMask< unsigned __int64, 64 > const &other);

1191 12 operator <<= 4 1537 45 BitMask< unsigned __int64, 64 >::operator <<= 0 1 442 0
71
inline void ::BitMask< unsigned __int64, 64 >::operator <<=(int shift);

1192 12 operator >>= 4 1537 45 BitMask< unsigned __int64, 64 >::operator >>= 0 1 443 0
71
inline void ::BitMask< unsigned __int64, 64 >::operator >>=(int shift);

1193 19 flood_down_in_place 4 1537 52 BitMask< unsigned __int64, 64 >::flood_down_in_place 0 1 444 0
73
inline void ::BitMask< unsigned __int64, 64 >::flood_down_in_place(void);

1194 17 flood_up_in_place 4 1537 50 BitMask< unsigned __int64, 64 >::flood_up_in_place 0 1 445 0
71
inline void ::BitMask< unsigned __int64, 64 >::flood_up_in_place(void);

1195 15 flood_bits_down 4 1537 48 BitMask< unsigned __int64, 64 >::flood_bits_down 0 1 446 0
102
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::flood_bits_down(void) const;

1196 13 flood_bits_up 4 1537 46 BitMask< unsigned __int64, 64 >::flood_bits_up 0 1 447 0
100
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::flood_bits_up(void) const;

1197 21 keep_next_highest_bit 4 1537 54 BitMask< unsigned __int64, 64 >::keep_next_highest_bit 0 3 448 449 450 0
371
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(void) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(int index) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_highest_bit(BitMask< unsigned __int64, 64 > const &other) const;

1198 20 keep_next_lowest_bit 4 1537 53 BitMask< unsigned __int64, 64 >::keep_next_lowest_bit 0 3 451 452 453 0
368
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(void) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(int index) const;
inline BitMask< unsigned __int64, 64 > ::BitMask< unsigned __int64, 64 >::keep_next_lowest_bit(BitMask< unsigned __int64, 64 > const &other) const;

1199 7 get_key 4 1537 40 BitMask< unsigned __int64, 64 >::get_key 0 1 454 0
66
inline int ::BitMask< unsigned __int64, 64 >::get_key(void) const;

1200 14 get_class_type 4 1537 47 BitMask< unsigned __int64, 64 >::get_class_type 0 1 455 0
74
static TypeHandle ::BitMask< unsigned __int64, 64 >::get_class_type(void);

1201 8 BitArray 4 1538 18 BitArray::BitArray 0 4 456 457 458 459 1394
// Filename: bitArray.I
// Created by:  drose (20Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor (from SparseArray)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
178
inline BitArray::BitArray(void);
inline BitArray::BitArray(unsigned int init_value);
inline BitArray::BitArray(BitArray const &copy);
BitArray::BitArray(SparseArray const &from);

1202 10 operator = 4 1538 20 BitArray::operator = 0 1 460 233
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline BitArray &BitArray::operator =(BitArray const &copy);

1203 6 all_on 4 1538 16 BitArray::all_on 0 1 461 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray with an infinite array of bits,
//               all on.
////////////////////////////////////////////////////////////////////
46
static inline BitArray BitArray::all_on(void);

1204 7 all_off 4 1538 17 BitArray::all_off 0 1 462 284
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose bits are all off.
////////////////////////////////////////////////////////////////////
47
static inline BitArray BitArray::all_off(void);

1205 8 lower_on 4 1538 18 BitArray::lower_on 0 1 463 295
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose lower on_bits bits are on.
////////////////////////////////////////////////////////////////////
55
static inline BitArray BitArray::lower_on(int on_bits);

1206 3 bit 4 1538 13 BitArray::bit 0 1 464 289
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a BitArray with only the indicated bit on.
////////////////////////////////////////////////////////////////////
48
static inline BitArray BitArray::bit(int index);

1207 5 range 4 1538 15 BitArray::range 0 1 465 323
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose size bits, beginning at
//               low_bit, are on.
////////////////////////////////////////////////////////////////////
62
static inline BitArray BitArray::range(int low_bit, int size);

1208 9 ~BitArray 4 1538 19 BitArray::~BitArray 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline BitArray::~BitArray(void);

1209 16 has_max_num_bits 4 1538 26 BitArray::has_max_num_bits 0 1 466 714
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The BitArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               BitArray interchangeably.
////////////////////////////////////////////////////////////////////
52
static inline bool BitArray::has_max_num_bits(void);

1210 16 get_max_num_bits 4 1538 26 BitArray::get_max_num_bits 0 1 467 749
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               BitArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or BitArray interchangeably.
////////////////////////////////////////////////////////////////////
51
static inline int BitArray::get_max_num_bits(void);

1211 21 get_num_bits_per_word 4 1538 31 BitArray::get_num_bits_per_word 0 1 468 476
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits_per_word
//       Access: Published, Static
//  Description: Returns the number of bits stored per word
//               internally.  This is of interest only in that it
//               limits the maximum number of bits that may be queried
//               or set at once by extract() and store().
////////////////////////////////////////////////////////////////////
56
static inline int BitArray::get_num_bits_per_word(void);

1212 12 get_num_bits 4 1538 22 BitArray::get_num_bits 0 1 469 604
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
////////////////////////////////////////////////////////////////////
46
inline int BitArray::get_num_bits(void) const;

1213 7 get_bit 4 1538 17 BitArray::get_bit 0 1 470 442
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
////////////////////////////////////////////////////////////////////
47
inline bool BitArray::get_bit(int index) const;

1214 7 set_bit 4 1538 17 BitArray::set_bit 0 1 471 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
41
inline void BitArray::set_bit(int index);

1215 9 clear_bit 4 1538 19 BitArray::clear_bit 0 1 472 320
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
43
inline void BitArray::clear_bit(int index);

1216 10 set_bit_to 4 1538 20 BitArray::set_bit_to 0 1 473 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
////////////////////////////////////////////////////////////////////
56
inline void BitArray::set_bit_to(int index, bool value);

1217 16 get_highest_bits 4 1538 26 BitArray::get_highest_bits 0 1 474 364
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
////////////////////////////////////////////////////////////////////
51
inline bool BitArray::get_highest_bits(void) const;

1218 7 is_zero 4 1538 17 BitArray::is_zero 0 1 475 294
////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
////////////////////////////////////////////////////////////////////
35
bool BitArray::is_zero(void) const;

1219 9 is_all_on 4 1538 19 BitArray::is_all_on 0 1 476 295
////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
////////////////////////////////////////////////////////////////////
37
bool BitArray::is_all_on(void) const;

1220 7 extract 4 1538 17 BitArray::extract 0 1 477 438
////////////////////////////////////////////////////////////////////
//     Function: BitArray::extract
//       Access: Published
//  Description: Returns a word that represents only the indicated
//               range of bits within this BitArray, shifted to the
//               least-significant position.  size must be <=
//               get_num_bits_per_word().
////////////////////////////////////////////////////////////////////
67
inline unsigned int BitArray::extract(int low_bit, int size) const;

1221 5 store 4 1538 15 BitArray::store 0 1 478 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::store
//       Access: Published
//  Description: Stores the indicated word into the indicated range of
//               bits with this BitArray.
////////////////////////////////////////////////////////////////////
71
inline void BitArray::store(unsigned int value, int low_bit, int size);

1222 10 has_any_of 4 1538 20 BitArray::has_any_of 0 1 479 308
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BitArray::has_any_of(int low_bit, int size) const;

1223 10 has_all_of 4 1538 20 BitArray::has_all_of 0 1 480 310
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
55
bool BitArray::has_all_of(int low_bit, int size) const;

1224 9 set_range 4 1538 19 BitArray::set_range 0 1 481 255
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
////////////////////////////////////////////////////////////////////
48
void BitArray::set_range(int low_bit, int size);

1225 11 clear_range 4 1538 21 BitArray::clear_range 0 1 482 258
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
////////////////////////////////////////////////////////////////////
50
void BitArray::clear_range(int low_bit, int size);

1226 12 set_range_to 4 1538 22 BitArray::set_range_to 0 1 483 275
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
////////////////////////////////////////////////////////////////////
70
inline void BitArray::set_range_to(bool value, int low_bit, int size);

1227 15 get_num_on_bits 4 1538 25 BitArray::get_num_on_bits 0 1 484 372
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
////////////////////////////////////////////////////////////////////
42
int BitArray::get_num_on_bits(void) const;

1228 16 get_num_off_bits 4 1538 26 BitArray::get_num_off_bits 0 1 485 373
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
////////////////////////////////////////////////////////////////////
43
int BitArray::get_num_off_bits(void) const;

1229 17 get_lowest_on_bit 4 1538 27 BitArray::get_lowest_on_bit 0 1 486 330
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits.
////////////////////////////////////////////////////////////////////
44
int BitArray::get_lowest_on_bit(void) const;

1230 18 get_lowest_off_bit 4 1538 28 BitArray::get_lowest_off_bit 0 1 487 331
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits.
////////////////////////////////////////////////////////////////////
45
int BitArray::get_lowest_off_bit(void) const;

1231 18 get_highest_on_bit 4 1538 28 BitArray::get_highest_on_bit 0 1 488 390
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
45
int BitArray::get_highest_on_bit(void) const;

1232 19 get_highest_off_bit 4 1538 29 BitArray::get_highest_off_bit 0 1 489 391
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
46
int BitArray::get_highest_off_bit(void) const;

1233 29 get_next_higher_different_bit 4 1538 39 BitArray::get_next_higher_different_bit 0 1 490 591
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
////////////////////////////////////////////////////////////////////
63
int BitArray::get_next_higher_different_bit(int low_bit) const;

1234 13 get_num_words 4 1538 23 BitArray::get_num_words 0 1 491 304
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_words
//       Access: Published
//  Description: Returns the number of possibly-unique words stored in
//               the array.
////////////////////////////////////////////////////////////////////
47
inline int BitArray::get_num_words(void) const;

1235 8 get_word 4 1538 18 BitArray::get_word 0 1 492 410
////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_word
//       Access: Published
//  Description: Returns the nth word in the array.  It is valid for n
//               to be greater than get_num_words(), but the return
//               value beyond get_num_words() will always be the same.
////////////////////////////////////////////////////////////////////
67
inline BitMask< unsigned int, 32 > BitArray::get_word(int n) const;

1236 8 set_word 4 1538 18 BitArray::set_word 0 1 493 351
////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_word
//       Access: Published
//  Description: Replaces the nth word in the array.  If n >=
//               get_num_words(), this automatically extends the
//               array.
////////////////////////////////////////////////////////////////////
73
inline void BitArray::set_word(int n, BitMask< unsigned int, 32 > value);

1237 15 invert_in_place 4 1538 25 BitArray::invert_in_place 0 1 494 318
////////////////////////////////////////////////////////////////////
//     Function: BitArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the BitArray.  This is
//               equivalent to array = ~array.
////////////////////////////////////////////////////////////////////
37
void BitArray::invert_in_place(void);

1238 18 has_bits_in_common 4 1538 28 BitArray::has_bits_in_common 0 1 495 440
////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this BitArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
////////////////////////////////////////////////////////////////////
63
bool BitArray::has_bits_in_common(BitArray const &other) const;

1239 5 clear 4 1538 15 BitArray::clear 0 1 496 253
////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear
//       Access: Published
//  Description: Sets all the bits in the BitArray off.
////////////////////////////////////////////////////////////////////
34
inline void BitArray::clear(void);

1240 6 output 4 1538 16 BitArray::output 0 1 497 443
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output
//       Access: Published
//  Description: Writes the BitArray out as a hex number.  For a
//               BitArray, this is always the same as output_hex();
//               it's too confusing for the output format to change
//               back and forth at runtime.
////////////////////////////////////////////////////////////////////
42
void BitArray::output(ostream &out) const;

1241 13 output_binary 4 1538 23 BitArray::output_binary 0 2 498 499 312
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
////////////////////////////////////////////////////////////////////
73
void BitArray::output_binary(ostream &out, int spaces_every = (4)) const;

1242 10 output_hex 4 1538 20 BitArray::output_hex 0 2 500 501 316
////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
////////////////////////////////////////////////////////////////////
70
void BitArray::output_hex(ostream &out, int spaces_every = (4)) const;

1243 5 write 4 1538 15 BitArray::write 0 2 502 503 317
////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
////////////////////////////////////////////////////////////////////
65
void BitArray::write(ostream &out, int indent_level = (0)) const;

1244 11 operator == 4 1538 21 BitArray::operator == 0 1 504 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool BitArray::operator ==(BitArray const &other) const;

1245 11 operator != 4 1538 21 BitArray::operator != 0 1 505 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool BitArray::operator !=(BitArray const &other) const;

1246 10 operator < 4 1538 20 BitArray::operator < 0 1 506 381
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this BitArray is less than that of the
//               other one, false otherwise.
////////////////////////////////////////////////////////////////////
62
inline bool BitArray::operator <(BitArray const &other) const;

1247 10 compare_to 4 1538 20 BitArray::compare_to 0 1 507 487
////////////////////////////////////////////////////////////////////
//     Function: BitArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this BitArray sorts
//               before the indicated other BitArray, greater than zero
//               if it sorts after, or 0 if they are equivalent.  This
//               is based on the same ordering defined by operator <.
////////////////////////////////////////////////////////////////////
54
int BitArray::compare_to(BitArray const &other) const;

1248 10 operator & 4 1538 20 BitArray::operator & 0 1 508 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline BitArray BitArray::operator &(BitArray const &other) const;

1249 10 operator | 4 1538 20 BitArray::operator | 0 1 509 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline BitArray BitArray::operator |(BitArray const &other) const;

1250 10 operator ^ 4 1538 20 BitArray::operator ^ 0 1 510 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline BitArray BitArray::operator ^(BitArray const &other) const;

1251 10 operator ~ 68 1538 20 BitArray::operator ~ 0 1 511 219
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ~
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline BitArray BitArray::operator ~(void) const;

1252 11 operator << 4 1538 21 BitArray::operator << 0 1 512 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline BitArray BitArray::operator <<(int shift) const;

1253 11 operator >> 4 1538 21 BitArray::operator >> 0 1 513 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline BitArray BitArray::operator >>(int shift) const;

1254 11 operator &= 4 1538 21 BitArray::operator &= 0 1 514 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void BitArray::operator &=(BitArray const &other);

1255 11 operator |= 4 1538 21 BitArray::operator |= 0 1 515 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void BitArray::operator |=(BitArray const &other);

1256 11 operator ^= 4 1538 21 BitArray::operator ^= 0 1 516 220
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void BitArray::operator ^=(BitArray const &other);

1257 12 operator <<= 4 1538 22 BitArray::operator <<= 0 1 517 399
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  The rightmost bits are filled in
//               with zeroes.  Since this is an infinite bit array,
//               none of the bits on the left are lost.
////////////////////////////////////////////////////////////////////
39
void BitArray::operator <<=(int shift);

1258 12 operator >>= 4 1538 22 BitArray::operator >>= 0 1 518 449
////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits are lost.
//               Since this is an infinite bit array, there is no
//               question of sign extension; there is no need to
//               synthesize bits on the left.
////////////////////////////////////////////////////////////////////
39
void BitArray::operator >>=(int shift);

1259 14 get_class_type 4 1538 24 BitArray::get_class_type 0 1 519 0
49
static TypeHandle BitArray::get_class_type(void);

1260 12 ButtonHandle 4 1539 26 ButtonHandle::ButtonHandle 0 2 520 521 1659
// Filename: buttonHandle.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               index number, which may have been returned by an
//               earlier call to ButtonHandle::get_index().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline ButtonHandle::ButtonHandle(void);
inline ButtonHandle::ButtonHandle(int index);

1261 8 get_name 4 1539 22 ButtonHandle::get_name 0 1 522 250
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_name
//       Access: Public
//  Description: Returns the name of the button.
////////////////////////////////////////////////////////////////////
56
basic_string< char > ButtonHandle::get_name(void) const;

1262 20 has_ascii_equivalent 4 1539 34 ButtonHandle::has_ascii_equivalent 0 1 523 375
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::has_ascii_equivalent
//       Access: Published
//  Description: Returns true if the button was created with an ASCII
//               equivalent code (e.g. for a standard keyboard
//               button).
////////////////////////////////////////////////////////////////////
59
inline bool ButtonHandle::has_ascii_equivalent(void) const;

1263 20 get_ascii_equivalent 4 1539 34 ButtonHandle::get_ascii_equivalent 0 1 524 346
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_ascii_equivalent
//       Access: Published
//  Description: Returns the character code associated with the
//               button, or '\0' if no ASCII code was associated.
////////////////////////////////////////////////////////////////////
59
inline char ButtonHandle::get_ascii_equivalent(void) const;

1264 9 get_alias 4 1539 23 ButtonHandle::get_alias 0 1 525 692
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_alias
//       Access: Published
//  Description: Returns the alias (alternate name) associated with
//               the button, if any, or ButtonHandle::none() if the
//               button has no alias.
//
//               Each button is allowed to have one alias, and
//               multiple different buttons can refer to the same
//               alias.  The alias should be the more general name for
//               the button, for instance, shift is an alias for
//               lshift, but not vice-versa.
////////////////////////////////////////////////////////////////////
49
ButtonHandle ButtonHandle::get_alias(void) const;

1265 7 matches 4 1539 21 ButtonHandle::matches 0 1 526 532
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::matches
//       Access: Published
//  Description: Returns true if this ButtonHandle is the same as the
//               other one, or if the other one is an alias for this
//               one.  (Does not return true if this button is an
//               alias for the other one, however.)
//
//               This is a more general comparison than operator ==.
////////////////////////////////////////////////////////////////////
67
inline bool ButtonHandle::matches(ButtonHandle const &other) const;

1266 9 get_index 4 1539 23 ButtonHandle::get_index 0 1 527 664
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               ButtonHandle. Each different ButtonHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               ButtonHandles as opaque classes.  This is provided
//               for the convenience of non-C++ scripting languages to
//               build a hashtable of ButtonHandles.
////////////////////////////////////////////////////////////////////
47
inline int ButtonHandle::get_index(void) const;

1267 6 output 4 1539 20 ButtonHandle::output 0 1 528 220
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline void ButtonHandle::output(ostream &out) const;

1268 4 none 4 1539 18 ButtonHandle::none 0 1 529 321
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued ButtonHandle that is
//               used to indicate no button.
////////////////////////////////////////////////////////////////////
52
static inline ButtonHandle ButtonHandle::none(void);

1269 14 get_class_type 4 1539 28 ButtonHandle::get_class_type 0 1 530 0
53
static TypeHandle ButtonHandle::get_class_type(void);

1270 13 ~ButtonHandle 4 1539 27 ButtonHandle::~ButtonHandle 0 0 0
34
ButtonHandle::~ButtonHandle(void);

1271 10 get_button 4 1540 26 ButtonRegistry::get_button 0 1 531 396
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::get_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               registers a new one and returns it.
////////////////////////////////////////////////////////////////////
74
ButtonHandle ButtonRegistry::get_button(basic_string< char > const &name);

1272 17 find_ascii_button 4 1540 33 ButtonRegistry::find_ascii_button 0 1 532 419
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_ascii_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated ASCII equivalent character.  If there is no
//               such ButtonHandle, returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
76
ButtonHandle ButtonRegistry::find_ascii_button(char ascii_equivalent) const;

1273 5 write 4 1540 21 ButtonRegistry::write 0 1 533 220
////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
void ButtonRegistry::write(ostream &out) const;

1274 3 ptr 4 1540 19 ButtonRegistry::ptr 0 1 534 367
// ptr() returns the pointer to the global ButtonRegistry object.

////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global ButtonRegistry
//               object.
////////////////////////////////////////////////////////////////////
56
static inline ButtonRegistry *ButtonRegistry::ptr(void);

1275 15 ~ButtonRegistry 4 1540 31 ButtonRegistry::~ButtonRegistry 0 0 0
38
ButtonRegistry::~ButtonRegistry(void);

1276 6 output 4 1541 22 CallbackObject::output 0 1 535 230
////////////////////////////////////////////////////////////////////
//     Function: CallbackObject::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
56
virtual void CallbackObject::output(ostream &out) const;

1277 14 get_class_type 4 1541 30 CallbackObject::get_class_type 0 1 536 0
55
static TypeHandle CallbackObject::get_class_type(void);

1278 15 ~CallbackObject 4 1541 31 CallbackObject::~CallbackObject 0 0 0
38
CallbackObject::~CallbackObject(void);

1279 19 get_cache_ref_count 4 1543 54 CachedTypedWritableReferenceCount::get_cache_ref_count 0 1 537 290
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::get_cache_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
78
inline int CachedTypedWritableReferenceCount::get_cache_ref_count(void) const;

1280 9 cache_ref 4 1543 44 CachedTypedWritableReferenceCount::cache_ref 0 1 538 355
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_ref
//       Access: Published
//  Description: Explicitly increments the cache reference count and
//               the normal reference count simultaneously.
////////////////////////////////////////////////////////////////////
69
inline void CachedTypedWritableReferenceCount::cache_ref(void) const;

1281 11 cache_unref 4 1543 46 CachedTypedWritableReferenceCount::cache_unref 0 1 539 479
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_unref
//       Access: Published
//  Description: Explicitly decrements the cache reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
71
inline bool CachedTypedWritableReferenceCount::cache_unref(void) const;

1282 24 test_ref_count_integrity 4 1543 59 CachedTypedWritableReferenceCount::test_ref_count_integrity 0 1 540 359
////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
84
inline bool CachedTypedWritableReferenceCount::test_ref_count_integrity(void) const;

1283 14 get_class_type 4 1543 49 CachedTypedWritableReferenceCount::get_class_type 0 1 541 0
74
static TypeHandle CachedTypedWritableReferenceCount::get_class_type(void);

1284 6 output 4 1544 20 CallbackData::output 0 1 542 228
////////////////////////////////////////////////////////////////////
//     Function: CallbackData::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
54
virtual void CallbackData::output(ostream &out) const;

1285 6 upcall 4 1544 20 CallbackData::upcall 0 1 543 408
////////////////////////////////////////////////////////////////////
//     Function: CallbackData::upcall
//       Access: Published, Virtual
//  Description: You should make this call during the callback if you
//               want to continue the normal function that would have
//               been done in the absence of a callback.
////////////////////////////////////////////////////////////////////
40
virtual void CallbackData::upcall(void);

1286 14 get_class_type 4 1544 28 CallbackData::get_class_type 0 1 544 0
53
static TypeHandle CallbackData::get_class_type(void);

1287 13 ~CallbackData 4 1544 27 CallbackData::~CallbackData 0 0 0
34
CallbackData::~CallbackData(void);

1288 7 TimeVal 4 1545 16 TimeVal::TimeVal 0 1 545 218
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::contructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
inline TimeVal::TimeVal(void);

1289 7 get_sec 4 1545 16 TimeVal::get_sec 0 1 546 215
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_sec
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline unsigned long int TimeVal::get_sec(void) const;

1290 8 get_usec 4 1545 17 TimeVal::get_usec 0 1 547 216
////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_usec
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline unsigned long int TimeVal::get_usec(void) const;

1291 8 ~TimeVal 4 1545 17 TimeVal::~TimeVal 0 0 0
24
TimeVal::~TimeVal(void);

1292 11 ClockObject 4 1546 24 ClockObject::ClockObject 0 1 548 223
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
31
ClockObject::ClockObject(void);

1293 8 set_mode 4 1546 21 ClockObject::set_mode 0 1 549 2596
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_mode
//       Access: Published
//  Description: Changes the mode of the clock.  Normally, the clock
//               is in mode M_normal. In this mode, each call to
//               tick() will set the value returned by
//               get_frame_time() to the current real time; thus, the
//               clock simply reports time advancing.
//
//               Other possible modes:
//
//               M_non_real_time - the clock ignores real time
//               completely; at each call to tick(), it pretends that
//               exactly dt seconds have elapsed since the last call
//               to tick().  You may set the value of dt with
//               set_dt() or set_frame_rate().
//
//               M_limited - the clock will run as fast as it can, as
//               in M_normal, but will not run faster than the rate
//               specified by set_frame_rate().  If the application
//               would run faster than this rate, the clock will slow
//               down the application.
//
//               M_integer - the clock will run as fast as it can, but
//               the rate will be constrained to be an integer
//               multiple or divisor of the rate specified by
//               set_frame_rate().  The clock will slow down the
//               application a bit to guarantee this.
//
//               M_integer_limited - a combination of M_limited and
//               M_integer; the clock will not run faster than
//               set_frame_rate(), and if it runs slower, it will run
//               at a integer divisor of that rate.
//
//               M_forced - the clock forces the application to run at
//               the rate specified by set_frame_rate().  If the
//               application would run faster than this rate, the
//               clock will slow down the application; if the
//               application would run slower than this rate, the
//               clock slows down time so that the application
//               believes it is running at the given rate.
//
//               M_degrade - the clock runs at real time, but the
//               application is slowed down by a set factor of its
//               frame rate, specified by set_degrade_factor().
//
//               M_slave - the clock does not advance, but relies on
//               the user to call set_frame_time() and/or
//               set_frame_count() each frame.
////////////////////////////////////////////////////////////////////
51
void ClockObject::set_mode(ClockObject::Mode mode);

1294 8 get_mode 4 1546 21 ClockObject::get_mode 0 1 550 293
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_mode
//       Access: Published
//  Description: Returns the current mode of the clock.  See
//               set_mode().
////////////////////////////////////////////////////////////////////
59
inline ClockObject::Mode ClockObject::get_mode(void) const;

1295 14 get_frame_time 4 1546 27 ClockObject::get_frame_time 0 2 551 552 656
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
////////////////////////////////////////////////////////////////////
99
inline double ClockObject::get_frame_time(Thread *current_thread = ((get_current_thread()))) const;

1296 13 get_real_time 4 1546 26 ClockObject::get_real_time 0 1 553 769
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_real_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.  This is useful for doing real timing
//               measurements, e.g. for performance statistics.
//
//               This returns the most precise timer we have for short
//               time intervals, but it may tend to drift over the
//               long haul.  If more accurate timekeeping is needed
//               over a long period of time, use get_long_time()
//               instead.
////////////////////////////////////////////////////////////////////
53
inline double ClockObject::get_real_time(void) const;

1297 13 get_long_time 4 1546 26 ClockObject::get_long_time 0 1 554 773
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_long_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.
//
//               This is similar to get_real_time(), except that it
//               uses the most accurate counter we have over a long
//               period of time, and so it is less likely to drift.
//               However, it may not be very precise for measuring
//               short intervals.  On Windows, for instace, this is
//               only accurate to within about 55 milliseconds.
////////////////////////////////////////////////////////////////////
53
inline double ClockObject::get_long_time(void) const;

1298 5 reset 4 1546 18 ClockObject::reset 0 1 555 299
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::reset
//       Access: Published
//  Description: Simultaneously resets both the time and the frame
//               count to zero.
////////////////////////////////////////////////////////////////////
37
inline void ClockObject::reset(void);

1299 13 set_real_time 4 1546 26 ClockObject::set_real_time 0 1 556 607
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_real_time
//       Access: Published
//  Description: Resets the clock to the indicated time.  This
//               changes only the real time of the clock as reported
//               by get_real_time(), but does not immediately change
//               the time reported by get_frame_time()--that will
//               change after the next call to tick().  Also see
//               reset(), set_frame_time(), and set_frame_count().
////////////////////////////////////////////////////////////////////
45
void ClockObject::set_real_time(double time);

1300 14 set_frame_time 4 1546 27 ClockObject::set_frame_time 0 2 557 558 477
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
////////////////////////////////////////////////////////////////////
97
void ClockObject::set_frame_time(double time, Thread *current_thread = ((get_current_thread())));

1301 15 set_frame_count 4 1546 28 ClockObject::set_frame_count 0 2 559 560 380
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
////////////////////////////////////////////////////////////////////
102
void ClockObject::set_frame_count(int frame_count, Thread *current_thread = ((get_current_thread())));

1302 15 get_frame_count 4 1546 28 ClockObject::get_frame_count 0 2 561 562 457
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
////////////////////////////////////////////////////////////////////
97
inline int ClockObject::get_frame_count(Thread *current_thread = ((get_current_thread()))) const;

1303 18 get_net_frame_rate 4 1546 31 ClockObject::get_net_frame_rate 0 2 563 564 523
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
////////////////////////////////////////////////////////////////////
103
inline double ClockObject::get_net_frame_rate(Thread *current_thread = ((get_current_thread()))) const;

1304 6 get_dt 4 1546 19 ClockObject::get_dt 0 2 565 566 369
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
////////////////////////////////////////////////////////////////////
91
inline double ClockObject::get_dt(Thread *current_thread = ((get_current_thread()))) const;

1305 6 set_dt 4 1546 19 ClockObject::set_dt 0 1 567 575
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_dt
//       Access: Published
//  Description: In non-real-time mode, sets the number of seconds
//               that should appear to elapse between frames.  In
//               forced mode or limited mode, sets our target dt.  In
//               normal mode, this has no effect.  
//
//               Also see set_frame_rate(), which is a different way
//               to specify the same quantity.
////////////////////////////////////////////////////////////////////
36
void ClockObject::set_dt(double dt);

1306 14 set_frame_rate 4 1546 27 ClockObject::set_frame_rate 0 1 568 583
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_rate
//       Access: Published
//  Description: In non-real-time mode, sets the number of frames per
//               second that we should appear to be running.  In forced
//               mode or limited mode, sets our target frame rate.  In
//               normal mode, this has no effect.
//
//               Also see set_dt(), which is a different way to
//               specify the same quantity.
////////////////////////////////////////////////////////////////////
52
void ClockObject::set_frame_rate(double frame_rate);

1307 10 get_max_dt 4 1546 23 ClockObject::get_max_dt 0 1 569 333
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_dt
//       Access: Published
//  Description: Returns the current maximum allowable time elapsed
//               between any two frames.  See set_max_dt().
////////////////////////////////////////////////////////////////////
50
inline double ClockObject::get_max_dt(void) const;

1308 10 set_max_dt 4 1546 23 ClockObject::set_max_dt 0 1 570 872
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_max_dt
//       Access: Published
//  Description: Sets a limit on the value returned by get_dt().  If
//               this value is less than zero, no limit is imposed;
//               otherwise, this is the maximum value that will ever
//               be returned by get_dt(), regardless of how much time
//               has actually elapsed between frames.
//
//               This limit is only imposed in real-time mode; in
//               non-real-time mode, the dt is fixed anyway and max_dt
//               is ignored.
//
//               This is generally used to guarantee reasonable
//               behavior even in the presence of a very slow or
//               chuggy frame rame.
////////////////////////////////////////////////////////////////////
51
inline void ClockObject::set_max_dt(double max_dt);

1309 18 get_degrade_factor 4 1546 31 ClockObject::get_degrade_factor 0 1 571 544
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_degrade_factor
//       Access: Published
//  Description: In degrade mode, returns the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
////////////////////////////////////////////////////////////////////
58
inline double ClockObject::get_degrade_factor(void) const;

1310 18 set_degrade_factor 4 1546 31 ClockObject::set_degrade_factor 0 1 572 541
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_degrade_factor
//       Access: Published
//  Description: In degrade mode, sets the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
////////////////////////////////////////////////////////////////////
67
inline void ClockObject::set_degrade_factor(double degrade_factor);

1311 31 set_average_frame_rate_interval 4 1546 44 ClockObject::set_average_frame_rate_interval 0 1 573 729
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_average_frame_rate_interval
//       Access: Published
//  Description: Specifies the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of
//               frames per second to compute the frame rate.
//               Changing this does not necessarily immediately change
//               the result of get_average_frame_rate(), until this
//               interval of time has elapsed again.
//
//               Setting this to zero disables the computation of
//               get_average_frame_rate().
////////////////////////////////////////////////////////////////////
70
inline void ClockObject::set_average_frame_rate_interval(double time);

1312 31 get_average_frame_rate_interval 4 1546 44 ClockObject::get_average_frame_rate_interval 0 1 574 423
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate_interval
//       Access: Published
//  Description: Returns the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of frames
//               per second to compute the frame rate.
////////////////////////////////////////////////////////////////////
71
inline double ClockObject::get_average_frame_rate_interval(void) const;

1313 22 get_average_frame_rate 4 1546 35 ClockObject::get_average_frame_rate 0 2 575 576 500
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
////////////////////////////////////////////////////////////////////
100
double ClockObject::get_average_frame_rate(Thread *current_thread = ((get_current_thread()))) const;

1314 22 get_max_frame_duration 4 1546 35 ClockObject::get_max_frame_duration 0 2 577 578 343
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
////////////////////////////////////////////////////////////////////
100
double ClockObject::get_max_frame_duration(Thread *current_thread = ((get_current_thread()))) const;

1315 25 calc_frame_rate_deviation 4 1546 38 ClockObject::calc_frame_rate_deviation 0 2 579 580 915
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
////////////////////////////////////////////////////////////////////
103
double ClockObject::calc_frame_rate_deviation(Thread *current_thread = ((get_current_thread()))) const;

1316 4 tick 4 1546 17 ClockObject::tick 0 2 581 582 566
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
////////////////////////////////////////////////////////////////////
74
void ClockObject::tick(Thread *current_thread = ((get_current_thread())));

1317 15 sync_frame_time 4 1546 28 ClockObject::sync_frame_time 0 2 583 584 756
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
////////////////////////////////////////////////////////////////////
85
void ClockObject::sync_frame_time(Thread *current_thread = ((get_current_thread())));

1318 12 check_errors 4 1546 25 ClockObject::check_errors 0 1 585 609
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::check_errors
//       Access: Published
//  Description: Returns true if a clock error was detected since the
//               last time check_errors() was called.  A clock error
//               means that something happened, an OS or BIOS bug, for
//               instance, that makes the current value of the clock
//               somewhat suspect, and an application may wish to
//               resynchronize with any external clocks.
////////////////////////////////////////////////////////////////////
62
inline bool ClockObject::check_errors(Thread *current_thread);

1319 16 get_global_clock 4 1546 29 ClockObject::get_global_clock 0 1 586 408
////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_global_clock
//       Access: Published
//  Description: Returns a pointer to the global ClockObject.  This is
//               the ClockObject that most code should use for
//               handling scene graph rendering and animation.
////////////////////////////////////////////////////////////////////
63
static inline ClockObject *ClockObject::get_global_clock(void);

1320 14 get_class_type 4 1546 27 ClockObject::get_class_type 0 1 587 0
52
static TypeHandle ClockObject::get_class_type(void);

1321 14 get_model_path 1 0 14 get_model_path 0 1 767 387
// Set this true to enable tracking of ReferenceCount pointer
// allocation/deallcation via the MemoryUsage object.  This is
// primarily useful for detecting memory leaks.  It has no effect when
// compiling in NDEBUG mode.
//
// This variable is no longer defined here; instead, it's a member of
// MemoryUsage.
//
// ConfigVariableBool track_memory_usage("track-memory-usage", false);
47
ConfigVariableSearchPath &get_model_path(void);

1322 15 get_plugin_path 1 0 15 get_plugin_path 0 1 768 0
48
ConfigVariableSearchPath &get_plugin_path(void);

1323 9 cache_ref 4 1548 28 CopyOnWriteObject::cache_ref 0 1 588 279
////////////////////////////////////////////////////////////////////
//     Function: CopyOnWriteObject::cache_ref
//       Access: Published
//  Description: See CachedTypedWritableReferenceCount::cache_ref().
////////////////////////////////////////////////////////////////////
53
inline void CopyOnWriteObject::cache_ref(void) const;

1324 14 get_class_type 4 1548 33 CopyOnWriteObject::get_class_type 0 1 589 0
58
static TypeHandle CopyOnWriteObject::get_class_type(void);

1325 18 ~CopyOnWriteObject 4 1548 37 CopyOnWriteObject::~CopyOnWriteObject 0 0 0
44
CopyOnWriteObject::~CopyOnWriteObject(void);

1326 9 ascii_key 4 1549 25 KeyboardButton::ascii_key 0 2 590 591 864
////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character, if there is one, or
//               ButtonHandle::none() if there is not.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character (taken from the first
//               character of the indicated string), if there is one,
//               or ButtonHandle::none() if there is not.
////////////////////////////////////////////////////////////////////
162
static ButtonHandle KeyboardButton::ascii_key(char ascii_equivalent);
static ButtonHandle KeyboardButton::ascii_key(basic_string< char > const &ascii_equivalent);

1327 5 space 4 1549 21 KeyboardButton::space 0 1 592 0
48
static ButtonHandle KeyboardButton::space(void);

1328 9 backspace 4 1549 25 KeyboardButton::backspace 0 1 593 0
52
static ButtonHandle KeyboardButton::backspace(void);

1329 3 tab 4 1549 19 KeyboardButton::tab 0 1 594 0
46
static ButtonHandle KeyboardButton::tab(void);

1330 5 enter 4 1549 21 KeyboardButton::enter 0 1 595 0
48
static ButtonHandle KeyboardButton::enter(void);

1331 6 escape 4 1549 22 KeyboardButton::escape 0 1 596 0
49
static ButtonHandle KeyboardButton::escape(void);

1332 2 f1 4 1549 18 KeyboardButton::f1 0 1 597 0
45
static ButtonHandle KeyboardButton::f1(void);

1333 2 f2 4 1549 18 KeyboardButton::f2 0 1 598 0
45
static ButtonHandle KeyboardButton::f2(void);

1334 2 f3 4 1549 18 KeyboardButton::f3 0 1 599 0
45
static ButtonHandle KeyboardButton::f3(void);

1335 2 f4 4 1549 18 KeyboardButton::f4 0 1 600 0
45
static ButtonHandle KeyboardButton::f4(void);

1336 2 f5 4 1549 18 KeyboardButton::f5 0 1 601 0
45
static ButtonHandle KeyboardButton::f5(void);

1337 2 f6 4 1549 18 KeyboardButton::f6 0 1 602 0
45
static ButtonHandle KeyboardButton::f6(void);

1338 2 f7 4 1549 18 KeyboardButton::f7 0 1 603 0
45
static ButtonHandle KeyboardButton::f7(void);

1339 2 f8 4 1549 18 KeyboardButton::f8 0 1 604 0
45
static ButtonHandle KeyboardButton::f8(void);

1340 2 f9 4 1549 18 KeyboardButton::f9 0 1 605 0
45
static ButtonHandle KeyboardButton::f9(void);

1341 3 f10 4 1549 19 KeyboardButton::f10 0 1 606 0
46
static ButtonHandle KeyboardButton::f10(void);

1342 3 f11 4 1549 19 KeyboardButton::f11 0 1 607 0
46
static ButtonHandle KeyboardButton::f11(void);

1343 3 f12 4 1549 19 KeyboardButton::f12 0 1 608 0
46
static ButtonHandle KeyboardButton::f12(void);

1344 3 f13 4 1549 19 KeyboardButton::f13 0 1 609 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f13(void);

1345 3 f14 4 1549 19 KeyboardButton::f14 0 1 610 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f14(void);

1346 3 f15 4 1549 19 KeyboardButton::f15 0 1 611 0
46
static ButtonHandle KeyboardButton::f15(void);

1347 3 f16 4 1549 19 KeyboardButton::f16 0 1 612 0
46
static ButtonHandle KeyboardButton::f16(void);

1348 4 left 4 1549 20 KeyboardButton::left 0 1 613 0
47
static ButtonHandle KeyboardButton::left(void);

1349 5 right 4 1549 21 KeyboardButton::right 0 1 614 0
48
static ButtonHandle KeyboardButton::right(void);

1350 2 up 4 1549 18 KeyboardButton::up 0 1 615 0
45
static ButtonHandle KeyboardButton::up(void);

1351 4 down 4 1549 20 KeyboardButton::down 0 1 616 0
47
static ButtonHandle KeyboardButton::down(void);

1352 7 page_up 4 1549 23 KeyboardButton::page_up 0 1 617 0
50
static ButtonHandle KeyboardButton::page_up(void);

1353 9 page_down 4 1549 25 KeyboardButton::page_down 0 1 618 0
52
static ButtonHandle KeyboardButton::page_down(void);

1354 4 home 4 1549 20 KeyboardButton::home 0 1 619 0
47
static ButtonHandle KeyboardButton::home(void);

1355 3 end 4 1549 19 KeyboardButton::end 0 1 620 0
46
static ButtonHandle KeyboardButton::end(void);

1356 6 insert 4 1549 22 KeyboardButton::insert 0 1 621 0
49
static ButtonHandle KeyboardButton::insert(void);

1357 3 del 4 1549 19 KeyboardButton::del 0 1 622 0
46
static ButtonHandle KeyboardButton::del(void);

1358 4 help 4 1549 20 KeyboardButton::help 0 1 623 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::help(void);

1359 5 shift 4 1549 21 KeyboardButton::shift 0 1 624 0
48
static ButtonHandle KeyboardButton::shift(void);

1360 7 control 4 1549 23 KeyboardButton::control 0 1 625 0
50
static ButtonHandle KeyboardButton::control(void);

1361 3 alt 4 1549 19 KeyboardButton::alt 0 1 626 0
46
static ButtonHandle KeyboardButton::alt(void);

1362 4 meta 4 1549 20 KeyboardButton::meta 0 1 627 0
47
static ButtonHandle KeyboardButton::meta(void);

1363 9 caps_lock 4 1549 25 KeyboardButton::caps_lock 0 1 628 0
52
static ButtonHandle KeyboardButton::caps_lock(void);

1364 10 shift_lock 4 1549 26 KeyboardButton::shift_lock 0 1 629 0
53
static ButtonHandle KeyboardButton::shift_lock(void);

1365 8 num_lock 4 1549 24 KeyboardButton::num_lock 0 1 630 0
51
static ButtonHandle KeyboardButton::num_lock(void);

1366 11 scroll_lock 4 1549 27 KeyboardButton::scroll_lock 0 1 631 0
54
static ButtonHandle KeyboardButton::scroll_lock(void);

1367 12 print_screen 4 1549 28 KeyboardButton::print_screen 0 1 632 0
55
static ButtonHandle KeyboardButton::print_screen(void);

1368 5 pause 4 1549 21 KeyboardButton::pause 0 1 633 0
48
static ButtonHandle KeyboardButton::pause(void);

1369 6 lshift 4 1549 22 KeyboardButton::lshift 0 1 634 0
49
static ButtonHandle KeyboardButton::lshift(void);

1370 6 rshift 4 1549 22 KeyboardButton::rshift 0 1 635 0
49
static ButtonHandle KeyboardButton::rshift(void);

1371 8 lcontrol 4 1549 24 KeyboardButton::lcontrol 0 1 636 0
51
static ButtonHandle KeyboardButton::lcontrol(void);

1372 8 rcontrol 4 1549 24 KeyboardButton::rcontrol 0 1 637 0
51
static ButtonHandle KeyboardButton::rcontrol(void);

1373 4 lalt 4 1549 20 KeyboardButton::lalt 0 1 638 0
47
static ButtonHandle KeyboardButton::lalt(void);

1374 4 ralt 4 1549 20 KeyboardButton::ralt 0 1 639 0
47
static ButtonHandle KeyboardButton::ralt(void);

1375 15 ~KeyboardButton 4 1549 31 KeyboardButton::~KeyboardButton 0 0 0
38
KeyboardButton::~KeyboardButton(void);

1376 10 LineStream 4 1550 22 LineStream::LineStream 0 1 640 705
// Filename: lineStream.I
// Created by:  drose (26Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
36
inline LineStream::LineStream(void);

1377 17 is_text_available 4 1550 29 LineStream::is_text_available 0 1 641 458
////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
////////////////////////////////////////////////////////////////////
54
inline bool LineStream::is_text_available(void) const;

1378 8 get_line 4 1550 20 LineStream::get_line 0 1 642 540
////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
////////////////////////////////////////////////////////////////////
55
inline basic_string< char > LineStream::get_line(void);

1379 11 has_newline 4 1550 23 LineStream::has_newline 0 1 643 460
////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
////////////////////////////////////////////////////////////////////
48
inline bool LineStream::has_newline(void) const;

1380 11 ~LineStream 4 1550 23 LineStream::~LineStream 0 0 0
30
LineStream::~LineStream(void);

1381 13 load_prc_file 1 0 13 load_prc_file 0 1 769 1916
////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
////////////////////////////////////////////////////////////////////
52
ConfigPage *load_prc_file(Filename const &filename);

1382 18 load_prc_file_data 1 0 18 load_prc_file_data 0 1 770 1362
////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
////////////////////////////////////////////////////////////////////
99
ConfigPage *load_prc_file_data(basic_string< char > const &name, basic_string< char > const &data);

1383 15 unload_prc_file 1 0 15 unload_prc_file 0 1 771 1142
////////////////////////////////////////////////////////////////////
//     Function: unload_prc_file
//  Description: Unloads (and deletes) a ConfigPage that represents a
//               prc file that was previously loaded by
//               load_prc_file().  Returns true if successful, false
//               if the file was unknown.
//
//               After this function has been called, the ConfigPage
//               pointer is no longer valid and should not be used
//               again.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: unload_prc_file
//  Description: Unloads (and deletes) a ConfigPage that represents a
//               prc file that was previously loaded by
//               load_prc_file().  Returns true if successful, false
//               if the file was unknown.
//
//               After this function has been called, the ConfigPage
//               pointer is no longer valid and should not be used
//               again.
////////////////////////////////////////////////////////////////////
39
bool unload_prc_file(ConfigPage *page);

1384 18 hash_prc_variables 1 0 18 hash_prc_variables 0 1 772 692
////////////////////////////////////////////////////////////////////
//     Function: hash_prc_variables
//  Description: Fills HashVal with the hash from the current prc file
//               state as reported by
//               ConfigVariableManager::write_prc_variables().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: hash_prc_variables
//  Description: Fills HashVal with the hash from the current prc file
//               state as reported by
//               ConfigVariableManager::write_prc_variables().
////////////////////////////////////////////////////////////////////
39
void hash_prc_variables(HashVal &hash);

1385 15 ModifierButtons 4 1552 32 ModifierButtons::ModifierButtons 0 2 644 645 461
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
102
ModifierButtons::ModifierButtons(void);
ModifierButtons::ModifierButtons(ModifierButtons const &copy);

1386 16 ~ModifierButtons 4 1552 33 ModifierButtons::~ModifierButtons 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
ModifierButtons::~ModifierButtons(void);

1387 10 operator = 4 1552 27 ModifierButtons::operator = 0 1 646 731
// Filename: modifierButtons.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void ModifierButtons::operator =(ModifierButtons const &copy);

1388 11 operator == 4 1552 28 ModifierButtons::operator == 0 1 647 546
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Equality Operator
//       Access: Published
//  Description: The equality operator is an exact comparision: the
//               two ModifierButtons are equal if they share the same
//               button list--indeed, the same pointer--and they all
//               the buttons have the same state.  Use matches() if a
//               less exact equality test is needed.
////////////////////////////////////////////////////////////////////
77
inline bool ModifierButtons::operator ==(ModifierButtons const &other) const;

1389 11 operator != 4 1552 28 ModifierButtons::operator != 0 1 648 235
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Inequality Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline bool ModifierButtons::operator !=(ModifierButtons const &other) const;

1390 10 operator < 4 1552 27 ModifierButtons::operator < 0 1 649 233
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Ordering Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline bool ModifierButtons::operator <(ModifierButtons const &other) const;

1391 10 operator & 4 1552 27 ModifierButtons::operator & 0 1 650 523
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true only if it is true on both
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
////////////////////////////////////////////////////////////////////
87
inline ModifierButtons ModifierButtons::operator &(ModifierButtons const &other) const;

1392 10 operator | 4 1552 27 ModifierButtons::operator | 0 1 651 527
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true if it is true on either of the
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
////////////////////////////////////////////////////////////////////
87
inline ModifierButtons ModifierButtons::operator |(ModifierButtons const &other) const;

1393 11 operator &= 4 1552 28 ModifierButtons::operator &= 0 1 652 338
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.
////////////////////////////////////////////////////////////////////
64
void ModifierButtons::operator &=(ModifierButtons const &other);

1394 11 operator |= 4 1552 28 ModifierButtons::operator |= 0 1 653 437
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.  Adds
//               whatever buttons are necessary to the list to make
//               this so
////////////////////////////////////////////////////////////////////
64
void ModifierButtons::operator |=(ModifierButtons const &other);

1395 15 set_button_list 4 1552 32 ModifierButtons::set_button_list 0 1 654 698
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::set_button_list
//       Access: Published
//  Description: Sets the list of buttons to watch to be the same as
//               that of the other ModifierButtons object.  This makes
//               the lists pointer equivalent (until one or the other
//               is later modified).
//
//               This will preserve the state of any button that was
//               on the original list and is also on the new lists.
//               Any other buttons will get reset to the default state
//               of "up".
////////////////////////////////////////////////////////////////////
68
void ModifierButtons::set_button_list(ModifierButtons const &other);

1396 7 matches 4 1552 24 ModifierButtons::matches 0 1 655 504
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::matches
//       Access: Published
//  Description: Returns true if the set of buttons indicated as down
//               by this ModifierButtons object is the same set of
//               buttons indicated as down by the other
//               ModifierButtons object.  The buttons indicated as up
//               are not relevant.
////////////////////////////////////////////////////////////////////
66
bool ModifierButtons::matches(ModifierButtons const &other) const;

1397 10 add_button 4 1552 27 ModifierButtons::add_button 0 1 656 523
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::add_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               will be monitored for upness and downness.  Returns
//               true if the button was added, false if it was already
//               being monitored or if too many buttons are currently
//               being monitored.
////////////////////////////////////////////////////////////////////
54
bool ModifierButtons::add_button(ButtonHandle button);

1398 10 has_button 4 1552 27 ModifierButtons::has_button 0 1 657 339
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::has_button
//       Access: Published
//  Description: Returns true if the indicated button is in the set of
//               buttons being monitored, false otherwise.
////////////////////////////////////////////////////////////////////
60
bool ModifierButtons::has_button(ButtonHandle button) const;

1399 13 remove_button 4 1552 30 ModifierButtons::remove_button 0 1 658 623
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::remove_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               being monitored.  Returns true if the button was
//               removed, false if it was not being monitored in the
//               first place.
//
//               Unlike the other methods, you cannot remove a button
//               by removing its alias; you have to remove exactly the
//               button itself.
////////////////////////////////////////////////////////////////////
57
bool ModifierButtons::remove_button(ButtonHandle button);

1400 15 get_num_buttons 4 1552 32 ModifierButtons::get_num_buttons 0 1 659 394
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that the
//               ModifierButtons object is monitoring (e.g. the number
//               of buttons passed to add_button()).
////////////////////////////////////////////////////////////////////
56
inline int ModifierButtons::get_num_buttons(void) const;

1401 10 get_button 4 1552 27 ModifierButtons::get_button 0 1 660 446
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_button
//       Access: Published
//  Description: Returns the nth button that the ModifierButtons
//               object is monitoring (the nth button passed to
//               add_button()).  This must be in the range 0 <= index
//               < get_num_buttons().
////////////////////////////////////////////////////////////////////
65
inline ButtonHandle ModifierButtons::get_button(int index) const;

1402 11 button_down 4 1552 28 ModifierButtons::button_down 0 1 661 597
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_down
//       Access: Published
//  Description: Records that a particular button has been pressed.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
////////////////////////////////////////////////////////////////////
55
bool ModifierButtons::button_down(ButtonHandle button);

1403 9 button_up 4 1552 26 ModifierButtons::button_up 0 1 662 596
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_up
//       Access: Published
//  Description: Records that a particular button has been released.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
////////////////////////////////////////////////////////////////////
53
bool ModifierButtons::button_up(ButtonHandle button);

1404 14 all_buttons_up 4 1552 31 ModifierButtons::all_buttons_up 0 1 663 303
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::all_buttons_up
//       Access: Published
//  Description: Marks all monitored buttons as being in the "up"
//               state.
////////////////////////////////////////////////////////////////////
50
inline void ModifierButtons::all_buttons_up(void);

1405 7 is_down 4 1552 24 ModifierButtons::is_down 0 2 664 665 735
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up or if it is
//               not in the set of buttons being tracked.
////////////////////////////////////////////////////////////////////
112
bool ModifierButtons::is_down(ButtonHandle button) const;
inline bool ModifierButtons::is_down(int index) const;

1406 11 is_any_down 4 1552 28 ModifierButtons::is_any_down 0 1 666 340
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_any_down
//       Access: Published
//  Description: Returns true if any of the tracked button are known
//               to be down, or false if all of them are up.
////////////////////////////////////////////////////////////////////
53
inline bool ModifierButtons::is_any_down(void) const;

1407 10 get_prefix 4 1552 27 ModifierButtons::get_prefix 0 1 667 397
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_prefix
//       Access: Published
//  Description: Returns a string which can be used to prefix any
//               button name or event name with the unique set of
//               modifier buttons currently being held.
////////////////////////////////////////////////////////////////////
61
basic_string< char > ModifierButtons::get_prefix(void) const;

1408 6 output 4 1552 23 ModifierButtons::output 0 1 668 298
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::output
//       Access: Published
//  Description: Writes a one-line summary of the buttons known to be
//               down.
////////////////////////////////////////////////////////////////////
49
void ModifierButtons::output(ostream &out) const;

1409 5 write 4 1552 22 ModifierButtons::write 0 1 669 365
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::write
//       Access: Published
//  Description: Writes a multi-line summary including all of the
//               buttons being monitored and which ones are known to
//               be down.
////////////////////////////////////////////////////////////////////
48
void ModifierButtons::write(ostream &out) const;

1410 6 button 4 1553 19 MouseButton::button 0 1 670 424
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::button
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular numbered mouse button (zero-based), if
//               there is one, or ButtonHandle::none() if there is
//               not.
////////////////////////////////////////////////////////////////////
59
static ButtonHandle MouseButton::button(int button_number);

1411 3 one 4 1553 16 MouseButton::one 0 1 671 302
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::one
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               first mouse button.
////////////////////////////////////////////////////////////////////
43
static ButtonHandle MouseButton::one(void);

1412 3 two 4 1553 16 MouseButton::two 0 1 672 303
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::two
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               second mouse button.
////////////////////////////////////////////////////////////////////
43
static ButtonHandle MouseButton::two(void);

1413 5 three 4 1553 18 MouseButton::three 0 1 673 304
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::three
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               third mouse button.
////////////////////////////////////////////////////////////////////
45
static ButtonHandle MouseButton::three(void);

1414 4 four 4 1553 17 MouseButton::four 0 1 674 304
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::four
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fourth mouse button.
////////////////////////////////////////////////////////////////////
44
static ButtonHandle MouseButton::four(void);

1415 4 five 4 1553 17 MouseButton::five 0 1 675 303
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::five
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fifth mouse button.
////////////////////////////////////////////////////////////////////
44
static ButtonHandle MouseButton::five(void);

1416 8 wheel_up 4 1553 21 MouseButton::wheel_up 0 1 676 327
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_up
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch upwards.
////////////////////////////////////////////////////////////////////
48
static ButtonHandle MouseButton::wheel_up(void);

1417 10 wheel_down 4 1553 23 MouseButton::wheel_down 0 1 677 331
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_down
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch downwards.
////////////////////////////////////////////////////////////////////
50
static ButtonHandle MouseButton::wheel_down(void);

1418 10 wheel_left 4 1553 23 MouseButton::wheel_left 0 1 678 396
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_left
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the left. Usually, you'll only
//               find the horizontal scroll on laptops.
////////////////////////////////////////////////////////////////////
50
static ButtonHandle MouseButton::wheel_left(void);

1419 11 wheel_right 4 1553 24 MouseButton::wheel_right 0 1 679 398
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_right
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the right. Usually, you'll only
//               find the horizontal scroll on laptops.
////////////////////////////////////////////////////////////////////
51
static ButtonHandle MouseButton::wheel_right(void);

1420 15 is_mouse_button 4 1553 28 MouseButton::is_mouse_button 0 1 680 353
////////////////////////////////////////////////////////////////////
//     Function: MouseButton::is_mouse_button
//       Access: Public, Static
//  Description: Returns true if the indicated ButtonHandle is a mouse
//               button, false if it is some other kind of button.
////////////////////////////////////////////////////////////////////
62
static bool MouseButton::is_mouse_button(ButtonHandle button);

1421 12 ~MouseButton 4 1553 25 MouseButton::~MouseButton 0 0 0
32
MouseButton::~MouseButton(void);

1422 9 MouseData 4 1554 20 MouseData::MouseData 0 2 681 682 934
// Filename: mouseData.I
// Created by:  drose (15Jul02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
86
inline MouseData::MouseData(void);
inline MouseData::MouseData(MouseData const &copy);

1423 10 operator = 4 1554 21 MouseData::operator = 0 1 683 234
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void MouseData::operator =(MouseData const &copy);

1424 5 get_x 4 1554 16 MouseData::get_x 0 1 684 215
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline int MouseData::get_x(void) const;

1425 5 get_y 4 1554 16 MouseData::get_y 0 1 685 215
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline int MouseData::get_y(void) const;

1426 13 get_in_window 4 1554 24 MouseData::get_in_window 0 1 686 223
////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_in_window
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline bool MouseData::get_in_window(void) const;

1427 6 output 4 1554 17 MouseData::output 0 1 687 216
////////////////////////////////////////////////////////////////////
//     Function: MouseData::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void MouseData::output(ostream &out) const;

1428 10 ~MouseData 4 1554 21 MouseData::~MouseData 0 0 0
28
MouseData::~MouseData(void);

1429 18 get_node_ref_count 4 1555 44 NodeCachedReferenceCount::get_node_ref_count 0 1 688 280
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
68
inline int NodeCachedReferenceCount::get_node_ref_count(void) const;

1430 8 node_ref 4 1555 34 NodeCachedReferenceCount::node_ref 0 1 689 662
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the reference count.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
////////////////////////////////////////////////////////////////////
59
inline void NodeCachedReferenceCount::node_ref(void) const;

1431 10 node_unref 4 1555 36 NodeCachedReferenceCount::node_unref 0 1 690 468
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
61
inline bool NodeCachedReferenceCount::node_unref(void) const;

1432 24 test_ref_count_integrity 4 1555 50 NodeCachedReferenceCount::test_ref_count_integrity 0 1 691 350
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
75
inline bool NodeCachedReferenceCount::test_ref_count_integrity(void) const;

1433 19 get_referenced_bits 4 1555 45 NodeCachedReferenceCount::get_referenced_bits 0 1 692 600
////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_referenced_bits
//       Access: Published
//  Description: Returns the union of the values defined in the
//               Referenced enum that represents the various things
//               that appear to be holding a pointer to this object.
//
//               If R_node is included, at least one node is holding a
//               pointer; if R_cache is included, at least one cache
//               element is.
////////////////////////////////////////////////////////////////////
69
inline int NodeCachedReferenceCount::get_referenced_bits(void) const;

1434 14 get_class_type 4 1555 40 NodeCachedReferenceCount::get_class_type 0 1 693 0
65
static TypeHandle NodeCachedReferenceCount::get_class_type(void);

1435 11 SparseArray 4 1557 24 SparseArray::SparseArray 0 3 694 695 696 1181
// Filename: sparseArray.I
// Created by:  drose (14Feb07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor (from BitArray)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
144
inline SparseArray::SparseArray(void);
inline SparseArray::SparseArray(SparseArray const &copy);
SparseArray::SparseArray(BitArray const &from);

1436 10 operator = 4 1557 23 SparseArray::operator = 0 1 697 236
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline SparseArray &SparseArray::operator =(SparseArray const &copy);

1437 6 all_on 4 1557 19 SparseArray::all_on 0 1 698 323
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with an infinite array of bits,
//               all on.
////////////////////////////////////////////////////////////////////
52
static inline SparseArray SparseArray::all_on(void);

1438 7 all_off 4 1557 20 SparseArray::all_off 0 1 699 290
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose bits are all off.
////////////////////////////////////////////////////////////////////
53
static inline SparseArray SparseArray::all_off(void);

1439 8 lower_on 4 1557 21 SparseArray::lower_on 0 1 700 301
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose lower on_bits bits are on.
////////////////////////////////////////////////////////////////////
61
static inline SparseArray SparseArray::lower_on(int on_bits);

1440 3 bit 4 1557 16 SparseArray::bit 0 1 701 295
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with only the indicated bit on.
////////////////////////////////////////////////////////////////////
54
static inline SparseArray SparseArray::bit(int index);

1441 5 range 4 1557 18 SparseArray::range 0 1 702 329
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose size bits, beginning at
//               low_bit, are on.
////////////////////////////////////////////////////////////////////
68
static inline SparseArray SparseArray::range(int low_bit, int size);

1442 12 ~SparseArray 4 1557 25 SparseArray::~SparseArray 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline SparseArray::~SparseArray(void);

1443 16 has_max_num_bits 4 1557 29 SparseArray::has_max_num_bits 0 1 703 723
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The SparseArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               SparseArray interchangeably.
////////////////////////////////////////////////////////////////////
55
static inline bool SparseArray::has_max_num_bits(void);

1444 16 get_max_num_bits 4 1557 29 SparseArray::get_max_num_bits 0 1 704 758
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               SparseArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or SparseArray interchangeably.
////////////////////////////////////////////////////////////////////
54
static inline int SparseArray::get_max_num_bits(void);

1445 12 get_num_bits 4 1557 25 SparseArray::get_num_bits 0 1 705 607
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
////////////////////////////////////////////////////////////////////
49
inline int SparseArray::get_num_bits(void) const;

1446 7 get_bit 4 1557 20 SparseArray::get_bit 0 1 706 445
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
////////////////////////////////////////////////////////////////////
50
inline bool SparseArray::get_bit(int index) const;

1447 7 set_bit 4 1557 20 SparseArray::set_bit 0 1 707 320
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
44
inline void SparseArray::set_bit(int index);

1448 9 clear_bit 4 1557 22 SparseArray::clear_bit 0 1 708 323
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
////////////////////////////////////////////////////////////////////
46
inline void SparseArray::clear_bit(int index);

1449 10 set_bit_to 4 1557 23 SparseArray::set_bit_to 0 1 709 313
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
////////////////////////////////////////////////////////////////////
59
inline void SparseArray::set_bit_to(int index, bool value);

1450 16 get_highest_bits 4 1557 29 SparseArray::get_highest_bits 0 1 710 367
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
////////////////////////////////////////////////////////////////////
54
inline bool SparseArray::get_highest_bits(void) const;

1451 7 is_zero 4 1557 20 SparseArray::is_zero 0 1 711 297
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
////////////////////////////////////////////////////////////////////
45
inline bool SparseArray::is_zero(void) const;

1452 9 is_all_on 4 1557 22 SparseArray::is_all_on 0 1 712 298
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool SparseArray::is_all_on(void) const;

1453 10 has_any_of 4 1557 23 SparseArray::has_any_of 0 1 713 311
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool SparseArray::has_any_of(int low_bit, int size) const;

1454 10 has_all_of 4 1557 23 SparseArray::has_all_of 0 1 714 313
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool SparseArray::has_all_of(int low_bit, int size) const;

1455 9 set_range 4 1557 22 SparseArray::set_range 0 1 715 258
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
////////////////////////////////////////////////////////////////////
58
inline void SparseArray::set_range(int low_bit, int size);

1456 11 clear_range 4 1557 24 SparseArray::clear_range 0 1 716 261
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
////////////////////////////////////////////////////////////////////
60
inline void SparseArray::clear_range(int low_bit, int size);

1457 12 set_range_to 4 1557 25 SparseArray::set_range_to 0 1 717 278
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
////////////////////////////////////////////////////////////////////
73
inline void SparseArray::set_range_to(bool value, int low_bit, int size);

1458 15 get_num_on_bits 4 1557 28 SparseArray::get_num_on_bits 0 1 718 375
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
////////////////////////////////////////////////////////////////////
45
int SparseArray::get_num_on_bits(void) const;

1459 16 get_num_off_bits 4 1557 29 SparseArray::get_num_off_bits 0 1 719 376
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
////////////////////////////////////////////////////////////////////
46
int SparseArray::get_num_off_bits(void) const;

1460 17 get_lowest_on_bit 4 1557 30 SparseArray::get_lowest_on_bit 0 1 720 395
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there are an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
47
int SparseArray::get_lowest_on_bit(void) const;

1461 18 get_lowest_off_bit 4 1557 31 SparseArray::get_lowest_off_bit 0 1 721 396
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there are an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
48
int SparseArray::get_lowest_off_bit(void) const;

1462 18 get_highest_on_bit 4 1557 31 SparseArray::get_highest_on_bit 0 1 722 393
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
48
int SparseArray::get_highest_on_bit(void) const;

1463 19 get_highest_off_bit 4 1557 32 SparseArray::get_highest_off_bit 0 1 723 394
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
////////////////////////////////////////////////////////////////////
49
int SparseArray::get_highest_off_bit(void) const;

1464 29 get_next_higher_different_bit 4 1557 42 SparseArray::get_next_higher_different_bit 0 1 724 594
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
////////////////////////////////////////////////////////////////////
66
int SparseArray::get_next_higher_different_bit(int low_bit) const;

1465 15 invert_in_place 4 1557 28 SparseArray::invert_in_place 0 1 725 324
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the SparseArray.  This is
//               equivalent to array = ~array.
////////////////////////////////////////////////////////////////////
47
inline void SparseArray::invert_in_place(void);

1466 18 has_bits_in_common 4 1557 31 SparseArray::has_bits_in_common 0 1 726 446
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this SparseArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
////////////////////////////////////////////////////////////////////
69
bool SparseArray::has_bits_in_common(SparseArray const &other) const;

1467 5 clear 4 1557 18 SparseArray::clear 0 1 727 259
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear
//       Access: Published
//  Description: Sets all the bits in the SparseArray off.
////////////////////////////////////////////////////////////////////
37
inline void SparseArray::clear(void);

1468 6 output 4 1557 19 SparseArray::output 0 1 728 219
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void SparseArray::output(ostream &out) const;

1469 11 operator == 4 1557 24 SparseArray::operator == 0 1 729 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool SparseArray::operator ==(SparseArray const &other) const;

1470 11 operator != 4 1557 24 SparseArray::operator != 0 1 730 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
69
inline bool SparseArray::operator !=(SparseArray const &other) const;

1471 10 operator < 4 1557 23 SparseArray::operator < 0 1 731 387
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this SparseArray is less than that of the
//               other one, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool SparseArray::operator <(SparseArray const &other) const;

1472 10 compare_to 4 1557 23 SparseArray::compare_to 0 1 732 513
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this SparseArray
//               sorts before the indicated other SparseArray, greater
//               than zero if it sorts after, or 0 if they are
//               equivalent.  This is based on the same ordering
//               defined by operator <.
////////////////////////////////////////////////////////////////////
60
int SparseArray::compare_to(SparseArray const &other) const;

1473 10 operator & 4 1557 23 SparseArray::operator & 0 1 733 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline SparseArray SparseArray::operator &(SparseArray const &other) const;

1474 10 operator | 4 1557 23 SparseArray::operator | 0 1 734 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline SparseArray SparseArray::operator |(SparseArray const &other) const;

1475 10 operator ^ 4 1557 23 SparseArray::operator ^ 0 1 735 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
inline SparseArray SparseArray::operator ^(SparseArray const &other) const;

1476 10 operator ~ 68 1557 23 SparseArray::operator ~ 0 1 736 222
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ~
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline SparseArray SparseArray::operator ~(void) const;

1477 11 operator << 4 1557 24 SparseArray::operator << 0 1 737 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline SparseArray SparseArray::operator <<(int shift) const;

1478 11 operator >> 4 1557 24 SparseArray::operator >> 0 1 738 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline SparseArray SparseArray::operator >>(int shift) const;

1479 11 operator &= 4 1557 24 SparseArray::operator &= 0 1 739 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void SparseArray::operator &=(SparseArray const &other);

1480 11 operator |= 4 1557 24 SparseArray::operator |= 0 1 740 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void SparseArray::operator |=(SparseArray const &other);

1481 11 operator ^= 4 1557 24 SparseArray::operator ^= 0 1 741 223
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
void SparseArray::operator ^=(SparseArray const &other);

1482 12 operator <<= 4 1557 25 SparseArray::operator <<= 0 1 742 406
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  Since negative bit positions
//               have meaning in a SparseArray, real bit values are
//               rotated in on the left (not necessarily zero).
////////////////////////////////////////////////////////////////////
49
inline void SparseArray::operator <<=(int shift);

1483 12 operator >>= 4 1557 25 SparseArray::operator >>= 0 1 743 412
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits become
//               negative, but are not lost; they will reappear into
//               the zero position if the array is later left-shifted.
////////////////////////////////////////////////////////////////////
49
inline void SparseArray::operator >>=(int shift);

1484 10 is_inverse 4 1557 23 SparseArray::is_inverse 0 1 744 614
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_inverse
//       Access: Published
//  Description: If this is true, the SparseArray is actually defined
//               as a list of subranges of integers that are *not* in
//               the set.  If this is false (the default), then the
//               subranges define the integers that *are* in the set.
//               This affects the interpretation of the values
//               returned by iterating through get_num_subranges().
////////////////////////////////////////////////////////////////////
48
inline bool SparseArray::is_inverse(void) const;

1485 17 get_num_subranges 4 1557 30 SparseArray::get_num_subranges 0 1 745 515
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_subranges
//       Access: Published
//  Description: Returns the number of separate subranges stored in
//               the SparseArray.  You can use this limit to iterate
//               through the subranges, calling get_subrange_begin()
//               and get_subrange_end() for each one.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
54
inline int SparseArray::get_num_subranges(void) const;

1486 18 get_subrange_begin 4 1557 31 SparseArray::get_subrange_begin 0 1 746 345
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_begin
//       Access: Published
//  Description: Returns the first numeric element in the nth
//               subrange.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
56
inline int SparseArray::get_subrange_begin(int n) const;

1487 16 get_subrange_end 4 1557 29 SparseArray::get_subrange_end 0 1 747 353
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_end
//       Access: Published
//  Description: Returns the last numeric element, plus one, in the
//               nth subrange.
//
//               Also see is_inverse().
////////////////////////////////////////////////////////////////////
54
inline int SparseArray::get_subrange_end(int n) const;

1488 14 get_class_type 4 1557 27 SparseArray::get_class_type 0 1 748 0
52
static TypeHandle SparseArray::get_class_type(void);

1489 20 PythonCallbackObject 4 1558 42 PythonCallbackObject::PythonCallbackObject 0 2 749 750 232
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
PythonCallbackObject::PythonCallbackObject(PyObject *function = (Py_None));

1490 12 operator new 4 1558 34 PythonCallbackObject::operator new 0 1 751 0
146
inline void *PythonCallbackObject::operator new(unsigned int size);
inline void *PythonCallbackObject::operator new(unsigned int size, void *ptr);

1491 15 operator delete 4 1558 37 PythonCallbackObject::operator delete 0 0 0
128
inline void PythonCallbackObject::operator delete(void *ptr);
inline void PythonCallbackObject::operator delete(void *, void *);

1492 12 validate_ptr 4 1558 34 PythonCallbackObject::validate_ptr 0 0 0
71
static inline bool PythonCallbackObject::validate_ptr(void const *ptr);

1493 12 set_function 4 1558 34 PythonCallbackObject::set_function 0 1 752 379
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::set_function
//       Access: Published
//  Description: Replaces the function that is called for the callback.
//               runs.  The parameter should be a Python callable
//               object.
////////////////////////////////////////////////////////////////////
60
void PythonCallbackObject::set_function(PyObject *function);

1494 12 get_function 4 1558 34 PythonCallbackObject::get_function 0 1 753 287
////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::get_function
//       Access: Published
//  Description: Returns the function that is called for the callback.
////////////////////////////////////////////////////////////////////
51
PyObject *PythonCallbackObject::get_function(void);

1495 14 get_class_type 4 1558 36 PythonCallbackObject::get_class_type 0 1 754 0
61
static TypeHandle PythonCallbackObject::get_class_type(void);

1496 14 get_class_type 4 1559 36 WritableConfigurable::get_class_type 0 1 755 0
61
static TypeHandle WritableConfigurable::get_class_type(void);

1497 21 ~WritableConfigurable 4 1559 43 WritableConfigurable::~WritableConfigurable 0 0 0
50
WritableConfigurable::~WritableConfigurable(void);

1498 17 UniqueIdAllocator 4 1560 36 UniqueIdAllocator::UniqueIdAllocator 0 3 756 757 758 275
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
////////////////////////////////////////////////////////////////////
86
UniqueIdAllocator::UniqueIdAllocator(unsigned int min = (0), unsigned int max = (20));

1499 18 ~UniqueIdAllocator 4 1560 37 UniqueIdAllocator::~UniqueIdAllocator 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
UniqueIdAllocator::~UniqueIdAllocator(void);

1500 8 allocate 4 1560 27 UniqueIdAllocator::allocate 0 1 759 381
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::allocate
//       Access: Published
//  Description: Returns an id between _min and _max (that were passed
//               to the constructor).
//               IndexEnd is returned if no ids are available.
////////////////////////////////////////////////////////////////////
47
unsigned int UniqueIdAllocator::allocate(void);

1501 18 initial_reserve_id 4 1560 37 UniqueIdAllocator::initial_reserve_id 0 1 760 893
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::initial_reserve_id
//       Access: Published
//  Description: This may be called to mark a particular id as having
//               already been allocated (for instance, by a prior
//               pass).  The specified id is removed from the
//               available pool.
//
//               Because of the limitations of this algorithm, this is
//               most efficient when it is called before the first
//               call to allocate(), and when all the calls to
//               initial_reserve_id() are made in descending order by
//               id.  However, this is a performance warning only; if
//               performance is not an issue, any id may be reserved
//               at any time.
////////////////////////////////////////////////////////////////////
60
void UniqueIdAllocator::initial_reserve_id(unsigned int id);

1502 4 free 4 1560 23 UniqueIdAllocator::free 0 1 761 338
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::free
//       Access: Published
//  Description: Free an allocated index (index must be between _min
//               and _max that were passed to the constructor).
////////////////////////////////////////////////////////////////////
49
void UniqueIdAllocator::free(unsigned int index);

1503 13 fraction_used 4 1560 32 UniqueIdAllocator::fraction_used 0 1 762 350
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::fraction_used
//       Access: Published
//  Description: return the decimal fraction of the pool that is used.
//               The range is 0 to 1.0 (e.g. 75% would be 0.75).
////////////////////////////////////////////////////////////////////
51
float UniqueIdAllocator::fraction_used(void) const;

1504 6 output 4 1560 25 UniqueIdAllocator::output 0 1 763 256
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::output
//       Access: Published
//  Description: ...intended for debugging only.
////////////////////////////////////////////////////////////////////
51
void UniqueIdAllocator::output(ostream &out) const;

1505 5 write 4 1560 24 UniqueIdAllocator::write 0 1 764 255
////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::write
//       Access: Published
//  Description: ...intended for debugging only.
////////////////////////////////////////////////////////////////////
50
void UniqueIdAllocator::write(ostream &out) const;

772
1 14 Dtool_flboOkFn 7 8 1563 784 14 Dtool_flboOkFn 0 1 4 copy 1 1561  
2 14 Dtool_flbopSSS 7 8 1563 784 14 Dtool_flbopSSS 0 1 4 copy 1 1564  
3 14 Dtool_flbo2uc9 6 9 1566 0 14 Dtool_flbo2uc9 0 1 4 this 3 1561  
4 14 Dtool_flbonncp 6 10 1567 0 14 Dtool_flbonncp 0 2 4 this 3 1561  1 n 1 1566  
5 14 Dtool_flboEWJ2 6 11 1567 0 14 Dtool_flboEWJ2 0 2 4 this 3 1561  1 n 1 1566  
6 14 Dtool_flboO8w6 6 12 1568 0 14 Dtool_flboO8w6 0 1 4 this 3 1561  
7 14 Dtool_flboB17T 6 13 1568 0 14 Dtool_flboB17T 0 3 4 this 3 1561  1 n 1 1566  5 count 1 1566  
8 14 Dtool_flborlQw 6 14 1569 0 14 Dtool_flborlQw 0 1 4 this 3 1561  
9 14 Dtool_flboPCkU 6 15 1569 0 14 Dtool_flboPCkU 0 1 4 this 3 1561  
10 14 Dtool_flboy3l9 4 5 1571 0 14 Dtool_flboy3l9 0 1 4 this 3 1570  
11 14 Dtool_flboDO_Y 4 6 1571 0 14 Dtool_flboDO_Y 0 2 4 this 3 1572  3 out 1 1574  
12 14 Dtool_flboX63M 7 23 1577 796 14 Dtool_flboX63M 0 1 4 copy 1 1575  
13 14 Dtool_flbo1HLX 7 23 1577 796 14 Dtool_flbo1HLX 0 1 4 copy 1 1578  
14 14 Dtool_flbosFvc 6 24 1566 0 14 Dtool_flbosFvc 0 1 4 this 3 1575  
15 14 Dtool_flbo_r_f 6 25 1580 0 14 Dtool_flbo_r_f 0 2 4 this 3 1575  1 n 1 1566  
16 14 Dtool_flboyg6O 6 26 1580 0 14 Dtool_flboyg6O 0 2 4 this 3 1575  1 n 1 1566  
17 14 Dtool_flboFXK9 6 27 1568 0 14 Dtool_flboFXK9 0 1 4 this 3 1575  
18 14 Dtool_flbogZO_ 6 28 1568 0 14 Dtool_flbogZO_ 0 3 4 this 3 1575  1 n 1 1566  5 count 1 1566  
19 14 Dtool_flboyoll 6 29 1569 0 14 Dtool_flboyoll 0 1 4 this 3 1575  
20 14 Dtool_flboAXXF 6 30 1569 0 14 Dtool_flboAXXF 0 1 4 this 3 1575  
21 14 Dtool_flbowEyO 4 20 1571 0 14 Dtool_flbowEyO 0 1 4 this 3 1581  
22 14 Dtool_flboh3jh 4 21 1571 0 14 Dtool_flboh3jh 0 2 4 this 3 1582  3 out 1 1574  
23 14 Dtool_flbo8B9l 7 33 1584 804 14 Dtool_flbo8B9l 0 0 
24 14 Dtool_flbosm_Z 7 33 1584 804 14 Dtool_flbosm_Z 0 1 4 copy 1 1585  
25 14 Dtool_flbokq1x 6 34 1584 0 14 Dtool_flbokq1x 0 2 4 this 3 1584  4 copy 1 1585  
26 14 Dtool_flboVHPu 7 35 1584 804 14 Dtool_flboVHPu 0 0 
27 14 Dtool_flbokrT6 7 36 1584 804 14 Dtool_flbokrT6 0 0 
28 14 Dtool_flboPteB 7 37 1584 804 14 Dtool_flboPteB 0 1 7 on_bits 1 1569  
29 14 Dtool_flboEES9 7 38 1584 804 14 Dtool_flboEES9 0 1 5 index 1 1569  
30 14 Dtool_flbo2jZV 7 39 1584 804 14 Dtool_flbo2jZV 0 2 7 low_bit 1 1569  4 size 1 1569  
31 14 Dtool_flborw_P 6 41 1587 0 14 Dtool_flborw_P 0 0 
32 14 Dtool_flbokA7l 6 42 1569 0 14 Dtool_flbokA7l 0 0 
33 14 Dtool_flbon_6E 6 43 1569 0 14 Dtool_flbon_6E 0 0 
34 14 Dtool_flboNI0e 6 44 1587 0 14 Dtool_flboNI0e 0 2 4 this 3 1585  5 index 1 1569  
35 14 Dtool_flbobA_k 4 45 1571 0 14 Dtool_flbobA_k 0 2 4 this 3 1584  5 index 1 1569  
36 14 Dtool_flboTA34 4 46 1571 0 14 Dtool_flboTA34 0 2 4 this 3 1584  5 index 1 1569  
37 14 Dtool_flboN6Cn 4 47 1571 0 14 Dtool_flboN6Cn 0 3 4 this 3 1584  5 index 1 1569  5 value 1 1587  
38 14 Dtool_flboADmV 6 48 1587 0 14 Dtool_flboADmV 0 1 4 this 3 1585  
39 14 Dtool_flbo3P9m 6 49 1587 0 14 Dtool_flbo3P9m 0 1 4 this 3 1585  
40 14 Dtool_flboxFld 6 50 1566 0 14 Dtool_flboxFld 0 3 4 this 3 1585  7 low_bit 1 1569  4 size 1 1569  
41 14 Dtool_flboZDj3 4 51 1571 0 14 Dtool_flboZDj3 0 4 4 this 3 1584  5 value 1 1566  7 low_bit 1 1569  4 size 1 1569  
42 14 Dtool_flboyIIs 6 52 1587 0 14 Dtool_flboyIIs 0 3 4 this 3 1585  7 low_bit 1 1569  4 size 1 1569  
43 14 Dtool_flboOfMc 6 53 1587 0 14 Dtool_flboOfMc 0 3 4 this 3 1585  7 low_bit 1 1569  4 size 1 1569  
44 14 Dtool_flboPdea 4 54 1571 0 14 Dtool_flboPdea 0 3 4 this 3 1584  7 low_bit 1 1569  4 size 1 1569  
45 14 Dtool_flboeZzC 4 55 1571 0 14 Dtool_flboeZzC 0 3 4 this 3 1584  7 low_bit 1 1569  4 size 1 1569  
46 14 Dtool_flbowG5f 4 56 1571 0 14 Dtool_flbowG5f 0 4 4 this 3 1584  5 value 1 1587  7 low_bit 1 1569  4 size 1 1569  
47 14 Dtool_flboImLX 6 57 1569 0 14 Dtool_flboImLX 0 1 4 this 3 1585  
48 14 Dtool_flboL6nV 6 58 1569 0 14 Dtool_flboL6nV 0 1 4 this 3 1585  
49 14 Dtool_flboEGfL 6 59 1569 0 14 Dtool_flboEGfL 0 1 4 this 3 1585  
50 14 Dtool_flboVvnV 6 60 1569 0 14 Dtool_flboVvnV 0 1 4 this 3 1585  
51 14 Dtool_flboNZDs 6 61 1569 0 14 Dtool_flboNZDs 0 1 4 this 3 1585  
52 14 Dtool_flbo1q3w 6 62 1569 0 14 Dtool_flbo1q3w 0 1 4 this 3 1585  
53 14 Dtool_flbovM6M 6 63 1569 0 14 Dtool_flbovM6M 0 2 4 this 3 1585  7 low_bit 1 1569  
54 14 Dtool_flboW1u9 4 64 1571 0 14 Dtool_flboW1u9 0 1 4 this 3 1584  
55 14 Dtool_flbofWTS 6 65 1587 0 14 Dtool_flbofWTS 0 2 4 this 3 1585  5 other 1 1585  
56 14 Dtool_flbosPqY 4 66 1571 0 14 Dtool_flbosPqY 0 1 4 this 3 1584  
57 14 Dtool_flbotsUG 4 67 1571 0 14 Dtool_flbotsUG 0 2 4 this 3 1585  3 out 1 1574  
58 14 Dtool_flboi8A6 4 68 1571 0 14 Dtool_flboi8A6 0 3 4 this 3 1585  3 out 1 1574  12 spaces_every 1 1569  
59 14 Dtool_flboida8 4 68 1571 0 14 Dtool_flboida8 0 2 4 this 3 1585  3 out 1 1574  
60 14 Dtool_flboGkzd 4 69 1571 0 14 Dtool_flboGkzd 0 3 4 this 3 1585  3 out 1 1574  12 spaces_every 1 1569  
61 14 Dtool_flboRW_f 4 69 1571 0 14 Dtool_flboRW_f 0 2 4 this 3 1585  3 out 1 1574  
62 14 Dtool_flboatxG 4 70 1571 0 14 Dtool_flboatxG 0 3 4 this 3 1585  3 out 1 1574  12 indent_level 1 1569  
63 14 Dtool_flboL_2n 4 70 1571 0 14 Dtool_flboL_2n 0 2 4 this 3 1585  3 out 1 1574  
64 14 Dtool_flboRqjr 6 71 1587 0 14 Dtool_flboRqjr 0 2 4 this 3 1585  5 other 1 1585  
65 14 Dtool_flboFbfL 6 72 1587 0 14 Dtool_flboFbfL 0 2 4 this 3 1585  5 other 1 1585  
66 14 Dtool_flbodImb 6 73 1587 0 14 Dtool_flbodImb 0 2 4 this 3 1585  5 other 1 1585  
67 14 Dtool_flbow6Ce 6 74 1569 0 14 Dtool_flbow6Ce 0 2 4 this 3 1585  5 other 1 1585  
68 14 Dtool_flbojYjL 7 75 1584 804 14 Dtool_flbojYjL 0 2 4 this 3 1585  5 other 1 1585  
69 14 Dtool_flboF7xb 7 76 1584 804 14 Dtool_flboF7xb 0 2 4 this 3 1585  5 other 1 1585  
70 14 Dtool_flboS1rL 7 77 1584 804 14 Dtool_flboS1rL 0 2 4 this 3 1585  5 other 1 1585  
71 14 Dtool_flbolqQk 7 78 1584 804 14 Dtool_flbolqQk 0 1 4 this 3 1585  
72 14 Dtool_flbofKAq 7 79 1584 804 14 Dtool_flbofKAq 0 2 4 this 3 1585  5 shift 1 1569  
73 14 Dtool_flboAlKa 7 80 1584 804 14 Dtool_flboAlKa 0 2 4 this 3 1585  5 shift 1 1569  
74 14 Dtool_flbova1p 6 81 1584 0 14 Dtool_flbova1p 0 2 4 this 3 1584  5 other 1 1585  
75 14 Dtool_flboUoD6 6 82 1584 0 14 Dtool_flboUoD6 0 2 4 this 3 1584  5 other 1 1585  
76 14 Dtool_flboe0_p 6 83 1584 0 14 Dtool_flboe0_p 0 2 4 this 3 1584  5 other 1 1585  
77 14 Dtool_flbo1MmK 6 84 1584 0 14 Dtool_flbo1MmK 0 2 4 this 3 1584  5 shift 1 1569  
78 14 Dtool_flbosqx6 6 85 1584 0 14 Dtool_flbosqx6 0 2 4 this 3 1584  5 shift 1 1569  
79 14 Dtool_flboIpt7 7 86 1589 0 14 Dtool_flboIpt7 0 0 
80 14 Dtool_flboQ4t2 7 88 1590 858 14 Dtool_flboQ4t2 0 0 
81 14 Dtool_flboBKTk 7 88 1590 858 14 Dtool_flboBKTk 0 1 4 copy 1 1591  
82 14 Dtool_flboZK2I 6 89 1590 0 14 Dtool_flboZK2I 0 2 4 this 3 1590  4 copy 1 1591  
83 14 Dtool_flbotdgp 7 90 1590 858 14 Dtool_flbotdgp 0 0 
84 14 Dtool_flboRxDj 7 91 1590 858 14 Dtool_flboRxDj 0 0 
85 14 Dtool_flbonApV 7 92 1590 858 14 Dtool_flbonApV 0 1 7 on_bits 1 1569  
86 14 Dtool_flbol_fN 7 93 1590 858 14 Dtool_flbol_fN 0 1 5 index 1 1569  
87 14 Dtool_flbohu4K 7 94 1590 858 14 Dtool_flbohu4K 0 2 7 low_bit 1 1569  4 size 1 1569  
88 14 Dtool_flboV293 6 96 1587 0 14 Dtool_flboV293 0 0 
89 14 Dtool_flbofhwX 6 97 1569 0 14 Dtool_flbofhwX 0 0 
90 14 Dtool_flboc9oV 6 98 1569 0 14 Dtool_flboc9oV 0 0 
91 14 Dtool_flboQkKR 6 99 1587 0 14 Dtool_flboQkKR 0 2 4 this 3 1591  5 index 1 1569  
92 14 Dtool_flboWhDJ 4 100 1571 0 14 Dtool_flboWhDJ 0 2 4 this 3 1590  5 index 1 1569  
93 14 Dtool_flboapyc 4 101 1571 0 14 Dtool_flboapyc 0 2 4 this 3 1590  5 index 1 1569  
94 14 Dtool_flbotnCt 4 102 1571 0 14 Dtool_flbotnCt 0 3 4 this 3 1590  5 index 1 1569  5 value 1 1587  
95 14 Dtool_flboNDBe 6 103 1587 0 14 Dtool_flboNDBe 0 1 4 this 3 1591  
96 14 Dtool_flboSm0S 6 104 1587 0 14 Dtool_flboSm0S 0 1 4 this 3 1591  
97 14 Dtool_flbok2VC 6 105 1566 0 14 Dtool_flbok2VC 0 3 4 this 3 1591  7 low_bit 1 1569  4 size 1 1569  
98 14 Dtool_flboQI03 4 106 1571 0 14 Dtool_flboQI03 0 4 4 this 3 1590  5 value 1 1566  7 low_bit 1 1569  4 size 1 1569  
99 14 Dtool_flbovZI1 6 107 1587 0 14 Dtool_flbovZI1 0 3 4 this 3 1591  7 low_bit 1 1569  4 size 1 1569  
100 14 Dtool_flbo4rQO 6 108 1587 0 14 Dtool_flbo4rQO 0 3 4 this 3 1591  7 low_bit 1 1569  4 size 1 1569  
101 14 Dtool_flboce2Y 4 109 1571 0 14 Dtool_flboce2Y 0 3 4 this 3 1590  7 low_bit 1 1569  4 size 1 1569  
102 14 Dtool_flboouj3 4 110 1571 0 14 Dtool_flboouj3 0 3 4 this 3 1590  7 low_bit 1 1569  4 size 1 1569  
103 14 Dtool_flbotybc 4 111 1571 0 14 Dtool_flbotybc 0 4 4 this 3 1590  5 value 1 1587  7 low_bit 1 1569  4 size 1 1569  
104 14 Dtool_flbojXq9 6 112 1569 0 14 Dtool_flbojXq9 0 1 4 this 3 1591  
105 14 Dtool_flbo14ol 6 113 1569 0 14 Dtool_flbo14ol 0 1 4 this 3 1591  
106 14 Dtool_flboYTi7 6 114 1569 0 14 Dtool_flboYTi7 0 1 4 this 3 1591  
107 14 Dtool_flbou2rJ 6 115 1569 0 14 Dtool_flbou2rJ 0 1 4 this 3 1591  
108 14 Dtool_flboMqdg 6 116 1569 0 14 Dtool_flboMqdg 0 1 4 this 3 1591  
109 14 Dtool_flboTBnk 6 117 1569 0 14 Dtool_flboTBnk 0 1 4 this 3 1591  
110 14 Dtool_flbopm5E 6 118 1569 0 14 Dtool_flbopm5E 0 2 4 this 3 1591  7 low_bit 1 1569  
111 14 Dtool_flboBa0l 4 119 1571 0 14 Dtool_flboBa0l 0 1 4 this 3 1590  
112 14 Dtool_flboXKrM 6 120 1587 0 14 Dtool_flboXKrM 0 2 4 this 3 1591  5 other 1 1591  
113 14 Dtool_flbo4mX_ 4 121 1571 0 14 Dtool_flbo4mX_ 0 1 4 this 3 1590  
114 14 Dtool_flbooXIR 4 122 1571 0 14 Dtool_flbooXIR 0 2 4 this 3 1591  3 out 1 1574  
115 14 Dtool_flbob9kN 4 123 1571 0 14 Dtool_flbob9kN 0 3 4 this 3 1591  3 out 1 1574  12 spaces_every 1 1569  
116 14 Dtool_flbojx6v 4 123 1571 0 14 Dtool_flbojx6v 0 2 4 this 3 1591  3 out 1 1574  
117 14 Dtool_flbo52R1 4 124 1571 0 14 Dtool_flbo52R1 0 3 4 this 3 1591  3 out 1 1574  12 spaces_every 1 1569  
118 14 Dtool_flbomM4l 4 124 1571 0 14 Dtool_flbomM4l 0 2 4 this 3 1591  3 out 1 1574  
119 14 Dtool_flboKmrX 4 125 1571 0 14 Dtool_flboKmrX 0 3 4 this 3 1591  3 out 1 1574  12 indent_level 1 1569  
120 14 Dtool_flboJx_v 4 125 1571 0 14 Dtool_flboJx_v 0 2 4 this 3 1591  3 out 1 1574  
121 14 Dtool_flboDBQ_ 6 126 1587 0 14 Dtool_flboDBQ_ 0 2 4 this 3 1591  5 other 1 1591  
122 14 Dtool_flbo7Bfc 6 127 1587 0 14 Dtool_flbo7Bfc 0 2 4 this 3 1591  5 other 1 1591  
123 14 Dtool_flboPse8 6 128 1587 0 14 Dtool_flboPse8 0 2 4 this 3 1591  5 other 1 1591  
124 14 Dtool_flboHtQ8 6 129 1569 0 14 Dtool_flboHtQ8 0 2 4 this 3 1591  5 other 1 1591  
125 14 Dtool_flbo1z5O 7 130 1590 858 14 Dtool_flbo1z5O 0 2 4 this 3 1591  5 other 1 1591  
126 14 Dtool_flbobsOe 7 131 1590 858 14 Dtool_flbobsOe 0 2 4 this 3 1591  5 other 1 1591  
127 14 Dtool_flboEMaU 7 132 1590 858 14 Dtool_flboEMaU 0 2 4 this 3 1591  5 other 1 1591  
128 14 Dtool_flbo1NZN 7 133 1590 858 14 Dtool_flbo1NZN 0 1 4 this 3 1591  
129 14 Dtool_flboavX9 7 134 1590 858 14 Dtool_flboavX9 0 2 4 this 3 1591  5 shift 1 1569  
130 14 Dtool_flbo3PLG 7 135 1590 858 14 Dtool_flbo3PLG 0 2 4 this 3 1591  5 shift 1 1569  
131 14 Dtool_flbo_0dX 6 136 1590 0 14 Dtool_flbo_0dX 0 2 4 this 3 1590  5 other 1 1591  
132 14 Dtool_flboYUzm 6 137 1590 0 14 Dtool_flboYUzm 0 2 4 this 3 1590  5 other 1 1591  
133 14 Dtool_flboR0_c 6 138 1590 0 14 Dtool_flboR0_c 0 2 4 this 3 1590  5 other 1 1591  
134 14 Dtool_flboq_L4 6 139 1590 0 14 Dtool_flboq_L4 0 2 4 this 3 1590  5 shift 1 1569  
135 14 Dtool_flboFe_A 6 140 1590 0 14 Dtool_flboFe_A 0 2 4 this 3 1590  5 shift 1 1569  
136 14 Dtool_flbo2usD 7 141 1589 0 14 Dtool_flbo2usD 0 0 
137 14 Dtool_flbocxQD 7 143 1593 920 14 Dtool_flbocxQD 0 1 4 copy 1 1564  
138 14 Dtool_flboLCx2 7 143 1593 920 14 Dtool_flboLCx2 0 2 4 self 1 1594  8 sequence 1 1594  
139 14 Dtool_flbozuam 7 143 1593 920 14 Dtool_flbozuam 0 1 11 type_handle 1 1589  
140 14 Dtool_flboeEbV 7 143 1593 920 14 Dtool_flboeEbV 0 0 
141 14 Dtool_flbou8tm 7 144 1593 920 14 Dtool_flbou8tm 0 2 1 n 1 1566  11 type_handle 1 1589  
142 14 Dtool_flboKqwg 7 144 1593 920 14 Dtool_flboKqwg 0 1 1 n 1 1566  
143 14 Dtool_flbonkJ9 6 145 1566 0 14 Dtool_flbonkJ9 0 1 4 this 3 1564  
144 14 Dtool_flbosNZ_ 4 146 1571 0 14 Dtool_flbosNZ_ 0 2 4 this 3 1593  1 x 1 1567  
145 14 Dtool_flbo8cnz 4 147 1571 0 14 Dtool_flbo8cnz 0 1 4 this 3 1593  
146 14 Dtool_flboS8Hz 6 148 1567 0 14 Dtool_flboS8Hz 0 2 4 this 3 1564  1 n 1 1566  
147 14 Dtool_flbozP9E 4 149 1571 0 14 Dtool_flbozP9E 0 3 4 this 3 1593  1 n 1 1566  5 value 1 1567  
148 14 Dtool_flboKWc5 6 150 1567 0 14 Dtool_flboKWc5 0 2 4 this 3 1564  1 n 1 1566  
149 14 Dtool_flbowM7J 4 151 1571 0 14 Dtool_flbowM7J 0 3 4 this 3 1593  1 n 1 1566  5 value 1 1567  
150 14 Dtool_flboGYzb 6 152 1568 0 14 Dtool_flboGYzb 0 1 4 this 3 1564  
151 14 Dtool_flboN8LA 4 153 1571 0 14 Dtool_flboN8LA 0 2 4 this 3 1593  4 data 1 1568  
152 14 Dtool_flbotBUo 6 154 1568 0 14 Dtool_flbotBUo 0 3 4 this 3 1564  1 n 1 1566  5 count 1 1566  
153 14 Dtool_flboOgNY 4 155 1571 0 14 Dtool_flboOgNY 0 4 4 this 3 1593  1 n 1 1566  5 count 1 1566  4 data 1 1568  
154 14 Dtool_flboQNi2 6 156 1569 0 14 Dtool_flboQNi2 0 1 4 this 3 1564  
155 14 Dtool_flboEjro 6 157 1569 0 14 Dtool_flboEjro 0 1 4 this 3 1564  
156 14 Dtool_flboDVLW 7 160 1596 936 14 Dtool_flboDVLW 0 1 4 copy 1 1578  
157 14 Dtool_flboF0NH 7 160 1596 936 14 Dtool_flboF0NH 0 2 4 self 1 1594  8 sequence 1 1594  
158 14 Dtool_flbo1rpQ 7 160 1596 936 14 Dtool_flbo1rpQ 0 1 11 type_handle 1 1589  
159 14 Dtool_flbo8OP5 7 160 1596 936 14 Dtool_flbo8OP5 0 0 
160 14 Dtool_flbo7V4I 7 161 1596 936 14 Dtool_flbo7V4I 0 2 1 n 1 1566  11 type_handle 1 1589  
161 14 Dtool_flboJ8ub 7 161 1596 936 14 Dtool_flboJ8ub 0 1 1 n 1 1566  
162 14 Dtool_flboI3xs 6 162 1566 0 14 Dtool_flboI3xs 0 1 4 this 3 1578  
163 14 Dtool_flbo_7ej 4 163 1571 0 14 Dtool_flbo_7ej 0 2 4 this 3 1596  1 x 1 1580  
164 14 Dtool_flboxujU 4 164 1571 0 14 Dtool_flboxujU 0 1 4 this 3 1596  
165 14 Dtool_flboC1Wu 6 165 1580 0 14 Dtool_flboC1Wu 0 2 4 this 3 1578  1 n 1 1566  
166 14 Dtool_flbo04Y4 4 166 1571 0 14 Dtool_flbo04Y4 0 3 4 this 3 1596  1 n 1 1566  5 value 1 1580  
167 14 Dtool_flbouw0l 6 167 1580 0 14 Dtool_flbouw0l 0 2 4 this 3 1578  1 n 1 1566  
168 14 Dtool_flboy_QJ 4 168 1571 0 14 Dtool_flboy_QJ 0 3 4 this 3 1596  1 n 1 1566  5 value 1 1580  
169 14 Dtool_flbonE_c 6 169 1568 0 14 Dtool_flbonE_c 0 1 4 this 3 1578  
170 14 Dtool_flbobfhi 4 170 1571 0 14 Dtool_flbobfhi 0 2 4 this 3 1596  4 data 1 1568  
171 14 Dtool_flbolO9d 6 171 1568 0 14 Dtool_flbolO9d 0 3 4 this 3 1578  1 n 1 1566  5 count 1 1566  
172 14 Dtool_flbo6EdM 4 172 1571 0 14 Dtool_flbo6EdM 0 4 4 this 3 1596  1 n 1 1566  5 count 1 1566  4 data 1 1568  
173 14 Dtool_flboyVLR 6 173 1569 0 14 Dtool_flboyVLR 0 1 4 this 3 1578  
174 14 Dtool_flbo8hDB 6 174 1569 0 14 Dtool_flbo8hDB 0 1 4 this 3 1578  
175 14 Dtool_flboBhAH 4 179 1571 0 14 Dtool_flboBhAH 783 // Filename: animInterface.I
// Created by:  drose (20Sep05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the entire animation from beginning to end and
//               stops.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1597  
176 14 Dtool_flboNKyB 4 179 1571 0 14 Dtool_flboNKyB 736 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::play
//       Access: Published
//  Description: Runs the animation from the frame "from" to and
//               including the frame "to", at which point the
//               animation is stopped.  Both "from" and "to" frame
//               numbers may be outside the range (0,
//               get_num_frames()) and the animation will follow the
//               range correctly, reporting numbers modulo
//               get_num_frames().  For instance, play(0,
//               get_num_frames() * 2) will play the animation twice
//               and then stop.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1597  4 from 1 1567  2 to 1 1567  
177 14 Dtool_flboblrP 4 180 1571 0 14 Dtool_flboblrP 405 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Starts the entire animation looping.  If restart is
//               true, the animation is restarted from the beginning;
//               otherwise, it continues from the current frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1597  7 restart 1 1587  
178 14 Dtool_flboub22 4 180 1571 0 14 Dtool_flboub22 491 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::loop
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", indefinitely.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1597  7 restart 1 1587  4 from 1 1567  2 to 1 1567  
179 14 Dtool_flboFEBu 4 181 1571 0 14 Dtool_flboFEBu 498 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Starts the entire animation bouncing back and forth
//               between its first frame and last frame.  If restart
//               is true, the animation is restarted from the
//               beginning; otherwise, it continues from the current
//               frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1597  7 restart 1 1587  
180 14 Dtool_flboA7bg 4 181 1571 0 14 Dtool_flboA7bg 386 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pingpong
//       Access: Published
//  Description: Loops the animation from the frame "from" to and
//               including the frame "to", and then back in the
//               opposite direction, indefinitely.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1597  7 restart 1 1587  4 from 1 1567  2 to 1 1567  
181 14 Dtool_flboEmm6 4 182 1571 0 14 Dtool_flboEmm6 369 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::stop
//       Access: Published
//  Description: Stops a currently playing or looping animation right
//               where it is.  The animation remains posed at the
//               current frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1597  
182 14 Dtool_flboUH7a 4 183 1571 0 14 Dtool_flboUH7a 297 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::pose
//       Access: Published
//  Description: Sets the animation to the indicated frame and holds
//               it there.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1597  5 frame 1 1567  
183 14 Dtool_flboTzzJ 4 184 1571 0 14 Dtool_flboTzzJ 519 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::set_play_rate
//       Access: Published
//  Description: Changes the rate at which the animation plays.  1.0
//               is the normal speed, 2.0 is twice normal speed, and
//               0.5 is half normal speed.  0.0 is legal to pause the
//               animation, and a negative value will play the
//               animation backwards.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1597  9 play_rate 1 1567  
184 14 Dtool_flboHfNF 6 185 1567 0 14 Dtool_flboHfNF 313 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_play_rate
//       Access: Published
//  Description: Returns the rate at which the animation plays.  See
//               set_play_rate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1598  
185 14 Dtool_flbo1MDt 6 186 1567 0 14 Dtool_flbo1MDt 514 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame_rate
//       Access: Published
//  Description: Returns the native frame rate of the animation.  This
//               is the number of frames per second that will elapse
//               when the play_rate is set to 1.0.  It is a fixed
//               property of the animation and may not be adjusted by
//               the user.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1598  
186 14 Dtool_flbo38Tm 6 187 1569 0 14 Dtool_flbo38Tm 581 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1598  
187 14 Dtool_flboFJm1 6 188 1569 0 14 Dtool_flboFJm1 359 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//               This number will be in the range 0 <= f <
//               get_num_frames().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1598  
188 14 Dtool_flboL6yq 6 189 1569 0 14 Dtool_flboL6yq 638 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_next_frame
//       Access: Published
//  Description: Returns the current integer frame number + 1,
//               constrained to the range 0 <= f < get_num_frames().
//
//               If the play mode is PM_play, this will clamp to the
//               same value as get_frame() at the end of the
//               animation.  If the play mode is any other value, this
//               will wrap around to frame 0 at the end of the
//               animation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1598  
189 14 Dtool_flboc9m_ 6 190 1567 0 14 Dtool_flboc9m_ 598 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_frac
//       Access: Published
//  Description: Returns the fractional part of the current frame.
//               Normally, this is in the range 0.0 <= f < 1.0, but in
//               the one special case of an animation playing to its
//               end frame and stopping, it might exactly equal 1.0.
//
//               It will always be true that get_full_frame() +
//               get_frac() == get_full_fframe().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1598  
190 14 Dtool_flbou_72 6 191 1569 0 14 Dtool_flbou_72 693 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_frame
//       Access: Published
//  Description: Returns the current integer frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_fframe(), this
//               return value will never exceed the value passed to
//               to_frame in the play() method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1598  
191 14 Dtool_flboiZK4 6 192 1567 0 14 Dtool_flboiZK4 841 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::get_full_fframe
//       Access: Published
//  Description: Returns the current floating-point frame number.
//
//               Unlike the value returned by get_frame(), this frame
//               number may extend beyond the range of
//               get_num_frames() if the frame range passed to play(),
//               loop(), etc. did.
//
//               Unlike the value returned by get_full_frame(), this
//               return value may equal (to_frame + 1.0), when the
//               animation has played to its natural end.  However, in
//               this case the return value of get_full_frame() will
//               be to_frame, not (to_frame + 1).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1598  
192 14 Dtool_flboeUtV 6 193 1587 0 14 Dtool_flboeUtV 466 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::is_playing
//       Access: Published
//  Description: Returns true if the animation is currently playing,
//               false if it is stopped (e.g. because stop() or pose()
//               was called, or because it reached the end of the
//               animation after play() was called).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1598  
193 14 Dtool_flbojJYM 4 194 1571 0 14 Dtool_flbojJYM 230 ////////////////////////////////////////////////////////////////////
//     Function: AnimInterface::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1598  3 out 1 1574  
194 14 Dtool_flbo3PK3 7 195 1589 0 14 Dtool_flbo3PK3 0 0 
195 14 Dtool_flboeAZ3 7 197 1600 974 14 Dtool_flboeAZ3 759 // Filename: updateSeq.I
// Created by:  drose (30Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Default Constructor
//       Access: Published
//  Description: Creates an UpdateSeq in the 'initial' state.
//////////////////////////////////////////////////////////////////// 0 
196 14 Dtool_flboTpCm 7 197 1600 974 14 Dtool_flboTpCm 226 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1601  
197 14 Dtool_flboXroR 7 198 1600 974 14 Dtool_flboXroR 290 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::initial (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'initial' state.
//////////////////////////////////////////////////////////////////// 0 
198 14 Dtool_flbonK4u 7 199 1600 974 14 Dtool_flbonK4u 282 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::old (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'old' state.
//////////////////////////////////////////////////////////////////// 0 
199 14 Dtool_flbo9eRT 7 200 1600 974 14 Dtool_flbo9eRT 286 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::fresh (named constructor)
//       Access: Published, Static
//  Description: Returns an UpdateSeq in the 'fresh' state.
//////////////////////////////////////////////////////////////////// 0 
200 14 Dtool_flboGswc 6 201 1600 0 14 Dtool_flboGswc 234 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Copy Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1600  4 copy 1 1601  
201 14 Dtool_flbo0_vY 4 202 1571 0 14 Dtool_flbo0_vY 260 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::clear
//       Access: Published
//  Description: Resets the UpdateSeq to the 'initial' state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1600  
202 14 Dtool_flboT1E2 6 203 1587 0 14 Dtool_flboT1E2 294 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_initial
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'initial'
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1601  
203 14 Dtool_flboLeqi 6 204 1587 0 14 Dtool_flboLeqi 269 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_old
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'old' state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1601  
204 14 Dtool_flboWsUb 6 205 1587 0 14 Dtool_flboWsUb 290 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_fresh
//       Access: Published
//  Description: Returns true if the UpdateSeq is in the 'fresh'
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1601  
205 14 Dtool_flbo6gLj 6 206 1587 0 14 Dtool_flbo6gLj 328 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::is_special
//       Access: Published
//  Description: Returns true if the UpdateSeq is in any special
//               states, i.e. 'initial', 'old', or 'fresh'.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1601  
206 14 Dtool_flbogvS2 6 207 1587 0 14 Dtool_flbogvS2 227 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Equality operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1601  5 other 1 1601  
207 14 Dtool_flbogevt 6 208 1587 0 14 Dtool_flbogevt 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Inequality operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1601  5 other 1 1601  
208 14 Dtool_flboNGO_ 6 209 1587 0 14 Dtool_flboNGO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1601  5 other 1 1601  
209 14 Dtool_flbowJ_1 6 210 1587 0 14 Dtool_flbowJ_1 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1601  5 other 1 1601  
210 14 Dtool_flbot52_ 6 211 1587 0 14 Dtool_flbot52_ 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1601  5 other 1 1601  
211 14 Dtool_flboQMl2 6 212 1587 0 14 Dtool_flboQMl2 229 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Comparison operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1601  5 other 1 1601  
212 14 Dtool_flbokAFl 7 213 1600 974 14 Dtool_flbokAFl 231 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Preincrement operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1600  
213 14 Dtool_flboqToO 7 214 1600 974 14 Dtool_flboqToO 232 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::Postincrement operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1600  6 param0 0 1569  
214 14 Dtool_flboHG_1 4 215 1571 0 14 Dtool_flboHG_1 216 ////////////////////////////////////////////////////////////////////
//     Function: UpdateSeq::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1601  3 out 1 1574  
215 14 Dtool_flboh86d 4 219 1571 0 14 Dtool_flboh86d 653 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::mark_bam_modified
//       Access: Public
//  Description: Increments the bam_modified counter, so that this
//               object will be invalidated and retransmitted on any
//               open bam streams.  This should normally not need to
//               be called by user code; it should be called
//               internally when the object has been changed in a way
//               that legitimately requires its retransmission to any
//               connected clients.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1603  
216 14 Dtool_flboA1uu 7 220 1600 974 14 Dtool_flboA1uu 388 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::get_bam_modified
//       Access: Public
//  Description: Returns the current bam_modified counter.  This
//               counter is normally incremented automatically
//               whenever the object is modified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1604  
217 14 Dtool_flbouMCB 6 221 1594 0 14 Dtool_flbouMCB 492 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1604  4 self 1 1594  
218 14 Dtool_flboPnhF 6 222 1594 0 14 Dtool_flboPnhF 709 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::__reduce_persist__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//
//               This is similar to __reduce__, but it provides
//               additional support for the missing persistent-state
//               object needed to properly support self-referential
//               BAM objects written to the pickle stream.  This hooks
//               into the pickle and cPickle modules implemented in
//               direct/src/stdpy.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1604  4 self 1 1594  7 pickler 1 1594  
219 14 Dtool_flboSud2 6 223 1568 0 14 Dtool_flboSud2 756 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and returns that
//               data as a string string.  Returns empty string on
//               failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1604  
220 14 Dtool_flbo91zQ 6 223 1587 0 14 Dtool_flbo91zQ 785 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1604  4 data 1 1606  6 writer 1 1607  
221 14 Dtool_flbo_CTI 6 223 1587 0 14 Dtool_flbo_CTI 785 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: TypedWritable::encode_to_bam_stream
//       Access: Published
//  Description: Converts the TypedWritable object into a single
//               stream of data using a BamWriter, and stores that
//               data in the indicated string.  Returns true on
//               success, false on failure.
//
//               This is a convenience method particularly useful for
//               cases when you are only serializing a single object.
//               If you have many objects to process, it is more
//               efficient to use the same BamWriter to serialize all
//               of them together.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1604  4 data 1 1606  
222 14 Dtool_flboTBaO 7 225 1589 0 14 Dtool_flboTBaO 0 0 
223 14 Dtool_flboEJGP 7 234 1609 990 14 Dtool_flboEJGP 872 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
//////////////////////////////////////////////////////////////////// 2 4 data 1 1568  6 reader 1 1608  
224 14 Dtool_flbotU54 7 234 1609 990 14 Dtool_flbotU54 872 ////////////////////////////////////////////////////////////////////
//     Function: TypedWritableReferenceCount::decode_from_bam_stream
//       Access: Published, Static
//  Description: Reads the string created by a previous call to
//               encode_to_bam_stream(), and extracts and returns the
//               single object on that string.  Returns NULL on error.
//
//               This method is intended to replace
//               decode_raw_from_bam_stream() when you know the stream
//               in question returns an object of type
//               TypedWritableReferenceCount, allowing for easier
//               reference count management.  Note that the caller is
//               still responsible for maintaining the reference count
//               on the return value.
//////////////////////////////////////////////////////////////////// 1 4 data 1 1568  
225 14 Dtool_flbo5oCX 7 235 1589 0 14 Dtool_flbo5oCX 0 0 
226 14 Dtool_flbob50R 6 229 1603 0 14 Dtool_flbob50R 0 1 4 this 3 1609  
227 14 Dtool_flboIu02 7 230 1609 990 14 Dtool_flboIu02 0 1 4 this 3 1603  
228 14 Dtool_flbokcf_ 7 232 1610 0 14 Dtool_flbokcf_ 0 1 4 this 3 1609  
229 14 Dtool_flboGHue 7 233 1609 990 14 Dtool_flboGHue 0 1 4 this 3 1610  
230 14 Dtool_flbo5zcI 7 244 1613 995 14 Dtool_flbo5zcI 928 // Filename: bamCacheRecord.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::make_copy
//       Access: Published
//  Description: Returns a duplicate of the BamCacheRecord.  The
//               duplicate will not have a data pointer set, even
//               though one may have been assigned to the original via
//               set_data().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1611  
231 14 Dtool_flboRs2_ 6 245 1587 0 14 Dtool_flboRs2_ 396 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::operator == 
//       Access: Published
//  Description: Returns true if the record matches the other record
//               in those attributes which get written to disk.  Does
//               not compare the data pointer.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1611  5 other 1 1611  
232 14 Dtool_flbo5cIS 6 246 1614 0 14 Dtool_flbo5cIS 523 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_source_pathname
//       Access: Published
//  Description: Returns the full pathname to the source file that
//               originally generated this cache request.  In some
//               cases, for instance in the case of a of a multipage
//               texture like "cube_#.png", this may not not a true
//               filename on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1611  
233 14 Dtool_flboPDd1 6 247 1614 0 14 Dtool_flboPDd1 516 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_cache_filename
//       Access: Published
//  Description: Returns the name of the cache file as hashed from the
//               source_pathname.  This will be relative to the root
//               of the cache directory, and it will not include any
//               suffixes that may be appended to resolve hash
//               conflicts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1611  
234 14 Dtool_flbo3ULN 6 248 1566 0 14 Dtool_flbo3ULN 323 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_recorded_time
//       Access: Published
//  Description: Returns the time at which this particular record was
//               recorded or updated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1611  
235 14 Dtool_flbofk9J 6 249 1569 0 14 Dtool_flbofk9J 320 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_num_dependent_files
//       Access: Published
//  Description: Returns the number of source files that contribute to
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1611  
236 14 Dtool_flbotgta 6 250 1614 0 14 Dtool_flbotgta 335 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_dependent_pathname
//       Access: Published
//  Description: Returns the full pathname of the nth source files
//               that contributes to the cache.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1611  1 n 1 1569  
237 14 Dtool_flbo_q0S 6 251 1587 0 14 Dtool_flbo_q0S 380 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::dependents_unchanged
//       Access: Published
//  Description: Returns true if all of the dependent files are still
//               the same as when the cache was recorded, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1611  
238 14 Dtool_flboorWD 4 252 1571 0 14 Dtool_flboorWD 323 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_dependent_files
//       Access: Published
//  Description: Empties the list of files that contribute to the data
//               in this record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1613  
239 14 Dtool_flbot_BK 4 253 1571 0 14 Dtool_flbot_BK 509 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::add_dependent_file
//       Access: Published
//  Description: Adds the indicated file to the list of files that
//               will be loaded to generate the data in this record.
//               This should be called once for the primary source
//               file, and again for each secondary source file, if
//               any.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1613  8 pathname 1 1614  
240 14 Dtool_flbomwOq 6 254 1587 0 14 Dtool_flbomwOq 373 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::has_data
//       Access: Published
//  Description: Returns true if this cache record has an in-memory
//               data object associated--that is, the object stored in
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1611  
241 14 Dtool_flbo_CEW 4 255 1571 0 14 Dtool_flbo_CEW 394 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::clear_data
//       Access: Published
//  Description: Removes the in-memory data object associated with
//               this record, if any.  This does not affect the
//               on-disk representation of the record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1613  
242 14 Dtool_flbo_VOd 6 256 1603 0 14 Dtool_flbo_VOd 383 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::get_data
//       Access: Published
//  Description: Returns a pointer to the data stored in the
//               record, or NULL if there is no data.  The pointer is
//               not removed from the record.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1611  
243 14 Dtool_flboY08g 4 258 1571 0 14 Dtool_flboY08g 935 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: Stores a new data object on the record.  You should
//               pass the same pointer twice, to both parameters; this
//               allows the C++ typecasting to automatically convert
//               the pointer into both a TypedWritable and a
//               ReferenceCount pointer, so that the BamCacheRecord
//               object can reliably manage the reference counts.
//
//               You may pass 0 or NULL as the second parameter.  If
//               you do this, the BamCacheRecord will not manage the
//               object's reference count; it will be up to you to
//               ensure the object is not deleted during the lifetime
//               of the BamCacheRecord object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1613  3 ptr 1 1603  7 ref_ptr 1 1610  
244 14 Dtool_flbohwxq 4 258 1571 0 14 Dtool_flbohwxq 342 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::set_data
//       Access: Published
//  Description: This variant on set_data() is provided just to allow
//               Python code to pass a 0 as the second parameter.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1613  3 ptr 1 1603  5 dummy 1 1569  
245 14 Dtool_flboFvYJ 4 259 1571 0 14 Dtool_flboFvYJ 222 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1611  3 out 1 1574  
246 14 Dtool_flboE3j3 4 260 1571 0 14 Dtool_flboE3j3 221 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 1611  3 out 1 1574  12 indent_level 1 1569  
247 14 Dtool_flboUKVK 4 260 1571 0 14 Dtool_flboUKVK 221 ////////////////////////////////////////////////////////////////////
//     Function: BamCacheRecord::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1611  3 out 1 1574  
248 14 Dtool_flbo5Y_g 7 261 1589 0 14 Dtool_flbo5Y_g 0 0 
249 14 Dtool_flbohSD0 7 238 1609 990 14 Dtool_flbohSD0 0 1 4 this 3 1613  
250 14 Dtool_flboCxca 7 239 1613 995 14 Dtool_flboCxca 0 1 4 this 3 1609  
251 14 Dtool_flboF6go 7 263 1617 1015 14 Dtool_flboF6go 220 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
252 14 Dtool_flboLJj3 4 265 1571 0 14 Dtool_flboLJj3 1130 // Filename: bamCache.I
// Created by:  drose (09Jun06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_active
//       Access: Published
//  Description: Changes the state of the active flag.  "active" means
//               that the cache should be consulted automatically on
//               loads, "not active" means that objects should be
//               loaded directly without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1617  4 flag 1 1587  
253 14 Dtool_flboov3M 6 266 1587 0 14 Dtool_flboov3M 695 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_active
//       Access: Published
//  Description: Returns true if the BamCache is currently active,
//               false if it is not.  "active" means that the cache
//               should be consulted automatically on loads, "not
//               active" means that objects should be loaded directly
//               without consulting the cache.
//
//               This represents the global flag.  Also see the
//               individual cache_models, cache_textures,
//               cache_compressed_textures flags.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1618  
254 14 Dtool_flboRUjp 4 267 1571 0 14 Dtool_flboRUjp 346 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_models
//       Access: Published
//  Description: Indicates whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1617  4 flag 1 1587  
255 14 Dtool_flboPFL2 6 268 1587 0 14 Dtool_flboPFL2 414 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_models
//       Access: Published
//  Description: Returns whether model files (e.g. egg files and bam
//               files) will be stored in the cache, as bam files.
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1618  
256 14 Dtool_flbooUbM 4 269 1571 0 14 Dtool_flbooUbM 332 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_textures
//       Access: Published
//  Description: Indicates whether texture files will be stored in the
//               cache, as uncompressed txo files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1617  4 flag 1 1587  
257 14 Dtool_flbotUl1 6 270 1587 0 14 Dtool_flbotUl1 418 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_textures
//       Access: Published
//  Description: Returns whether texture files (e.g. egg files and bam
//               files) will be stored in the cache, as txo files.
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1618  
258 14 Dtool_flboqUmd 4 271 1571 0 14 Dtool_flboqUmd 1143 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_compressed_textures
//       Access: Published
//  Description: Indicates whether compressed texture files will be
//               stored in the cache, as compressed txo files.  The
//               compressed data may either be generated in-CPU, via
//               the squish library, or it may be extracted from the
//               GSG after the texture has been loaded.
//
//               This may be set in conjunction with
//               set_cache_textures(), or independently of it.  If
//               set_cache_textures() is true and this is false, all
//               textures will be cached in their uncompressed form.
//               If set_cache_textures() is false and this is true,
//               only compressed textures will be cached, and they
//               will be cached in their compressed form.  If both are
//               true, all textures will be cached, in their
//               uncompressed or compressed form appropriately.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1617  4 flag 1 1587  
259 14 Dtool_flboMfxn 6 272 1587 0 14 Dtool_flboMfxn 475 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_compressed_textures
//       Access: Published
//  Description: Returns whether compressed texture files will be
//               stored in the cache, as compressed txo files.  See
//               set_cache_compressed_textures().
//
//               This also returns false if get_active() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1618  
260 14 Dtool_flboSDrp 4 273 1571 0 14 Dtool_flboSDrp 665 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_root
//       Access: Published
//  Description: Changes the current root pathname of the cache.  This
//               specifies where the cache files are stored on disk.
//               This should name a directory that is on a disk local
//               to the machine (not on a network-mounted disk), for
//               instance, /tmp/panda-cache or /c/panda-cache.
//
//               If the directory does not already exist, it will be
//               created as a result of this call.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1617  4 root 1 1614  
261 14 Dtool_flboDaLL 7 274 1620 0 14 Dtool_flboDaLL 299 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_root
//       Access: Published
//  Description: Returns the current root pathname of the cache.  See
//               set_root().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1618  
262 14 Dtool_flboFO7v 4 275 1571 0 14 Dtool_flboFO7v 316 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_flush_time
//       Access: Published
//  Description: Specifies the time in seconds between automatic
//               flushes of the cache index.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1617  10 flush_time 1 1569  
263 14 Dtool_flbozd6A 6 276 1569 0 14 Dtool_flbozd6A 314 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_flush_time
//       Access: Published
//  Description: Returns the time in seconds between automatic
//               flushes of the cache index.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1618  
264 14 Dtool_flboBePF 4 277 1571 0 14 Dtool_flboBePF 767 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_cache_max_kbytes
//       Access: Published
//  Description: Specifies the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  If a newly cached file
//               would exceed this size, an older file is removed from
//               the cache.
//
//               Note that in the case of multiple different processes
//               simultaneously operating on the same cache directory,
//               the actual cache size may slightly exceed this value
//               from time to time due to latency in checking between
//               the processes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1617  10 max_kbytes 1 1569  
265 14 Dtool_flbobqs_ 6 278 1569 0 14 Dtool_flbobqs_ 371 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_cache_max_kbytes
//       Access: Published
//  Description: Returns the maximum size, in kilobytes, which the
//               cache is allowed to grow to.  See
//               set_cache_max_kbytes().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1618  
266 14 Dtool_flboPgHj 4 279 1571 0 14 Dtool_flboPgHj 523 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::set_read_only
//       Access: Published
//  Description: Can be used to put the cache in read-only mode,
//               or take it out of read-only mode.  Note that if you
//               put it into read-write mode, and it discovers that
//               it does not have write access, it will put itself
//               right back into read-only mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1617  2 ro 1 1587  
267 14 Dtool_flboD7P3 6 280 1587 0 14 Dtool_flboD7P3 503 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_read_only
//       Access: Published
//  Description: Returns true if the cache is in read-only mode.
//               Normally, the cache starts in read-write mode.  It
//               can put itself into read-only mode automatically if
//               it discovers that it does not have write access to
//               the cache.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1618  
268 14 Dtool_flboamUZ 7 281 1613 995 14 Dtool_flboamUZ 1211 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::lookup
//       Access: Published
//  Description: Looks up a file in the cache.  
//
//               If the file is cacheable, then regardless of whether
//               the file is found in the cache or not, this returns a
//               BamCacheRecord.  On the other hand, if the file
//               cannot be cached, returns NULL.
//
//               If record->has_data() returns true, then the file was
//               found in the cache, and you may call
//               record->extract_data() to get the object.  If
//               record->has_data() returns false, then the file was
//               not found in the cache or the cache was stale; and
//               you should reload the source file (calling
//               record->add_dependent_file() for each file loaded,
//               including the original source file), and then call
//               record->set_data() to record the resulting loaded
//               object; and finally, you should call store() to write
//               the cached record to disk.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1617  15 source_filename 1 1614  15 cache_extension 1 1568  
269 14 Dtool_flboztlT 6 282 1587 0 14 Dtool_flboztlT 478 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::store
//       Access: Published
//  Description: Flushes a cache entry to disk.  You must have
//               retrieved the cache record via a prior call to
//               lookup(), and then stored the data via
//               record->set_data().  Returns true on success, false
//               on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1617  6 record 1 1613  
270 14 Dtool_flbooxHn 4 283 1571 0 14 Dtool_flbooxHn 325 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::consider_flush_index
//       Access: Published
//  Description: Flushes the index if enough time has elapsed since
//               the index was last flushed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1617  
271 14 Dtool_flboUv8K 4 284 1571 0 14 Dtool_flboUv8K 258 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::flush_index
//       Access: Published
//  Description: Ensures the index is written to disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1617  
272 14 Dtool_flboA5ij 6 285 1617 0 14 Dtool_flboA5ij 376 ////////////////////////////////////////////////////////////////////
//     Function: BamCache::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global BamCache object,
//               which is used automatically by the ModelPool and
//               TexturePool.
//////////////////////////////////////////////////////////////////// 0 
273 14 Dtool_flbo5YaZ 7 294 1623 1045 14 Dtool_flbo5YaZ 230 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1621  
274 14 Dtool_flbo19et 7 294 1623 1045 14 Dtool_flbo19et 225 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 flags 1 1569  
275 14 Dtool_flboMYtK 7 294 1623 1045 14 Dtool_flboMYtK 225 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
276 14 Dtool_flbokRhb 7 294 1623 1045 14 Dtool_flbokRhb 714 // Filename: loaderOptions.I
// Created by:  drose (05Oct05)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 5 flags 1 1569  13 texture_flags 1 1569  
277 14 Dtool_flboERe5 6 295 1623 0 14 Dtool_flboERe5 238 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1623  4 copy 1 1621  
278 14 Dtool_flboGDaf 4 296 1571 0 14 Dtool_flboGDaf 223 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1623  5 flags 1 1569  
279 14 Dtool_flbojYev 6 297 1569 0 14 Dtool_flbojYev 223 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1621  
280 14 Dtool_flboedgq 4 298 1571 0 14 Dtool_flboedgq 231 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::set_texture_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1623  5 flags 1 1569  
281 14 Dtool_flboWo93 6 299 1569 0 14 Dtool_flboWo93 231 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::get_texture_flags
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1621  
282 14 Dtool_flbo0FtW 4 300 1571 0 14 Dtool_flbo0FtW 221 ////////////////////////////////////////////////////////////////////
//     Function: LoaderOptions::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1621  3 out 1 1574  
283 14 Dtool_flbotxvf 7 303 1608 1047 14 Dtool_flbotxvf 221 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 source 1 1624  4 name 1 1614  
284 14 Dtool_flboyofV 7 303 1608 1047 14 Dtool_flboyofV 221 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 source 1 1624  
285 14 Dtool_flboswJK 7 303 1608 1047 14 Dtool_flboswJK 221 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
286 14 Dtool_flboykLj 4 305 1571 0 14 Dtool_flboykLj 383 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_source
//       Access: Published
//  Description: Changes the source of future datagrams for this
//               BamReader.  This also implicitly calls init() if it
//               has not already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1608  6 source 1 1624  
287 14 Dtool_flboOowx 6 306 1587 0 14 Dtool_flboOowx 474 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::init
//       Access: Published
//  Description: Initializes the BamReader prior to reading any
//               objects from its source.  This includes reading the
//               Bam header.
//
//               This returns true if the BamReader successfully
//               initialized, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1608  
288 14 Dtool_flbo7KNc 4 307 1571 0 14 Dtool_flbo7KNc 1496 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_aux_data
//       Access: Published
//  Description: Associates an arbitrary block of data with the
//               indicated object (or NULL), and the indicated name.
//
//               This is intended to provide a place for temporary
//               storage for objects reading themselves from the bam
//               file.  To use it, inherit from BamReader::AuxData and
//               store whatever data you like there.  Then associate
//               your AuxData with the object as it is being read with
//               set_aux_data().  You may later set the aux data to
//               NULL to remove it; or it will automatically be
//               removed (and deleted) after finalize() is called for
//               the object in question.
//
//               If the TypedWritable pointer is NULL, the the aux
//               data is stored globally for the BamReader in general.
//               This pointer is available to any bam objects, and
//               will not be automatically removed until the BamReader
//               itself destructs.
//
//               In either case, the name is just an arbitrary
//               user-defined key.  If there is already a data pointer
//               stored for the obj/name pair, that data pointer will
//               be replaced (and deleted).
//////////////////////////////////////////////////////////////////// 4 4 this 3 1608  3 obj 1 1603  4 name 1 1568  4 data 1 1626  
289 14 Dtool_flboGGPG 7 308 1626 0 14 Dtool_flboGGPG 413 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_aux_data
//       Access: Published
//  Description: Returns the pointer previously associated with the
//               bam reader by a previous call to set_aux_data(), or
//               NULL if data with the indicated key has not been set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1628  3 obj 1 1603  4 name 1 1568  
290 14 Dtool_flbolMp4 6 309 1614 0 14 Dtool_flbolMp4 457 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamReader should
//               contain the name of the file.  This enables the
//               reader to interpret pathnames in the BAM as relative
//               to the directory containing the BAM.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1628  
291 14 Dtool_flboQgUs 6 310 1621 0 14 Dtool_flboQgUs 330 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_loader_options
//       Access: Published
//  Description: Returns the LoaderOptions passed to the loader when
//               the model was requested, if any.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1628  
292 14 Dtool_flbooG4k 4 311 1571 0 14 Dtool_flbooG4k 276 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::set_loader_options
//       Access: Published
//  Description: Specifies the LoaderOptions for this BamReader.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1608  7 options 1 1621  
293 14 Dtool_flbokEg5 6 312 1603 0 14 Dtool_flbokEg5 1569 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::read_object
//       Access: Published
//  Description: Reads a single object from the Bam file.  If the
//               object type is known, a new object of the appropriate
//               type is created and returned; otherwise, NULL is
//               returned.  NULL is also returned when the end of the
//               file is reached.  is_eof() may be called to
//               differentiate between these two cases.
//
//               This may be called repeatedly to extract out all the
//               objects in the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is retrieved directly
//               from the Bam file: the root of the scene graph.  The
//               remaining objects will all be retrieved recursively
//               by the first object.
//
//               Note that the object returned may not yet be
//               complete.  In particular, some of its pointers may
//               not be filled in; you must call resolve() to fill in
//               all the available pointers before you can safely use
//               any objects returned by read_object().
//
//               This flavor of read_object() requires the caller to
//               know what type of object it has received in order to
//               properly manage the reference counts.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1608  
294 14 Dtool_flbodeRo 6 313 1587 0 14 Dtool_flbodeRo 375 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::is_eof
//       Access: Published
//  Description: Returns true if the reader has reached end-of-file,
//               false otherwise.  This call is only valid after a
//               call to read_object().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1628  
295 14 Dtool_flbokMdY 6 314 1587 0 14 Dtool_flbokMdY 935 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::resolve
//       Access: Published
//  Description: This may be called at any time during processing of
//               the Bam file to resolve all the known pointers so
//               far.  It is usually called at the end of the
//               processing, after all objects have been read, which
//               is generally the best time to call it.
//
//               This must be called at least once after reading a
//               particular object via get_object() in order to
//               validate that object.
//
//               The return value is true if all objects have been
//               resolved, or false if some objects are still
//               outstanding (in which case you will need to call
//               resolve() again later).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1608  
296 14 Dtool_flbo7ine 6 315 1587 0 14 Dtool_flbo7ine 724 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::change_pointer
//       Access: Published
//  Description: Indicates that an object recently read from the bam
//               stream should be replaced with a new object.  Any
//               future occurrences of the original object in the
//               stream will henceforth return the new object instead.
//
//               The return value is true if the replacement was
//               successfully made, or false if the object was not
//               read from the stream (or if change_pointer had
//               already been called on it).
//////////////////////////////////////////////////////////////////// 3 4 this 3 1608  12 orig_pointer 1 1604  11 new_pointer 1 1604  
297 14 Dtool_flboHY9j 6 316 1569 0 14 Dtool_flboHY9j 316 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_major_ver
//       Access: Published
//  Description: Returns the major version number of the Bam file
//               currently being read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1628  
298 14 Dtool_flboyH0T 6 317 1569 0 14 Dtool_flboyH0T 316 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_minor_ver
//       Access: Published
//  Description: Returns the minor version number of the Bam file
//               currently being read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1628  
299 14 Dtool_flboTPGP 6 318 1528 0 14 Dtool_flboTPGP 528 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being read.  This does not imply that
//               every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1628  
300 14 Dtool_flboDBcf 6 319 1569 0 14 Dtool_flboDBcf 440 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_major_ver
//       Access: Published
//  Description: Returns the major version number of Bam files
//               supported by the current code base.  This must match
//               get_file_major_ver() in order to successfully read a
//               file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1628  
301 14 Dtool_flbobCCi 6 320 1569 0 14 Dtool_flbobCCi 450 ////////////////////////////////////////////////////////////////////
//     Function: BamReader::get_current_minor_ver
//       Access: Published
//  Description: Returns the minor version number of Bam files
//               supported by the current code base.  This must match
//               or exceed get_file_minor_ver() in order to
//               successfully read a file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1628  
302 14 Dtool_flboS75T 7 322 1607 1065 14 Dtool_flboS75T 221 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 target 1 1630  4 name 1 1614  
303 14 Dtool_flbo8uzO 7 322 1607 1065 14 Dtool_flbo8uzO 221 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 target 1 1630  
304 14 Dtool_flbopd8a 7 322 1607 1065 14 Dtool_flbopd8a 221 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
305 14 Dtool_flbopGaG 4 324 1571 0 14 Dtool_flbopGaG 394 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_target
//       Access: Published
//  Description: Changes the destination of future datagrams written
//               by the BamWriter.  This also implicitly calls init()
//               if it has not already been called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1607  6 target 1 1630  
306 14 Dtool_flboyJ_l 6 325 1587 0 14 Dtool_flboyJ_l 483 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::init
//       Access: Published
//  Description: Initializes the BamWriter prior to writing any
//               objects to its output stream.  This includes writing
//               out the Bam header.
//
//               This returns true if the BamWriter successfully
//               initialized, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1607  
307 14 Dtool_flbo2a2s 6 326 1614 0 14 Dtool_flbo2a2s 940 // Filename: bamWriter.I
// Created by:  jason (08Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_filename
//       Access: Published
//  Description: If a BAM is a file, then the BamWriter should
//               contain the name of the file.  This enables the
//               writer to convert pathnames in the BAM to relative
//               to the directory containing the BAM.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1632  
308 14 Dtool_flboaCkL 6 327 1587 0 14 Dtool_flboaCkL 1153 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::write_object
//       Access: Published
//  Description: Writes a single object to the Bam file, so that the
//               BamReader::read_object() can later correctly restore
//               the object and all its pointers.
//
//               This implicitly also writes any additional objects
//               this object references (if they haven't already been
//               written), so that pointers may be fully resolved.
//
//               This may be called repeatedly to write a sequence of
//               objects to the Bam file, but typically (especially
//               for scene graph files, indicated with the .bam
//               extension), only one object is written directly from
//               the Bam file: the root of the scene graph.  The
//               remaining objects will all be written recursively by
//               the first object.
//
//               Returns true if the object is successfully written,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1607  3 obj 1 1604  
309 14 Dtool_flbogrPZ 6 328 1587 0 14 Dtool_flbogrPZ 408 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::has_object
//       Access: Published
//  Description: Returns true if the object has previously been
//               written (or at least requested to be written) to the
//               bam file, or false if we've never heard of it before.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1632  3 obj 1 1604  
310 14 Dtool_flboyWRG 4 329 1571 0 14 Dtool_flboyWRG 307 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::flush
//       Access: Published
//  Description: Ensures that all data written thus far is manifested
//               on the output stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1607  
311 14 Dtool_flboAdVD 6 330 1528 0 14 Dtool_flboAdVD 531 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_endian
//       Access: Published
//  Description: Returns the endian preference indicated by the Bam
//               file currently being written.  This does not imply
//               that every number is stored using the indicated
//               convention, but individual objects may choose to
//               respect this flag when recording data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1632  
312 14 Dtool_flbovXrV 6 331 1530 0 14 Dtool_flbovXrV 462 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::get_file_texture_mode
//       Access: Published
//  Description: Returns the BamTextureMode preference indicated by
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1632  
313 14 Dtool_flboeMfu 4 332 1571 0 14 Dtool_flboeMfu 453 ////////////////////////////////////////////////////////////////////
//     Function: BamWriter::set_file_texture_mode
//       Access: Published
//  Description: Changes the BamTextureMode preference for
//               the Bam file currently being written.  Texture
//               objects written to this Bam file will be encoded
//               according to the specified mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1607  17 file_texture_mode 1 1530  
314 14 Dtool_flbonVQd 7 334 1634 1082 14 Dtool_flbonVQd 0 0 
315 14 Dtool_flbo7gMO 7 334 1634 1082 14 Dtool_flbo7gMO 0 1 4 copy 1 1635  
316 14 Dtool_flbo0eoo 7 334 1634 1082 14 Dtool_flbo0eoo 0 1 10 init_value 1 1566  
317 14 Dtool_flboCaYM 6 335 1634 0 14 Dtool_flboCaYM 0 2 4 this 3 1634  4 copy 1 1635  
318 14 Dtool_flboRObZ 7 336 1634 1082 14 Dtool_flboRObZ 0 0 
319 14 Dtool_flbojEzX 7 337 1634 1082 14 Dtool_flbojEzX 0 0 
320 14 Dtool_flboIQak 7 338 1634 1082 14 Dtool_flboIQak 0 1 7 on_bits 1 1569  
321 14 Dtool_flbosGZS 7 339 1634 1082 14 Dtool_flbosGZS 0 1 5 index 1 1569  
322 14 Dtool_flboOgvR 7 340 1634 1082 14 Dtool_flboOgvR 0 2 7 low_bit 1 1569  4 size 1 1569  
323 14 Dtool_flbo6pB9 6 342 1587 0 14 Dtool_flbo6pB9 0 0 
324 14 Dtool_flboyO9U 6 343 1569 0 14 Dtool_flboyO9U 0 0 
325 14 Dtool_flboR9aU 6 344 1569 0 14 Dtool_flboR9aU 0 0 
326 14 Dtool_flboe0SD 6 345 1587 0 14 Dtool_flboe0SD 0 2 4 this 3 1635  5 index 1 1569  
327 14 Dtool_flbod8Sx 4 346 1571 0 14 Dtool_flbod8Sx 0 2 4 this 3 1634  5 index 1 1569  
328 14 Dtool_flboeFOW 4 347 1571 0 14 Dtool_flboeFOW 0 2 4 this 3 1634  5 index 1 1569  
329 14 Dtool_flbodoR6 4 348 1571 0 14 Dtool_flbodoR6 0 3 4 this 3 1634  5 index 1 1569  5 value 1 1587  
330 14 Dtool_flboJyi2 6 349 1587 0 14 Dtool_flboJyi2 0 1 4 this 3 1635  
331 14 Dtool_flboKdtD 6 350 1587 0 14 Dtool_flboKdtD 0 1 4 this 3 1635  
332 14 Dtool_flbovCn_ 6 351 1566 0 14 Dtool_flbovCn_ 0 3 4 this 3 1635  7 low_bit 1 1569  4 size 1 1569  
333 14 Dtool_flboVp78 4 352 1571 0 14 Dtool_flboVp78 0 4 4 this 3 1634  5 value 1 1566  7 low_bit 1 1569  4 size 1 1569  
334 14 Dtool_flbo5NS8 6 353 1587 0 14 Dtool_flbo5NS8 0 3 4 this 3 1635  7 low_bit 1 1569  4 size 1 1569  
335 14 Dtool_flbo7Fky 6 354 1587 0 14 Dtool_flbo7Fky 0 3 4 this 3 1635  7 low_bit 1 1569  4 size 1 1569  
336 14 Dtool_flboDAOF 4 355 1571 0 14 Dtool_flboDAOF 0 3 4 this 3 1634  7 low_bit 1 1569  4 size 1 1569  
337 14 Dtool_flboU65s 4 356 1571 0 14 Dtool_flboU65s 0 3 4 this 3 1634  7 low_bit 1 1569  4 size 1 1569  
338 14 Dtool_flboDZHW 4 357 1571 0 14 Dtool_flboDZHW 0 4 4 this 3 1634  5 value 1 1587  7 low_bit 1 1569  4 size 1 1569  
339 14 Dtool_flboiD5O 6 358 1566 0 14 Dtool_flboiD5O 0 1 4 this 3 1635  
340 14 Dtool_flboERWc 4 359 1571 0 14 Dtool_flboERWc 0 2 4 this 3 1634  5 value 1 1566  
341 14 Dtool_flbob3be 6 360 1569 0 14 Dtool_flbob3be 0 1 4 this 3 1635  
342 14 Dtool_flboKHao 6 361 1569 0 14 Dtool_flboKHao 0 1 4 this 3 1635  
343 14 Dtool_flboRr4t 6 362 1569 0 14 Dtool_flboRr4t 0 1 4 this 3 1635  
344 14 Dtool_flboxYbh 6 363 1569 0 14 Dtool_flboxYbh 0 1 4 this 3 1635  
345 14 Dtool_flbo_tIX 6 364 1569 0 14 Dtool_flbo_tIX 0 1 4 this 3 1635  
346 14 Dtool_flboRLKI 6 365 1569 0 14 Dtool_flboRLKI 0 1 4 this 3 1635  
347 14 Dtool_flbogFMA 6 366 1569 0 14 Dtool_flbogFMA 0 2 4 this 3 1635  7 low_bit 1 1569  
348 14 Dtool_flboLld4 4 367 1571 0 14 Dtool_flboLld4 0 1 4 this 3 1634  
349 14 Dtool_flbojIgk 6 368 1587 0 14 Dtool_flbojIgk 0 2 4 this 3 1635  5 other 1 1635  
350 14 Dtool_flboYEpe 4 369 1571 0 14 Dtool_flboYEpe 0 1 4 this 3 1634  
351 14 Dtool_flbo3eSz 4 370 1571 0 14 Dtool_flbo3eSz 0 2 4 this 3 1635  3 out 1 1574  
352 14 Dtool_flboBOXy 4 371 1571 0 14 Dtool_flboBOXy 0 3 4 this 3 1635  3 out 1 1574  12 spaces_every 1 1569  
353 14 Dtool_flbo8596 4 371 1571 0 14 Dtool_flbo8596 0 2 4 this 3 1635  3 out 1 1574  
354 14 Dtool_flboHJUc 4 372 1571 0 14 Dtool_flboHJUc 0 3 4 this 3 1635  3 out 1 1574  12 spaces_every 1 1569  
355 14 Dtool_flbo6TeI 4 372 1571 0 14 Dtool_flbo6TeI 0 2 4 this 3 1635  3 out 1 1574  
356 14 Dtool_flboB_7k 4 373 1571 0 14 Dtool_flboB_7k 0 3 4 this 3 1635  3 out 1 1574  12 indent_level 1 1569  
357 14 Dtool_flboHvA7 4 373 1571 0 14 Dtool_flboHvA7 0 2 4 this 3 1635  3 out 1 1574  
358 14 Dtool_flbomOwJ 6 374 1587 0 14 Dtool_flbomOwJ 0 2 4 this 3 1635  5 other 1 1635  
359 14 Dtool_flbok_DB 6 375 1587 0 14 Dtool_flbok_DB 0 2 4 this 3 1635  5 other 1 1635  
360 14 Dtool_flboj58v 6 376 1587 0 14 Dtool_flboj58v 0 2 4 this 3 1635  5 other 1 1635  
361 14 Dtool_flbop_4v 6 377 1569 0 14 Dtool_flbop_4v 0 2 4 this 3 1635  5 other 1 1635  
362 14 Dtool_flbogBiE 7 378 1634 1082 14 Dtool_flbogBiE 0 2 4 this 3 1635  5 other 1 1635  
363 14 Dtool_flbom5Yo 7 379 1634 1082 14 Dtool_flbom5Yo 0 2 4 this 3 1635  5 other 1 1635  
364 14 Dtool_flbokh7V 7 380 1634 1082 14 Dtool_flbokh7V 0 2 4 this 3 1635  5 other 1 1635  
365 14 Dtool_flbo0pXy 7 381 1634 1082 14 Dtool_flbo0pXy 0 1 4 this 3 1635  
366 14 Dtool_flbo8uW_ 7 382 1634 1082 14 Dtool_flbo8uW_ 0 2 4 this 3 1635  5 shift 1 1569  
367 14 Dtool_flbo62jA 7 383 1634 1082 14 Dtool_flbo62jA 0 2 4 this 3 1635  5 shift 1 1569  
368 14 Dtool_flboRRDL 6 384 1634 0 14 Dtool_flboRRDL 0 2 4 this 3 1634  5 other 1 1635  
369 14 Dtool_flbofJ5u 6 385 1634 0 14 Dtool_flbofJ5u 0 2 4 this 3 1634  5 other 1 1635  
370 14 Dtool_flbodxcc 6 386 1634 0 14 Dtool_flbodxcc 0 2 4 this 3 1634  5 other 1 1635  
371 14 Dtool_flboP4Dt 6 387 1634 0 14 Dtool_flboP4Dt 0 2 4 this 3 1634  5 shift 1 1569  
372 14 Dtool_flboIwQv 6 388 1634 0 14 Dtool_flboIwQv 0 2 4 this 3 1634  5 shift 1 1569  
373 14 Dtool_flbo_AEu 4 389 1571 0 14 Dtool_flbo_AEu 0 1 4 this 3 1634  
374 14 Dtool_flboXFrF 4 390 1571 0 14 Dtool_flboXFrF 0 1 4 this 3 1634  
375 14 Dtool_flboYU4u 7 391 1634 1082 14 Dtool_flboYU4u 0 1 4 this 3 1635  
376 14 Dtool_flbo5nqX 7 392 1634 1082 14 Dtool_flbo5nqX 0 1 4 this 3 1635  
377 14 Dtool_flboWEPP 7 393 1634 1082 14 Dtool_flboWEPP 0 1 4 this 3 1635  
378 14 Dtool_flboHbN9 7 393 1634 1082 14 Dtool_flboHbN9 0 2 4 this 3 1635  5 other 1 1635  
379 14 Dtool_flboDpyT 7 393 1634 1082 14 Dtool_flboDpyT 0 2 4 this 3 1635  5 index 1 1569  
380 14 Dtool_flboeUY6 7 394 1634 1082 14 Dtool_flboeUY6 0 1 4 this 3 1635  
381 14 Dtool_flboyau5 7 394 1634 1082 14 Dtool_flboyau5 0 2 4 this 3 1635  5 other 1 1635  
382 14 Dtool_flboiRhU 7 394 1634 1082 14 Dtool_flboiRhU 0 2 4 this 3 1635  5 index 1 1569  
383 14 Dtool_flboGYJg 6 395 1569 0 14 Dtool_flboGYJg 0 1 4 this 3 1635  
384 14 Dtool_flboq17v 7 396 1589 0 14 Dtool_flboq17v 0 0 
385 14 Dtool_flboU9bE 7 398 1637 1145 14 Dtool_flboU9bE 0 0 
386 14 Dtool_flbo5ezH 7 398 1637 1145 14 Dtool_flbo5ezH 0 1 4 copy 1 1638  
387 14 Dtool_flboTcCB 7 398 1637 1145 14 Dtool_flboTcCB 0 1 10 init_value 1 1640  
388 14 Dtool_flbo62Cv 6 399 1637 0 14 Dtool_flbo62Cv 0 2 4 this 3 1637  4 copy 1 1638  
389 14 Dtool_flbo6XLs 7 400 1637 1145 14 Dtool_flbo6XLs 0 0 
390 14 Dtool_flboj7E0 7 401 1637 1145 14 Dtool_flboj7E0 0 0 
391 14 Dtool_flboRJ3I 7 402 1637 1145 14 Dtool_flboRJ3I 0 1 7 on_bits 1 1569  
392 14 Dtool_flbofjxv 7 403 1637 1145 14 Dtool_flbofjxv 0 1 5 index 1 1569  
393 14 Dtool_flbo6MsD 7 404 1637 1145 14 Dtool_flbo6MsD 0 2 7 low_bit 1 1569  4 size 1 1569  
394 14 Dtool_flbo3EZO 6 406 1587 0 14 Dtool_flbo3EZO 0 0 
395 14 Dtool_flboDK5H 6 407 1569 0 14 Dtool_flboDK5H 0 0 
396 14 Dtool_flbogs2D 6 408 1569 0 14 Dtool_flbogs2D 0 0 
397 14 Dtool_flboC4y6 6 409 1587 0 14 Dtool_flboC4y6 0 2 4 this 3 1638  5 index 1 1569  
398 14 Dtool_flboZ9qJ 4 410 1571 0 14 Dtool_flboZ9qJ 0 2 4 this 3 1637  5 index 1 1569  
399 14 Dtool_flboPD_7 4 411 1571 0 14 Dtool_flboPD_7 0 2 4 this 3 1637  5 index 1 1569  
400 14 Dtool_flboeONW 4 412 1571 0 14 Dtool_flboeONW 0 3 4 this 3 1637  5 index 1 1569  5 value 1 1587  
401 14 Dtool_flbo88_Z 6 413 1587 0 14 Dtool_flbo88_Z 0 1 4 this 3 1638  
402 14 Dtool_flboS_1K 6 414 1587 0 14 Dtool_flboS_1K 0 1 4 this 3 1638  
403 14 Dtool_flboDBje 6 415 1640 0 14 Dtool_flboDBje 0 3 4 this 3 1638  7 low_bit 1 1569  4 size 1 1569  
404 14 Dtool_flbou4q5 4 416 1571 0 14 Dtool_flbou4q5 0 4 4 this 3 1637  5 value 1 1640  7 low_bit 1 1569  4 size 1 1569  
405 14 Dtool_flbodWSm 6 417 1587 0 14 Dtool_flbodWSm 0 3 4 this 3 1638  7 low_bit 1 1569  4 size 1 1569  
406 14 Dtool_flbo9utt 6 418 1587 0 14 Dtool_flbo9utt 0 3 4 this 3 1638  7 low_bit 1 1569  4 size 1 1569  
407 14 Dtool_flbo1U5K 4 419 1571 0 14 Dtool_flbo1U5K 0 3 4 this 3 1637  7 low_bit 1 1569  4 size 1 1569  
408 14 Dtool_flbobjY5 4 420 1571 0 14 Dtool_flbobjY5 0 3 4 this 3 1637  7 low_bit 1 1569  4 size 1 1569  
409 14 Dtool_flbogM5H 4 421 1571 0 14 Dtool_flbogM5H 0 4 4 this 3 1637  5 value 1 1587  7 low_bit 1 1569  4 size 1 1569  
410 14 Dtool_flbo8DhL 6 422 1640 0 14 Dtool_flbo8DhL 0 1 4 this 3 1638  
411 14 Dtool_flboqVn_ 4 423 1571 0 14 Dtool_flboqVn_ 0 2 4 this 3 1637  5 value 1 1640  
412 14 Dtool_flbo4Wds 6 424 1569 0 14 Dtool_flbo4Wds 0 1 4 this 3 1638  
413 14 Dtool_flbojQFl 6 425 1569 0 14 Dtool_flbojQFl 0 1 4 this 3 1638  
414 14 Dtool_flboe7aR 6 426 1569 0 14 Dtool_flboe7aR 0 1 4 this 3 1638  
415 14 Dtool_flboCwok 6 427 1569 0 14 Dtool_flboCwok 0 1 4 this 3 1638  
416 14 Dtool_flboBx_b 6 428 1569 0 14 Dtool_flboBx_b 0 1 4 this 3 1638  
417 14 Dtool_flboT2DD 6 429 1569 0 14 Dtool_flboT2DD 0 1 4 this 3 1638  
418 14 Dtool_flboF8hO 6 430 1569 0 14 Dtool_flboF8hO 0 2 4 this 3 1638  7 low_bit 1 1569  
419 14 Dtool_flboZ9Iu 4 431 1571 0 14 Dtool_flboZ9Iu 0 1 4 this 3 1637  
420 14 Dtool_flboSAaD 6 432 1587 0 14 Dtool_flboSAaD 0 2 4 this 3 1638  5 other 1 1638  
421 14 Dtool_flbooQig 4 433 1571 0 14 Dtool_flbooQig 0 1 4 this 3 1637  
422 14 Dtool_flboT6y9 4 434 1571 0 14 Dtool_flboT6y9 0 2 4 this 3 1638  3 out 1 1574  
423 14 Dtool_flboEmrZ 4 435 1571 0 14 Dtool_flboEmrZ 0 3 4 this 3 1638  3 out 1 1574  12 spaces_every 1 1569  
424 14 Dtool_flbo8bPK 4 435 1571 0 14 Dtool_flbo8bPK 0 2 4 this 3 1638  3 out 1 1574  
425 14 Dtool_flbo9ET8 4 436 1571 0 14 Dtool_flbo9ET8 0 3 4 this 3 1638  3 out 1 1574  12 spaces_every 1 1569  
426 14 Dtool_flboFAEP 4 436 1571 0 14 Dtool_flboFAEP 0 2 4 this 3 1638  3 out 1 1574  
427 14 Dtool_flboZH30 4 437 1571 0 14 Dtool_flboZH30 0 3 4 this 3 1638  3 out 1 1574  12 indent_level 1 1569  
428 14 Dtool_flboG1R_ 4 437 1571 0 14 Dtool_flboG1R_ 0 2 4 this 3 1638  3 out 1 1574  
429 14 Dtool_flboHeST 6 438 1587 0 14 Dtool_flboHeST 0 2 4 this 3 1638  5 other 1 1638  
430 14 Dtool_flboHPvK 6 439 1587 0 14 Dtool_flboHPvK 0 2 4 this 3 1638  5 other 1 1638  
431 14 Dtool_flboVunG 6 440 1587 0 14 Dtool_flboVunG 0 2 4 this 3 1638  5 other 1 1638  
432 14 Dtool_flboSDp_ 6 441 1569 0 14 Dtool_flboSDp_ 0 2 4 this 3 1638  5 other 1 1638  
433 14 Dtool_flbo2H5_ 7 442 1637 1145 14 Dtool_flbo2H5_ 0 2 4 this 3 1638  5 other 1 1638  
434 14 Dtool_flboV_Ja 7 443 1637 1145 14 Dtool_flboV_Ja 0 2 4 this 3 1638  5 other 1 1638  
435 14 Dtool_flbo1p_Q 7 444 1637 1145 14 Dtool_flbo1p_Q 0 2 4 this 3 1638  5 other 1 1638  
436 14 Dtool_flboYbux 7 445 1637 1145 14 Dtool_flboYbux 0 1 4 this 3 1638  
437 14 Dtool_flbojLeS 7 446 1637 1145 14 Dtool_flbojLeS 0 2 4 this 3 1638  5 shift 1 1569  
438 14 Dtool_flboD4nm 7 447 1637 1145 14 Dtool_flboD4nm 0 2 4 this 3 1638  5 shift 1 1569  
439 14 Dtool_flboywOP 6 448 1637 0 14 Dtool_flboywOP 0 2 4 this 3 1637  5 other 1 1638  
440 14 Dtool_flboSGep 6 449 1637 0 14 Dtool_flboSGep 0 2 4 this 3 1637  5 other 1 1638  
441 14 Dtool_flboySUg 6 450 1637 0 14 Dtool_flboySUg 0 2 4 this 3 1637  5 other 1 1638  
442 14 Dtool_flboDSbd 6 451 1637 0 14 Dtool_flboDSbd 0 2 4 this 3 1637  5 shift 1 1569  
443 14 Dtool_flbojHix 6 452 1637 0 14 Dtool_flbojHix 0 2 4 this 3 1637  5 shift 1 1569  
444 14 Dtool_flboojcd 4 453 1571 0 14 Dtool_flboojcd 0 1 4 this 3 1637  
445 14 Dtool_flbotB6e 4 454 1571 0 14 Dtool_flbotB6e 0 1 4 this 3 1637  
446 14 Dtool_flbooufB 7 455 1637 1145 14 Dtool_flbooufB 0 1 4 this 3 1638  
447 14 Dtool_flbo4rCk 7 456 1637 1145 14 Dtool_flbo4rCk 0 1 4 this 3 1638  
448 14 Dtool_flboXbfv 7 457 1637 1145 14 Dtool_flboXbfv 0 1 4 this 3 1638  
449 14 Dtool_flbool__ 7 457 1637 1145 14 Dtool_flbool__ 0 2 4 this 3 1638  5 other 1 1638  
450 14 Dtool_flbo_Axj 7 457 1637 1145 14 Dtool_flbo_Axj 0 2 4 this 3 1638  5 index 1 1569  
451 14 Dtool_flbo_rNa 7 458 1637 1145 14 Dtool_flbo_rNa 0 1 4 this 3 1638  
452 14 Dtool_flboumm_ 7 458 1637 1145 14 Dtool_flboumm_ 0 2 4 this 3 1638  5 other 1 1638  
453 14 Dtool_flboTV1H 7 458 1637 1145 14 Dtool_flboTV1H 0 2 4 this 3 1638  5 index 1 1569  
454 14 Dtool_flbohnlk 6 459 1569 0 14 Dtool_flbohnlk 0 1 4 this 3 1638  
455 14 Dtool_flboOQlp 7 460 1589 0 14 Dtool_flboOQlp 0 0 
456 14 Dtool_flboGMUp 7 462 1641 1208 14 Dtool_flboGMUp 704 // Filename: bitArray.I
// Created by:  drose (20Jan06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
457 14 Dtool_flbobrvy 7 462 1641 1208 14 Dtool_flbobrvy 225 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1642  
458 14 Dtool_flboShJd 7 462 1641 1208 14 Dtool_flboShJd 239 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Constructor (from SparseArray)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 from 1 1644  
459 14 Dtool_flboQUAC 7 462 1641 1208 14 Dtool_flboQUAC 0 1 10 init_value 1 1566  
460 14 Dtool_flboe8C3 6 463 1641 0 14 Dtool_flboe8C3 233 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1641  4 copy 1 1642  
461 14 Dtool_flbobBX6 7 464 1641 1208 14 Dtool_flbobBX6 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray with an infinite array of bits,
//               all on.
//////////////////////////////////////////////////////////////////// 0 
462 14 Dtool_flboGQnq 7 465 1641 1208 14 Dtool_flboGQnq 284 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
463 14 Dtool_flboK3PH 7 466 1641 1208 14 Dtool_flboK3PH 295 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose lower on_bits bits are on.
//////////////////////////////////////////////////////////////////// 1 7 on_bits 1 1569  
464 14 Dtool_flboX0f2 7 467 1641 1208 14 Dtool_flboX0f2 289 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a BitArray with only the indicated bit on.
//////////////////////////////////////////////////////////////////// 1 5 index 1 1569  
465 14 Dtool_flboPjFX 7 468 1641 1208 14 Dtool_flboPjFX 323 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a BitArray whose size bits, beginning at
//               low_bit, are on.
//////////////////////////////////////////////////////////////////// 2 7 low_bit 1 1569  4 size 1 1569  
466 14 Dtool_flboDxaB 6 470 1587 0 14 Dtool_flboDxaB 714 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The BitArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               BitArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
467 14 Dtool_flbo_yNZ 6 471 1569 0 14 Dtool_flbo_yNZ 749 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               BitArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or BitArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
468 14 Dtool_flboSGW6 6 472 1569 0 14 Dtool_flboSGW6 476 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits_per_word
//       Access: Published, Static
//  Description: Returns the number of bits stored per word
//               internally.  This is of interest only in that it
//               limits the maximum number of bits that may be queried
//               or set at once by extract() and store().
//////////////////////////////////////////////////////////////////// 0 
469 14 Dtool_flbolwdi 6 473 1569 0 14 Dtool_flbolwdi 604 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
470 14 Dtool_flboLvz8 6 474 1587 0 14 Dtool_flboLvz8 442 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 index 1 1569  
471 14 Dtool_flborNRV 4 475 1571 0 14 Dtool_flborNRV 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1641  5 index 1 1569  
472 14 Dtool_flbo541k 4 476 1571 0 14 Dtool_flbo541k 320 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1641  5 index 1 1569  
473 14 Dtool_flboQgnd 4 477 1571 0 14 Dtool_flboQgnd 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1641  5 index 1 1569  5 value 1 1587  
474 14 Dtool_flboHjU1 6 478 1587 0 14 Dtool_flboHjU1 364 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
475 14 Dtool_flboT0xX 6 479 1587 0 14 Dtool_flboT0xX 294 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
476 14 Dtool_flbor4Sd 6 480 1587 0 14 Dtool_flbor4Sd 295 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
477 14 Dtool_flboPS63 6 481 1566 0 14 Dtool_flboPS63 438 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::extract
//       Access: Published
//  Description: Returns a word that represents only the indicated
//               range of bits within this BitArray, shifted to the
//               least-significant position.  size must be <=
//               get_num_bits_per_word().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1642  7 low_bit 1 1569  4 size 1 1569  
478 14 Dtool_flboAQuf 4 482 1571 0 14 Dtool_flboAQuf 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::store
//       Access: Published
//  Description: Stores the indicated word into the indicated range of
//               bits with this BitArray.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1641  5 value 1 1566  7 low_bit 1 1569  4 size 1 1569  
479 14 Dtool_flboBUJy 6 483 1587 0 14 Dtool_flboBUJy 308 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1642  7 low_bit 1 1569  4 size 1 1569  
480 14 Dtool_flboybWy 6 484 1587 0 14 Dtool_flboybWy 310 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1642  7 low_bit 1 1569  4 size 1 1569  
481 14 Dtool_flbov8Tr 4 485 1571 0 14 Dtool_flbov8Tr 255 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1641  7 low_bit 1 1569  4 size 1 1569  
482 14 Dtool_flbofuvM 4 486 1571 0 14 Dtool_flbofuvM 258 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1641  7 low_bit 1 1569  4 size 1 1569  
483 14 Dtool_flboAEMB 4 487 1571 0 14 Dtool_flboAEMB 275 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1641  5 value 1 1587  7 low_bit 1 1569  4 size 1 1569  
484 14 Dtool_flboO1Ve 6 488 1569 0 14 Dtool_flboO1Ve 372 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
485 14 Dtool_flbosqGY 6 489 1569 0 14 Dtool_flbosqGY 373 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
486 14 Dtool_flbobpfv 6 490 1569 0 14 Dtool_flbobpfv 330 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
487 14 Dtool_flboiKFY 6 491 1569 0 14 Dtool_flboiKFY 331 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
488 14 Dtool_flbostzx 6 492 1569 0 14 Dtool_flbostzx 390 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
489 14 Dtool_flboEmCF 6 493 1569 0 14 Dtool_flboEmCF 391 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
490 14 Dtool_flbo_eW1 6 494 1569 0 14 Dtool_flbo_eW1 591 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  7 low_bit 1 1569  
491 14 Dtool_flboVjn8 6 495 1569 0 14 Dtool_flboVjn8 304 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_num_words
//       Access: Published
//  Description: Returns the number of possibly-unique words stored in
//               the array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
492 14 Dtool_flbo85dk 7 496 1634 1082 14 Dtool_flbo85dk 410 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::get_word
//       Access: Published
//  Description: Returns the nth word in the array.  It is valid for n
//               to be greater than get_num_words(), but the return
//               value beyond get_num_words() will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  1 n 1 1569  
493 14 Dtool_flboPLIH 4 497 1571 0 14 Dtool_flboPLIH 351 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::set_word
//       Access: Published
//  Description: Replaces the nth word in the array.  If n >=
//               get_num_words(), this automatically extends the
//               array.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1641  1 n 1 1569  5 value 1 1634  
494 14 Dtool_flbohGZ4 4 498 1571 0 14 Dtool_flbohGZ4 318 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the BitArray.  This is
//               equivalent to array = ~array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1641  
495 14 Dtool_flboseqE 6 499 1587 0 14 Dtool_flboseqE 440 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this BitArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 other 1 1642  
496 14 Dtool_flboKXAk 4 500 1571 0 14 Dtool_flboKXAk 253 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::clear
//       Access: Published
//  Description: Sets all the bits in the BitArray off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1641  
497 14 Dtool_flbogv5a 4 501 1571 0 14 Dtool_flbogv5a 443 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output
//       Access: Published
//  Description: Writes the BitArray out as a hex number.  For a
//               BitArray, this is always the same as output_hex();
//               it's too confusing for the output format to change
//               back and forth at runtime.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  3 out 1 1574  
498 14 Dtool_flbok9tp 4 502 1571 0 14 Dtool_flbok9tp 312 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1642  3 out 1 1574  12 spaces_every 1 1569  
499 14 Dtool_flboLRPz 4 502 1571 0 14 Dtool_flboLRPz 312 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_binary
//       Access: Published
//  Description: Writes the BitArray out as a binary number, with
//               spaces every four bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  3 out 1 1574  
500 14 Dtool_flboMpy4 4 503 1571 0 14 Dtool_flboMpy4 316 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1642  3 out 1 1574  12 spaces_every 1 1569  
501 14 Dtool_flboxwaB 4 503 1571 0 14 Dtool_flboxwaB 316 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::output_hex
//       Access: Published
//  Description: Writes the BitArray out as a hexadecimal number, with
//               spaces every four digits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  3 out 1 1574  
502 14 Dtool_flboWflc 4 504 1571 0 14 Dtool_flboWflc 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1642  3 out 1 1574  12 indent_level 1 1569  
503 14 Dtool_flboVe5g 4 504 1571 0 14 Dtool_flboVe5g 317 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::write
//       Access: Published
//  Description: Writes the BitArray out as a binary or a hex number,
//               according to the number of bits.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  3 out 1 1574  
504 14 Dtool_flbo5zlA 6 505 1587 0 14 Dtool_flbo5zlA 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 other 1 1642  
505 14 Dtool_flbobpSA 6 506 1587 0 14 Dtool_flbobpSA 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 other 1 1642  
506 14 Dtool_flbobO7u 6 507 1587 0 14 Dtool_flbobO7u 381 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this BitArray is less than that of the
//               other one, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 other 1 1642  
507 14 Dtool_flbozJr4 6 508 1569 0 14 Dtool_flbozJr4 487 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this BitArray sorts
//               before the indicated other BitArray, greater than zero
//               if it sorts after, or 0 if they are equivalent.  This
//               is based on the same ordering defined by operator <.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 other 1 1642  
508 14 Dtool_flbooqtu 7 509 1641 1208 14 Dtool_flbooqtu 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 other 1 1642  
509 14 Dtool_flbo7Jiv 7 510 1641 1208 14 Dtool_flbo7Jiv 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 other 1 1642  
510 14 Dtool_flbok9Pv 7 511 1641 1208 14 Dtool_flbok9Pv 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 other 1 1642  
511 14 Dtool_flboD0gS 7 512 1641 1208 14 Dtool_flboD0gS 219 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ~
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1642  
512 14 Dtool_flbophhp 7 513 1641 1208 14 Dtool_flbophhp 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 shift 1 1569  
513 14 Dtool_flbowzJq 7 514 1641 1208 14 Dtool_flbowzJq 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1642  5 shift 1 1569  
514 14 Dtool_flbovQVj 6 515 1641 0 14 Dtool_flbovQVj 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator &=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1641  5 other 1 1642  
515 14 Dtool_flbo6_Jk 6 516 1641 0 14 Dtool_flbo6_Jk 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator |=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1641  5 other 1 1642  
516 14 Dtool_flbojr3j 6 517 1641 0 14 Dtool_flbojr3j 220 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator ^=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1641  5 other 1 1642  
517 14 Dtool_flbo9z5r 6 518 1641 0 14 Dtool_flbo9z5r 399 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  The rightmost bits are filled in
//               with zeroes.  Since this is an infinite bit array,
//               none of the bits on the left are lost.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1641  5 shift 1 1569  
518 14 Dtool_flboUhhs 6 519 1641 0 14 Dtool_flboUhhs 449 ////////////////////////////////////////////////////////////////////
//     Function: BitArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits are lost.
//               Since this is an infinite bit array, there is no
//               question of sign extension; there is no need to
//               synthesize bits on the left.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1641  5 shift 1 1569  
519 14 Dtool_flbo1IRw 7 520 1589 0 14 Dtool_flbo1IRw 0 0 
520 14 Dtool_flbo40bO 7 522 1646 1270 14 Dtool_flbo40bO 1027 // Filename: buttonHandle.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
//////////////////////////////////////////////////////////////////// 0 
521 14 Dtool_flbo53AF 7 522 1646 1270 14 Dtool_flbo53AF 399 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::Constructor
//       Access: Published
//  Description: Constructs a ButtonHandle with the corresponding
//               index number, which may have been returned by an
//               earlier call to ButtonHandle::get_index().
//////////////////////////////////////////////////////////////////// 1 5 index 1 1569  
522 14 Dtool_flbooq06 6 523 1568 0 14 Dtool_flbooq06 250 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_name
//       Access: Public
//  Description: Returns the name of the button.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1647  
523 14 Dtool_flbo2_MD 6 524 1587 0 14 Dtool_flbo2_MD 375 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::has_ascii_equivalent
//       Access: Published
//  Description: Returns true if the button was created with an ASCII
//               equivalent code (e.g. for a standard keyboard
//               button).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1647  
524 14 Dtool_flbovhsY 6 525 1649 0 14 Dtool_flbovhsY 346 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_ascii_equivalent
//       Access: Published
//  Description: Returns the character code associated with the
//               button, or '\0' if no ASCII code was associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1647  
525 14 Dtool_flboTr0x 7 526 1646 1270 14 Dtool_flboTr0x 692 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_alias
//       Access: Published
//  Description: Returns the alias (alternate name) associated with
//               the button, if any, or ButtonHandle::none() if the
//               button has no alias.
//
//               Each button is allowed to have one alias, and
//               multiple different buttons can refer to the same
//               alias.  The alias should be the more general name for
//               the button, for instance, shift is an alias for
//               lshift, but not vice-versa.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1647  
526 14 Dtool_flbopu5Z 6 527 1587 0 14 Dtool_flbopu5Z 532 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::matches
//       Access: Published
//  Description: Returns true if this ButtonHandle is the same as the
//               other one, or if the other one is an alias for this
//               one.  (Does not return true if this button is an
//               alias for the other one, however.)
//
//               This is a more general comparison than operator ==.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1647  5 other 1 1647  
527 14 Dtool_flboiajp 6 528 1569 0 14 Dtool_flboiajp 664 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               ButtonHandle. Each different ButtonHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               ButtonHandles as opaque classes.  This is provided
//               for the convenience of non-C++ scripting languages to
//               build a hashtable of ButtonHandles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1647  
528 14 Dtool_flbo6vL2 4 529 1571 0 14 Dtool_flbo6vL2 220 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1647  3 out 1 1574  
529 14 Dtool_flboXMlV 7 530 1646 1270 14 Dtool_flboXMlV 321 ////////////////////////////////////////////////////////////////////
//     Function: ButtonHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued ButtonHandle that is
//               used to indicate no button.
//////////////////////////////////////////////////////////////////// 0 
530 14 Dtool_flbomThD 7 531 1589 0 14 Dtool_flbomThD 0 0 
531 14 Dtool_flboKZsi 7 534 1646 1270 14 Dtool_flboKZsi 396 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::get_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated name.  If there is no such ButtonHandle,
//               registers a new one and returns it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1650  4 name 1 1568  
532 14 Dtool_flbouc8u 7 535 1646 1270 14 Dtool_flbouc8u 419 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::find_ascii_button
//       Access: Published
//  Description: Finds a ButtonHandle in the registry matching the
//               indicated ASCII equivalent character.  If there is no
//               such ButtonHandle, returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1651  16 ascii_equivalent 1 1649  
533 14 Dtool_flbo_iXj 4 536 1571 0 14 Dtool_flbo_iXj 220 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1651  3 out 1 1574  
534 14 Dtool_flbodgyc 6 537 1650 0 14 Dtool_flbodgyc 300 ////////////////////////////////////////////////////////////////////
//     Function: ButtonRegistry::ptr
//       Access: Published, Static
//  Description: Returns the pointer to the global ButtonRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
535 14 Dtool_flboNGJJ 4 541 1571 0 14 Dtool_flboNGJJ 230 ////////////////////////////////////////////////////////////////////
//     Function: CallbackObject::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1653  3 out 1 1574  
536 14 Dtool_flbotUug 7 542 1589 0 14 Dtool_flbotUug 0 0 
537 14 Dtool_flbo3cWf 6 545 1569 0 14 Dtool_flbo3cWf 290 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::get_cache_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1655  
538 14 Dtool_flboEGtE 4 546 1571 0 14 Dtool_flboEGtE 355 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_ref
//       Access: Published
//  Description: Explicitly increments the cache reference count and
//               the normal reference count simultaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1655  
539 14 Dtool_flboC2Hz 6 547 1587 0 14 Dtool_flboC2Hz 479 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::cache_unref
//       Access: Published
//  Description: Explicitly decrements the cache reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1655  
540 14 Dtool_flbobkjU 6 548 1587 0 14 Dtool_flbobkjU 359 ////////////////////////////////////////////////////////////////////
//     Function: CachedTypedWritableReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1655  
541 14 Dtool_flboXAeA 7 549 1589 0 14 Dtool_flboXAeA 0 0 
542 14 Dtool_flboykHH 4 551 1571 0 14 Dtool_flboykHH 228 ////////////////////////////////////////////////////////////////////
//     Function: CallbackData::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1657  3 out 1 1574  
543 14 Dtool_flboJxUp 4 552 1571 0 14 Dtool_flboJxUp 408 ////////////////////////////////////////////////////////////////////
//     Function: CallbackData::upcall
//       Access: Published, Virtual
//  Description: You should make this call during the callback if you
//               want to continue the normal function that would have
//               been done in the absence of a callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1659  
544 14 Dtool_flbofdeU 7 553 1589 0 14 Dtool_flbofdeU 0 0 
545 14 Dtool_flboZzSC 7 556 1660 1291 14 Dtool_flboZzSC 218 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::contructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
546 14 Dtool_flbo2ZxR 6 557 1663 0 14 Dtool_flbo2ZxR 215 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_sec
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1661  
547 14 Dtool_flboalc7 6 558 1663 0 14 Dtool_flboalc7 216 ////////////////////////////////////////////////////////////////////
//     Function: TimeVal::get_usec
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1661  
548 14 Dtool_flbowP2R 7 563 1664 0 14 Dtool_flbowP2R 223 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
549 14 Dtool_flbosf6_ 4 564 1571 0 14 Dtool_flbosf6_ 2596 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_mode
//       Access: Published
//  Description: Changes the mode of the clock.  Normally, the clock
//               is in mode M_normal. In this mode, each call to
//               tick() will set the value returned by
//               get_frame_time() to the current real time; thus, the
//               clock simply reports time advancing.
//
//               Other possible modes:
//
//               M_non_real_time - the clock ignores real time
//               completely; at each call to tick(), it pretends that
//               exactly dt seconds have elapsed since the last call
//               to tick().  You may set the value of dt with
//               set_dt() or set_frame_rate().
//
//               M_limited - the clock will run as fast as it can, as
//               in M_normal, but will not run faster than the rate
//               specified by set_frame_rate().  If the application
//               would run faster than this rate, the clock will slow
//               down the application.
//
//               M_integer - the clock will run as fast as it can, but
//               the rate will be constrained to be an integer
//               multiple or divisor of the rate specified by
//               set_frame_rate().  The clock will slow down the
//               application a bit to guarantee this.
//
//               M_integer_limited - a combination of M_limited and
//               M_integer; the clock will not run faster than
//               set_frame_rate(), and if it runs slower, it will run
//               at a integer divisor of that rate.
//
//               M_forced - the clock forces the application to run at
//               the rate specified by set_frame_rate().  If the
//               application would run faster than this rate, the
//               clock will slow down the application; if the
//               application would run slower than this rate, the
//               clock slows down time so that the application
//               believes it is running at the given rate.
//
//               M_degrade - the clock runs at real time, but the
//               application is slowed down by a set factor of its
//               frame rate, specified by set_degrade_factor().
//
//               M_slave - the clock does not advance, but relies on
//               the user to call set_frame_time() and/or
//               set_frame_count() each frame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  4 mode 1 1547  
550 14 Dtool_flboC0lD 6 565 1547 0 14 Dtool_flboC0lD 293 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_mode
//       Access: Published
//  Description: Returns the current mode of the clock.  See
//               set_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
551 14 Dtool_flboIvyW 6 566 1567 0 14 Dtool_flboIvyW 656 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1665  14 current_thread 1 1667  
552 14 Dtool_flboQ13s 6 566 1567 0 14 Dtool_flboQ13s 656 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_time
//       Access: Published
//  Description: Returns the time in seconds as of the last time
//               tick() was called (typically, this will be as of the
//               start of the current frame).
//
//               This is generally the kind of time you want to ask
//               for in most rendering and animation contexts, since
//               it's important that all of the animation for a given
//               frame remains in sync with each other.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
553 14 Dtool_flbo94v7 6 567 1567 0 14 Dtool_flbo94v7 769 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_real_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.  This is useful for doing real timing
//               measurements, e.g. for performance statistics.
//
//               This returns the most precise timer we have for short
//               time intervals, but it may tend to drift over the
//               long haul.  If more accurate timekeeping is needed
//               over a long period of time, use get_long_time()
//               instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
554 14 Dtool_flbo8RD3 6 568 1567 0 14 Dtool_flbo8RD3 773 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_long_time
//       Access: Published
//  Description: Returns the actual number of seconds elapsed since
//               the ClockObject was created, or since it was last
//               reset.
//
//               This is similar to get_real_time(), except that it
//               uses the most accurate counter we have over a long
//               period of time, and so it is less likely to drift.
//               However, it may not be very precise for measuring
//               short intervals.  On Windows, for instace, this is
//               only accurate to within about 55 milliseconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
555 14 Dtool_flboVWd9 4 569 1571 0 14 Dtool_flboVWd9 299 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::reset
//       Access: Published
//  Description: Simultaneously resets both the time and the frame
//               count to zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1664  
556 14 Dtool_flbox4ev 4 570 1571 0 14 Dtool_flbox4ev 607 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_real_time
//       Access: Published
//  Description: Resets the clock to the indicated time.  This
//               changes only the real time of the clock as reported
//               by get_real_time(), but does not immediately change
//               the time reported by get_frame_time()--that will
//               change after the next call to tick().  Also see
//               reset(), set_frame_time(), and set_frame_count().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  4 time 1 1567  
557 14 Dtool_flboJ8vm 4 571 1571 0 14 Dtool_flboJ8vm 477 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1664  4 time 1 1567  14 current_thread 1 1667  
558 14 Dtool_flbo2d9O 4 571 1571 0 14 Dtool_flbo2d9O 477 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_time
//       Access: Published
//  Description: Changes the time as reported for the current frame to
//               the indicated time.  Normally, the way to adjust the
//               frame time is via tick(); this function is provided
//               only for occasional special adjustments.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  4 time 1 1567  
559 14 Dtool_flboT6Z9 4 572 1571 0 14 Dtool_flboT6Z9 380 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1664  11 frame_count 1 1569  14 current_thread 1 1667  
560 14 Dtool_flboc2uN 4 572 1571 0 14 Dtool_flboc2uN 380 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_count
//       Access: Published
//  Description: Resets the number of frames counted to the indicated
//               number.  Also see reset(), set_real_time(), and
//               set_frame_time().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  11 frame_count 1 1569  
561 14 Dtool_flbo7u4X 6 573 1569 0 14 Dtool_flbo7u4X 457 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1665  14 current_thread 1 1667  
562 14 Dtool_flbomz0Y 6 573 1569 0 14 Dtool_flbomz0Y 457 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_frame_count
//       Access: Published
//  Description: Returns the number of times tick() has been called
//               since the ClockObject was created, or since it was
//               last reset.  This is generally the number of frames
//               that have been rendered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
563 14 Dtool_flbohgnR 6 574 1567 0 14 Dtool_flbohgnR 523 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1665  14 current_thread 1 1667  
564 14 Dtool_flboiXAn 6 574 1567 0 14 Dtool_flboiXAn 523 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_net_frame_rate
//       Access: Published
//  Description: Returns the average frame rate since the last reset.
//               This is simply the total number of frames divided by
//               the total elapsed time.  This reports the virtual
//               frame rate if the clock is in (or has been in)
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
565 14 Dtool_flboNolu 6 575 1567 0 14 Dtool_flboNolu 369 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1665  14 current_thread 1 1667  
566 14 Dtool_flbosvG2 6 575 1567 0 14 Dtool_flbosvG2 369 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_dt
//       Access: Published
//  Description: Returns the elapsed time for the previous frame: the
//               number of seconds elapsed between the last two calls
//               to tick().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
567 14 Dtool_flboMQK2 4 576 1571 0 14 Dtool_flboMQK2 575 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_dt
//       Access: Published
//  Description: In non-real-time mode, sets the number of seconds
//               that should appear to elapse between frames.  In
//               forced mode or limited mode, sets our target dt.  In
//               normal mode, this has no effect.  
//
//               Also see set_frame_rate(), which is a different way
//               to specify the same quantity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  2 dt 1 1567  
568 14 Dtool_flbo3_E3 4 577 1571 0 14 Dtool_flbo3_E3 583 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_frame_rate
//       Access: Published
//  Description: In non-real-time mode, sets the number of frames per
//               second that we should appear to be running.  In forced
//               mode or limited mode, sets our target frame rate.  In
//               normal mode, this has no effect.
//
//               Also see set_dt(), which is a different way to
//               specify the same quantity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  10 frame_rate 1 1567  
569 14 Dtool_flboa66A 6 578 1567 0 14 Dtool_flboa66A 333 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_dt
//       Access: Published
//  Description: Returns the current maximum allowable time elapsed
//               between any two frames.  See set_max_dt().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
570 14 Dtool_flbo_bSs 4 579 1571 0 14 Dtool_flbo_bSs 872 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_max_dt
//       Access: Published
//  Description: Sets a limit on the value returned by get_dt().  If
//               this value is less than zero, no limit is imposed;
//               otherwise, this is the maximum value that will ever
//               be returned by get_dt(), regardless of how much time
//               has actually elapsed between frames.
//
//               This limit is only imposed in real-time mode; in
//               non-real-time mode, the dt is fixed anyway and max_dt
//               is ignored.
//
//               This is generally used to guarantee reasonable
//               behavior even in the presence of a very slow or
//               chuggy frame rame.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  6 max_dt 1 1567  
571 14 Dtool_flboYmhR 6 580 1567 0 14 Dtool_flboYmhR 544 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_degrade_factor
//       Access: Published
//  Description: In degrade mode, returns the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
572 14 Dtool_flboTHAP 4 581 1571 0 14 Dtool_flboTHAP 541 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_degrade_factor
//       Access: Published
//  Description: In degrade mode, sets the ratio by which the
//               performance is degraded.  A value of 2.0 causes the
//               clock to be slowed down by a factor of two (reducing
//               performance to 1/2 what would be otherwise).
//
//               This has no effect if mode is not M_degrade.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  14 degrade_factor 1 1567  
573 14 Dtool_flboh4_P 4 582 1571 0 14 Dtool_flboh4_P 729 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::set_average_frame_rate_interval
//       Access: Published
//  Description: Specifies the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of
//               frames per second to compute the frame rate.
//               Changing this does not necessarily immediately change
//               the result of get_average_frame_rate(), until this
//               interval of time has elapsed again.
//
//               Setting this to zero disables the computation of
//               get_average_frame_rate().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  4 time 1 1567  
574 14 Dtool_flbo1N1j 6 583 1567 0 14 Dtool_flbo1N1j 423 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate_interval
//       Access: Published
//  Description: Returns the interval of time (in seconds) over
//               which get_average_frame_rate() averages the number of frames
//               per second to compute the frame rate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
575 14 Dtool_flbo7sfw 6 584 1567 0 14 Dtool_flbo7sfw 500 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1665  14 current_thread 1 1667  
576 14 Dtool_flboBu1t 6 584 1567 0 14 Dtool_flboBu1t 500 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_average_frame_rate
//       Access: Published
//  Description: Returns the average frame rate in number of frames
//               per second over the last
//               get_average_frame_rate_interval() seconds.  This
//               measures the virtual frame rate if the clock is in
//               M_non_real_time mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
577 14 Dtool_flboHcI3 6 585 1567 0 14 Dtool_flboHcI3 343 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1665  14 current_thread 1 1667  
578 14 Dtool_flbo55e0 6 585 1567 0 14 Dtool_flbo55e0 343 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_max_frame_duration
//       Access: Published
//  Description: Returns the maximum frame duration over the last
//               get_average_frame_rate_interval() seconds.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
579 14 Dtool_flbot0YZ 6 586 1567 0 14 Dtool_flbot0YZ 915 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1665  14 current_thread 1 1667  
580 14 Dtool_flboELKd 6 586 1567 0 14 Dtool_flboELKd 915 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::calc_frame_time_deviation
//       Access: Published
//  Description: Returns the standard deviation of the frame times of
//               the frames rendered over the past
//               get_average_frame_rate_interval() seconds.  This
//               number gives an estimate of the chugginess of the
//               frame rate; if it is large, there is a large
//               variation in the frame rate; if is small, all of the
//               frames are consistent in length.
//
//               A large value might also represent just a recent
//               change in frame rate, for instance, because the
//               camera has just rotated from looking at a simple
//               scene to looking at a more complex scene.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1665  
581 14 Dtool_flboo_ml 4 587 1571 0 14 Dtool_flboo_ml 566 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  14 current_thread 1 1667  
582 14 Dtool_flbonDUl 4 587 1571 0 14 Dtool_flbonDUl 566 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::tick
//       Access: Published
//  Description: Instructs the clock that a new frame has just begun.
//               In normal, real-time mode, get_frame_time() will
//               henceforth report the time as of this instant as the
//               current start-of-frame time.  In non-real-time mode,
//               get_frame_time() will be incremented by the value of
//               dt.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1664  
583 14 Dtool_flbo__EV 4 588 1571 0 14 Dtool_flbo__EV 756 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  14 current_thread 1 1667  
584 14 Dtool_flboA_dx 4 588 1571 0 14 Dtool_flboA_dx 756 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::sync_frame_time
//       Access: Published
//  Description: Resets the frame time to the current real time.  This
//               is similar to tick(), except that it does not advance
//               the frame counter and does not affect dt.  This is
//               intended to be used in the middle of a particularly
//               long frame to compensate for the time that has
//               already elapsed.
//
//               In non-real-time mode, this function has no effect
//               (because in this mode all frames take the same length
//               of time).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1664  
585 14 Dtool_flboUzG_ 6 589 1587 0 14 Dtool_flboUzG_ 609 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::check_errors
//       Access: Published
//  Description: Returns true if a clock error was detected since the
//               last time check_errors() was called.  A clock error
//               means that something happened, an OS or BIOS bug, for
//               instance, that makes the current value of the clock
//               somewhat suspect, and an application may wish to
//               resynchronize with any external clocks.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1664  14 current_thread 1 1667  
586 14 Dtool_flbob_iD 7 590 1664 0 14 Dtool_flbob_iD 408 ////////////////////////////////////////////////////////////////////
//     Function: ClockObject::get_global_clock
//       Access: Published
//  Description: Returns a pointer to the global ClockObject.  This is
//               the ClockObject that most code should use for
//               handling scene graph rendering and animation.
//////////////////////////////////////////////////////////////////// 0 
587 14 Dtool_flbo9oIg 7 591 1589 0 14 Dtool_flbo9oIg 0 0 
588 14 Dtool_flboPniS 4 595 1571 0 14 Dtool_flboPniS 279 ////////////////////////////////////////////////////////////////////
//     Function: CopyOnWriteObject::cache_ref
//       Access: Published
//  Description: See CachedTypedWritableReferenceCount::cache_ref().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1669  
589 14 Dtool_flbo8TRR 7 596 1589 0 14 Dtool_flbo8TRR 0 0 
590 14 Dtool_flboubDB 7 599 1646 1270 14 Dtool_flboubDB 468 ////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character (taken from the first
//               character of the indicated string), if there is one,
//               or ButtonHandle::none() if there is not.
//////////////////////////////////////////////////////////////////// 1 16 ascii_equivalent 1 1568  
591 14 Dtool_flbof5oq 7 599 1646 1270 14 Dtool_flbof5oq 394 ////////////////////////////////////////////////////////////////////
//     Function: KeyboardButton::ascii_key
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular ASCII character, if there is one, or
//               ButtonHandle::none() if there is not.
//////////////////////////////////////////////////////////////////// 1 16 ascii_equivalent 1 1649  
592 14 Dtool_flbowvOd 7 600 1646 1270 14 Dtool_flbowvOd 0 0 
593 14 Dtool_flbowFyx 7 601 1646 1270 14 Dtool_flbowFyx 0 0 
594 14 Dtool_flboJuf_ 7 602 1646 1270 14 Dtool_flboJuf_ 0 0 
595 14 Dtool_flbojDap 7 603 1646 1270 14 Dtool_flbojDap 0 0 
596 14 Dtool_flborLDY 7 604 1646 1270 14 Dtool_flborLDY 0 0 
597 14 Dtool_flbo1OGt 7 605 1646 1270 14 Dtool_flbo1OGt 0 0 
598 14 Dtool_flbo2OUJ 7 606 1646 1270 14 Dtool_flbo2OUJ 0 0 
599 14 Dtool_flbowOil 7 607 1646 1270 14 Dtool_flbowOil 0 0 
600 14 Dtool_flbo9OwB 7 608 1646 1270 14 Dtool_flbo9OwB 0 0 
601 14 Dtool_flbo_O_d 7 609 1646 1270 14 Dtool_flbo_O_d 0 0 
602 14 Dtool_flbo5OM6 7 610 1646 1270 14 Dtool_flbo5OM6 0 0 
603 14 Dtool_flbo6OaW 7 611 1646 1270 14 Dtool_flbo6OaW 0 0 
604 14 Dtool_flbokOoy 7 612 1646 1270 14 Dtool_flbokOoy 0 0 
605 14 Dtool_flbohO2O 7 613 1646 1270 14 Dtool_flbohO2O 0 0 
606 14 Dtool_flboLFnR 7 614 1646 1270 14 Dtool_flboLFnR 0 0 
607 14 Dtool_flboZanY 7 615 1646 1270 14 Dtool_flboZanY 0 0 
608 14 Dtool_flbovbnf 7 616 1646 1270 14 Dtool_flbovbnf 0 0 
609 14 Dtool_flbo9Ynm 7 617 1646 1270 14 Dtool_flbo9Ynm 59 // PC keyboards don't have these four buttons, but Macs do. 0 
610 14 Dtool_flboDent 7 618 1646 1270 14 Dtool_flboDent 59 // PC keyboards don't have these four buttons, but Macs do. 0 
611 14 Dtool_flboRfn0 7 619 1646 1270 14 Dtool_flboRfn0 0 0 
612 14 Dtool_flboncn7 7 620 1646 1270 14 Dtool_flboncn7 0 0 
613 14 Dtool_flbogrB1 7 621 1646 1270 14 Dtool_flbogrB1 0 0 
614 14 Dtool_flbobHch 7 622 1646 1270 14 Dtool_flbobHch 0 0 
615 14 Dtool_flbouoHo 7 623 1646 1270 14 Dtool_flbouoHo 0 0 
616 14 Dtool_flbof_Gf 7 624 1646 1270 14 Dtool_flbof_Gf 0 0 
617 14 Dtool_flbo7XIX 7 625 1646 1270 14 Dtool_flbo7XIX 0 0 
618 14 Dtool_flboQsHF 7 626 1646 1270 14 Dtool_flboQsHF 0 0 
619 14 Dtool_flbor4iM 7 627 1646 1270 14 Dtool_flbor4iM 0 0 
620 14 Dtool_flbo1_Fy 7 628 1646 1270 14 Dtool_flbo1_Fy 0 0 
621 14 Dtool_flboImkh 7 629 1646 1270 14 Dtool_flboImkh 0 0 
622 14 Dtool_flboYsPn 7 630 1646 1270 14 Dtool_flboYsPn 0 0 
623 14 Dtool_flboDudL 7 631 1646 1270 14 Dtool_flboDudL 27 // delete is a C++ keyword. 0 
624 14 Dtool_flbo0QFY 7 632 1646 1270 14 Dtool_flbo0QFY 0 0 
625 14 Dtool_flbon_Xd 7 633 1646 1270 14 Dtool_flbon_Xd 0 0 
626 14 Dtool_flboaaIW 7 634 1646 1270 14 Dtool_flboaaIW 0 0 
627 14 Dtool_flbovAt7 7 635 1646 1270 14 Dtool_flbovAt7 0 0 
628 14 Dtool_flbonQ06 7 636 1646 1270 14 Dtool_flbonQ06 0 0 
629 14 Dtool_flboKGms 7 637 1646 1270 14 Dtool_flboKGms 0 0 
630 14 Dtool_flboUJca 7 638 1646 1270 14 Dtool_flboUJca 0 0 
631 14 Dtool_flbok1PW 7 639 1646 1270 14 Dtool_flbok1PW 0 0 
632 14 Dtool_flboetDN 7 640 1646 1270 14 Dtool_flboetDN 0 0 
633 14 Dtool_flboTidz 7 641 1646 1270 14 Dtool_flboTidz 0 0 
634 14 Dtool_flbo20qs 7 642 1646 1270 14 Dtool_flbo20qs 0 0 
635 14 Dtool_flbo1s_J 7 643 1646 1270 14 Dtool_flbo1s_J 0 0 
636 14 Dtool_flboja3V 7 644 1646 1270 14 Dtool_flboja3V 0 0 
637 14 Dtool_flbojiKz 7 645 1646 1270 14 Dtool_flbojiKz 0 0 
638 14 Dtool_flbo3iJu 7 646 1646 1270 14 Dtool_flbo3iJu 0 0 
639 14 Dtool_flbo0acL 7 647 1646 1270 14 Dtool_flbo0acL 0 0 
640 14 Dtool_flboXztw 7 651 1671 1380 14 Dtool_flboXztw 705 // Filename: lineStream.I
// Created by:  drose (26Feb00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LineStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
641 14 Dtool_flborsxw 6 652 1587 0 14 Dtool_flborsxw 458 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::is_text_available
//       Access: Public
//  Description: Returns true if there is at least one line of text
//               (or even a partial line) available in the LineStream
//               object.  If this returns true, the line may then be
//               retrieved via get_line().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1672  
642 14 Dtool_flbo1ylt 6 653 1568 0 14 Dtool_flbo1ylt 540 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::get_line
//       Access: Public
//  Description: Extracts and returns the next line (or partial line)
//               of text available in the LineStream object.  Once the
//               line has been extracted, you may call has_newline()
//               to determine whether or not there was an explicit
//               newline character written following this line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1671  
643 14 Dtool_flboTJFM 6 654 1587 0 14 Dtool_flboTJFM 460 ////////////////////////////////////////////////////////////////////
//     Function: LineStream::has_newline
//       Access: Public
//  Description: Returns true if the line of text most recently
//               returned by get_line() was written out with a
//               terminating newline, or false if a newline character
//               has not yet been written to the LineStream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1672  
644 14 Dtool_flboUVR4 7 661 1674 1386 14 Dtool_flboUVR4 227 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
645 14 Dtool_flboPxfU 7 661 1674 1386 14 Dtool_flboPxfU 232 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1675  
646 14 Dtool_flbofwyS 6 663 1674 0 14 Dtool_flbofwyS 731 // Filename: modifierButtons.I
// Created by:  drose (01Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1674  4 copy 1 1675  
647 14 Dtool_flboahow 6 664 1587 0 14 Dtool_flboahow 546 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Equality Operator
//       Access: Published
//  Description: The equality operator is an exact comparision: the
//               two ModifierButtons are equal if they share the same
//               button list--indeed, the same pointer--and they all
//               the buttons have the same state.  Use matches() if a
//               less exact equality test is needed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  5 other 1 1675  
648 14 Dtool_flboig3N 6 665 1587 0 14 Dtool_flboig3N 235 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Inequality Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  5 other 1 1675  
649 14 Dtool_flbozaOV 6 666 1587 0 14 Dtool_flbozaOV 233 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::Ordering Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  5 other 1 1675  
650 14 Dtool_flbo46nn 7 667 1674 1386 14 Dtool_flbo46nn 523 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true only if it is true on both
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  5 other 1 1675  
651 14 Dtool_flboea_2 7 668 1674 1386 14 Dtool_flboea_2 527 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |
//       Access: Published
//  Description: Returns a new ModifierButtons object for which
//               is_down() will be true if it is true on either of the
//               source objects.  The set of buttons reported by
//               has_button() is not completely defined if both source
//               objects have a different set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  5 other 1 1675  
652 14 Dtool_flbo1hOw 6 669 1674 0 14 Dtool_flbo1hOw 338 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator &=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1674  5 other 1 1675  
653 14 Dtool_flboLBn_ 6 670 1674 0 14 Dtool_flboLBn_ 437 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::operator |=
//       Access: Published
//  Description: Sets is_down() true for any button that is already
//               true for this object and the other object.  Adds
//               whatever buttons are necessary to the list to make
//               this so
//////////////////////////////////////////////////////////////////// 2 4 this 3 1674  5 other 1 1675  
654 14 Dtool_flbo_tdp 4 671 1571 0 14 Dtool_flbo_tdp 698 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::set_button_list
//       Access: Published
//  Description: Sets the list of buttons to watch to be the same as
//               that of the other ModifierButtons object.  This makes
//               the lists pointer equivalent (until one or the other
//               is later modified).
//
//               This will preserve the state of any button that was
//               on the original list and is also on the new lists.
//               Any other buttons will get reset to the default state
//               of "up".
//////////////////////////////////////////////////////////////////// 2 4 this 3 1674  5 other 1 1675  
655 14 Dtool_flbozNfr 6 672 1587 0 14 Dtool_flbozNfr 504 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::matches
//       Access: Published
//  Description: Returns true if the set of buttons indicated as down
//               by this ModifierButtons object is the same set of
//               buttons indicated as down by the other
//               ModifierButtons object.  The buttons indicated as up
//               are not relevant.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  5 other 1 1675  
656 14 Dtool_flboTLZg 6 673 1587 0 14 Dtool_flboTLZg 523 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::add_button
//       Access: Published
//  Description: Adds the indicated button to the set of buttons that
//               will be monitored for upness and downness.  Returns
//               true if the button was added, false if it was already
//               being monitored or if too many buttons are currently
//               being monitored.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1674  6 button 1 1646  
657 14 Dtool_flboMHRl 6 674 1587 0 14 Dtool_flboMHRl 339 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::has_button
//       Access: Published
//  Description: Returns true if the indicated button is in the set of
//               buttons being monitored, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  6 button 1 1646  
658 14 Dtool_flboiuBm 6 675 1587 0 14 Dtool_flboiuBm 623 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::remove_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               being monitored.  Returns true if the button was
//               removed, false if it was not being monitored in the
//               first place.
//
//               Unlike the other methods, you cannot remove a button
//               by removing its alias; you have to remove exactly the
//               button itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1674  6 button 1 1646  
659 14 Dtool_flbow9C5 6 676 1569 0 14 Dtool_flbow9C5 394 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_num_buttons
//       Access: Published
//  Description: Returns the number of buttons that the
//               ModifierButtons object is monitoring (e.g. the number
//               of buttons passed to add_button()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1675  
660 14 Dtool_flboKJca 7 677 1646 1270 14 Dtool_flboKJca 446 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_button
//       Access: Published
//  Description: Returns the nth button that the ModifierButtons
//               object is monitoring (the nth button passed to
//               add_button()).  This must be in the range 0 <= index
//               < get_num_buttons().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  5 index 1 1569  
661 14 Dtool_flboigE5 6 678 1587 0 14 Dtool_flboigE5 597 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_down
//       Access: Published
//  Description: Records that a particular button has been pressed.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1674  6 button 1 1646  
662 14 Dtool_flbo3WnW 6 679 1587 0 14 Dtool_flbo3WnW 596 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::button_up
//       Access: Published
//  Description: Records that a particular button has been released.
//               If the given button is one of the buttons that is
//               currently being monitored, this will update the
//               internal state appropriately; otherwise, it will do
//               nothing.  Returns true if the button is one that was
//               monitored, or false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1674  6 button 1 1646  
663 14 Dtool_flboeJ_1 4 680 1571 0 14 Dtool_flboeJ_1 303 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::all_buttons_up
//       Access: Published
//  Description: Marks all monitored buttons as being in the "up"
//               state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1674  
664 14 Dtool_flbo6vCj 6 681 1587 0 14 Dtool_flbo6vCj 401 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up or if it is
//               not in the set of buttons being tracked.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  6 button 1 1646  
665 14 Dtool_flboucQV 6 681 1587 0 14 Dtool_flboucQV 332 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_down
//       Access: Published
//  Description: Returns true if the indicated button is known to be
//               down, or false if it is known to be up.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  5 index 1 1569  
666 14 Dtool_flboS0db 6 682 1587 0 14 Dtool_flboS0db 340 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::is_any_down
//       Access: Published
//  Description: Returns true if any of the tracked button are known
//               to be down, or false if all of them are up.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1675  
667 14 Dtool_flbo9FCN 6 683 1568 0 14 Dtool_flbo9FCN 397 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::get_prefix
//       Access: Published
//  Description: Returns a string which can be used to prefix any
//               button name or event name with the unique set of
//               modifier buttons currently being held.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1675  
668 14 Dtool_flbobeaY 4 684 1571 0 14 Dtool_flbobeaY 298 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::output
//       Access: Published
//  Description: Writes a one-line summary of the buttons known to be
//               down.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  3 out 1 1574  
669 14 Dtool_flboDRR3 4 685 1571 0 14 Dtool_flboDRR3 365 ////////////////////////////////////////////////////////////////////
//     Function: ModifierButtons::write
//       Access: Published
//  Description: Writes a multi-line summary including all of the
//               buttons being monitored and which ones are known to
//               be down.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1675  3 out 1 1574  
670 14 Dtool_flboa24C 7 687 1646 1270 14 Dtool_flboa24C 424 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::button
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               particular numbered mouse button (zero-based), if
//               there is one, or ButtonHandle::none() if there is
//               not.
//////////////////////////////////////////////////////////////////// 1 13 button_number 1 1569  
671 14 Dtool_flboRfhO 7 688 1646 1270 14 Dtool_flboRfhO 302 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::one
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               first mouse button.
//////////////////////////////////////////////////////////////////// 0 
672 14 Dtool_flbo6jlR 7 689 1646 1270 14 Dtool_flbo6jlR 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::two
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               second mouse button.
//////////////////////////////////////////////////////////////////// 0 
673 14 Dtool_flbohxQB 7 690 1646 1270 14 Dtool_flbohxQB 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::three
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               third mouse button.
//////////////////////////////////////////////////////////////////// 0 
674 14 Dtool_flboQnfN 7 691 1646 1270 14 Dtool_flboQnfN 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::four
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fourth mouse button.
//////////////////////////////////////////////////////////////////// 0 
675 14 Dtool_flboBJKu 7 692 1646 1270 14 Dtool_flboBJKu 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::five
//       Access: Public, Static
//  Description: Returns the ButtonHandle associated with the
//               fifth mouse button.
//////////////////////////////////////////////////////////////////// 0 
676 14 Dtool_flboCrvD 7 693 1646 1270 14 Dtool_flboCrvD 327 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_up
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch upwards.
//////////////////////////////////////////////////////////////////// 0 
677 14 Dtool_flboFLlN 7 694 1646 1270 14 Dtool_flboFLlN 331 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_down
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               wheel is rolled one notch downwards.
//////////////////////////////////////////////////////////////////// 0 
678 14 Dtool_flborYQ3 7 695 1646 1270 14 Dtool_flborYQ3 396 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_left
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the left. Usually, you'll only
//               find the horizontal scroll on laptops.
//////////////////////////////////////////////////////////////////// 0 
679 14 Dtool_flboxvFe 7 696 1646 1270 14 Dtool_flboxvFe 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::wheel_right
//       Access: Public, Static
//  Description: Returns the ButtonHandle generated when the mouse
//               is scrolled to the right. Usually, you'll only
//               find the horizontal scroll on laptops.
//////////////////////////////////////////////////////////////////// 0 
680 14 Dtool_flboLqpQ 6 697 1587 0 14 Dtool_flboLqpQ 353 ////////////////////////////////////////////////////////////////////
//     Function: MouseButton::is_mouse_button
//       Access: Public, Static
//  Description: Returns true if the indicated ButtonHandle is a mouse
//               button, false if it is some other kind of button.
//////////////////////////////////////////////////////////////////// 1 6 button 1 1646  
681 14 Dtool_flbogWcW 7 700 1677 1428 14 Dtool_flbogWcW 706 // Filename: mouseData.I
// Created by:  drose (15Jul02)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: MouseData::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
682 14 Dtool_flboja_u 7 700 1677 1428 14 Dtool_flboja_u 226 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1678  
683 14 Dtool_flboqtbu 6 701 1677 0 14 Dtool_flboqtbu 234 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1677  4 copy 1 1678  
684 14 Dtool_flboRo5w 6 702 1569 0 14 Dtool_flboRo5w 215 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1678  
685 14 Dtool_flbop4Dx 6 703 1569 0 14 Dtool_flbop4Dx 215 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1678  
686 14 Dtool_flbo370X 6 704 1587 0 14 Dtool_flbo370X 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::get_in_window
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1678  
687 14 Dtool_flbolQkK 4 705 1571 0 14 Dtool_flbolQkK 216 ////////////////////////////////////////////////////////////////////
//     Function: MouseData::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1678  3 out 1 1574  
688 14 Dtool_flboHv2I 6 708 1569 0 14 Dtool_flboHv2I 280 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1680  
689 14 Dtool_flboC_qZ 4 709 1571 0 14 Dtool_flboC_qZ 662 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the reference count.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1680  
690 14 Dtool_flbo35Q1 6 710 1587 0 14 Dtool_flbo35Q1 468 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1680  
691 14 Dtool_flbo6xUo 6 711 1587 0 14 Dtool_flbo6xUo 350 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1680  
692 14 Dtool_flbowI10 6 713 1569 0 14 Dtool_flbowI10 600 ////////////////////////////////////////////////////////////////////
//     Function: NodeCachedReferenceCount::get_referenced_bits
//       Access: Published
//  Description: Returns the union of the values defined in the
//               Referenced enum that represents the various things
//               that appear to be holding a pointer to this object.
//
//               If R_node is included, at least one node is holding a
//               pointer; if R_cache is included, at least one cache
//               element is.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1680  
693 14 Dtool_flbo_DaH 7 714 1589 0 14 Dtool_flbo_DaH 0 0 
694 14 Dtool_flboZthJ 7 716 1682 1442 14 Dtool_flboZthJ 710 // Filename: sparseArray.I
// Created by:  drose (14Feb07)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
695 14 Dtool_flbobAWk 7 716 1682 1442 14 Dtool_flbobAWk 239 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Constructor (from BitArray)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 from 1 1642  
696 14 Dtool_flbotTb_ 7 716 1682 1442 14 Dtool_flbotTb_ 228 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1644  
697 14 Dtool_flbo4Q2p 6 717 1682 0 14 Dtool_flbo4Q2p 236 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1682  4 copy 1 1644  
698 14 Dtool_flboeCtD 7 718 1682 1442 14 Dtool_flboeCtD 323 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with an infinite array of bits,
//               all on.
//////////////////////////////////////////////////////////////////// 0 
699 14 Dtool_flboSVTc 7 719 1682 1442 14 Dtool_flboSVTc 290 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named all_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose bits are all off.
//////////////////////////////////////////////////////////////////// 0 
700 14 Dtool_flbobAVG 7 720 1682 1442 14 Dtool_flbobAVG 301 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named lower_on constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose lower on_bits bits are on.
//////////////////////////////////////////////////////////////////// 1 7 on_bits 1 1569  
701 14 Dtool_flboHLUD 7 721 1682 1442 14 Dtool_flboHLUD 295 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named bit constructor
//       Access: Published, Static
//  Description: Returns a SparseArray with only the indicated bit on.
//////////////////////////////////////////////////////////////////// 1 5 index 1 1569  
702 14 Dtool_flboviAa 7 722 1682 1442 14 Dtool_flboviAa 329 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::Named range constructor
//       Access: Published, Static
//  Description: Returns a SparseArray whose size bits, beginning at
//               low_bit, are on.
//////////////////////////////////////////////////////////////////// 2 7 low_bit 1 1569  4 size 1 1569  
703 14 Dtool_flboyhdr 6 724 1587 0 14 Dtool_flboyhdr 723 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_max_num_bits
//       Access: Published, Static
//  Description: Returns true if there is a maximum number of bits
//               that may be stored in this structure, false
//               otherwise.  If this returns true, the number may be
//               queried in get_max_num_bits().
//
//               This method always returns false.  The SparseArray has
//               no maximum number of bits.  This method is defined so
//               generic programming algorithms can use BitMask or
//               SparseArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
704 14 Dtool_flboIjIo 6 725 1569 0 14 Dtool_flboIjIo 758 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_max_num_bits
//       Access: Published, Static
//  Description: If get_max_num_bits() returned true, this method may
//               be called to return the maximum number of bits that
//               may be stored in this structure.  It is an error to
//               call this if get_max_num_bits() return false.
//
//               It is always an error to call this method.  The
//               SparseArray has no maximum number of bits.  This method
//               is defined so generic programming algorithms can use
//               BitMask or SparseArray interchangeably.
//////////////////////////////////////////////////////////////////// 0 
705 14 Dtool_flboK3uW 6 726 1569 0 14 Dtool_flboK3uW 607 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_bits
//       Access: Published
//  Description: Returns the current number of possibly different bits
//               in this array.  There are actually an infinite number
//               of bits, but every bit higher than this bit will have
//               the same value, either 0 or 1 (see
//               get_highest_bits()).
//
//               This number may grow and/or shrink automatically as
//               needed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
706 14 Dtool_flbo5yj_ 6 727 1587 0 14 Dtool_flbo5yj_ 445 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_bit
//       Access: Published
//  Description: Returns true if the nth bit is set, false if it is
//               cleared.  It is valid for n to increase beyond
//               get_num_bits(), but the return value get_num_bits()
//               will always be the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 index 1 1569  
707 14 Dtool_flbouAn8 4 728 1571 0 14 Dtool_flbouAn8 320 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit
//       Access: Published
//  Description: Sets the nth bit on.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1682  5 index 1 1569  
708 14 Dtool_flboSHy4 4 729 1571 0 14 Dtool_flboSHy4 323 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_bit
//       Access: Published
//  Description: Sets the nth bit off.  If n >= get_num_bits(), this
//               automatically extends the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1682  5 index 1 1569  
709 14 Dtool_flboHYp8 4 730 1571 0 14 Dtool_flboHYp8 313 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_bit_to
//       Access: Published
//  Description: Sets the nth bit either on or off, according to the
//               indicated bool value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1682  5 index 1 1569  5 value 1 1587  
710 14 Dtool_flboyw5L 6 731 1587 0 14 Dtool_flboyw5L 367 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_bits
//       Access: Published
//  Description: Returns true if the infinite set of bits beyond
//               get_num_bits() are all on, or false of they are all
//               off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
711 14 Dtool_flboRZfM 6 732 1587 0 14 Dtool_flboRZfM 297 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_zero
//       Access: Published
//  Description: Returns true if the entire bitmask is zero, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
712 14 Dtool_flbo6InZ 6 733 1587 0 14 Dtool_flbo6InZ 298 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_all_on
//       Access: Published
//  Description: Returns true if the entire bitmask is one, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
713 14 Dtool_flboq1o_ 6 734 1587 0 14 Dtool_flboq1o_ 311 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_any_of
//       Access: Published
//  Description: Returns true if any bit in the indicated range is
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1644  7 low_bit 1 1569  4 size 1 1569  
714 14 Dtool_flboVHiQ 6 735 1587 0 14 Dtool_flboVHiQ 313 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_all_of
//       Access: Published
//  Description: Returns true if all bits in the indicated range are
//               set, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1644  7 low_bit 1 1569  4 size 1 1569  
715 14 Dtool_flboygC6 4 736 1571 0 14 Dtool_flboygC6 258 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range
//       Access: Published
//  Description: Sets the indicated range of bits on.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1682  7 low_bit 1 1569  4 size 1 1569  
716 14 Dtool_flbobx1k 4 737 1571 0 14 Dtool_flbobx1k 261 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear_range
//       Access: Published
//  Description: Sets the indicated range of bits off.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1682  7 low_bit 1 1569  4 size 1 1569  
717 14 Dtool_flbonzgz 4 738 1571 0 14 Dtool_flbonzgz 278 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::set_range_to
//       Access: Published
//  Description: Sets the indicated range of bits to either on or off.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1682  5 value 1 1587  7 low_bit 1 1569  4 size 1 1569  
718 14 Dtool_flboHz9G 6 739 1569 0 14 Dtool_flboHz9G 375 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_on_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 1 in the
//               array.  Returns -1 if there are an infinite number of
//               1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
719 14 Dtool_flbokQdG 6 740 1569 0 14 Dtool_flbokQdG 376 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_off_bits
//       Access: Published
//  Description: Returns the number of bits that are set to 0 in the
//               array.  Returns -1 if there are an infinite number of
//               0 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
720 14 Dtool_flboWgXl 6 741 1569 0 14 Dtool_flboWgXl 395 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_on_bit
//       Access: Published
//  Description: Returns the index of the lowest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there are an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
721 14 Dtool_flboBWcH 6 742 1569 0 14 Dtool_flboBWcH 396 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_lowest_off_bit
//       Access: Published
//  Description: Returns the index of the lowest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there are an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
722 14 Dtool_flbo2kpz 6 743 1569 0 14 Dtool_flbo2kpz 393 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_on_bit
//       Access: Published
//  Description: Returns the index of the highest 1 bit in the array.
//               Returns -1 if there are no 1 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
723 14 Dtool_flboVaJ2 6 744 1569 0 14 Dtool_flboVaJ2 394 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_highest_off_bit
//       Access: Published
//  Description: Returns the index of the highest 0 bit in the array.
//               Returns -1 if there are no 0 bits or if there an
//               infinite number of 1 bits.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
724 14 Dtool_flbogUV7 6 745 1569 0 14 Dtool_flbogUV7 594 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_next_higher_different_bit
//       Access: Published
//  Description: Returns the index of the next bit in the array, above
//               low_bit, whose value is different that the value of
//               low_bit.  Returns low_bit again if all bits higher
//               than low_bit have the same value.
//
//               This can be used to quickly iterate through all of
//               the bits in the array.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  7 low_bit 1 1569  
725 14 Dtool_flboUZSJ 4 746 1571 0 14 Dtool_flboUZSJ 324 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::invert_in_place
//       Access: Published
//  Description: Inverts all the bits in the SparseArray.  This is
//               equivalent to array = ~array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1682  
726 14 Dtool_flbo_DNe 6 747 1587 0 14 Dtool_flbo_DNe 446 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::has_bits_in_common
//       Access: Published
//  Description: Returns true if this SparseArray has any "one" bits in
//               common with the other one, false otherwise.
//
//               This is equivalent to (array & other) != 0, but may
//               be faster.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 other 1 1644  
727 14 Dtool_flbobfjR 4 748 1571 0 14 Dtool_flbobfjR 259 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::clear
//       Access: Published
//  Description: Sets all the bits in the SparseArray off.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1682  
728 14 Dtool_flboYNW_ 4 749 1571 0 14 Dtool_flboYNW_ 219 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  3 out 1 1574  
729 14 Dtool_flbo0ws5 6 750 1587 0 14 Dtool_flbo0ws5 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 other 1 1644  
730 14 Dtool_flbo8_cN 6 751 1587 0 14 Dtool_flbo8_cN 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 other 1 1644  
731 14 Dtool_flbojHgr 6 752 1587 0 14 Dtool_flbojHgr 387 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <
//       Access: Published
//  Description: Returns true if the unsigned integer which is
//               represented by this SparseArray is less than that of the
//               other one, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 other 1 1644  
732 14 Dtool_flbo7lhn 6 753 1569 0 14 Dtool_flbo7lhn 513 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::compare_to
//       Access: Published
//  Description: Returns a number less than zero if this SparseArray
//               sorts before the indicated other SparseArray, greater
//               than zero if it sorts after, or 0 if they are
//               equivalent.  This is based on the same ordering
//               defined by operator <.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 other 1 1644  
733 14 Dtool_flboYF4R 7 754 1682 1442 14 Dtool_flboYF4R 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 other 1 1644  
734 14 Dtool_flbo8cgH 7 755 1682 1442 14 Dtool_flbo8cgH 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 other 1 1644  
735 14 Dtool_flboJBYq 7 756 1682 1442 14 Dtool_flboJBYq 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 other 1 1644  
736 14 Dtool_flboV3mC 7 757 1682 1442 14 Dtool_flboV3mC 222 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ~
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
737 14 Dtool_flboQZHC 7 758 1682 1442 14 Dtool_flboQZHC 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 shift 1 1569  
738 14 Dtool_flboun_O 7 759 1682 1442 14 Dtool_flboun_O 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  5 shift 1 1569  
739 14 Dtool_flborxEk 6 760 1682 0 14 Dtool_flborxEk 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator &=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1682  5 other 1 1644  
740 14 Dtool_flboP4sZ 6 761 1682 0 14 Dtool_flboP4sZ 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator |=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1682  5 other 1 1644  
741 14 Dtool_flbo81k8 6 762 1682 0 14 Dtool_flbo81k8 223 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator ^=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1682  5 other 1 1644  
742 14 Dtool_flboDi5u 6 763 1682 0 14 Dtool_flboDi5u 406 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator <<=
//       Access: Published
//  Description: Logical left shift.  Since negative bit positions
//               have meaning in a SparseArray, real bit values are
//               rotated in on the left (not necessarily zero).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1682  5 shift 1 1569  
743 14 Dtool_flboFnx7 6 764 1682 0 14 Dtool_flboFnx7 412 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::operator >>=
//       Access: Published
//  Description: Logical right shift.  The rightmost bits become
//               negative, but are not lost; they will reappear into
//               the zero position if the array is later left-shifted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1682  5 shift 1 1569  
744 14 Dtool_flbo3i80 6 765 1587 0 14 Dtool_flbo3i80 614 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::is_inverse
//       Access: Published
//  Description: If this is true, the SparseArray is actually defined
//               as a list of subranges of integers that are *not* in
//               the set.  If this is false (the default), then the
//               subranges define the integers that *are* in the set.
//               This affects the interpretation of the values
//               returned by iterating through get_num_subranges().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
745 14 Dtool_flbo2RsJ 6 766 1569 0 14 Dtool_flbo2RsJ 515 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_num_subranges
//       Access: Published
//  Description: Returns the number of separate subranges stored in
//               the SparseArray.  You can use this limit to iterate
//               through the subranges, calling get_subrange_begin()
//               and get_subrange_end() for each one.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1644  
746 14 Dtool_flboeaXN 6 767 1569 0 14 Dtool_flboeaXN 345 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_begin
//       Access: Published
//  Description: Returns the first numeric element in the nth
//               subrange.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  1 n 1 1569  
747 14 Dtool_flboMLp6 6 768 1569 0 14 Dtool_flboMLp6 353 ////////////////////////////////////////////////////////////////////
//     Function: SparseArray::get_subrange_end
//       Access: Published
//  Description: Returns the last numeric element, plus one, in the
//               nth subrange.
//
//               Also see is_inverse().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1644  1 n 1 1569  
748 14 Dtool_flboGFxm 7 769 1589 0 14 Dtool_flboGFxm 0 0 
749 14 Dtool_flboh3eL 7 771 1683 1278 14 Dtool_flboh3eL 232 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 function 1 1594  
750 14 Dtool_flbo1FzO 7 771 1683 1278 14 Dtool_flbo1FzO 232 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
751 14 Dtool_flbo6nqB 4 772 1571 0 14 Dtool_flbo6nqB 0 2 4 this 3 1683  4 size 1 1566  
752 14 Dtool_flboLBAq 4 775 1571 0 14 Dtool_flboLBAq 379 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::set_function
//       Access: Published
//  Description: Replaces the function that is called for the callback.
//               runs.  The parameter should be a Python callable
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1683  8 function 1 1594  
753 14 Dtool_flboKUDV 6 776 1594 0 14 Dtool_flboKUDV 287 ////////////////////////////////////////////////////////////////////
//     Function: PythonCallbackObject::get_function
//       Access: Published
//  Description: Returns the function that is called for the callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1683  
754 14 Dtool_flbok9Cc 7 777 1589 0 14 Dtool_flbok9Cc 0 0 
755 14 Dtool_flboQ2Tm 7 779 1589 0 14 Dtool_flboQ2Tm 0 0 
756 14 Dtool_flboEGE_ 7 782 1684 1499 14 Dtool_flboEGE_ 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 2 3 min 1 1566  3 max 1 1566  
757 14 Dtool_flbo168y 7 782 1684 1499 14 Dtool_flbo168y 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 1 3 min 1 1566  
758 14 Dtool_flboK9nc 7 782 1684 1499 14 Dtool_flboK9nc 275 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::Constructor
//       Access: Published
//  Description: Create a free id pool in the range [min:max].
//////////////////////////////////////////////////////////////////// 0 
759 14 Dtool_flboD7pt 6 784 1566 0 14 Dtool_flboD7pt 381 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::allocate
//       Access: Published
//  Description: Returns an id between _min and _max (that were passed
//               to the constructor).
//               IndexEnd is returned if no ids are available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1684  
760 14 Dtool_flbo8_oT 4 785 1571 0 14 Dtool_flbo8_oT 893 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::initial_reserve_id
//       Access: Published
//  Description: This may be called to mark a particular id as having
//               already been allocated (for instance, by a prior
//               pass).  The specified id is removed from the
//               available pool.
//
//               Because of the limitations of this algorithm, this is
//               most efficient when it is called before the first
//               call to allocate(), and when all the calls to
//               initial_reserve_id() are made in descending order by
//               id.  However, this is a performance warning only; if
//               performance is not an issue, any id may be reserved
//               at any time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1684  2 id 1 1566  
761 14 Dtool_flboGQCz 4 786 1571 0 14 Dtool_flboGQCz 338 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::free
//       Access: Published
//  Description: Free an allocated index (index must be between _min
//               and _max that were passed to the constructor).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1684  5 index 1 1566  
762 14 Dtool_flboAmoe 6 787 1687 0 14 Dtool_flboAmoe 350 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::fraction_used
//       Access: Published
//  Description: return the decimal fraction of the pool that is used.
//               The range is 0 to 1.0 (e.g. 75% would be 0.75).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1685  
763 14 Dtool_flboMD2Z 4 788 1571 0 14 Dtool_flboMD2Z 256 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::output
//       Access: Published
//  Description: ...intended for debugging only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1685  3 out 1 1574  
764 14 Dtool_flboVAnq 4 789 1571 0 14 Dtool_flboVAnq 255 ////////////////////////////////////////////////////////////////////
//     Function: UniqueIdAllocator::write
//       Access: Published
//  Description: ...intended for debugging only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1685  3 out 1 1574  
765 14 Dtool_flboWDKL 6 226 1594 0 14 Dtool_flboWDKL 493 ////////////////////////////////////////////////////////////////////
//     Function: py_decode_TypedWritable_from_bam_stream
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//
//               This hooks into the native pickle and cPickle
//               modules, but it cannot properly handle
//               self-referential BAM objects.
//////////////////////////////////////////////////////////////////// 2 10 this_class 1 1594  4 data 1 1568  
766 14 Dtool_flbooZ4w 6 227 1594 0 14 Dtool_flbooZ4w 756 ////////////////////////////////////////////////////////////////////
//     Function: py_decode_TypedWritable_from_bam_stream_persist
//       Access: Published
//  Description: This wrapper is defined as a global function to suit
//               pickle's needs.
//
//               This is similar to
//               py_decode_TypedWritable_from_bam_stream, but it
//               provides additional support for the missing
//               persistent-state object needed to properly support
//               self-referential BAM objects written to the pickle
//               stream.  This hooks into the pickle and cPickle
//               modules implemented in direct/src/stdpy.
//////////////////////////////////////////////////////////////////// 3 9 unpickler 1 1594  10 this_class 1 1594  4 data 1 1568  
767 14 Dtool_flbo26dg 6 592 1688 0 14 Dtool_flbo26dg 387 // Set this true to enable tracking of ReferenceCount pointer
// allocation/deallcation via the MemoryUsage object.  This is
// primarily useful for detecting memory leaks.  It has no effect when
// compiling in NDEBUG mode.
//
// This variable is no longer defined here; instead, it's a member of
// MemoryUsage.
//
// ConfigVariableBool track_memory_usage("track-memory-usage", false); 0 
768 14 Dtool_flbowVkD 6 593 1688 0 14 Dtool_flbowVkD 0 0 
769 14 Dtool_flboYTce 6 656 1690 0 14 Dtool_flboYTce 957 ////////////////////////////////////////////////////////////////////
//     Function: load_prc_file
//  Description: A convenience function for loading explicit prc files
//               from a disk file or from within a multifile (via the
//               virtual file system).  Save the return value and pass
//               it to unload_prc_file() if you ever want to unload
//               this file later.
//
//               The filename is first searched along the default prc
//               search path, and then also along the model path, for
//               convenience.
//
//               This function is defined in putil instead of in dtool
//               with the read of the prc stuff, so that it can take
//               advantage of the virtual file system (which is
//               defined in express), and the model path (which is in
//               putil).
//////////////////////////////////////////////////////////////////// 1 8 filename 1 1614  
770 14 Dtool_flboDEXZ 6 657 1690 0 14 Dtool_flboDEXZ 680 ////////////////////////////////////////////////////////////////////
//     Function: load_prc_file_data
//  Description: Another convenience function to load a prc file from
//               an explicit string, which represents the contents of
//               the prc file.
//
//               The first parameter is an arbitrary name to assign to
//               this in-memory prc file.  Supply a filename if the
//               data was read from a file, or use any other name that
//               is meaningful to you.  The name is only used when the
//               set of loaded prc files is listed.
//////////////////////////////////////////////////////////////////// 2 4 name 1 1568  4 data 1 1568  
771 14 Dtool_flbow809 6 658 1587 0 14 Dtool_flbow809 570 ////////////////////////////////////////////////////////////////////
//     Function: unload_prc_file
//  Description: Unloads (and deletes) a ConfigPage that represents a
//               prc file that was previously loaded by
//               load_prc_file().  Returns true if successful, false
//               if the file was unknown.
//
//               After this function has been called, the ConfigPage
//               pointer is no longer valid and should not be used
//               again.
//////////////////////////////////////////////////////////////////// 1 4 page 1 1690  
772 14 Dtool_flbo3gn0 4 659 1571 0 14 Dtool_flbo3gn0 345 ////////////////////////////////////////////////////////////////////
//     Function: hash_prc_variables
//  Description: Fills HashVal with the hash from the current prc file
//               state as reported by
//               ConfigVariableManager::write_prc_variables().
//////////////////////////////////////////////////////////////////// 1 4 hash 1 1692  
188
1506 10 CPTADouble 141313 29 ConstPointerToArray< double > 29 ConstPointerToArray< double > 0 0 0 1 776 784 0 7 777 778 779 780 781 782 783 0 0 1 0 1507 0 0 0 0 0

1507 28 PointerToArrayBase< double > 26625 28 PointerToArrayBase< double > 28 PointerToArrayBase< double > 0 0 0 0 775 0 0 0 0 1 0 1508 0 0 0 0 0

1508 49 PointerToBase< ReferenceCountedVector< double > > 43009 49 PointerToBase< ReferenceCountedVector< double > > 49 PointerToBase< ReferenceCountedVector< double > > 0 0 0 0 0 0 2 773 774 0 0 1 0 1509 0 0 0 0 0

1509 13 PointerToVoid 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

1510 10 CPTAUshort 141313 41 ConstPointerToArray< unsigned short int > 41 ConstPointerToArray< unsigned short int > 0 0 0 1 788 796 0 7 789 790 791 792 793 794 795 0 0 1 0 1511 0 0 0 0 0

1511 40 PointerToArrayBase< unsigned short int > 26625 40 PointerToArrayBase< unsigned short int > 40 PointerToArrayBase< unsigned short int > 0 0 0 0 787 0 0 0 0 1 0 1512 0 0 0 0 0

1512 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 43009 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 61 PointerToBase< ReferenceCountedVector< unsigned short int > > 0 0 0 0 0 0 2 785 786 0 0 1 0 1509 0 0 0 0 0

1513 19 DoubleBitMaskNative 26625 44 DoubleBitMask< BitMask< unsigned int, 32 > > 44 DoubleBitMask< BitMask< unsigned int, 32 > > 0 0 0 1 797 804 0 52 798 799 800 801 802 803 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 0 0 0 0 0 0

1514 17 QuadBitMaskNative 26625 61 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > 61 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > 0 0 0 1 851 858 0 52 852 853 854 855 856 857 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 0 0 0 0 0 0

1515 9 PTADouble 141313 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 1 905 920 0 14 906 907 908 909 910 911 912 913 914 915 916 917 918 919 0 0 1 0 1507 0 0 0 0 0

1516 9 PTAUshort 141313 36 PointerToArray< unsigned short int > 36 PointerToArray< unsigned short int > 0 0 0 1 921 936 0 14 922 923 924 925 926 927 928 929 930 931 932 933 934 935 0 0 1 0 1511 0 0 0 0 0

1517 6 string 1050625 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1518 13 AnimInterface 26625 13 AnimInterface 13 AnimInterface 0 0 0 0 937 0 17 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

1519 9 UpdateSeq 141313 9 UpdateSeq 9 UpdateSeq 0 0 0 1 955 974 0 18 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 0 0 0 0 0 1140
////////////////////////////////////////////////////////////////////
//       Class : UpdateSeq
// Description : This is a sequence number that increments
//               monotonically.  It can be used to track cache
//               updates, or serve as a kind of timestamp for any
//               changing properties.
//
//               A special class is used instead of simply an int, so
//               we can elegantly handle such things as wraparound and
//               special cases.  There are two special cases.
//               Firstly, a sequence number is 'initial' when it is
//               first created.  This sequence is older than any other
//               sequence number.  Secondly, a sequence number may be
//               explicitly set to 'old'.  This is older than any
//               other sequence number except 'initial'.  Finally, we
//               have the explicit number 'fresh', which is newer
//               than any other sequence number.  All other sequences
//               are numeric and are monotonically increasing.
////////////////////////////////////////////////////////////////////

1520 13 TypedWritable 75777 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 7 975 976 977 978 979 980 981 0 0 1 0 1521 0 0 0 0 356
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1521 11 TypedObject 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 3955
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//               
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//               
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//               
//               What follows are some examples that can be used in
//               new classes that you create.
//               
//               ---------------------------------------------------
//               In the class definition (.h file)
//               ---------------------------------------------------
//               
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//               
//               private:
//                 static TypeHandle _type_handle;
//               
//               
//               ----------------------
//               In the class .cxx file
//               ----------------------
//               
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               
//               
//               ----------------------------------------------
//               In the class config_<<<PackageName>>>.cxx file
//               ----------------------------------------------
//               
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               
////////////////////////////////////////////////////////////////////

1522 27 TypedWritableReferenceCount 141313 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 990 0 2 988 989 0 0 2 3 1520 984 985 3 1523 986 987 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1523 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

1524 14 BamCacheRecord 26625 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 995 0 18 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 0 0 2 3 1522 991 992 3 1525 993 994 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : BamCacheRecord
// Description : An instance of this class is written to the front of
//               a Bam or Txo file to make the file a cached instance
//               of some other loadable resource.  This record
//               contains information needed to test the validity of
//               the cache.
////////////////////////////////////////////////////////////////////

1525 14 LinkedListNode 1050625 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 762
////////////////////////////////////////////////////////////////////
//       Class : LinkedListNode
// Description : This just stores the pointers to implement a
//               doubly-linked list of some kind of object.  There are
//               occasions when a hand-rolled linked list is more
//               appropriate than an STL container.
//
//               Typically, each node of the linked list, as well as
//               the root of the list, will inherit from this class.
//
//               Note that this class is not inherently thread-safe;
//               derived classes are responsible for protecting any
//               calls into it within mutexes, if necessary.
////////////////////////////////////////////////////////////////////

1526 8 BamCache 26625 8 BamCache 8 BamCache 0 0 0 1 1014 1015 0 21 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 0 0 0 0 0 948
////////////////////////////////////////////////////////////////////
//       Class : BamCache
// Description : This class maintains a cache of Bam and/or Txo
//               objects generated from model files and texture images
//               (as well as possibly other kinds of loadable objects
//               that can be stored in bam file format).
//
//               This class also maintains a persistent index that
//               lists all of the cached objects (see BamCacheIndex).
//               We go through some considerable effort to make sure
//               this index gets saved correctly to disk, even in the
//               presence of multiple different processes writing to
//               the same index, and without relying too heavily on
//               low-level os-provided file locks (which work poorly
//               with C++ iostreams).
////////////////////////////////////////////////////////////////////

1527 8 BamEnums 141313 8 BamEnums 8 BamEnums 0 0 0 0 1037 0 0 0 0 0 0 3 1528 1529 1530 288
////////////////////////////////////////////////////////////////////
//       Class : BamEnums
// Description : This class exists just to provide scoping for the
//               enums shared by BamReader and BamWriter.
////////////////////////////////////////////////////////////////////

1528 9 BamEndian 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 1527 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0 15 BE_littleendian 25 BamEnums::BE_littleendian 1 9 BE_native 19 BamEnums::BE_native 1 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only
// two possible values, either BE_bigendian or BE_littleendian; but
// through a preprocessor trick we also add BE_native, which is the
// same numerically as whichever value the hardware supports natively.

1529 13 BamObjectCode 794624 23 BamEnums::BamObjectCode 23 BamEnums::BamObjectCode 1527 0 0 0 0 0 0 0 0 0 4 8 BOC_push 18 BamEnums::BOC_push 0 7 BOC_pop 17 BamEnums::BOC_pop 1 11 BOC_adjunct 21 BamEnums::BOC_adjunct 2 10 BOC_remove 20 BamEnums::BOC_remove 3 0 412
// This is the code written along with each object.  It is used to
// control object scoping.  A BOC_push includes an object
// definition, and will always be eventually paired with a BOC_pop
// (which does not).  A BOC_adjunct includes an object definition
// but does not push the level; it is associated with the current
// level.  BOC_remove lists object ID's that have been deallocated
// on the sender end.

1530 14 BamTextureMode 794624 24 BamEnums::BamTextureMode 24 BamEnums::BamTextureMode 1527 0 0 0 0 0 0 0 0 0 5 13 BTM_unchanged 23 BamEnums::BTM_unchanged 0 12 BTM_fullpath 22 BamEnums::BTM_fullpath 1 12 BTM_relative 22 BamEnums::BTM_relative 2 12 BTM_basename 22 BamEnums::BTM_basename 3 11 BTM_rawdata 21 BamEnums::BTM_rawdata 4 0 76
// This enum is used to control how textures are written to a bam
// stream.

1531 13 LoaderOptions 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 1038 1045 0 6 1039 1040 1041 1042 1043 1044 0 0 0 0 2 1532 1533 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

1532 11 LoaderFlags 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 1531 0 0 0 0 0 0 0 0 0 10 9 LF_search 24 LoaderOptions::LF_search 1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 12 16 LF_no_disk_cache 31 LoaderOptions::LF_no_disk_cache 16 15 LF_no_ram_cache 30 LoaderOptions::LF_no_ram_cache 32 11 LF_no_cache 26 LoaderOptions::LF_no_cache 48 13 LF_cache_only 28 LoaderOptions::LF_cache_only 64 17 LF_allow_instance 32 LoaderOptions::LF_allow_instance 128 0 33
// Flags for loading model files.

1533 12 TextureFlags 794624 27 LoaderOptions::TextureFlags 27 LoaderOptions::TextureFlags 1531 0 0 0 0 0 0 0 0 0 4 10 TF_preload 25 LoaderOptions::TF_preload 4 17 TF_preload_simple 32 LoaderOptions::TF_preload_simple 8 11 TF_allow_1d 26 LoaderOptions::TF_allow_1d 16 19 TF_generate_mipmaps 34 LoaderOptions::TF_generate_mipmaps 32 0 35
// Flags for loading texture files.

1534 9 BamReader 26625 9 BamReader 9 BamReader 0 0 0 1 1046 1047 0 16 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 0 0 1 0 1527 0 0 0 0 1870
////////////////////////////////////////////////////////////////////
//       Class : BamReader
// Description : This is the fundamental interface for extracting
//               binary objects from a Bam file, as generated by a
//               BamWriter.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects within the Bam file; the BamReader
//               automatically manages these (with help from code
//               within each class) and restores the pointers
//               correctly.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramGenerator of some kind, which is simply a
//               linear source of Datagrams.  It is probably from a
//               disk file, but it might conceivably be streamed
//               directly from a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

1535 9 BamWriter 26625 9 BamWriter 9 BamWriter 0 0 0 1 1064 1065 0 9 1066 1067 1068 1069 1070 1071 1072 1073 1074 0 0 1 0 1527 0 0 0 0 1949
////////////////////////////////////////////////////////////////////
//       Class : BamWriter
// Description : This is the fundamental interface for writing binary
//               objects to a Bam file, to be extracted later by a
//               BamReader.
//
//               A Bam file can be thought of as a linear collection
//               of objects.  Each object is an instance of a class
//               that inherits, directly or indirectly, from
//               TypedWritable.  The objects may include pointers to
//               other objects; the BamWriter automatically manages
//               these (with help from code within each class) and
//               writes all referenced objects to the file in such a
//               way that the pointers may be correctly restored
//               later.
//
//               This is the abstract interface and does not
//               specifically deal with disk files, but rather with a
//               DatagramSink of some kind, which simply accepts a
//               linear stream of Datagrams.  It is probably written
//               to a disk file, but it might conceivably be streamed
//               directly to a network or some such nonsense.
//
//               Bam files are most often used to store scene graphs
//               or subgraphs, and by convention they are given
//               filenames ending in the extension ".bam" when they
//               are used for this purpose.  However, a Bam file may
//               store any arbitrary list of TypedWritable objects;
//               in this more general usage, they are given filenames
//               ending in ".boo" to differentiate them from the more
//               common scene graph files.
//
//               See also BamFile, which defines a higher-level
//               interface to read and write Bam files on disk.
////////////////////////////////////////////////////////////////////

1536 9 BitMask32 26625 27 BitMask< unsigned int, 32 > 27 BitMask< unsigned int, 32 > 0 0 0 1 1075 1082 0 61 1076 1077 1078 1079 1080 1081 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 0 0 0 0 0 0

1537 9 BitMask64 26625 31 BitMask< unsigned __int64, 64 > 31 BitMask< unsigned __int64, 64 > 0 0 0 1 1138 1145 0 61 1139 1140 1141 1142 1143 1144 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 0 0 0 0 0 0

1538 8 BitArray 26625 8 BitArray 8 BitArray 0 0 0 1 1201 1208 0 57 1202 1203 1204 1205 1206 1207 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : BitArray
// Description : A dynamic array with an unlimited number of bits.
//
//               This is similar to a BitMask, except it appears to
//               contain an infinite number of bits.  You can use it
//               very much as you would use a BitMask.
////////////////////////////////////////////////////////////////////

1539 12 ButtonHandle 141313 12 ButtonHandle 12 ButtonHandle 0 0 0 1 1260 1270 0 9 1261 1262 1263 1264 1265 1266 1267 1268 1269 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

1540 14 ButtonRegistry 141313 14 ButtonRegistry 14 ButtonRegistry 0 0 0 0 1275 0 4 1271 1272 1273 1274 0 0 0 0 0 409
////////////////////////////////////////////////////////////////////
//       Class : ButtonRegistry
// Description : The ButtonRegistry class maintains all the assigned
//               ButtonHandles in a given system.  There should be only
//               one ButtonRegistry class during the lifetime of the
//               application.
////////////////////////////////////////////////////////////////////

1541 14 CallbackObject 141313 14 CallbackObject 14 CallbackObject 0 0 0 0 1278 0 2 1276 1277 0 0 1 0 1542 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

1542 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1543 33 CachedTypedWritableReferenceCount 43009 33 CachedTypedWritableReferenceCount 33 CachedTypedWritableReferenceCount 0 0 0 0 0 0 5 1279 1280 1281 1282 1283 0 0 1 0 1522 0 0 0 0 1112
////////////////////////////////////////////////////////////////////
//       Class : CachedTypedWritableReferenceCount
// Description : This is a special extension to ReferenceCount that
//               includes dual reference counts: the standard
//               reference count number, which includes all references
//               to the object, and a separate number (the cache
//               reference count) that counts the number of references
//               to the object just within its cache alone.  When
//               get_ref_count() == get_cache_ref_count(), the object
//               is not referenced outside the cache.
//
//               The cache refs must be explicitly maintained; there
//               is no PointerTo<> class to maintain the cache
//               reference counts automatically.  The cache reference
//               count is automatically included in the overall
//               reference count: calling cache_ref() and
//               cache_unref() automatically calls ref() and unref().
////////////////////////////////////////////////////////////////////

1544 12 CallbackData 141313 12 CallbackData 12 CallbackData 0 0 0 0 1287 0 3 1284 1285 1286 0 0 1 0 1521 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

1545 7 TimeVal 141313 7 TimeVal 7 TimeVal 0 0 0 1 1288 1291 0 2 1289 1290 0 0 0 0 0 0

1546 11 ClockObject 75777 11 ClockObject 11 ClockObject 0 0 0 1 1292 0 0 28 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 0 0 1 0 1523 0 0 0 1 1547 1457
////////////////////////////////////////////////////////////////////
//       Class : ClockObject
// Description : A ClockObject keeps track of elapsed real time and
//               discrete time.  In normal mode, get_frame_time()
//               returns the time as of the last time tick() was
//               called.  This is the "discrete" time, and is usually
//               used to get the time as of, for instance, the
//               beginning of the current frame.
//
//               In other modes, as set by set_mode() or the
//               clock-mode config variable, get_frame_time() may
//               return other values to simulate different timing
//               effects, for instance to perform non-real-time
//               animation.  See set_mode().
//
//               In all modes, get_real_time() always returns the
//               elapsed real time in seconds since the ClockObject
//               was constructed, or since it was last reset.
//
//               You can create your own ClockObject whenever you want
//               to have your own local timer.  There is also a
//               default, global ClockObject intended to represent
//               global time for the application; this is normally set
//               up to tick every frame so that its get_frame_time()
//               will return the time for the current frame.
////////////////////////////////////////////////////////////////////

1547 4 Mode 794624 17 ClockObject::Mode 17 ClockObject::Mode 1546 0 0 0 0 0 0 0 0 0 8 8 M_normal 21 ClockObject::M_normal 0 15 M_non_real_time 28 ClockObject::M_non_real_time 1 8 M_forced 21 ClockObject::M_forced 2 9 M_degrade 22 ClockObject::M_degrade 3 7 M_slave 20 ClockObject::M_slave 4 9 M_limited 22 ClockObject::M_limited 5 9 M_integer 22 ClockObject::M_integer 6 17 M_integer_limited 30 ClockObject::M_integer_limited 7 0 0

1548 17 CopyOnWriteObject 141313 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 1325 0 2 1323 1324 0 0 1 0 1543 0 0 0 0 376
////////////////////////////////////////////////////////////////////
//       Class : CopyOnWriteObject
// Description : This base class provides basic reference counting,
//               but also can be used with a CopyOnWritePointer to
//               provide get_read_pointer() and get_write_pointer().
////////////////////////////////////////////////////////////////////

1549 14 KeyboardButton 141313 14 KeyboardButton 14 KeyboardButton 0 0 0 0 1375 0 49 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 0 0 0 0 0 369
////////////////////////////////////////////////////////////////////
//       Class : KeyboardButton
// Description : This class is just used as a convenient namespace for
//               grouping all of these handy functions that return
//               buttons which map to standard keyboard keys.
////////////////////////////////////////////////////////////////////

1550 10 LineStream 141313 10 LineStream 10 LineStream 0 0 0 1 1376 1380 0 3 1377 1378 1379 0 0 1 0 1551 0 0 0 0 761
////////////////////////////////////////////////////////////////////
//       Class : LineStream
// Description : This is a special ostream that writes to a memory
//               buffer, like ostrstream.  However, its contents can
//               be continuously extracted as a sequence of lines of
//               text.
//
//               Unlike ostrstream, which can only be extracted from
//               once (and then the buffer freezes and it can no
//               longer be written to), the LineStream is not
//               otherwise affected when a line of text is extracted.
//               More text can still be written to it and continuously
//               extracted.
////////////////////////////////////////////////////////////////////

1551 7 ostream 2049 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1552 15 ModifierButtons 26625 15 ModifierButtons 15 ModifierButtons 0 0 0 1 1385 1386 0 23 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1 1694 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : ModifierButtons
// Description : This class monitors the state of a number of
//               individual buttons and tracks whether each button is
//               known to be down or up.
////////////////////////////////////////////////////////////////////

1553 11 MouseButton 141313 11 MouseButton 11 MouseButton 0 0 0 0 1421 0 11 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 0 0 0 0 0 366
////////////////////////////////////////////////////////////////////
//       Class : MouseButton
// Description : This class is just used as a convenient namespace for
//               grouping all of these handy functions that return
//               buttons which map to standard mouse buttons.
////////////////////////////////////////////////////////////////////

1554 9 MouseData 141313 9 MouseData 9 MouseData 0 0 0 1 1422 1428 0 5 1423 1424 1425 1426 1427 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : MouseData
// Description : Holds the data that might be generated by a 2-d
//               pointer input device, such as the mouse in the
//               GraphicsWindow.
////////////////////////////////////////////////////////////////////

1555 24 NodeCachedReferenceCount 43009 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 6 1429 1430 1431 1432 1433 1434 0 0 1 0 1543 0 0 0 1 1556 2143
////////////////////////////////////////////////////////////////////
//       Class : NodeCachedReferenceCount
// Description : This class further specializes
//               CachedTypedWritableReferenceCount to also add a
//               node_ref_count, for the purposes of counting the
//               number of times the object is referenced by a "node",
//               presumably a PandaNode.
//
//               This essentially combines the functionality of
//               NodeReferenceCount and
//               CachedTypedWritableReferenceCount, so that a
//               derivative of this object actually has three
//               counters: the standard reference count, the "cache"
//               reference count, and the "node" reference count.
//               Rather than multiply inheriting from the two
//               reference count classes, we inherit only from
//               CachedTypedWritableReferenceCount and simply
//               duplicate the functionality of NodeReferenceCount, to
//               avoid all of the problems associated with multiple
//               inheritance.
//
//               The intended design is to use this as a base class
//               for RenderState and TransformState, both of which are
//               held by PandaNodes, and also have caches which are
//               independently maintained.  By keeping track of how
//               many nodes hold a pointer to a particular object, we
//               can classify each object into node-referenced,
//               cache-referenced, or other, which is primarily useful
//               for PStats reporting.
//
//               As with CachedTypedWritableReferenceCount's
//               cache_ref() and cache_unref(), the new methods
//               node_ref() and node_unref() automatically increment
//               and decrement the primary reference count as well.
//               In this case, however, there does exist a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
////////////////////////////////////////////////////////////////////

1556 10 Referenced 794624 36 NodeCachedReferenceCount::Referenced 36 NodeCachedReferenceCount::Referenced 1555 0 0 0 0 0 0 0 0 0 2 6 R_node 32 NodeCachedReferenceCount::R_node 1 7 R_cache 33 NodeCachedReferenceCount::R_cache 2 0 0

1557 11 SparseArray 26625 11 SparseArray 11 SparseArray 0 0 0 1 1435 1442 0 52 1436 1437 1438 1439 1440 1441 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 0 0 0 0 0 1136
////////////////////////////////////////////////////////////////////
//       Class : SparseArray
// Description : This class records a set of integers, where each
//               integer is either present or not present in the set.
//
//               It is similar in principle and in interface to a
//               BitArray (which can be thought of as a set of
//               integers, one integer corresponding to each different
//               bit position), but the SparseArray is implemented as
//               a list of min/max subrange lists, rather than as a
//               bitmask.  
//
//               This makes it particularly efficient for storing sets
//               which consist of large sections of consecutively
//               included or consecutively excluded elements, with
//               arbitrarily large integers, but particularly
//               inefficient for doing boolean operations such as & or
//               |.
//
//               Also, unlike BitArray, the SparseArray can store
//               negative integers.
////////////////////////////////////////////////////////////////////

1558 20 PythonCallbackObject 75777 20 PythonCallbackObject 20 PythonCallbackObject 0 0 0 1 1489 1278 0 6 1490 1491 1492 1493 1494 1495 0 0 1 0 1541 0 0 0 0 371
////////////////////////////////////////////////////////////////////
//       Class : PythonCallbackObject
// Description : This is a specialization on CallbackObject to allow
//               a callback to directly call an arbitarary Python
//               function.  Powerful!  But use with caution.
////////////////////////////////////////////////////////////////////

1559 20 WritableConfigurable 141313 20 WritableConfigurable 20 WritableConfigurable 0 0 0 0 1497 0 1 1496 0 0 1 0 1520 0 0 0 0 815
////////////////////////////////////////////////////////////////////
// Defines
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : WritableConfigurable
// Description : Defined as a fix to allow creating Configurable and
//               Writable objects.  Otherwise the compiler gets
//               confused since both TypedWritable and Configurable
//               inherit from TypedObject.
//
//               An object that has data or parameters that are set
//               less frequently (at least occasionally) than every
//               frame.  We can cache the configuration info by
//               by using the "dirty" flag.
////////////////////////////////////////////////////////////////////

1560 17 UniqueIdAllocator 26625 17 UniqueIdAllocator 17 UniqueIdAllocator 0 0 0 1 1498 1499 0 6 1500 1501 1502 1503 1504 1505 0 0 0 0 0 1207
////////////////////////////////////////////////////////////////////
//       Class : UniqueIdAllocator
// Description : Manage a set of ID values from min to max inclusive.
//               The ID numbers that are freed will be allocated
//               (reused) in the same order.  I.e. the oldest ID numbers
//               will be allocated.
//
//               This implementation will use 4 bytes per id number,
//               plus a few bytes of management data.  e.g. 10,000
//               ID numbers will use 40KB.
//
//               Also be advised that ID -1 and -2 are used internally by
//               the allocator.  If allocate returns IndexEnd (-1) then
//               the allocator is out of free ID numbers.
//
//               There are other implementations that can better leverage
//               runs of used or unused IDs or use bit arrays for the
//               IDs.  But, it takes extra work to track the age of
//               freed IDs, which is required for what we wanted.  If
//               you would like to kick around other implementation
//               ideas, please contact Schuyler.
////////////////////////////////////////////////////////////////////

1561 37 ConstPointerToArray< double > const * 8576 37 ConstPointerToArray< double > const * 37 ConstPointerToArray< double > const * 0 0 1562 0 0 0 0 0 0 0 0 0 0

1562 35 ConstPointerToArray< double > const 8832 35 ConstPointerToArray< double > const 35 ConstPointerToArray< double > const 0 0 1506 0 0 0 0 0 0 0 0 0 0

1563 31 ConstPointerToArray< double > * 8576 31 ConstPointerToArray< double > * 31 ConstPointerToArray< double > * 0 0 1506 0 0 0 0 0 0 0 0 0 0

1564 32 PointerToArray< double > const * 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 1565 0 0 0 0 0 0 0 0 0 0

1565 30 PointerToArray< double > const 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 1515 0 0 0 0 0 0 0 0 0 0

1566 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1567 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1568 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1569 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1570 51 PointerToBase< ReferenceCountedVector< double > > * 8576 51 PointerToBase< ReferenceCountedVector< double > > * 51 PointerToBase< ReferenceCountedVector< double > > * 0 0 1508 0 0 0 0 0 0 0 0 0 0

1571 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1572 57 PointerToBase< ReferenceCountedVector< double > > const * 8576 57 PointerToBase< ReferenceCountedVector< double > > const * 57 PointerToBase< ReferenceCountedVector< double > > const * 0 0 1573 0 0 0 0 0 0 0 0 0 0

1573 55 PointerToBase< ReferenceCountedVector< double > > const 8832 55 PointerToBase< ReferenceCountedVector< double > > const 55 PointerToBase< ReferenceCountedVector< double > > const 0 0 1508 0 0 0 0 0 0 0 0 0 0

1574 9 ostream * 8576 9 ostream * 9 ostream * 0 0 1551 0 0 0 0 0 0 0 0 0 0

1575 49 ConstPointerToArray< unsigned short int > const * 8576 49 ConstPointerToArray< unsigned short int > const * 49 ConstPointerToArray< unsigned short int > const * 0 0 1576 0 0 0 0 0 0 0 0 0 0

1576 47 ConstPointerToArray< unsigned short int > const 8832 47 ConstPointerToArray< unsigned short int > const 47 ConstPointerToArray< unsigned short int > const 0 0 1510 0 0 0 0 0 0 0 0 0 0

1577 43 ConstPointerToArray< unsigned short int > * 8576 43 ConstPointerToArray< unsigned short int > * 43 ConstPointerToArray< unsigned short int > * 0 0 1510 0 0 0 0 0 0 0 0 0 0

1578 44 PointerToArray< unsigned short int > const * 8576 44 PointerToArray< unsigned short int > const * 44 PointerToArray< unsigned short int > const * 0 0 1579 0 0 0 0 0 0 0 0 0 0

1579 42 PointerToArray< unsigned short int > const 8832 42 PointerToArray< unsigned short int > const 42 PointerToArray< unsigned short int > const 0 0 1516 0 0 0 0 0 0 0 0 0 0

1580 18 unsigned short int 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1581 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 8576 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 63 PointerToBase< ReferenceCountedVector< unsigned short int > > * 0 0 1512 0 0 0 0 0 0 0 0 0 0

1582 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 8576 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 69 PointerToBase< ReferenceCountedVector< unsigned short int > > const * 0 0 1583 0 0 0 0 0 0 0 0 0 0

1583 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 8832 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 67 PointerToBase< ReferenceCountedVector< unsigned short int > > const 0 0 1512 0 0 0 0 0 0 0 0 0 0

1584 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 8576 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 46 DoubleBitMask< BitMask< unsigned int, 32 > > * 0 0 1513 0 0 0 0 0 0 0 0 0 0

1585 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 8576 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 52 DoubleBitMask< BitMask< unsigned int, 32 > > const * 0 0 1586 0 0 0 0 0 0 0 0 0 0

1586 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 8832 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 50 DoubleBitMask< BitMask< unsigned int, 32 > > const 0 0 1513 0 0 0 0 0 0 0 0 0 0

1587 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1588 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1589 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 1588 0 0 0 0 0 0 0 0 0 0

1590 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 8576 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 63 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > * 0 0 1514 0 0 0 0 0 0 0 0 0 0

1591 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 8576 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 69 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const * 0 0 1592 0 0 0 0 0 0 0 0 0 0

1592 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 8832 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 67 DoubleBitMask< DoubleBitMask< BitMask< unsigned int, 32 > > > const 0 0 1514 0 0 0 0 0 0 0 0 0 0

1593 26 PointerToArray< double > * 8576 26 PointerToArray< double > * 26 PointerToArray< double > * 0 0 1515 0 0 0 0 0 0 0 0 0 0

1594 10 PyObject * 8576 10 PyObject * 10 PyObject * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1595 8 PyObject 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

1596 38 PointerToArray< unsigned short int > * 8576 38 PointerToArray< unsigned short int > * 38 PointerToArray< unsigned short int > * 0 0 1516 0 0 0 0 0 0 0 0 0 0

1597 15 AnimInterface * 8576 15 AnimInterface * 15 AnimInterface * 0 0 1518 0 0 0 0 0 0 0 0 0 0

1598 21 AnimInterface const * 8576 21 AnimInterface const * 21 AnimInterface const * 0 0 1599 0 0 0 0 0 0 0 0 0 0

1599 19 AnimInterface const 8832 19 AnimInterface const 19 AnimInterface const 0 0 1518 0 0 0 0 0 0 0 0 0 0

1600 11 UpdateSeq * 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1519 0 0 0 0 0 0 0 0 0 0

1601 17 UpdateSeq const * 8576 17 UpdateSeq const * 17 UpdateSeq const * 0 0 1602 0 0 0 0 0 0 0 0 0 0

1602 15 UpdateSeq const 8832 15 UpdateSeq const 15 UpdateSeq const 0 0 1519 0 0 0 0 0 0 0 0 0 0

1603 15 TypedWritable * 8576 15 TypedWritable * 15 TypedWritable * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1604 21 TypedWritable const * 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 1605 0 0 0 0 0 0 0 0 0 0

1605 19 TypedWritable const 8832 19 TypedWritable const 19 TypedWritable const 0 0 1520 0 0 0 0 0 0 0 0 0 0

1606 22 basic_string< char > * 8576 22 basic_string< char > * 22 basic_string< char > * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1607 11 BamWriter * 8576 11 BamWriter * 11 BamWriter * 0 0 1535 0 0 0 0 0 0 0 0 0 0

1608 11 BamReader * 8576 11 BamReader * 11 BamReader * 0 0 1534 0 0 0 0 0 0 0 0 0 0

1609 29 TypedWritableReferenceCount * 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1522 0 0 0 0 0 0 0 0 0 0

1610 16 ReferenceCount * 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1611 22 BamCacheRecord const * 8576 22 BamCacheRecord const * 22 BamCacheRecord const * 0 0 1612 0 0 0 0 0 0 0 0 0 0

1612 20 BamCacheRecord const 8832 20 BamCacheRecord const 20 BamCacheRecord const 0 0 1524 0 0 0 0 0 0 0 0 0 0

1613 16 BamCacheRecord * 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 1524 0 0 0 0 0 0 0 0 0 0

1614 16 Filename const * 8576 16 Filename const * 16 Filename const * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1615 14 Filename const 8832 14 Filename const 14 Filename const 0 0 1616 0 0 0 0 0 0 0 0 0 0

1616 8 Filename 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1617 10 BamCache * 8576 10 BamCache * 10 BamCache * 0 0 1526 0 0 0 0 0 0 0 0 0 0

1618 16 BamCache const * 8576 16 BamCache const * 16 BamCache const * 0 0 1619 0 0 0 0 0 0 0 0 0 0

1619 14 BamCache const 8832 14 BamCache const 14 BamCache const 0 0 1526 0 0 0 0 0 0 0 0 0 0

1620 10 Filename * 8576 10 Filename * 10 Filename * 0 0 1616 0 0 0 0 0 0 0 0 0 0

1621 21 LoaderOptions const * 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 1622 0 0 0 0 0 0 0 0 0 0

1622 19 LoaderOptions const 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 1531 0 0 0 0 0 0 0 0 0 0

1623 15 LoaderOptions * 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1624 19 DatagramGenerator * 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1625 0 0 0 0 0 0 0 0 0 0

1625 17 DatagramGenerator 2048 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 0 0 0 0 0 0 0 0 334
////////////////////////////////////////////////////////////////////
//       Class : DatagramGenerator
// Description : This class defines the abstract interace to any
//               source of datagrams, whether it be from a file or
//               from the net
////////////////////////////////////////////////////////////////////

1626 9 AuxData * 8576 20 BamReader::AuxData * 20 BamReader::AuxData * 0 0 1627 0 0 0 0 0 0 0 0 0 0

1627 7 AuxData 1312768 18 BamReader::AuxData 18 BamReader::AuxData 1534 0 0 0 0 0 0 0 0 0 0 0 187
// Inherit from this class to piggyback additional temporary data on
// the bamReader (via set_aux_data() and get_aux_data()) for any
// particular objects during the bam reading process.

1628 17 BamReader const * 8576 17 BamReader const * 17 BamReader const * 0 0 1629 0 0 0 0 0 0 0 0 0 0

1629 15 BamReader const 8832 15 BamReader const 15 BamReader const 0 0 1534 0 0 0 0 0 0 0 0 0 0

1630 14 DatagramSink * 8576 14 DatagramSink * 14 DatagramSink * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1631 12 DatagramSink 2048 12 DatagramSink 12 DatagramSink 0 0 0 0 0 0 0 0 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramSink
// Description : This class defines the abstract interface to sending
//               datagrams to any target, whether it be into a file
//               or across the net
////////////////////////////////////////////////////////////////////

1632 17 BamWriter const * 8576 17 BamWriter const * 17 BamWriter const * 0 0 1633 0 0 0 0 0 0 0 0 0 0

1633 15 BamWriter const 8832 15 BamWriter const 15 BamWriter const 0 0 1535 0 0 0 0 0 0 0 0 0 0

1634 29 BitMask< unsigned int, 32 > * 8576 29 BitMask< unsigned int, 32 > * 29 BitMask< unsigned int, 32 > * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1635 35 BitMask< unsigned int, 32 > const * 8576 35 BitMask< unsigned int, 32 > const * 35 BitMask< unsigned int, 32 > const * 0 0 1636 0 0 0 0 0 0 0 0 0 0

1636 33 BitMask< unsigned int, 32 > const 8832 33 BitMask< unsigned int, 32 > const 33 BitMask< unsigned int, 32 > const 0 0 1536 0 0 0 0 0 0 0 0 0 0

1637 33 BitMask< unsigned __int64, 64 > * 8576 33 BitMask< unsigned __int64, 64 > * 33 BitMask< unsigned __int64, 64 > * 0 0 1537 0 0 0 0 0 0 0 0 0 0

1638 39 BitMask< unsigned __int64, 64 > const * 8576 39 BitMask< unsigned __int64, 64 > const * 39 BitMask< unsigned __int64, 64 > const * 0 0 1639 0 0 0 0 0 0 0 0 0 0

1639 37 BitMask< unsigned __int64, 64 > const 8832 37 BitMask< unsigned __int64, 64 > const 37 BitMask< unsigned __int64, 64 > const 0 0 1537 0 0 0 0 0 0 0 0 0 0

1640 16 unsigned __int64 8230 16 unsigned __int64 16 unsigned __int64 0 8 0 0 0 0 0 0 0 0 0 0 0

1641 10 BitArray * 8576 10 BitArray * 10 BitArray * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1642 16 BitArray const * 8576 16 BitArray const * 16 BitArray const * 0 0 1643 0 0 0 0 0 0 0 0 0 0

1643 14 BitArray const 8832 14 BitArray const 14 BitArray const 0 0 1538 0 0 0 0 0 0 0 0 0 0

1644 19 SparseArray const * 8576 19 SparseArray const * 19 SparseArray const * 0 0 1645 0 0 0 0 0 0 0 0 0 0

1645 17 SparseArray const 8832 17 SparseArray const 17 SparseArray const 0 0 1557 0 0 0 0 0 0 0 0 0 0

1646 14 ButtonHandle * 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1539 0 0 0 0 0 0 0 0 0 0

1647 20 ButtonHandle const * 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1648 18 ButtonHandle const 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 1539 0 0 0 0 0 0 0 0 0 0

1649 4 char 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1650 16 ButtonRegistry * 8576 16 ButtonRegistry * 16 ButtonRegistry * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1651 22 ButtonRegistry const * 8576 22 ButtonRegistry const * 22 ButtonRegistry const * 0 0 1652 0 0 0 0 0 0 0 0 0 0

1652 20 ButtonRegistry const 8832 20 ButtonRegistry const 20 ButtonRegistry const 0 0 1540 0 0 0 0 0 0 0 0 0 0

1653 22 CallbackObject const * 8576 22 CallbackObject const * 22 CallbackObject const * 0 0 1654 0 0 0 0 0 0 0 0 0 0

1654 20 CallbackObject const 8832 20 CallbackObject const 20 CallbackObject const 0 0 1541 0 0 0 0 0 0 0 0 0 0

1655 41 CachedTypedWritableReferenceCount const * 8576 41 CachedTypedWritableReferenceCount const * 41 CachedTypedWritableReferenceCount const * 0 0 1656 0 0 0 0 0 0 0 0 0 0

1656 39 CachedTypedWritableReferenceCount const 8832 39 CachedTypedWritableReferenceCount const 39 CachedTypedWritableReferenceCount const 0 0 1543 0 0 0 0 0 0 0 0 0 0

1657 20 CallbackData const * 8576 20 CallbackData const * 20 CallbackData const * 0 0 1658 0 0 0 0 0 0 0 0 0 0

1658 18 CallbackData const 8832 18 CallbackData const 18 CallbackData const 0 0 1544 0 0 0 0 0 0 0 0 0 0

1659 14 CallbackData * 8576 14 CallbackData * 14 CallbackData * 0 0 1544 0 0 0 0 0 0 0 0 0 0

1660 9 TimeVal * 8576 9 TimeVal * 9 TimeVal * 0 0 1545 0 0 0 0 0 0 0 0 0 0

1661 15 TimeVal const * 8576 15 TimeVal const * 15 TimeVal const * 0 0 1662 0 0 0 0 0 0 0 0 0 0

1662 13 TimeVal const 8832 13 TimeVal const 13 TimeVal const 0 0 1545 0 0 0 0 0 0 0 0 0 0

1663 17 unsigned long int 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1664 13 ClockObject * 8576 13 ClockObject * 13 ClockObject * 0 0 1546 0 0 0 0 0 0 0 0 0 0

1665 19 ClockObject const * 8576 19 ClockObject const * 19 ClockObject const * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 17 ClockObject const 8832 17 ClockObject const 17 ClockObject const 0 0 1546 0 0 0 0 0 0 0 0 0 0

1667 8 Thread * 8576 8 Thread * 8 Thread * 0 0 1668 0 0 0 0 0 0 0 0 0 0

1668 6 Thread 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

1669 25 CopyOnWriteObject const * 8576 25 CopyOnWriteObject const * 25 CopyOnWriteObject const * 0 0 1670 0 0 0 0 0 0 0 0 0 0

1670 23 CopyOnWriteObject const 8832 23 CopyOnWriteObject const 23 CopyOnWriteObject const 0 0 1548 0 0 0 0 0 0 0 0 0 0

1671 12 LineStream * 8576 12 LineStream * 12 LineStream * 0 0 1550 0 0 0 0 0 0 0 0 0 0

1672 18 LineStream const * 8576 18 LineStream const * 18 LineStream const * 0 0 1673 0 0 0 0 0 0 0 0 0 0

1673 16 LineStream const 8832 16 LineStream const 16 LineStream const 0 0 1550 0 0 0 0 0 0 0 0 0 0

1674 17 ModifierButtons * 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 1552 0 0 0 0 0 0 0 0 0 0

1675 23 ModifierButtons const * 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 1676 0 0 0 0 0 0 0 0 0 0

1676 21 ModifierButtons const 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 1552 0 0 0 0 0 0 0 0 0 0

1677 11 MouseData * 8576 11 MouseData * 11 MouseData * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1678 17 MouseData const * 8576 17 MouseData const * 17 MouseData const * 0 0 1679 0 0 0 0 0 0 0 0 0 0

1679 15 MouseData const 8832 15 MouseData const 15 MouseData const 0 0 1554 0 0 0 0 0 0 0 0 0 0

1680 32 NodeCachedReferenceCount const * 8576 32 NodeCachedReferenceCount const * 32 NodeCachedReferenceCount const * 0 0 1681 0 0 0 0 0 0 0 0 0 0

1681 30 NodeCachedReferenceCount const 8832 30 NodeCachedReferenceCount const 30 NodeCachedReferenceCount const 0 0 1555 0 0 0 0 0 0 0 0 0 0

1682 13 SparseArray * 8576 13 SparseArray * 13 SparseArray * 0 0 1557 0 0 0 0 0 0 0 0 0 0

1683 22 PythonCallbackObject * 8576 22 PythonCallbackObject * 22 PythonCallbackObject * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1684 19 UniqueIdAllocator * 8576 19 UniqueIdAllocator * 19 UniqueIdAllocator * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1685 25 UniqueIdAllocator const * 8576 25 UniqueIdAllocator const * 25 UniqueIdAllocator const * 0 0 1686 0 0 0 0 0 0 0 0 0 0

1686 23 UniqueIdAllocator const 8832 23 UniqueIdAllocator const 23 UniqueIdAllocator const 0 0 1560 0 0 0 0 0 0 0 0 0 0

1687 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1688 26 ConfigVariableSearchPath * 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 1689 0 0 0 0 0 0 0 0 0 0

1689 24 ConfigVariableSearchPath 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 1125
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableSearchPath
// Description : This is similar to a ConfigVariableList, but it
//               returns its list as a DSearchPath, as a list of
//               directories.
//
//               You may locally append directories to the end of the
//               search path with the methods here, or prepend them to
//               the beginning.  Use these methods to make adjustments
//               to the path; do not attempt to directly modify the
//               const DSearchPath object returned by get_value().
//
//               Unlike other ConfigVariable types, local changes
//               (made by calling append_directory() and
//               prepend_directory()) are specific to this particular
//               instance of the ConfigVariableSearchPath.  A separate
//               instance of the same variable, created by using the
//               same name to the constructor, will not reflect the
//               local changes.
////////////////////////////////////////////////////////////////////

1690 12 ConfigPage * 8576 12 ConfigPage * 12 ConfigPage * 0 0 1691 0 0 0 0 0 0 0 0 0 0

1691 10 ConfigPage 2048 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 0 0 0 0 0 0 493
////////////////////////////////////////////////////////////////////
//       Class : ConfigPage
// Description : A page of ConfigDeclarations that may be loaded or
//               unloaded.  Typically this represents a single .prc
//               file that is read from disk at runtime, but it may
//               also represent a list of declarations built up
//               by application code and explicitly loaded.
////////////////////////////////////////////////////////////////////

1692 9 HashVal * 8576 9 HashVal * 9 HashVal * 0 0 1693 0 0 0 0 0 0 0 0 0 0

1693 7 HashVal 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

0
0
1
1694 0 660 11 get_buttons 15 get_num_buttons 10 get_button 
