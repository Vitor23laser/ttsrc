1687212823
2 2
10 liblinmath 4 VZN3 5 panda 
1017
1408 12 ~MathNumbers 4 2425 25 MathNumbers::~MathNumbers 0 0 0
32
MathNumbers::~MathNumbers(void);

1409 9 deg_2_rad 1 0 9 deg_2_rad 0 2 1301 1302 0
67
inline double deg_2_rad(double f);
inline float deg_2_rad(float f);

1410 9 rad_2_deg 1 0 9 rad_2_deg 0 2 1303 1304 0
67
inline double rad_2_deg(double f);
inline float rad_2_deg(float f);

1411 10 LVecBase2f 4 2426 22 LVecBase2f::LVecBase2f 0 4 1 2 3 4 1380
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
189
inline LVecBase2f::LVecBase2f(void);
inline LVecBase2f::LVecBase2f(LVecBase2f const &copy);
inline LVecBase2f::LVecBase2f(float fill_value);
inline LVecBase2f::LVecBase2f(float x, float y);

1412 10 operator = 4 2426 22 LVecBase2f::operator = 0 2 5 6 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase2f &LVecBase2f::operator =(LVecBase2f const &copy);
inline LVecBase2f &LVecBase2f::operator =(float fill_value);

1413 12 operator new 4 2426 24 LVecBase2f::operator new 0 1 7 0
126
inline void *LVecBase2f::operator new(unsigned int size);
inline void *LVecBase2f::operator new(unsigned int size, void *ptr);

1414 15 operator delete 4 2426 27 LVecBase2f::operator delete 0 0 0
108
inline void LVecBase2f::operator delete(void *ptr);
inline void LVecBase2f::operator delete(void *, void *);

1415 12 validate_ptr 4 2426 24 LVecBase2f::validate_ptr 0 0 0
61
static inline bool LVecBase2f::validate_ptr(void const *ptr);

1416 4 zero 4 2426 16 LVecBase2f::zero 0 1 8 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2f const &LVecBase2f::zero(void);

1417 6 unit_x 4 2426 18 LVecBase2f::unit_x 0 1 9 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_x(void);

1418 6 unit_y 4 2426 18 LVecBase2f::unit_y 0 1 10 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_y(void);

1419 11 ~LVecBase2f 4 2426 23 LVecBase2f::~LVecBase2f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2f::~LVecBase2f(void);

1420 10 __reduce__ 4 2426 22 LVecBase2f::__reduce__ 0 1 11 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase2f::__reduce__(PyObject *self) const;

1421 11 operator [] 4 2426 23 LVecBase2f::operator [] 0 2 12 13 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase2f::operator [](int i) const;
inline float &LVecBase2f::operator [](int i);

1422 11 __setitem__ 4 2426 23 LVecBase2f::__setitem__ 0 1 14 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void LVecBase2f::__setitem__(int i, float v);

1423 4 size 4 2426 16 LVecBase2f::size 0 1 15 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2f::size(void);

1424 6 is_nan 4 2426 18 LVecBase2f::is_nan 0 1 16 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2f::is_nan(void) const;

1425 8 get_cell 4 2426 20 LVecBase2f::get_cell 0 1 17 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase2f::get_cell(int i) const;

1426 5 get_x 4 2426 17 LVecBase2f::get_x 0 1 18 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_x(void) const;

1427 5 get_y 4 2426 17 LVecBase2f::get_y 0 1 19 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_y(void) const;

1428 8 set_cell 4 2426 20 LVecBase2f::set_cell 0 1 20 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2f::set_cell(int i, float value);

1429 5 set_x 4 2426 17 LVecBase2f::set_x 0 1 21 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_x(float value);

1430 5 set_y 4 2426 17 LVecBase2f::set_y 0 1 22 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_y(float value);

1431 11 add_to_cell 4 2426 23 LVecBase2f::add_to_cell 0 1 23 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase2f::add_to_cell(int i, float value);

1432 5 add_x 4 2426 17 LVecBase2f::add_x 0 1 24 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_x(float value);

1433 5 add_y 4 2426 17 LVecBase2f::add_y 0 1 25 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_y(float value);

1434 8 get_data 4 2426 20 LVecBase2f::get_data 0 1 26 392
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase2f::get_data(void) const;

1435 18 get_num_components 4 2426 30 LVecBase2f::get_num_components 0 1 27 276
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2f::get_num_components(void) const;

1436 4 fill 4 2426 16 LVecBase2f::fill 0 1 28 361
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase2f::fill(float fill_value);

1437 3 set 4 2426 15 LVecBase2f::set 0 1 29 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void LVecBase2f::set(float x, float y);

1438 6 length 4 2426 18 LVecBase2f::length 0 1 30 292
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase2f::length(void) const;

1439 14 length_squared 4 2426 26 LVecBase2f::length_squared 0 1 31 297
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase2f::length_squared(void) const;

1440 9 normalize 4 2426 21 LVecBase2f::normalize 0 1 32 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2f::normalize(void);

1441 3 dot 4 2426 15 LVecBase2f::dot 0 1 33 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase2f::dot(LVecBase2f const &other) const;

1442 7 project 4 2426 19 LVecBase2f::project 0 1 34 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LVecBase2f::project(LVecBase2f const &onto) const;

1443 10 operator < 4 2426 22 LVecBase2f::operator < 0 1 35 495
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2f::operator <(LVecBase2f const &other) const;

1444 11 operator == 4 2426 23 LVecBase2f::operator == 0 1 36 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator ==(LVecBase2f const &other) const;

1445 11 operator != 4 2426 23 LVecBase2f::operator != 0 1 37 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2f::operator !=(LVecBase2f const &other) const;

1446 10 compare_to 4 2426 22 LVecBase2f::compare_to 0 2 38 39 821
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase2f::compare_to(LVecBase2f const &other) const;
inline int LVecBase2f::compare_to(LVecBase2f const &other, float threshold) const;

1447 8 get_hash 4 2426 20 LVecBase2f::get_hash 0 2 40 41 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase2f::get_hash(void) const;
inline unsigned int LVecBase2f::get_hash(float threshold) const;

1448 8 add_hash 4 2426 20 LVecBase2f::add_hash 0 2 42 43 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase2f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2f::add_hash(unsigned int hash, float threshold) const;

1449 10 operator - 68 2426 22 LVecBase2f::operator - 0 1 44 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LVecBase2f::operator -(void) const;

1450 10 operator + 4 2426 22 LVecBase2f::operator + 0 1 45 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator +(LVecBase2f const &other) const;

1451 10 operator - 4 2426 22 LVecBase2f::operator - 0 1 46 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2f LVecBase2f::operator -(LVecBase2f const &other) const;

1452 10 operator * 4 2426 22 LVecBase2f::operator * 0 1 47 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator *(float scalar) const;

1453 10 operator / 4 2426 22 LVecBase2f::operator / 0 1 48 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase2f LVecBase2f::operator /(float scalar) const;

1454 11 operator += 4 2426 23 LVecBase2f::operator += 0 1 49 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator +=(LVecBase2f const &other);

1455 11 operator -= 4 2426 23 LVecBase2f::operator -= 0 1 50 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2f::operator -=(LVecBase2f const &other);

1456 11 operator *= 4 2426 23 LVecBase2f::operator *= 0 1 51 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator *=(float scalar);

1457 11 operator /= 4 2426 23 LVecBase2f::operator /= 0 1 52 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase2f::operator /=(float scalar);

1458 4 fmax 4 2426 16 LVecBase2f::fmax 0 1 53 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmax(LVecBase2f const &other);

1459 4 fmin 4 2426 16 LVecBase2f::fmin 0 1 54 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2f LVecBase2f::fmin(LVecBase2f const &other);

1460 12 almost_equal 4 2426 24 LVecBase2f::almost_equal 0 2 55 56 656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase2f::almost_equal(LVecBase2f const &other, float threshold) const;
inline bool LVecBase2f::almost_equal(LVecBase2f const &other) const;

1461 6 output 4 2426 18 LVecBase2f::output 0 1 57 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2f::output(ostream &out) const;

1462 11 python_repr 4 2426 23 LVecBase2f::python_repr 0 1 58 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1463 14 get_class_type 4 2426 26 LVecBase2f::get_class_type 0 1 59 0
51
static TypeHandle LVecBase2f::get_class_type(void);

1464 10 LVecBase2d 4 2427 22 LVecBase2d::LVecBase2d 0 4 60 61 62 63 2762
// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
192
inline LVecBase2d::LVecBase2d(void);
inline LVecBase2d::LVecBase2d(LVecBase2d const &copy);
inline LVecBase2d::LVecBase2d(double fill_value);
inline LVecBase2d::LVecBase2d(double x, double y);

1465 10 operator = 4 2427 22 LVecBase2d::operator = 0 2 64 65 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase2d &LVecBase2d::operator =(LVecBase2d const &copy);
inline LVecBase2d &LVecBase2d::operator =(double fill_value);

1466 12 operator new 4 2427 24 LVecBase2d::operator new 0 1 66 0
126
inline void *LVecBase2d::operator new(unsigned int size);
inline void *LVecBase2d::operator new(unsigned int size, void *ptr);

1467 15 operator delete 4 2427 27 LVecBase2d::operator delete 0 0 0
108
inline void LVecBase2d::operator delete(void *ptr);
inline void LVecBase2d::operator delete(void *, void *);

1468 12 validate_ptr 4 2427 24 LVecBase2d::validate_ptr 0 0 0
61
static inline bool LVecBase2d::validate_ptr(void const *ptr);

1469 4 zero 4 2427 16 LVecBase2d::zero 0 1 67 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2d const &LVecBase2d::zero(void);

1470 6 unit_x 4 2427 18 LVecBase2d::unit_x 0 1 68 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_x(void);

1471 6 unit_y 4 2427 18 LVecBase2d::unit_y 0 1 69 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_y(void);

1472 11 ~LVecBase2d 4 2427 23 LVecBase2d::~LVecBase2d 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2d::~LVecBase2d(void);

1473 10 __reduce__ 4 2427 22 LVecBase2d::__reduce__ 0 1 70 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase2d::__reduce__(PyObject *self) const;

1474 11 operator [] 4 2427 23 LVecBase2d::operator [] 0 2 71 72 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase2d::operator [](int i) const;
inline double &LVecBase2d::operator [](int i);

1475 11 __setitem__ 4 2427 23 LVecBase2d::__setitem__ 0 1 73 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2d::__setitem__(int i, double v);

1476 4 size 4 2427 16 LVecBase2d::size 0 1 74 574
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2d::size(void);

1477 6 is_nan 4 2427 18 LVecBase2d::is_nan 0 1 75 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2d::is_nan(void) const;

1478 8 get_cell 4 2427 20 LVecBase2d::get_cell 0 1 76 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase2d::get_cell(int i) const;

1479 5 get_x 4 2427 17 LVecBase2d::get_x 0 1 77 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_x(void) const;

1480 5 get_y 4 2427 17 LVecBase2d::get_y 0 1 78 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_y(void) const;

1481 8 set_cell 4 2427 20 LVecBase2d::set_cell 0 1 79 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2d::set_cell(int i, double value);

1482 5 set_x 4 2427 17 LVecBase2d::set_x 0 1 80 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_x(double value);

1483 5 set_y 4 2427 17 LVecBase2d::set_y 0 1 81 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_y(double value);

1484 11 add_to_cell 4 2427 23 LVecBase2d::add_to_cell 0 1 82 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase2d::add_to_cell(int i, double value);

1485 5 add_x 4 2427 17 LVecBase2d::add_x 0 1 83 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_x(double value);

1486 5 add_y 4 2427 17 LVecBase2d::add_y 0 1 84 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_y(double value);

1487 8 get_data 4 2427 20 LVecBase2d::get_data 0 1 85 786
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase2d::get_data(void) const;

1488 18 get_num_components 4 2427 30 LVecBase2d::get_num_components 0 1 86 554
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2d::get_num_components(void) const;

1489 4 fill 4 2427 16 LVecBase2d::fill 0 1 87 724
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::fill(double fill_value);

1490 3 set 4 2427 15 LVecBase2d::set 0 1 88 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::set(double x, double y);

1491 6 length 4 2427 18 LVecBase2d::length 0 1 89 586
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase2d::length(void) const;

1492 14 length_squared 4 2427 26 LVecBase2d::length_squared 0 1 90 596
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase2d::length_squared(void) const;

1493 9 normalize 4 2427 21 LVecBase2d::normalize 0 1 91 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2d::normalize(void);

1494 3 dot 4 2427 15 LVecBase2d::dot 0 1 92 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase2d::dot(LVecBase2d const &other) const;

1495 7 project 4 2427 19 LVecBase2d::project 0 1 93 782
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LVecBase2d::project(LVecBase2d const &onto) const;

1496 10 operator < 4 2427 22 LVecBase2d::operator < 0 1 94 992
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase2d::operator <(LVecBase2d const &other) const;

1497 11 operator == 4 2427 23 LVecBase2d::operator == 0 1 95 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator ==(LVecBase2d const &other) const;

1498 11 operator != 4 2427 23 LVecBase2d::operator != 0 1 96 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase2d::operator !=(LVecBase2d const &other) const;

1499 10 compare_to 4 2427 22 LVecBase2d::compare_to 0 2 97 98 1644
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase2d::compare_to(LVecBase2d const &other) const;
inline int LVecBase2d::compare_to(LVecBase2d const &other, double threshold) const;

1500 8 get_hash 4 2427 20 LVecBase2d::get_hash 0 2 99 100 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase2d::get_hash(void) const;
inline unsigned int LVecBase2d::get_hash(double threshold) const;

1501 8 add_hash 4 2427 20 LVecBase2d::add_hash 0 2 101 102 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase2d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2d::add_hash(unsigned int hash, double threshold) const;

1502 10 operator - 68 2427 22 LVecBase2d::operator - 0 1 103 430
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LVecBase2d::operator -(void) const;

1503 10 operator + 4 2427 22 LVecBase2d::operator + 0 1 104 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator +(LVecBase2d const &other) const;

1504 10 operator - 4 2427 22 LVecBase2d::operator - 0 1 105 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase2d LVecBase2d::operator -(LVecBase2d const &other) const;

1505 10 operator * 4 2427 22 LVecBase2d::operator * 0 1 106 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator *(double scalar) const;

1506 10 operator / 4 2427 22 LVecBase2d::operator / 0 1 107 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase2d LVecBase2d::operator /(double scalar) const;

1507 11 operator += 4 2427 23 LVecBase2d::operator += 0 1 108 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator +=(LVecBase2d const &other);

1508 11 operator -= 4 2427 23 LVecBase2d::operator -= 0 1 109 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase2d::operator -=(LVecBase2d const &other);

1509 11 operator *= 4 2427 23 LVecBase2d::operator *= 0 1 110 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator *=(double scalar);

1510 11 operator /= 4 2427 23 LVecBase2d::operator /= 0 1 111 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::operator /=(double scalar);

1511 4 fmax 4 2427 16 LVecBase2d::fmax 0 1 112 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmax(LVecBase2d const &other);

1512 4 fmin 4 2427 16 LVecBase2d::fmin 0 1 113 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase2d LVecBase2d::fmin(LVecBase2d const &other);

1513 12 almost_equal 4 2427 24 LVecBase2d::almost_equal 0 2 114 115 1314
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase2d::almost_equal(LVecBase2d const &other, double threshold) const;
inline bool LVecBase2d::almost_equal(LVecBase2d const &other) const;

1514 6 output 4 2427 18 LVecBase2d::output 0 1 116 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::output(ostream &out) const;

1515 11 python_repr 4 2427 23 LVecBase2d::python_repr 0 1 117 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1516 14 get_class_type 4 2427 26 LVecBase2d::get_class_type 0 1 118 0
51
static TypeHandle LVecBase2d::get_class_type(void);

1517 9 LVector2f 4 2428 20 LVector2f::LVector2f 0 4 119 120 121 122 1375
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
181
inline LVector2f::LVector2f(void);
inline LVector2f::LVector2f(LVecBase2f const &copy);
inline LVector2f::LVector2f(float fill_value);
inline LVector2f::LVector2f(float x, float y);

1518 10 operator = 4 2428 21 LVector2f::operator = 0 2 123 124 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector2f &LVector2f::operator =(LVecBase2f const &copy);
inline LVector2f &LVector2f::operator =(float fill_value);

1519 4 zero 4 2428 15 LVector2f::zero 0 1 125 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2f const &LVector2f::zero(void);

1520 6 unit_x 4 2428 17 LVector2f::unit_x 0 1 126 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_x(void);

1521 6 unit_y 4 2428 17 LVector2f::unit_y 0 1 127 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_y(void);

1522 10 operator - 68 2428 21 LVector2f::operator - 0 1 128 213
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector2f LVector2f::operator -(void) const;

1523 10 operator + 4 2428 21 LVector2f::operator + 0 2 129 130 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2f LVector2f::operator +(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator +(LVector2f const &other) const;

1524 10 operator - 4 2428 21 LVector2f::operator - 0 2 131 132 445
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2f LVector2f::operator -(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator -(LVector2f const &other) const;

1525 10 operator * 4 2428 21 LVector2f::operator * 0 1 133 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator *(float scalar) const;

1526 10 operator / 4 2428 21 LVector2f::operator / 0 1 134 223
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector2f LVector2f::operator /(float scalar) const;

1527 7 project 4 2428 18 LVector2f::project 0 1 135 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2f LVector2f::project(LVecBase2f const &onto) const;

1528 16 signed_angle_rad 4 2428 27 LVector2f::signed_angle_rad 0 1 136 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_rad(LVector2f const &other) const;

1529 16 signed_angle_deg 4 2428 27 LVector2f::signed_angle_deg 0 1 137 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_deg(LVector2f const &other) const;

1530 11 python_repr 4 2428 22 LVector2f::python_repr 0 1 138 220
////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1531 14 get_class_type 4 2428 25 LVector2f::get_class_type 0 1 139 0
50
static TypeHandle LVector2f::get_class_type(void);

1532 10 ~LVector2f 4 2428 21 LVector2f::~LVector2f 0 0 0
28
LVector2f::~LVector2f(void);

1533 9 LVector2d 4 2429 20 LVector2d::LVector2d 0 4 140 141 142 143 2752
// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
184
inline LVector2d::LVector2d(void);
inline LVector2d::LVector2d(LVecBase2d const &copy);
inline LVector2d::LVector2d(double fill_value);
inline LVector2d::LVector2d(double x, double y);

1534 10 operator = 4 2429 21 LVector2d::operator = 0 2 144 145 914
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector2d &LVector2d::operator =(LVecBase2d const &copy);
inline LVector2d &LVector2d::operator =(double fill_value);

1535 4 zero 4 2429 15 LVector2d::zero 0 1 146 518
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2d const &LVector2d::zero(void);

1536 6 unit_x 4 2429 17 LVector2d::unit_x 0 1 147 512
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_x(void);

1537 6 unit_y 4 2429 17 LVector2d::unit_y 0 1 148 512
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_y(void);

1538 10 operator - 68 2429 21 LVector2d::operator - 0 1 149 428
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector2d LVector2d::operator -(void) const;

1539 10 operator + 4 2429 21 LVector2d::operator + 0 2 150 151 892
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2d LVector2d::operator +(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator +(LVector2d const &other) const;

1540 10 operator - 4 2429 21 LVector2d::operator - 0 2 152 153 892
////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase2d LVector2d::operator -(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator -(LVector2d const &other) const;

1541 10 operator * 4 2429 21 LVector2d::operator * 0 1 154 448
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator *(double scalar) const;

1542 10 operator / 4 2429 21 LVector2d::operator / 0 1 155 448
////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector2d LVector2d::operator /(double scalar) const;

1543 7 project 4 2429 18 LVector2d::project 0 1 156 780
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2d LVector2d::project(LVecBase2d const &onto) const;

1544 16 signed_angle_rad 4 2429 27 LVector2d::signed_angle_rad 0 1 157 644
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_rad(LVector2d const &other) const;

1545 16 signed_angle_deg 4 2429 27 LVector2d::signed_angle_deg 0 1 158 644
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_deg(LVector2d const &other) const;

1546 11 python_repr 4 2429 22 LVector2d::python_repr 0 1 159 442
////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1547 14 get_class_type 4 2429 25 LVector2d::get_class_type 0 1 160 0
50
static TypeHandle LVector2d::get_class_type(void);

1548 10 ~LVector2d 4 2429 21 LVector2d::~LVector2d 0 0 0
28
LVector2d::~LVector2d(void);

1549 8 LPoint2f 4 2430 18 LPoint2f::LPoint2f 0 4 161 162 163 164 1370
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
173
inline LPoint2f::LPoint2f(void);
inline LPoint2f::LPoint2f(LVecBase2f const &copy);
inline LPoint2f::LPoint2f(float fill_value);
inline LPoint2f::LPoint2f(float x, float y);

1550 10 operator = 4 2430 20 LPoint2f::operator = 0 2 165 166 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint2f &LPoint2f::operator =(LVecBase2f const &copy);
inline LPoint2f &LPoint2f::operator =(float fill_value);

1551 4 zero 4 2430 14 LPoint2f::zero 0 1 167 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2f const &LPoint2f::zero(void);

1552 6 unit_x 4 2430 16 LPoint2f::unit_x 0 1 168 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_x(void);

1553 6 unit_y 4 2430 16 LPoint2f::unit_y 0 1 169 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_y(void);

1554 10 operator - 68 2430 20 LPoint2f::operator - 0 1 170 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint2f LPoint2f::operator -(void) const;

1555 10 operator + 4 2430 20 LPoint2f::operator + 0 2 171 172 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase2f LPoint2f::operator +(LVecBase2f const &other) const;
inline LPoint2f LPoint2f::operator +(LVector2f const &other) const;

1556 10 operator - 4 2430 20 LPoint2f::operator - 0 3 173 174 175 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase2f LPoint2f::operator -(LVecBase2f const &other) const;
inline LVector2f LPoint2f::operator -(LPoint2f const &other) const;
inline LPoint2f LPoint2f::operator -(LVector2f const &other) const;

1557 10 operator * 4 2430 20 LPoint2f::operator * 0 1 176 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator *(float scalar) const;

1558 10 operator / 4 2430 20 LPoint2f::operator / 0 1 177 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint2f LPoint2f::operator /(float scalar) const;

1559 7 project 4 2430 17 LPoint2f::project 0 1 178 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2f LPoint2f::project(LVecBase2f const &onto) const;

1560 11 python_repr 4 2430 21 LPoint2f::python_repr 0 1 179 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1561 14 get_class_type 4 2430 24 LPoint2f::get_class_type 0 1 180 0
49
static TypeHandle LPoint2f::get_class_type(void);

1562 9 ~LPoint2f 4 2430 19 LPoint2f::~LPoint2f 0 0 0
26
LPoint2f::~LPoint2f(void);

1563 8 LPoint2d 4 2431 18 LPoint2d::LPoint2d 0 4 181 182 183 184 2742
// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
176
inline LPoint2d::LPoint2d(void);
inline LPoint2d::LPoint2d(LVecBase2d const &copy);
inline LPoint2d::LPoint2d(double fill_value);
inline LPoint2d::LPoint2d(double x, double y);

1564 10 operator = 4 2431 20 LPoint2d::operator = 0 2 185 186 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint2d &LPoint2d::operator =(LVecBase2d const &copy);
inline LPoint2d &LPoint2d::operator =(double fill_value);

1565 4 zero 4 2431 14 LPoint2d::zero 0 1 187 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2d const &LPoint2d::zero(void);

1566 6 unit_x 4 2431 16 LPoint2d::unit_x 0 1 188 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_x(void);

1567 6 unit_y 4 2431 16 LPoint2d::unit_y 0 1 189 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_y(void);

1568 10 operator - 68 2431 20 LPoint2d::operator - 0 1 190 426
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint2d LPoint2d::operator -(void) const;

1569 10 operator + 4 2431 20 LPoint2d::operator + 0 2 191 192 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase2d LPoint2d::operator +(LVecBase2d const &other) const;
inline LPoint2d LPoint2d::operator +(LVector2d const &other) const;

1570 10 operator - 4 2431 20 LPoint2d::operator - 0 3 193 194 195 1324
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase2d LPoint2d::operator -(LVecBase2d const &other) const;
inline LVector2d LPoint2d::operator -(LPoint2d const &other) const;
inline LPoint2d LPoint2d::operator -(LVector2d const &other) const;

1571 10 operator * 4 2431 20 LPoint2d::operator * 0 1 196 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator *(double scalar) const;

1572 10 operator / 4 2431 20 LPoint2d::operator / 0 1 197 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint2d LPoint2d::operator /(double scalar) const;

1573 7 project 4 2431 17 LPoint2d::project 0 1 198 778
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2d LPoint2d::project(LVecBase2d const &onto) const;

1574 11 python_repr 4 2431 21 LPoint2d::python_repr 0 1 199 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1575 14 get_class_type 4 2431 24 LPoint2d::get_class_type 0 1 200 0
49
static TypeHandle LPoint2d::get_class_type(void);

1576 9 ~LPoint2d 4 2431 19 LPoint2d::~LPoint2d 0 0 0
26
LPoint2d::~LPoint2d(void);

1577 10 LVecBase3f 4 2432 22 LVecBase3f::LVecBase3f 0 4 201 202 203 204 1380
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
inline LVecBase3f::LVecBase3f(void);
inline LVecBase3f::LVecBase3f(LVecBase3f const &copy);
inline LVecBase3f::LVecBase3f(float fill_value);
inline LVecBase3f::LVecBase3f(float x, float y, float z);

1578 10 operator = 4 2432 22 LVecBase3f::operator = 0 2 205 206 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase3f &LVecBase3f::operator =(LVecBase3f const &copy);
inline LVecBase3f &LVecBase3f::operator =(float fill_value);

1579 12 operator new 4 2432 24 LVecBase3f::operator new 0 1 207 0
126
inline void *LVecBase3f::operator new(unsigned int size);
inline void *LVecBase3f::operator new(unsigned int size, void *ptr);

1580 15 operator delete 4 2432 27 LVecBase3f::operator delete 0 0 0
108
inline void LVecBase3f::operator delete(void *ptr);
inline void LVecBase3f::operator delete(void *, void *);

1581 12 validate_ptr 4 2432 24 LVecBase3f::validate_ptr 0 0 0
61
static inline bool LVecBase3f::validate_ptr(void const *ptr);

1582 4 zero 4 2432 16 LVecBase3f::zero 0 1 208 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3f const &LVecBase3f::zero(void);

1583 6 unit_x 4 2432 18 LVecBase3f::unit_x 0 1 209 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_x(void);

1584 6 unit_y 4 2432 18 LVecBase3f::unit_y 0 1 210 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_y(void);

1585 6 unit_z 4 2432 18 LVecBase3f::unit_z 0 1 211 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_z(void);

1586 11 ~LVecBase3f 4 2432 23 LVecBase3f::~LVecBase3f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3f::~LVecBase3f(void);

1587 10 __reduce__ 4 2432 22 LVecBase3f::__reduce__ 0 1 212 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase3f::__reduce__(PyObject *self) const;

1588 11 operator [] 4 2432 23 LVecBase3f::operator [] 0 2 213 214 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase3f::operator [](int i) const;
inline float &LVecBase3f::operator [](int i);

1589 11 __setitem__ 4 2432 23 LVecBase3f::__setitem__ 0 1 215 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void LVecBase3f::__setitem__(int i, float v);

1590 4 size 4 2432 16 LVecBase3f::size 0 1 216 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3f::size(void);

1591 6 is_nan 4 2432 18 LVecBase3f::is_nan 0 1 217 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3f::is_nan(void) const;

1592 8 get_cell 4 2432 20 LVecBase3f::get_cell 0 1 218 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase3f::get_cell(int i) const;

1593 5 get_x 4 2432 17 LVecBase3f::get_x 0 1 219 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_x(void) const;

1594 5 get_y 4 2432 17 LVecBase3f::get_y 0 1 220 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_y(void) const;

1595 5 get_z 4 2432 17 LVecBase3f::get_z 0 1 221 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_z(void) const;

1596 8 set_cell 4 2432 20 LVecBase3f::set_cell 0 1 222 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3f::set_cell(int i, float value);

1597 5 set_x 4 2432 17 LVecBase3f::set_x 0 1 223 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_x(float value);

1598 5 set_y 4 2432 17 LVecBase3f::set_y 0 1 224 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_y(float value);

1599 5 set_z 4 2432 17 LVecBase3f::set_z 0 1 225 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_z(float value);

1600 6 get_xy 4 2432 18 LVecBase3f::get_xy 0 1 226 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xy(void) const;

1601 6 get_xz 4 2432 18 LVecBase3f::get_xz 0 1 227 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xz(void) const;

1602 6 get_yz 4 2432 18 LVecBase3f::get_yz 0 1 228 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_yz(void) const;

1603 11 add_to_cell 4 2432 23 LVecBase3f::add_to_cell 0 1 229 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase3f::add_to_cell(int i, float value);

1604 5 add_x 4 2432 17 LVecBase3f::add_x 0 1 230 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_x(float value);

1605 5 add_y 4 2432 17 LVecBase3f::add_y 0 1 231 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_y(float value);

1606 5 add_z 4 2432 17 LVecBase3f::add_z 0 1 232 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_z(float value);

1607 8 get_data 4 2432 20 LVecBase3f::get_data 0 1 233 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase3f::get_data(void) const;

1608 18 get_num_components 4 2432 30 LVecBase3f::get_num_components 0 1 234 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3f::get_num_components(void) const;

1609 4 fill 4 2432 16 LVecBase3f::fill 0 1 235 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase3f::fill(float fill_value);

1610 3 set 4 2432 15 LVecBase3f::set 0 1 236 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void LVecBase3f::set(float x, float y, float z);

1611 6 length 4 2432 18 LVecBase3f::length 0 1 237 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase3f::length(void) const;

1612 14 length_squared 4 2432 26 LVecBase3f::length_squared 0 1 238 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase3f::length_squared(void) const;

1613 9 normalize 4 2432 21 LVecBase3f::normalize 0 1 239 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3f::normalize(void);

1614 3 dot 4 2432 15 LVecBase3f::dot 0 1 240 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase3f::dot(LVecBase3f const &other) const;

1615 5 cross 4 2432 17 LVecBase3f::cross 0 1 241 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f LVecBase3f::cross(LVecBase3f const &other) const;

1616 7 project 4 2432 19 LVecBase3f::project 0 1 242 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LVecBase3f::project(LVecBase3f const &onto) const;

1617 10 operator < 4 2432 22 LVecBase3f::operator < 0 1 243 498
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3f::operator <(LVecBase3f const &other) const;

1618 11 operator == 4 2432 23 LVecBase3f::operator == 0 1 244 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator ==(LVecBase3f const &other) const;

1619 11 operator != 4 2432 23 LVecBase3f::operator != 0 1 245 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3f::operator !=(LVecBase3f const &other) const;

1620 20 get_standardized_hpr 4 2432 32 LVecBase3f::get_standardized_hpr 0 1 246 1029
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary posible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f LVecBase3f::get_standardized_hpr(void) const;

1621 10 compare_to 4 2432 22 LVecBase3f::compare_to 0 2 247 248 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase3f::compare_to(LVecBase3f const &other) const;
inline int LVecBase3f::compare_to(LVecBase3f const &other, float threshold) const;

1622 8 get_hash 4 2432 20 LVecBase3f::get_hash 0 2 249 250 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase3f::get_hash(void) const;
inline unsigned int LVecBase3f::get_hash(float threshold) const;

1623 8 add_hash 4 2432 20 LVecBase3f::add_hash 0 2 251 252 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase3f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3f::add_hash(unsigned int hash, float threshold) const;

1624 10 operator - 68 2432 22 LVecBase3f::operator - 0 1 253 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LVecBase3f::operator -(void) const;

1625 10 operator + 4 2432 22 LVecBase3f::operator + 0 1 254 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator +(LVecBase3f const &other) const;

1626 10 operator - 4 2432 22 LVecBase3f::operator - 0 1 255 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3f LVecBase3f::operator -(LVecBase3f const &other) const;

1627 10 operator * 4 2432 22 LVecBase3f::operator * 0 1 256 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator *(float scalar) const;

1628 10 operator / 4 2432 22 LVecBase3f::operator / 0 1 257 225
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f LVecBase3f::operator /(float scalar) const;

1629 11 operator += 4 2432 23 LVecBase3f::operator += 0 1 258 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator +=(LVecBase3f const &other);

1630 11 operator -= 4 2432 23 LVecBase3f::operator -= 0 1 259 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3f::operator -=(LVecBase3f const &other);

1631 11 operator *= 4 2432 23 LVecBase3f::operator *= 0 1 260 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator *=(float scalar);

1632 11 operator /= 4 2432 23 LVecBase3f::operator /= 0 1 261 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase3f::operator /=(float scalar);

1633 4 fmax 4 2432 16 LVecBase3f::fmax 0 1 262 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmax(LVecBase3f const &other);

1634 4 fmin 4 2432 16 LVecBase3f::fmin 0 1 263 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3f LVecBase3f::fmin(LVecBase3f const &other);

1635 10 cross_into 4 2432 22 LVecBase3f::cross_into 0 1 264 240
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assigment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3f::cross_into(LVecBase3f const &other);

1636 12 almost_equal 4 2432 24 LVecBase3f::almost_equal 0 2 265 266 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase3f::almost_equal(LVecBase3f const &other, float threshold) const;
inline bool LVecBase3f::almost_equal(LVecBase3f const &other) const;

1637 6 output 4 2432 18 LVecBase3f::output 0 1 267 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3f::output(ostream &out) const;

1638 11 python_repr 4 2432 23 LVecBase3f::python_repr 0 1 268 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1639 14 get_class_type 4 2432 26 LVecBase3f::get_class_type 0 1 269 0
51
static TypeHandle LVecBase3f::get_class_type(void);

1640 10 LVecBase3d 4 2433 22 LVecBase3d::LVecBase3d 0 4 270 271 272 273 2762
// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
202
inline LVecBase3d::LVecBase3d(void);
inline LVecBase3d::LVecBase3d(LVecBase3d const &copy);
inline LVecBase3d::LVecBase3d(double fill_value);
inline LVecBase3d::LVecBase3d(double x, double y, double z);

1641 10 operator = 4 2433 22 LVecBase3d::operator = 0 2 274 275 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase3d &LVecBase3d::operator =(LVecBase3d const &copy);
inline LVecBase3d &LVecBase3d::operator =(double fill_value);

1642 12 operator new 4 2433 24 LVecBase3d::operator new 0 1 276 0
126
inline void *LVecBase3d::operator new(unsigned int size);
inline void *LVecBase3d::operator new(unsigned int size, void *ptr);

1643 15 operator delete 4 2433 27 LVecBase3d::operator delete 0 0 0
108
inline void LVecBase3d::operator delete(void *ptr);
inline void LVecBase3d::operator delete(void *, void *);

1644 12 validate_ptr 4 2433 24 LVecBase3d::validate_ptr 0 0 0
61
static inline bool LVecBase3d::validate_ptr(void const *ptr);

1645 4 zero 4 2433 16 LVecBase3d::zero 0 1 277 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3d const &LVecBase3d::zero(void);

1646 6 unit_x 4 2433 18 LVecBase3d::unit_x 0 1 278 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_x(void);

1647 6 unit_y 4 2433 18 LVecBase3d::unit_y 0 1 279 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_y(void);

1648 6 unit_z 4 2433 18 LVecBase3d::unit_z 0 1 280 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_z(void);

1649 11 ~LVecBase3d 4 2433 23 LVecBase3d::~LVecBase3d 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3d::~LVecBase3d(void);

1650 10 __reduce__ 4 2433 22 LVecBase3d::__reduce__ 0 1 281 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase3d::__reduce__(PyObject *self) const;

1651 11 operator [] 4 2433 23 LVecBase3d::operator [] 0 2 282 283 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase3d::operator [](int i) const;
inline double &LVecBase3d::operator [](int i);

1652 11 __setitem__ 4 2433 23 LVecBase3d::__setitem__ 0 1 284 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3d::__setitem__(int i, double v);

1653 4 size 4 2433 16 LVecBase3d::size 0 1 285 574
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3d::size(void);

1654 6 is_nan 4 2433 18 LVecBase3d::is_nan 0 1 286 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3d::is_nan(void) const;

1655 8 get_cell 4 2433 20 LVecBase3d::get_cell 0 1 287 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase3d::get_cell(int i) const;

1656 5 get_x 4 2433 17 LVecBase3d::get_x 0 1 288 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_x(void) const;

1657 5 get_y 4 2433 17 LVecBase3d::get_y 0 1 289 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_y(void) const;

1658 5 get_z 4 2433 17 LVecBase3d::get_z 0 1 290 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_z(void) const;

1659 8 set_cell 4 2433 20 LVecBase3d::set_cell 0 1 291 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3d::set_cell(int i, double value);

1660 5 set_x 4 2433 17 LVecBase3d::set_x 0 1 292 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_x(double value);

1661 5 set_y 4 2433 17 LVecBase3d::set_y 0 1 293 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_y(double value);

1662 5 set_z 4 2433 17 LVecBase3d::set_z 0 1 294 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_z(double value);

1663 6 get_xy 4 2433 18 LVecBase3d::get_xy 0 1 295 636
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xy(void) const;

1664 6 get_xz 4 2433 18 LVecBase3d::get_xz 0 1 296 646
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xz(void) const;

1665 6 get_yz 4 2433 18 LVecBase3d::get_yz 0 1 297 634
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_yz(void) const;

1666 11 add_to_cell 4 2433 23 LVecBase3d::add_to_cell 0 1 298 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase3d::add_to_cell(int i, double value);

1667 5 add_x 4 2433 17 LVecBase3d::add_x 0 1 299 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_x(double value);

1668 5 add_y 4 2433 17 LVecBase3d::add_y 0 1 300 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_y(double value);

1669 5 add_z 4 2433 17 LVecBase3d::add_z 0 1 301 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_z(double value);

1670 8 get_data 4 2433 20 LVecBase3d::get_data 0 1 302 800
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase3d::get_data(void) const;

1671 18 get_num_components 4 2433 30 LVecBase3d::get_num_components 0 1 303 558
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3d::get_num_components(void) const;

1672 4 fill 4 2433 16 LVecBase3d::fill 0 1 304 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase3d::fill(double fill_value);

1673 3 set 4 2433 15 LVecBase3d::set 0 1 305 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void LVecBase3d::set(double x, double y, double z);

1674 6 length 4 2433 18 LVecBase3d::length 0 1 306 592
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase3d::length(void) const;

1675 14 length_squared 4 2433 26 LVecBase3d::length_squared 0 1 307 602
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase3d::length_squared(void) const;

1676 9 normalize 4 2433 21 LVecBase3d::normalize 0 1 308 736
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3d::normalize(void);

1677 3 dot 4 2433 15 LVecBase3d::dot 0 1 309 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase3d::dot(LVecBase3d const &other) const;

1678 5 cross 4 2433 17 LVecBase3d::cross 0 1 310 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3d LVecBase3d::cross(LVecBase3d const &other) const;

1679 7 project 4 2433 19 LVecBase3d::project 0 1 311 782
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LVecBase3d::project(LVecBase3d const &onto) const;

1680 10 operator < 4 2433 22 LVecBase3d::operator < 0 1 312 998
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase3d::operator <(LVecBase3d const &other) const;

1681 11 operator == 4 2433 23 LVecBase3d::operator == 0 1 313 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator ==(LVecBase3d const &other) const;

1682 11 operator != 4 2433 23 LVecBase3d::operator != 0 1 314 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase3d::operator !=(LVecBase3d const &other) const;

1683 20 get_standardized_hpr 4 2433 32 LVecBase3d::get_standardized_hpr 0 1 315 2060
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary posible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary posible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3d LVecBase3d::get_standardized_hpr(void) const;

1684 10 compare_to 4 2433 22 LVecBase3d::compare_to 0 2 316 317 1656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase3d::compare_to(LVecBase3d const &other) const;
inline int LVecBase3d::compare_to(LVecBase3d const &other, double threshold) const;

1685 8 get_hash 4 2433 20 LVecBase3d::get_hash 0 2 318 319 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase3d::get_hash(void) const;
inline unsigned int LVecBase3d::get_hash(double threshold) const;

1686 8 add_hash 4 2433 20 LVecBase3d::add_hash 0 2 320 321 1034
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase3d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3d::add_hash(unsigned int hash, double threshold) const;

1687 10 operator - 68 2433 22 LVecBase3d::operator - 0 1 322 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LVecBase3d::operator -(void) const;

1688 10 operator + 4 2433 22 LVecBase3d::operator + 0 1 323 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator +(LVecBase3d const &other) const;

1689 10 operator - 4 2433 22 LVecBase3d::operator - 0 1 324 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase3d LVecBase3d::operator -(LVecBase3d const &other) const;

1690 10 operator * 4 2433 22 LVecBase3d::operator * 0 1 325 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator *(double scalar) const;

1691 10 operator / 4 2433 22 LVecBase3d::operator / 0 1 326 452
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LVecBase3d::operator /(double scalar) const;

1692 11 operator += 4 2433 23 LVecBase3d::operator += 0 1 327 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator +=(LVecBase3d const &other);

1693 11 operator -= 4 2433 23 LVecBase3d::operator -= 0 1 328 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase3d::operator -=(LVecBase3d const &other);

1694 11 operator *= 4 2433 23 LVecBase3d::operator *= 0 1 329 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator *=(double scalar);

1695 11 operator /= 4 2433 23 LVecBase3d::operator /= 0 1 330 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::operator /=(double scalar);

1696 4 fmax 4 2433 16 LVecBase3d::fmax 0 1 331 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmax(LVecBase3d const &other);

1697 4 fmin 4 2433 16 LVecBase3d::fmin 0 1 332 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase3d LVecBase3d::fmin(LVecBase3d const &other);

1698 10 cross_into 4 2433 22 LVecBase3d::cross_into 0 1 333 482
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assigment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assigment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3d::cross_into(LVecBase3d const &other);

1699 12 almost_equal 4 2433 24 LVecBase3d::almost_equal 0 2 334 335 1326
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase3d::almost_equal(LVecBase3d const &other, double threshold) const;
inline bool LVecBase3d::almost_equal(LVecBase3d const &other) const;

1700 6 output 4 2433 18 LVecBase3d::output 0 1 336 434
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::output(ostream &out) const;

1701 11 python_repr 4 2433 23 LVecBase3d::python_repr 0 1 337 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1702 14 get_class_type 4 2433 26 LVecBase3d::get_class_type 0 1 338 0
51
static TypeHandle LVecBase3d::get_class_type(void);

1703 29 get_default_coordinate_system 1 0 29 get_default_coordinate_system 0 1 1305 0
53
CoordinateSystem get_default_coordinate_system(void);

1704 9 LVector3f 4 2435 20 LVector3f::LVector3f 0 4 339 340 341 342 1387
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
190
inline LVector3f::LVector3f(void);
inline LVector3f::LVector3f(LVecBase3f const &copy);
inline LVector3f::LVector3f(float fill_value);
inline LVector3f::LVector3f(float x, float y, float z);

1705 10 operator = 4 2435 21 LVector3f::operator = 0 2 343 344 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector3f &LVector3f::operator =(LVecBase3f const &copy);
inline LVector3f &LVector3f::operator =(float fill_value);

1706 4 zero 4 2435 15 LVector3f::zero 0 1 345 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3f const &LVector3f::zero(void);

1707 6 unit_x 4 2435 17 LVector3f::unit_x 0 1 346 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_x(void);

1708 6 unit_y 4 2435 17 LVector3f::unit_y 0 1 347 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_y(void);

1709 6 unit_z 4 2435 17 LVector3f::unit_z 0 1 348 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_z(void);

1710 6 get_xy 4 2435 17 LVector3f::get_xy 0 1 349 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xy(void) const;

1711 6 get_xz 4 2435 17 LVector3f::get_xz 0 1 350 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xz(void) const;

1712 6 get_yz 4 2435 17 LVector3f::get_yz 0 1 351 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_yz(void) const;

1713 10 operator - 68 2435 21 LVector3f::operator - 0 1 352 216
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector3f LVector3f::operator -(void) const;

1714 10 operator + 4 2435 21 LVector3f::operator + 0 2 353 354 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3f LVector3f::operator +(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator +(LVector3f const &other) const;

1715 10 operator - 4 2435 21 LVector3f::operator - 0 2 355 356 451
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3f LVector3f::operator -(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator -(LVector3f const &other) const;

1716 5 cross 4 2435 16 LVector3f::cross 0 1 357 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3f LVector3f::cross(LVecBase3f const &other) const;

1717 7 project 4 2435 18 LVector3f::project 0 1 358 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3f LVector3f::project(LVecBase3f const &onto) const;

1718 9 angle_rad 4 2435 20 LVector3f::angle_rad 0 1 359 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_rad(LVector3f const &other) const;

1719 9 angle_deg 4 2435 20 LVector3f::angle_deg 0 1 360 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_deg(LVector3f const &other) const;

1720 16 signed_angle_rad 4 2435 27 LVector3f::signed_angle_rad 0 1 361 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_rad(LVector3f const &other, LVector3f const &ref) const;

1721 16 signed_angle_deg 4 2435 27 LVector3f::signed_angle_deg 0 1 362 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_deg(LVector3f const &other, LVector3f const &ref) const;

1722 18 relative_angle_rad 4 2435 29 LVector3f::relative_angle_rad 0 1 363 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_rad(LVector3f const &other) const;

1723 18 relative_angle_deg 4 2435 29 LVector3f::relative_angle_deg 0 1 364 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_deg(LVector3f const &other) const;

1724 10 operator * 4 2435 21 LVector3f::operator * 0 1 365 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator *(float scalar) const;

1725 10 operator / 4 2435 21 LVector3f::operator / 0 1 366 226
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector3f LVector3f::operator /(float scalar) const;

1726 2 up 4 2435 13 LVector3f::up 0 2 367 368 341
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3f LVector3f::up(CoordinateSystem cs = (CS_default));

1727 5 right 4 2435 16 LVector3f::right 0 2 369 370 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3f LVector3f::right(CoordinateSystem cs = (CS_default));

1728 7 forward 4 2435 18 LVector3f::forward 0 2 371 372 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3f LVector3f::forward(CoordinateSystem cs = (CS_default));

1729 4 down 4 2435 15 LVector3f::down 0 2 373 374 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::down(CoordinateSystem cs = (CS_default));

1730 4 left 4 2435 15 LVector3f::left 0 2 375 376 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::left(CoordinateSystem cs = (CS_default));

1731 4 back 4 2435 15 LVector3f::back 0 2 377 378 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3f LVector3f::back(CoordinateSystem cs = (CS_default));

1732 3 rfu 4 2435 14 LVector3f::rfu 0 2 379 380 524
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
109
static inline LVector3f LVector3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

1733 11 python_repr 4 2435 22 LVector3f::python_repr 0 1 381 220
////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1734 14 get_class_type 4 2435 25 LVector3f::get_class_type 0 1 382 0
50
static TypeHandle LVector3f::get_class_type(void);

1735 10 ~LVector3f 4 2435 21 LVector3f::~LVector3f 0 0 0
28
LVector3f::~LVector3f(void);

1736 9 LVector3d 4 2436 20 LVector3d::LVector3d 0 4 383 384 385 386 2776
// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
194
inline LVector3d::LVector3d(void);
inline LVector3d::LVector3d(LVecBase3d const &copy);
inline LVector3d::LVector3d(double fill_value);
inline LVector3d::LVector3d(double x, double y, double z);

1737 10 operator = 4 2436 21 LVector3d::operator = 0 2 387 388 926
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector3d &LVector3d::operator =(LVecBase3d const &copy);
inline LVector3d &LVector3d::operator =(double fill_value);

1738 4 zero 4 2436 15 LVector3d::zero 0 1 389 524
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3d const &LVector3d::zero(void);

1739 6 unit_x 4 2436 17 LVector3d::unit_x 0 1 390 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_x(void);

1740 6 unit_y 4 2436 17 LVector3d::unit_y 0 1 391 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_y(void);

1741 6 unit_z 4 2436 17 LVector3d::unit_z 0 1 392 518
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_z(void);

1742 6 get_xy 4 2436 17 LVector3d::get_xy 0 1 393 634
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xy(void) const;

1743 6 get_xz 4 2436 17 LVector3d::get_xz 0 1 394 644
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xz(void) const;

1744 6 get_yz 4 2436 17 LVector3d::get_yz 0 1 395 632
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_yz(void) const;

1745 10 operator - 68 2436 21 LVector3d::operator - 0 1 396 434
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector3d LVector3d::operator -(void) const;

1746 10 operator + 4 2436 21 LVector3d::operator + 0 2 397 398 904
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3d LVector3d::operator +(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator +(LVector3d const &other) const;

1747 10 operator - 4 2436 21 LVector3d::operator - 0 2 399 400 904
////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase3d LVector3d::operator -(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator -(LVector3d const &other) const;

1748 5 cross 4 2436 16 LVector3d::cross 0 1 401 430
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3d LVector3d::cross(LVecBase3d const &other) const;

1749 7 project 4 2436 18 LVector3d::project 0 1 402 780
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3d LVector3d::project(LVecBase3d const &onto) const;

1750 9 angle_rad 4 2436 20 LVector3d::angle_rad 0 1 403 772
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_rad(LVector3d const &other) const;

1751 9 angle_deg 4 2436 20 LVector3d::angle_deg 0 1 404 754
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_deg(LVector3d const &other) const;

1752 16 signed_angle_rad 4 2436 27 LVector3d::signed_angle_rad 0 1 405 1098
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_rad(LVector3d const &other, LVector3d const &ref) const;

1753 16 signed_angle_deg 4 2436 27 LVector3d::signed_angle_deg 0 1 406 1100
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_deg(LVector3d const &other, LVector3d const &ref) const;

1754 18 relative_angle_rad 4 2436 29 LVector3d::relative_angle_rad 0 1 407 534
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_rad(LVector3d const &other) const;

1755 18 relative_angle_deg 4 2436 29 LVector3d::relative_angle_deg 0 1 408 534
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_deg(LVector3d const &other) const;

1756 10 operator * 4 2436 21 LVector3d::operator * 0 1 409 454
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator *(double scalar) const;

1757 10 operator / 4 2436 21 LVector3d::operator / 0 1 410 454
////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector3d LVector3d::operator /(double scalar) const;

1758 2 up 4 2436 13 LVector3d::up 0 2 411 412 634
// Some special named constructors for LVector3.

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
74
static inline LVector3d LVector3d::up(CoordinateSystem cs = (CS_default));

1759 5 right 4 2436 16 LVector3d::right 0 2 413 414 596
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
77
static inline LVector3d LVector3d::right(CoordinateSystem cs = (CS_default));

1760 7 forward 4 2436 18 LVector3d::forward 0 2 415 416 604
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
79
static inline LVector3d LVector3d::forward(CoordinateSystem cs = (CS_default));

1761 4 down 4 2436 15 LVector3d::down 0 2 417 418 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::down(CoordinateSystem cs = (CS_default));

1762 4 left 4 2436 15 LVector3d::left 0 2 419 420 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::left(CoordinateSystem cs = (CS_default));

1763 4 back 4 2436 15 LVector3d::back 0 2 421 422 592
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
76
static inline LVector3d LVector3d::back(CoordinateSystem cs = (CS_default));

1764 3 rfu 4 2436 14 LVector3d::rfu 0 2 423 424 980
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3)::
112
static inline LVector3d LVector3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

1765 11 python_repr 4 2436 22 LVector3d::python_repr 0 1 425 442
////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1766 14 get_class_type 4 2436 25 LVector3d::get_class_type 0 1 426 0
50
static TypeHandle LVector3d::get_class_type(void);

1767 10 ~LVector3d 4 2436 21 LVector3d::~LVector3d 0 0 0
28
LVector3d::~LVector3d(void);

1768 8 LPoint3f 4 2437 18 LPoint3f::LPoint3f 0 4 427 428 429 430 1370
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
182
inline LPoint3f::LPoint3f(void);
inline LPoint3f::LPoint3f(LVecBase3f const &copy);
inline LPoint3f::LPoint3f(float fill_value);
inline LPoint3f::LPoint3f(float x, float y, float z);

1769 10 operator = 4 2437 20 LPoint3f::operator = 0 2 431 432 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint3f &LPoint3f::operator =(LVecBase3f const &copy);
inline LPoint3f &LPoint3f::operator =(float fill_value);

1770 4 zero 4 2437 14 LPoint3f::zero 0 1 433 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3f const &LPoint3f::zero(void);

1771 6 unit_x 4 2437 16 LPoint3f::unit_x 0 1 434 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_x(void);

1772 6 unit_y 4 2437 16 LPoint3f::unit_y 0 1 435 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_y(void);

1773 6 unit_z 4 2437 16 LPoint3f::unit_z 0 1 436 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_z(void);

1774 6 get_xy 4 2437 16 LPoint3f::get_xy 0 1 437 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xy(void) const;

1775 6 get_xz 4 2437 16 LPoint3f::get_xz 0 1 438 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xz(void) const;

1776 6 get_yz 4 2437 16 LPoint3f::get_yz 0 1 439 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_yz(void) const;

1777 10 operator - 68 2437 20 LPoint3f::operator - 0 1 440 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint3f LPoint3f::operator -(void) const;

1778 10 operator + 4 2437 20 LPoint3f::operator + 0 2 441 442 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase3f LPoint3f::operator +(LVecBase3f const &other) const;
inline LPoint3f LPoint3f::operator +(LVector3f const &other) const;

1779 10 operator - 4 2437 20 LPoint3f::operator - 0 3 443 444 445 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase3f LPoint3f::operator -(LVecBase3f const &other) const;
inline LVector3f LPoint3f::operator -(LPoint3f const &other) const;
inline LPoint3f LPoint3f::operator -(LVector3f const &other) const;

1780 5 cross 4 2437 15 LPoint3f::cross 0 1 446 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3f LPoint3f::cross(LVecBase3f const &other) const;

1781 7 project 4 2437 17 LPoint3f::project 0 1 447 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3f LPoint3f::project(LVecBase3f const &onto) const;

1782 10 operator * 4 2437 20 LPoint3f::operator * 0 1 448 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator *(float scalar) const;

1783 10 operator / 4 2437 20 LPoint3f::operator / 0 1 449 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint3f LPoint3f::operator /(float scalar) const;

1784 6 origin 4 2437 16 LPoint3f::origin 0 2 450 451 489
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3f LPoint3f::origin(CoordinateSystem cs = (CS_default));

1785 3 rfu 4 2437 13 LPoint3f::rfu 0 2 452 453 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
107
static inline LPoint3f LPoint3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (CS_default));

1786 11 python_repr 4 2437 21 LPoint3f::python_repr 0 1 454 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1787 14 get_class_type 4 2437 24 LPoint3f::get_class_type 0 1 455 0
49
static TypeHandle LPoint3f::get_class_type(void);

1788 9 ~LPoint3f 4 2437 19 LPoint3f::~LPoint3f 0 0 0
26
LPoint3f::~LPoint3f(void);

1789 8 LPoint3d 4 2438 18 LPoint3d::LPoint3d 0 4 456 457 458 459 2742
// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
186
inline LPoint3d::LPoint3d(void);
inline LPoint3d::LPoint3d(LVecBase3d const &copy);
inline LPoint3d::LPoint3d(double fill_value);
inline LPoint3d::LPoint3d(double x, double y, double z);

1790 10 operator = 4 2438 20 LPoint3d::operator = 0 2 460 461 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint3d &LPoint3d::operator =(LVecBase3d const &copy);
inline LPoint3d &LPoint3d::operator =(double fill_value);

1791 4 zero 4 2438 14 LPoint3d::zero 0 1 462 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3d const &LPoint3d::zero(void);

1792 6 unit_x 4 2438 16 LPoint3d::unit_x 0 1 463 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_x(void);

1793 6 unit_y 4 2438 16 LPoint3d::unit_y 0 1 464 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_y(void);

1794 6 unit_z 4 2438 16 LPoint3d::unit_z 0 1 465 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_z(void);

1795 6 get_xy 4 2438 16 LPoint3d::get_xy 0 1 466 632
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xy(void) const;

1796 6 get_xz 4 2438 16 LPoint3d::get_xz 0 1 467 642
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xz(void) const;

1797 6 get_yz 4 2438 16 LPoint3d::get_yz 0 1 468 630
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_yz(void) const;

1798 10 operator - 68 2438 20 LPoint3d::operator - 0 1 469 426
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint3d LPoint3d::operator -(void) const;

1799 10 operator + 4 2438 20 LPoint3d::operator + 0 2 470 471 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase3d LPoint3d::operator +(LVecBase3d const &other) const;
inline LPoint3d LPoint3d::operator +(LVector3d const &other) const;

1800 10 operator - 4 2438 20 LPoint3d::operator - 0 3 472 473 474 1324
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase3d LPoint3d::operator -(LVecBase3d const &other) const;
inline LVector3d LPoint3d::operator -(LPoint3d const &other) const;
inline LPoint3d LPoint3d::operator -(LVector3d const &other) const;

1801 5 cross 4 2438 15 LPoint3d::cross 0 1 475 422
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3d LPoint3d::cross(LVecBase3d const &other) const;

1802 7 project 4 2438 17 LPoint3d::project 0 1 476 778
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3d LPoint3d::project(LVecBase3d const &onto) const;

1803 10 operator * 4 2438 20 LPoint3d::operator * 0 1 477 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator *(double scalar) const;

1804 10 operator / 4 2438 20 LPoint3d::operator / 0 1 478 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint3d LPoint3d::operator /(double scalar) const;

1805 6 origin 4 2438 16 LPoint3d::origin 0 2 479 480 931
// Some special named constructors for LPoint3.

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
76
static inline LPoint3d LPoint3d::origin(CoordinateSystem cs = (CS_default));

1806 3 rfu 4 2438 13 LPoint3d::rfu 0 2 481 482 768
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
110
static inline LPoint3d LPoint3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (CS_default));

1807 11 python_repr 4 2438 21 LPoint3d::python_repr 0 1 483 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1808 14 get_class_type 4 2438 24 LPoint3d::get_class_type 0 1 484 0
49
static TypeHandle LPoint3d::get_class_type(void);

1809 9 ~LPoint3d 4 2438 19 LPoint3d::~LPoint3d 0 0 0
26
LPoint3d::~LPoint3d(void);

1810 10 LVecBase4f 4 2439 22 LVecBase4f::LVecBase4f 0 4 485 486 487 488 1380
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
207
inline LVecBase4f::LVecBase4f(void);
inline LVecBase4f::LVecBase4f(LVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(float fill_value);
inline LVecBase4f::LVecBase4f(float x, float y, float z, float w);

1811 10 operator = 4 2439 22 LVecBase4f::operator = 0 2 489 490 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase4f &LVecBase4f::operator =(LVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(float fill_value);

1812 12 operator new 4 2439 24 LVecBase4f::operator new 0 1 491 0
126
inline void *LVecBase4f::operator new(unsigned int size);
inline void *LVecBase4f::operator new(unsigned int size, void *ptr);

1813 15 operator delete 4 2439 27 LVecBase4f::operator delete 0 0 0
108
inline void LVecBase4f::operator delete(void *ptr);
inline void LVecBase4f::operator delete(void *, void *);

1814 12 validate_ptr 4 2439 24 LVecBase4f::validate_ptr 0 0 0
61
static inline bool LVecBase4f::validate_ptr(void const *ptr);

1815 4 zero 4 2439 16 LVecBase4f::zero 0 1 492 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4f const &LVecBase4f::zero(void);

1816 6 unit_x 4 2439 18 LVecBase4f::unit_x 0 1 493 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_x(void);

1817 6 unit_y 4 2439 18 LVecBase4f::unit_y 0 1 494 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_y(void);

1818 6 unit_z 4 2439 18 LVecBase4f::unit_z 0 1 495 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_z(void);

1819 6 unit_w 4 2439 18 LVecBase4f::unit_w 0 1 496 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_w(void);

1820 11 ~LVecBase4f 4 2439 23 LVecBase4f::~LVecBase4f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4f::~LVecBase4f(void);

1821 10 __reduce__ 4 2439 22 LVecBase4f::__reduce__ 0 1 497 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase4f::__reduce__(PyObject *self) const;

1822 11 operator [] 4 2439 23 LVecBase4f::operator [] 0 2 498 499 450
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase4f::operator [](int i) const;
inline float &LVecBase4f::operator [](int i);

1823 11 __setitem__ 4 2439 23 LVecBase4f::__setitem__ 0 1 500 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void LVecBase4f::__setitem__(int i, float v);

1824 4 size 4 2439 16 LVecBase4f::size 0 1 501 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4f::size(void);

1825 6 is_nan 4 2439 18 LVecBase4f::is_nan 0 1 502 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4f::is_nan(void) const;

1826 8 get_cell 4 2439 20 LVecBase4f::get_cell 0 1 503 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase4f::get_cell(int i) const;

1827 5 get_x 4 2439 17 LVecBase4f::get_x 0 1 504 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_x(void) const;

1828 5 get_y 4 2439 17 LVecBase4f::get_y 0 1 505 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_y(void) const;

1829 5 get_z 4 2439 17 LVecBase4f::get_z 0 1 506 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_z(void) const;

1830 5 get_w 4 2439 17 LVecBase4f::get_w 0 1 507 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_w(void) const;

1831 8 set_cell 4 2439 20 LVecBase4f::set_cell 0 1 508 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4f::set_cell(int i, float value);

1832 5 set_x 4 2439 17 LVecBase4f::set_x 0 1 509 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_x(float value);

1833 5 set_y 4 2439 17 LVecBase4f::set_y 0 1 510 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_y(float value);

1834 5 set_z 4 2439 17 LVecBase4f::set_z 0 1 511 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_z(float value);

1835 5 set_w 4 2439 17 LVecBase4f::set_w 0 1 512 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_w(float value);

1836 11 add_to_cell 4 2439 23 LVecBase4f::add_to_cell 0 1 513 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4f::add_to_cell(int i, float value);

1837 5 add_x 4 2439 17 LVecBase4f::add_x 0 1 514 368
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_x(float value);

1838 5 add_y 4 2439 17 LVecBase4f::add_y 0 1 515 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_y(float value);

1839 5 add_z 4 2439 17 LVecBase4f::add_z 0 1 516 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_z(float value);

1840 5 add_w 4 2439 17 LVecBase4f::add_w 0 1 517 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_w(float value);

1841 8 get_data 4 2439 20 LVecBase4f::get_data 0 1 518 398
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase4f::get_data(void) const;

1842 18 get_num_components 4 2439 30 LVecBase4f::get_num_components 0 1 519 277
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4f::get_num_components(void) const;

1843 4 fill 4 2439 16 LVecBase4f::fill 0 1 520 361
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase4f::fill(float fill_value);

1844 3 set 4 2439 15 LVecBase4f::set 0 1 521 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::set(float x, float y, float z, float w);

1845 6 length 4 2439 18 LVecBase4f::length 0 1 522 292
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase4f::length(void) const;

1846 14 length_squared 4 2439 26 LVecBase4f::length_squared 0 1 523 297
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase4f::length_squared(void) const;

1847 9 normalize 4 2439 21 LVecBase4f::normalize 0 1 524 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4f::normalize(void);

1848 3 dot 4 2439 15 LVecBase4f::dot 0 1 525 210
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase4f::dot(LVecBase4f const &other) const;

1849 7 project 4 2439 19 LVecBase4f::project 0 1 526 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f LVecBase4f::project(LVecBase4f const &onto) const;

1850 10 operator < 4 2439 22 LVecBase4f::operator < 0 1 527 495
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4f::operator <(LVecBase4f const &other) const;

1851 11 operator == 4 2439 23 LVecBase4f::operator == 0 1 528 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator ==(LVecBase4f const &other) const;

1852 11 operator != 4 2439 23 LVecBase4f::operator != 0 1 529 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4f::operator !=(LVecBase4f const &other) const;

1853 10 compare_to 4 2439 22 LVecBase4f::compare_to 0 2 530 531 821
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase4f::compare_to(LVecBase4f const &other) const;
inline int LVecBase4f::compare_to(LVecBase4f const &other, float threshold) const;

1854 8 get_hash 4 2439 20 LVecBase4f::get_hash 0 2 532 533 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase4f::get_hash(void) const;
inline unsigned int LVecBase4f::get_hash(float threshold) const;

1855 8 add_hash 4 2439 20 LVecBase4f::add_hash 0 2 534 535 510
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase4f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4f::add_hash(unsigned int hash, float threshold) const;

1856 10 operator - 68 2439 22 LVecBase4f::operator - 0 1 536 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase4f LVecBase4f::operator -(void) const;

1857 10 operator + 4 2439 22 LVecBase4f::operator + 0 1 537 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator +(LVecBase4f const &other) const;

1858 10 operator - 4 2439 22 LVecBase4f::operator - 0 1 538 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4f LVecBase4f::operator -(LVecBase4f const &other) const;

1859 10 operator * 4 2439 22 LVecBase4f::operator * 0 1 539 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator *(float scalar) const;

1860 10 operator / 4 2439 22 LVecBase4f::operator / 0 1 540 222
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f LVecBase4f::operator /(float scalar) const;

1861 11 operator += 4 2439 23 LVecBase4f::operator += 0 1 541 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator +=(LVecBase4f const &other);

1862 11 operator -= 4 2439 23 LVecBase4f::operator -= 0 1 542 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4f::operator -=(LVecBase4f const &other);

1863 11 operator *= 4 2439 23 LVecBase4f::operator *= 0 1 543 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator *=(float scalar);

1864 11 operator /= 4 2439 23 LVecBase4f::operator /= 0 1 544 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LVecBase4f::operator /=(float scalar);

1865 4 fmax 4 2439 16 LVecBase4f::fmax 0 1 545 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmax(LVecBase4f const &other);

1866 4 fmin 4 2439 16 LVecBase4f::fmin 0 1 546 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4f LVecBase4f::fmin(LVecBase4f const &other);

1867 12 almost_equal 4 2439 24 LVecBase4f::almost_equal 0 2 547 548 656
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase4f::almost_equal(LVecBase4f const &other, float threshold) const;
inline bool LVecBase4f::almost_equal(LVecBase4f const &other) const;

1868 6 output 4 2439 18 LVecBase4f::output 0 1 549 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4f::output(ostream &out) const;

1869 11 python_repr 4 2439 23 LVecBase4f::python_repr 0 1 550 221
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1870 14 get_class_type 4 2439 26 LVecBase4f::get_class_type 0 1 551 0
51
static TypeHandle LVecBase4f::get_class_type(void);

1871 10 LVecBase4d 4 2440 22 LVecBase4d::LVecBase4d 0 4 552 553 554 555 2762
// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
212
inline LVecBase4d::LVecBase4d(void);
inline LVecBase4d::LVecBase4d(LVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(double fill_value);
inline LVecBase4d::LVecBase4d(double x, double y, double z, double w);

1872 10 operator = 4 2440 22 LVecBase4d::operator = 0 2 556 557 930
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase4d &LVecBase4d::operator =(LVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(double fill_value);

1873 12 operator new 4 2440 24 LVecBase4d::operator new 0 1 558 0
126
inline void *LVecBase4d::operator new(unsigned int size);
inline void *LVecBase4d::operator new(unsigned int size, void *ptr);

1874 15 operator delete 4 2440 27 LVecBase4d::operator delete 0 0 0
108
inline void LVecBase4d::operator delete(void *ptr);
inline void LVecBase4d::operator delete(void *, void *);

1875 12 validate_ptr 4 2440 24 LVecBase4d::validate_ptr 0 0 0
61
static inline bool LVecBase4d::validate_ptr(void const *ptr);

1876 4 zero 4 2440 16 LVecBase4d::zero 0 1 559 520
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4d const &LVecBase4d::zero(void);

1877 6 unit_x 4 2440 18 LVecBase4d::unit_x 0 1 560 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_x(void);

1878 6 unit_y 4 2440 18 LVecBase4d::unit_y 0 1 561 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_y(void);

1879 6 unit_z 4 2440 18 LVecBase4d::unit_z 0 1 562 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_z(void);

1880 6 unit_w 4 2440 18 LVecBase4d::unit_w 0 1 563 514
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_w(void);

1881 11 ~LVecBase4d 4 2440 23 LVecBase4d::~LVecBase4d 0 0 436
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4d::~LVecBase4d(void);

1882 10 __reduce__ 4 2440 22 LVecBase4d::__reduce__ 0 1 564 319
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
55
PyObject *LVecBase4d::__reduce__(PyObject *self) const;

1883 11 operator [] 4 2440 23 LVecBase4d::operator [] 0 2 565 566 902
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase4d::operator [](int i) const;
inline double &LVecBase4d::operator [](int i);

1884 11 __setitem__ 4 2440 23 LVecBase4d::__setitem__ 0 1 567 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4d::__setitem__(int i, double v);

1885 4 size 4 2440 16 LVecBase4d::size 0 1 568 574
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4d::size(void);

1886 6 is_nan 4 2440 18 LVecBase4d::is_nan 0 1 569 618
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4d::is_nan(void) const;

1887 8 get_cell 4 2440 20 LVecBase4d::get_cell 0 1 570 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase4d::get_cell(int i) const;

1888 5 get_x 4 2440 17 LVecBase4d::get_x 0 1 571 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_x(void) const;

1889 5 get_y 4 2440 17 LVecBase4d::get_y 0 1 572 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_y(void) const;

1890 5 get_z 4 2440 17 LVecBase4d::get_z 0 1 573 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_z(void) const;

1891 5 get_w 4 2440 17 LVecBase4d::get_w 0 1 574 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_w(void) const;

1892 8 set_cell 4 2440 20 LVecBase4d::set_cell 0 1 575 432
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4d::set_cell(int i, double value);

1893 5 set_x 4 2440 17 LVecBase4d::set_x 0 1 576 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_x(double value);

1894 5 set_y 4 2440 17 LVecBase4d::set_y 0 1 577 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_y(double value);

1895 5 set_z 4 2440 17 LVecBase4d::set_z 0 1 578 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_z(double value);

1896 5 set_w 4 2440 17 LVecBase4d::set_w 0 1 579 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_w(double value);

1897 11 add_to_cell 4 2440 23 LVecBase4d::add_to_cell 0 1 580 594
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase4d::add_to_cell(int i, double value);

1898 5 add_x 4 2440 17 LVecBase4d::add_x 0 1 581 582
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_x(double value);

1899 5 add_y 4 2440 17 LVecBase4d::add_y 0 1 582 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_y(double value);

1900 5 add_z 4 2440 17 LVecBase4d::add_z 0 1 583 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_z(double value);

1901 5 add_w 4 2440 17 LVecBase4d::add_w 0 1 584 426
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_w(double value);

1902 8 get_data 4 2440 20 LVecBase4d::get_data 0 1 585 798
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase4d::get_data(void) const;

1903 18 get_num_components 4 2440 30 LVecBase4d::get_num_components 0 1 586 556
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4d::get_num_components(void) const;

1904 4 fill 4 2440 16 LVecBase4d::fill 0 1 587 724
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase4d::fill(double fill_value);

1905 3 set 4 2440 15 LVecBase4d::set 0 1 588 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::set(double x, double y, double z, double w);

1906 6 length 4 2440 18 LVecBase4d::length 0 1 589 586
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase4d::length(void) const;

1907 14 length_squared 4 2440 26 LVecBase4d::length_squared 0 1 590 596
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase4d::length_squared(void) const;

1908 9 normalize 4 2440 21 LVecBase4d::normalize 0 1 591 730
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4d::normalize(void);

1909 3 dot 4 2440 15 LVecBase4d::dot 0 1 592 422
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase4d::dot(LVecBase4d const &other) const;

1910 7 project 4 2440 19 LVecBase4d::project 0 1 593 782
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4d LVecBase4d::project(LVecBase4d const &onto) const;

1911 10 operator < 4 2440 22 LVecBase4d::operator < 0 1 594 992
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
66
inline bool LVecBase4d::operator <(LVecBase4d const &other) const;

1912 11 operator == 4 2440 23 LVecBase4d::operator == 0 1 595 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator ==(LVecBase4d const &other) const;

1913 11 operator != 4 2440 23 LVecBase4d::operator != 0 1 596 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
inline bool LVecBase4d::operator !=(LVecBase4d const &other) const;

1914 10 compare_to 4 2440 22 LVecBase4d::compare_to 0 2 597 598 1644
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase4d::compare_to(LVecBase4d const &other) const;
inline int LVecBase4d::compare_to(LVecBase4d const &other, double threshold) const;

1915 8 get_hash 4 2440 20 LVecBase4d::get_hash 0 2 599 600 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase4d::get_hash(void) const;
inline unsigned int LVecBase4d::get_hash(double threshold) const;

1916 8 add_hash 4 2440 20 LVecBase4d::add_hash 0 2 601 602 1022
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase4d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4d::add_hash(unsigned int hash, double threshold) const;

1917 10 operator - 68 2440 22 LVecBase4d::operator - 0 1 603 430
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline LVecBase4d LVecBase4d::operator -(void) const;

1918 10 operator + 4 2440 22 LVecBase4d::operator + 0 1 604 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator +(LVecBase4d const &other) const;

1919 10 operator - 4 2440 22 LVecBase4d::operator - 0 1 605 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
inline LVecBase4d LVecBase4d::operator -(LVecBase4d const &other) const;

1920 10 operator * 4 2440 22 LVecBase4d::operator * 0 1 606 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator *(double scalar) const;

1921 10 operator / 4 2440 22 LVecBase4d::operator / 0 1 607 446
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LVecBase4d::operator /(double scalar) const;

1922 11 operator += 4 2440 23 LVecBase4d::operator += 0 1 608 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator +=(LVecBase4d const &other);

1923 11 operator -= 4 2440 23 LVecBase4d::operator -= 0 1 609 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void LVecBase4d::operator -=(LVecBase4d const &other);

1924 11 operator *= 4 2440 23 LVecBase4d::operator *= 0 1 610 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator *=(double scalar);

1925 11 operator /= 4 2440 23 LVecBase4d::operator /= 0 1 611 438
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::operator /=(double scalar);

1926 4 fmax 4 2440 16 LVecBase4d::fmax 0 1 612 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmax(LVecBase4d const &other);

1927 4 fmin 4 2440 16 LVecBase4d::fmin 0 1 613 424
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVecBase4d LVecBase4d::fmin(LVecBase4d const &other);

1928 12 almost_equal 4 2440 24 LVecBase4d::almost_equal 0 2 614 615 1314
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase4d::almost_equal(LVecBase4d const &other, double threshold) const;
inline bool LVecBase4d::almost_equal(LVecBase4d const &other) const;

1929 6 output 4 2440 18 LVecBase4d::output 0 1 616 428
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::output(ostream &out) const;

1930 11 python_repr 4 2440 23 LVecBase4d::python_repr 0 1 617 444
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline void LVecBase4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1931 14 get_class_type 4 2440 26 LVecBase4d::get_class_type 0 1 618 0
51
static TypeHandle LVecBase4d::get_class_type(void);

1932 9 LVector4f 4 2441 20 LVector4f::LVector4f 0 4 619 620 621 622 1375
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
199
inline LVector4f::LVector4f(void);
inline LVector4f::LVector4f(LVecBase4f const &copy);
inline LVector4f::LVector4f(float fill_value);
inline LVector4f::LVector4f(float x, float y, float z, float w);

1933 10 operator = 4 2441 21 LVector4f::operator = 0 2 623 624 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector4f &LVector4f::operator =(LVecBase4f const &copy);
inline LVector4f &LVector4f::operator =(float fill_value);

1934 4 zero 4 2441 15 LVector4f::zero 0 1 625 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4f const &LVector4f::zero(void);

1935 6 unit_x 4 2441 17 LVector4f::unit_x 0 1 626 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_x(void);

1936 6 unit_y 4 2441 17 LVector4f::unit_y 0 1 627 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_y(void);

1937 6 unit_z 4 2441 17 LVector4f::unit_z 0 1 628 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_z(void);

1938 6 unit_w 4 2441 17 LVector4f::unit_w 0 1 629 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_w(void);

1939 10 operator - 68 2441 21 LVector4f::operator - 0 1 630 213
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector4f LVector4f::operator -(void) const;

1940 10 operator + 4 2441 21 LVector4f::operator + 0 2 631 632 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4f LVector4f::operator +(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator +(LVector4f const &other) const;

1941 10 operator - 4 2441 21 LVector4f::operator - 0 2 633 634 445
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4f LVector4f::operator -(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator -(LVector4f const &other) const;

1942 10 operator * 4 2441 21 LVector4f::operator * 0 1 635 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator *(float scalar) const;

1943 10 operator / 4 2441 21 LVector4f::operator / 0 1 636 223
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LVector4f LVector4f::operator /(float scalar) const;

1944 7 project 4 2441 18 LVector4f::project 0 1 637 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4f LVector4f::project(LVecBase4f const &onto) const;

1945 11 python_repr 4 2441 22 LVector4f::python_repr 0 1 638 220
////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1946 14 get_class_type 4 2441 25 LVector4f::get_class_type 0 1 639 0
50
static TypeHandle LVector4f::get_class_type(void);

1947 10 ~LVector4f 4 2441 21 LVector4f::~LVector4f 0 0 0
28
LVector4f::~LVector4f(void);

1948 9 LVector4d 4 2442 20 LVector4d::LVector4d 0 4 640 641 642 643 2752
// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
204
inline LVector4d::LVector4d(void);
inline LVector4d::LVector4d(LVecBase4d const &copy);
inline LVector4d::LVector4d(double fill_value);
inline LVector4d::LVector4d(double x, double y, double z, double w);

1949 10 operator = 4 2442 21 LVector4d::operator = 0 2 644 645 914
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector4d &LVector4d::operator =(LVecBase4d const &copy);
inline LVector4d &LVector4d::operator =(double fill_value);

1950 4 zero 4 2442 15 LVector4d::zero 0 1 646 518
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4d const &LVector4d::zero(void);

1951 6 unit_x 4 2442 17 LVector4d::unit_x 0 1 647 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_x(void);

1952 6 unit_y 4 2442 17 LVector4d::unit_y 0 1 648 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_y(void);

1953 6 unit_z 4 2442 17 LVector4d::unit_z 0 1 649 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_z(void);

1954 6 unit_w 4 2442 17 LVector4d::unit_w 0 1 650 512
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_w(void);

1955 10 operator - 68 2442 21 LVector4d::operator - 0 1 651 428
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline LVector4d LVector4d::operator -(void) const;

1956 10 operator + 4 2442 21 LVector4d::operator + 0 2 652 653 892
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4d LVector4d::operator +(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator +(LVector4d const &other) const;

1957 10 operator - 4 2442 21 LVector4d::operator - 0 2 654 655 892
////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
141
inline LVecBase4d LVector4d::operator -(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator -(LVector4d const &other) const;

1958 10 operator * 4 2442 21 LVector4d::operator * 0 1 656 448
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator *(double scalar) const;

1959 10 operator / 4 2442 21 LVector4d::operator / 0 1 657 448
////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LVector4d LVector4d::operator /(double scalar) const;

1960 7 project 4 2442 18 LVector4d::project 0 1 658 780
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4d LVector4d::project(LVecBase4d const &onto) const;

1961 11 python_repr 4 2442 22 LVector4d::python_repr 0 1 659 442
////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
95
inline void LVector4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1962 14 get_class_type 4 2442 25 LVector4d::get_class_type 0 1 660 0
50
static TypeHandle LVector4d::get_class_type(void);

1963 10 ~LVector4d 4 2442 21 LVector4d::~LVector4d 0 0 0
28
LVector4d::~LVector4d(void);

1964 8 LPoint4f 4 2443 18 LPoint4f::LPoint4f 0 4 661 662 663 664 1370
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
191
inline LPoint4f::LPoint4f(void);
inline LPoint4f::LPoint4f(LVecBase4f const &copy);
inline LPoint4f::LPoint4f(float fill_value);
inline LPoint4f::LPoint4f(float x, float y, float z, float w);

1965 10 operator = 4 2443 20 LPoint4f::operator = 0 2 665 666 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint4f &LPoint4f::operator =(LVecBase4f const &copy);
inline LPoint4f &LPoint4f::operator =(float fill_value);

1966 4 zero 4 2443 14 LPoint4f::zero 0 1 667 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4f const &LPoint4f::zero(void);

1967 6 unit_x 4 2443 16 LPoint4f::unit_x 0 1 668 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_x(void);

1968 6 unit_y 4 2443 16 LPoint4f::unit_y 0 1 669 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_y(void);

1969 6 unit_z 4 2443 16 LPoint4f::unit_z 0 1 670 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_z(void);

1970 6 unit_w 4 2443 16 LPoint4f::unit_w 0 1 671 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_w(void);

1971 10 operator - 68 2443 20 LPoint4f::operator - 0 1 672 212
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint4f LPoint4f::operator -(void) const;

1972 10 operator + 4 2443 20 LPoint4f::operator + 0 2 673 674 441
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase4f LPoint4f::operator +(LVecBase4f const &other) const;
inline LPoint4f LPoint4f::operator +(LVector4f const &other) const;

1973 10 operator - 4 2443 20 LPoint4f::operator - 0 3 675 676 677 661
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase4f LPoint4f::operator -(LVecBase4f const &other) const;
inline LVector4f LPoint4f::operator -(LPoint4f const &other) const;
inline LPoint4f LPoint4f::operator -(LVector4f const &other) const;

1974 10 operator * 4 2443 20 LPoint4f::operator * 0 1 678 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator *(float scalar) const;

1975 10 operator / 4 2443 20 LPoint4f::operator / 0 1 679 222
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LPoint4f LPoint4f::operator /(float scalar) const;

1976 7 project 4 2443 17 LPoint4f::project 0 1 680 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4f LPoint4f::project(LVecBase4f const &onto) const;

1977 11 python_repr 4 2443 21 LPoint4f::python_repr 0 1 681 219
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

1978 14 get_class_type 4 2443 24 LPoint4f::get_class_type 0 1 682 0
49
static TypeHandle LPoint4f::get_class_type(void);

1979 9 ~LPoint4f 4 2443 19 LPoint4f::~LPoint4f 0 0 0
26
LPoint4f::~LPoint4f(void);

1980 8 LPoint4d 4 2444 18 LPoint4d::LPoint4d 0 4 683 684 685 686 2742
// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
196
inline LPoint4d::LPoint4d(void);
inline LPoint4d::LPoint4d(LVecBase4d const &copy);
inline LPoint4d::LPoint4d(double fill_value);
inline LPoint4d::LPoint4d(double x, double y, double z, double w);

1981 10 operator = 4 2444 20 LPoint4d::operator = 0 2 687 688 910
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint4d &LPoint4d::operator =(LVecBase4d const &copy);
inline LPoint4d &LPoint4d::operator =(double fill_value);

1982 4 zero 4 2444 14 LPoint4d::zero 0 1 689 514
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4d const &LPoint4d::zero(void);

1983 6 unit_x 4 2444 16 LPoint4d::unit_x 0 1 690 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_x(void);

1984 6 unit_y 4 2444 16 LPoint4d::unit_y 0 1 691 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_y(void);

1985 6 unit_z 4 2444 16 LPoint4d::unit_z 0 1 692 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_z(void);

1986 6 unit_w 4 2444 16 LPoint4d::unit_w 0 1 693 508
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_w(void);

1987 10 operator - 68 2444 20 LPoint4d::operator - 0 1 694 426
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline LPoint4d LPoint4d::operator -(void) const;

1988 10 operator + 4 2444 20 LPoint4d::operator + 0 2 695 696 884
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
inline LVecBase4d LPoint4d::operator +(LVecBase4d const &other) const;
inline LPoint4d LPoint4d::operator +(LVector4d const &other) const;

1989 10 operator - 4 2444 20 LPoint4d::operator - 0 3 697 698 699 1324
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
206
inline LVecBase4d LPoint4d::operator -(LVecBase4d const &other) const;
inline LVector4d LPoint4d::operator -(LPoint4d const &other) const;
inline LPoint4d LPoint4d::operator -(LVector4d const &other) const;

1990 10 operator * 4 2444 20 LPoint4d::operator * 0 1 700 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator *(double scalar) const;

1991 10 operator / 4 2444 20 LPoint4d::operator / 0 1 701 446
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LPoint4d LPoint4d::operator /(double scalar) const;

1992 7 project 4 2444 17 LPoint4d::project 0 1 702 778
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4d LPoint4d::project(LVecBase4d const &onto) const;

1993 11 python_repr 4 2444 21 LPoint4d::python_repr 0 1 703 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
94
inline void LPoint4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

1994 14 get_class_type 4 2444 24 LPoint4d::get_class_type 0 1 704 0
49
static TypeHandle LPoint4d::get_class_type(void);

1995 9 ~LPoint4d 4 2444 19 LPoint4d::~LPoint4d 0 0 0
26
LPoint4d::~LPoint4d(void);

1996 11 operator [] 4 2446 27 LMatrix3f::Row::operator [] 0 2 803 804 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
104
inline float LMatrix3f::Row::operator [](int i) const;
inline float &LMatrix3f::Row::operator [](int i);

1997 11 __setitem__ 4 2446 27 LMatrix3f::Row::__setitem__ 0 1 805 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LMatrix3f::Row::__setitem__(int i, float v);

1998 4 size 4 2446 20 LMatrix3f::Row::size 0 1 806 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3f::Row::size(void);

1999 4 ~Row 4 2446 20 LMatrix3f::Row::~Row 0 0 0
27
LMatrix3f::Row::~Row(void);

2000 11 operator [] 4 2447 28 LMatrix3f::CRow::operator [] 0 1 807 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline float LMatrix3f::CRow::operator [](int i) const;

2001 4 size 4 2447 21 LMatrix3f::CRow::size 0 1 808 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3f::CRow::size(void);

2002 5 ~CRow 4 2447 22 LMatrix3f::CRow::~CRow 0 0 0
29
LMatrix3f::CRow::~CRow(void);

2003 9 LMatrix3f 4 2445 20 LMatrix3f::LMatrix3f 0 3 705 706 707 668
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
215
inline LMatrix3f::LMatrix3f(void);
inline LMatrix3f::LMatrix3f(LMatrix3f const &other);
inline LMatrix3f::LMatrix3f(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2004 10 operator = 4 2445 21 LMatrix3f::operator = 0 2 708 709 462
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LMatrix3f &LMatrix3f::operator =(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator =(float fill_value);

2005 12 operator new 4 2445 23 LMatrix3f::operator new 0 1 710 0
124
inline void *LMatrix3f::operator new(unsigned int size);
inline void *LMatrix3f::operator new(unsigned int size, void *ptr);

2006 15 operator delete 4 2445 26 LMatrix3f::operator delete 0 0 0
106
inline void LMatrix3f::operator delete(void *ptr);
inline void LMatrix3f::operator delete(void *, void *);

2007 12 validate_ptr 4 2445 23 LMatrix3f::validate_ptr 0 0 0
60
static inline bool LMatrix3f::validate_ptr(void const *ptr);

2008 10 __reduce__ 4 2445 21 LMatrix3f::__reduce__ 0 1 711 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix3f::__reduce__(PyObject *self) const;

2009 4 fill 4 2445 15 LMatrix3f::fill 0 1 712 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
39
void LMatrix3f::fill(float fill_value);

2010 3 set 4 2445 14 LMatrix3f::set 0 1 713 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
126
inline void LMatrix3f::set(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

2011 7 set_row 4 2445 18 LMatrix3f::set_row 0 2 714 715 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_row(int row, LVecBase3f const &v);
inline void LMatrix3f::set_row(int row, LVecBase2f const &v);

2012 7 set_col 4 2445 18 LMatrix3f::set_col 0 2 716 717 639
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_col(int col, LVecBase3f const &v);
inline void LMatrix3f::set_col(int col, LVecBase2f const &v);

2013 7 get_row 4 2445 18 LMatrix3f::get_row 0 2 718 719 332
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3f LMatrix3f::get_row(int row) const;
inline void LMatrix3f::get_row(LVecBase3f &result_vec, int row) const;

2014 7 get_col 4 2445 18 LMatrix3f::get_col 0 1 720 302
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3f LMatrix3f::get_col(int col) const;

2015 8 get_row2 4 2445 19 LMatrix3f::get_row2 0 1 721 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_row2(int row) const;

2016 8 get_col2 4 2445 19 LMatrix3f::get_col2 0 1 722 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_col2(int col) const;

2017 11 operator () 4 2445 22 LMatrix3f::operator () 0 2 723 724 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix3f::operator ()(int row, int col);
inline float LMatrix3f::operator ()(int row, int col) const;

2018 11 operator [] 4 2445 22 LMatrix3f::operator [] 0 2 725 726 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix3f::CRow LMatrix3f::operator [](int i) const;
inline LMatrix3f::Row LMatrix3f::operator [](int i);

2019 4 size 4 2445 15 LMatrix3f::size 0 1 727 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3f::size(void);

2020 6 is_nan 4 2445 17 LMatrix3f::is_nan 0 1 728 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3f::is_nan(void) const;

2021 8 get_cell 4 2445 19 LMatrix3f::get_cell 0 1 729 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix3f::get_cell(int row, int col) const;

2022 8 set_cell 4 2445 19 LMatrix3f::set_cell 0 1 730 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix3f::set_cell(int row, int col, float value);

2023 8 get_data 4 2445 19 LMatrix3f::get_data 0 1 731 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix3f::get_data(void) const;

2024 18 get_num_components 4 2445 29 LMatrix3f::get_num_components 0 1 732 276
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3f::get_num_components(void) const;

2025 10 operator < 4 2445 21 LMatrix3f::operator < 0 1 733 501
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3f::operator <(LMatrix3f const &other) const;

2026 11 operator == 4 2445 22 LMatrix3f::operator == 0 1 734 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator ==(LMatrix3f const &other) const;

2027 11 operator != 4 2445 22 LMatrix3f::operator != 0 1 735 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3f::operator !=(LMatrix3f const &other) const;

2028 10 compare_to 4 2445 21 LMatrix3f::compare_to 0 2 736 737 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix3f::compare_to(LMatrix3f const &other) const;
int LMatrix3f::compare_to(LMatrix3f const &other, float threshold) const;

2029 8 get_hash 4 2445 19 LMatrix3f::get_hash 0 2 738 739 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix3f::get_hash(void) const;
inline unsigned int LMatrix3f::get_hash(float threshold) const;

2030 8 add_hash 4 2445 19 LMatrix3f::add_hash 0 2 740 741 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix3f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3f::add_hash(unsigned int hash, float threshold) const;

2031 5 xform 4 2445 16 LMatrix3f::xform 0 1 742 253
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3f LMatrix3f::xform(LVecBase3f const &v) const;

2032 11 xform_point 4 2445 22 LMatrix3f::xform_point 0 1 743 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LMatrix3f::xform_point(LVecBase2f const &v) const;

2033 9 xform_vec 4 2445 20 LMatrix3f::xform_vec 0 2 744 745 843
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2f LMatrix3f::xform_vec(LVecBase2f const &v) const;
inline LVecBase3f LMatrix3f::xform_vec(LVecBase3f const &v) const;

2034 17 xform_vec_general 4 2445 28 LMatrix3f::xform_vec_general 0 1 746 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix3f::xform_vec_general(LVecBase3f const &v) const;

2035 8 multiply 4 2445 19 LMatrix3f::multiply 0 1 747 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3f::multiply(LMatrix3f const &other1, LMatrix3f const &other2);

2036 10 operator * 4 2445 21 LMatrix3f::operator * 0 2 748 749 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
129
inline LMatrix3f LMatrix3f::operator *(LMatrix3f const &other) const;
inline LMatrix3f LMatrix3f::operator *(float scalar) const;

2037 10 operator / 4 2445 21 LMatrix3f::operator / 0 1 750 221
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix3f LMatrix3f::operator /(float scalar) const;

2038 11 operator += 4 2445 22 LMatrix3f::operator += 0 1 751 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator +=(LMatrix3f const &other);

2039 11 operator -= 4 2445 22 LMatrix3f::operator -= 0 1 752 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator -=(LMatrix3f const &other);

2040 11 operator *= 4 2445 22 LMatrix3f::operator *= 0 2 753 754 475
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
121
inline LMatrix3f &LMatrix3f::operator *=(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator *=(float scalar);

2041 11 operator /= 4 2445 22 LMatrix3f::operator /= 0 1 755 251
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
55
inline LMatrix3f &LMatrix3f::operator /=(float scalar);

2042 11 determinant 4 2445 22 LMatrix3f::determinant 0 1 756 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
48
inline float LMatrix3f::determinant(void) const;

2043 14 transpose_from 4 2445 25 LMatrix3f::transpose_from 0 1 757 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3f::transpose_from(LMatrix3f const &other);

2044 18 transpose_in_place 4 2445 29 LMatrix3f::transpose_in_place 0 1 758 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3f::transpose_in_place(void);

2045 11 invert_from 4 2445 22 LMatrix3f::invert_from 0 1 759 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3f::invert_from(LMatrix3f const &other);

2046 15 invert_in_place 4 2445 26 LMatrix3f::invert_in_place 0 1 760 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3f::invert_in_place(void);

2047 21 invert_transpose_from 4 2445 32 LMatrix3f::invert_transpose_from 0 2 761 762 692
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3f::invert_transpose_from(LMatrix3f const &other);
inline bool LMatrix3f::invert_transpose_from(LMatrix4f const &other);

2048 9 ident_mat 4 2445 20 LMatrix3f::ident_mat 0 1 763 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3f const &LMatrix3f::ident_mat(void);

2049 17 set_translate_mat 4 2445 28 LMatrix3f::set_translate_mat 0 1 764 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::set_translate_mat(LVecBase2f const &trans);

2050 14 set_rotate_mat 4 2445 25 LMatrix3f::set_rotate_mat 0 3 765 766 767 810
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
149
inline void LMatrix3f::set_rotate_mat(float angle);
void LMatrix3f::set_rotate_mat(float angle, LVecBase3f axis, CoordinateSystem cs = (CS_default));

2051 13 set_scale_mat 4 2445 24 LMatrix3f::set_scale_mat 0 2 768 769 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3f::set_scale_mat(LVecBase2f const &scale);
inline void LMatrix3f::set_scale_mat(LVecBase3f const &scale);

2052 13 translate_mat 4 2445 24 LMatrix3f::translate_mat 0 2 770 771 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
144
static inline LMatrix3f LMatrix3f::translate_mat(LVecBase2f const &trans);
static inline LMatrix3f LMatrix3f::translate_mat(float tx, float ty);

2053 10 rotate_mat 4 2445 21 LMatrix3f::rotate_mat 0 3 772 773 774 665
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
172
static inline LMatrix3f LMatrix3f::rotate_mat(float angle);
static inline LMatrix3f LMatrix3f::rotate_mat(float angle, LVecBase3f axis, CoordinateSystem cs = (CS_default));

2054 9 scale_mat 4 2445 20 LMatrix3f::scale_mat 0 4 775 776 777 778 1266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
283
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase2f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy);
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase3f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy, float sz);

2055 23 set_rotate_mat_normaxis 4 2445 34 LMatrix3f::set_rotate_mat_normaxis 0 2 779 780 409
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix3f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2056 19 rotate_mat_normaxis 4 2445 30 LMatrix3f::rotate_mat_normaxis 0 2 781 782 405
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix3f LMatrix3f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2057 13 set_shear_mat 4 2445 24 LMatrix3f::set_shear_mat 0 2 783 784 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2058 9 shear_mat 4 2445 20 LMatrix3f::shear_mat 0 4 785 786 787 788 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix3f LMatrix3f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3f LMatrix3f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2059 19 set_scale_shear_mat 4 2445 30 LMatrix3f::set_scale_shear_mat 0 2 789 790 324
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2060 15 scale_shear_mat 4 2445 26 LMatrix3f::scale_shear_mat 0 4 791 792 793 794 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix3f LMatrix3f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3f LMatrix3f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2061 11 convert_mat 4 2445 22 LMatrix3f::convert_mat 0 1 795 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3f const &LMatrix3f::convert_mat(CoordinateSystem from, CoordinateSystem to);

2062 12 almost_equal 4 2445 23 LMatrix3f::almost_equal 0 2 796 797 807
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix3f::almost_equal(LMatrix3f const &other, float threshold) const;
inline bool LMatrix3f::almost_equal(LMatrix3f const &other) const;

2063 6 output 4 2445 17 LMatrix3f::output 0 1 798 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3f::output(ostream &out) const;

2064 5 write 4 2445 16 LMatrix3f::write 0 2 799 800 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write(ostream &out, int indent_level = (0)) const;

2065 11 python_repr 4 2445 22 LMatrix3f::python_repr 0 1 801 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2066 14 get_class_type 4 2445 25 LMatrix3f::get_class_type 0 1 802 0
50
static TypeHandle LMatrix3f::get_class_type(void);

2067 10 ~LMatrix3f 4 2445 21 LMatrix3f::~LMatrix3f 0 0 0
28
LMatrix3f::~LMatrix3f(void);

2068 9 transpose 1 0 9 transpose 0 4 1306 1307 1308 1309 0
191
inline LMatrix3f transpose(LMatrix3f const &a);
inline LMatrix4f transpose(LMatrix4f const &a);
inline LMatrix3d transpose(LMatrix3d const &a);
inline LMatrix4d transpose(LMatrix4d const &a);

2069 6 invert 1 0 6 invert 0 6 1310 1311 1312 1313 1314 1315 0
281
inline LMatrix3f invert(LMatrix3f const &a);
inline LMatrix4f invert(LMatrix4f const &a);
inline LMatrix3d invert(LMatrix3d const &a);
inline LMatrix4d invert(LMatrix4d const &a);
inline LQuaternionf invert(LQuaternionf const &a);
inline LQuaterniond invert(LQuaterniond const &a);

2070 11 operator [] 4 2449 27 LMatrix4f::Row::operator [] 0 2 913 914 454
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
104
inline float LMatrix4f::Row::operator [](int i) const;
inline float &LMatrix4f::Row::operator [](int i);

2071 11 __setitem__ 4 2449 27 LMatrix4f::Row::__setitem__ 0 1 915 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LMatrix4f::Row::__setitem__(int i, float v);

2072 4 size 4 2449 20 LMatrix4f::Row::size 0 1 916 286
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4f::Row::size(void);

2073 4 ~Row 4 2449 20 LMatrix4f::Row::~Row 0 0 0
27
LMatrix4f::Row::~Row(void);

2074 11 operator [] 4 2450 28 LMatrix4f::CRow::operator [] 0 1 917 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline float LMatrix4f::CRow::operator [](int i) const;

2075 4 size 4 2450 21 LMatrix4f::CRow::size 0 1 918 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4f::CRow::size(void);

2076 5 ~CRow 4 2450 22 LMatrix4f::CRow::~CRow 0 0 0
29
LMatrix4f::CRow::~CRow(void);

2077 9 LMatrix4f 4 2448 20 LMatrix4f::LMatrix4f 0 5 809 810 811 812 813 1339
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
425
inline LMatrix4f::LMatrix4f(void);
inline LMatrix4f::LMatrix4f(LMatrix4f const &other);
inline LMatrix4f::LMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3, LVecBase3f const &trans);

2078 10 operator = 4 2448 21 LMatrix4f::operator = 0 2 814 815 462
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LMatrix4f &LMatrix4f::operator =(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(float fill_value);

2079 12 operator new 4 2448 23 LMatrix4f::operator new 0 1 816 0
124
inline void *LMatrix4f::operator new(unsigned int size);
inline void *LMatrix4f::operator new(unsigned int size, void *ptr);

2080 15 operator delete 4 2448 26 LMatrix4f::operator delete 0 0 0
106
inline void LMatrix4f::operator delete(void *ptr);
inline void LMatrix4f::operator delete(void *, void *);

2081 12 validate_ptr 4 2448 23 LMatrix4f::validate_ptr 0 0 0
60
static inline bool LMatrix4f::validate_ptr(void const *ptr);

2082 10 __reduce__ 4 2448 21 LMatrix4f::__reduce__ 0 1 817 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix4f::__reduce__(PyObject *self) const;

2083 4 fill 4 2448 15 LMatrix4f::fill 0 1 818 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
46
inline void LMatrix4f::fill(float fill_value);

2084 3 set 4 2448 14 LMatrix4f::set 0 1 819 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
203
inline void LMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

2085 11 set_upper_3 4 2448 22 LMatrix4f::set_upper_3 0 1 820 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4f::set_upper_3(LMatrix3f const &upper3);

2086 11 get_upper_3 4 2448 22 LMatrix4f::get_upper_3 0 1 821 299
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3f LMatrix4f::get_upper_3(void) const;

2087 7 set_row 4 2448 18 LMatrix4f::set_row 0 2 822 823 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_row(int row, LVecBase4f const &v);
inline void LMatrix4f::set_row(int row, LVecBase3f const &v);

2088 7 set_col 4 2448 18 LMatrix4f::set_col 0 2 824 825 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_col(int col, LVecBase4f const &v);
inline void LMatrix4f::set_col(int col, LVecBase3f const &v);

2089 7 get_row 4 2448 18 LMatrix4f::get_row 0 2 826 827 330
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4f LMatrix4f::get_row(int row) const;
inline void LMatrix4f::get_row(LVecBase4f &result_vec, int row) const;

2090 7 get_col 4 2448 18 LMatrix4f::get_col 0 1 828 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f LMatrix4f::get_col(int col) const;

2091 8 get_row3 4 2448 19 LMatrix4f::get_row3 0 2 829 830 354
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3f LMatrix4f::get_row3(int row) const;
inline void LMatrix4f::get_row3(LVecBase3f &result_vec, int row) const;

2092 8 get_col3 4 2448 19 LMatrix4f::get_col3 0 1 831 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LMatrix4f::get_col3(int col) const;

2093 11 operator () 4 2448 22 LMatrix4f::operator () 0 2 832 833 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix4f::operator ()(int row, int col);
inline float LMatrix4f::operator ()(int row, int col) const;

2094 11 operator [] 4 2448 22 LMatrix4f::operator [] 0 2 834 835 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix4f::CRow LMatrix4f::operator [](int i) const;
inline LMatrix4f::Row LMatrix4f::operator [](int i);

2095 4 size 4 2448 15 LMatrix4f::size 0 1 836 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4f::size(void);

2096 6 is_nan 4 2448 17 LMatrix4f::is_nan 0 1 837 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4f::is_nan(void) const;

2097 8 get_cell 4 2448 19 LMatrix4f::get_cell 0 1 838 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix4f::get_cell(int row, int col) const;

2098 8 set_cell 4 2448 19 LMatrix4f::set_cell 0 1 839 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::set_cell(int row, int col, float value);

2099 8 get_data 4 2448 19 LMatrix4f::get_data 0 1 840 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix4f::get_data(void) const;

2100 18 get_num_components 4 2448 29 LMatrix4f::get_num_components 0 1 841 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4f::get_num_components(void) const;

2101 5 begin 4 2448 16 LMatrix4f::begin 0 2 842 843 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
93
inline float const *LMatrix4f::begin(void);
inline float const *LMatrix4f::begin(void) const;

2102 3 end 4 2448 14 LMatrix4f::end 0 2 844 845 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
89
inline float const *LMatrix4f::end(void);
inline float const *LMatrix4f::end(void) const;

2103 10 operator < 4 2448 21 LMatrix4f::operator < 0 1 846 501
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4f::operator <(LMatrix4f const &other) const;

2104 11 operator == 4 2448 22 LMatrix4f::operator == 0 1 847 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator ==(LMatrix4f const &other) const;

2105 11 operator != 4 2448 22 LMatrix4f::operator != 0 1 848 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4f::operator !=(LMatrix4f const &other) const;

2106 10 compare_to 4 2448 21 LMatrix4f::compare_to 0 2 849 850 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix4f::compare_to(LMatrix4f const &other) const;
int LMatrix4f::compare_to(LMatrix4f const &other, float threshold) const;

2107 8 get_hash 4 2448 19 LMatrix4f::get_hash 0 2 851 852 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix4f::get_hash(void) const;
inline unsigned int LMatrix4f::get_hash(float threshold) const;

2108 8 add_hash 4 2448 19 LMatrix4f::add_hash 0 2 853 854 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix4f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4f::add_hash(unsigned int hash, float threshold) const;

2109 5 xform 4 2448 16 LMatrix4f::xform 0 1 855 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f LMatrix4f::xform(LVecBase4f const &v) const;

2110 11 xform_point 4 2448 22 LMatrix4f::xform_point 0 1 856 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LMatrix4f::xform_point(LVecBase3f const &v) const;

2111 9 xform_vec 4 2448 20 LMatrix4f::xform_vec 0 1 857 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LMatrix4f::xform_vec(LVecBase3f const &v) const;

2112 17 xform_vec_general 4 2448 28 LMatrix4f::xform_vec_general 0 1 858 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix4f::xform_vec_general(LVecBase3f const &v) const;

2113 8 multiply 4 2448 19 LMatrix4f::multiply 0 1 859 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4f::multiply(LMatrix4f const &other1, LMatrix4f const &other2);

2114 10 operator * 4 2448 21 LMatrix4f::operator * 0 2 860 861 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
129
inline LMatrix4f LMatrix4f::operator *(LMatrix4f const &other) const;
inline LMatrix4f LMatrix4f::operator *(float scalar) const;

2115 10 operator / 4 2448 21 LMatrix4f::operator / 0 1 862 221
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline LMatrix4f LMatrix4f::operator /(float scalar) const;

2116 11 operator += 4 2448 22 LMatrix4f::operator += 0 1 863 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator +=(LMatrix4f const &other);

2117 11 operator -= 4 2448 22 LMatrix4f::operator -= 0 1 864 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator -=(LMatrix4f const &other);

2118 11 operator *= 4 2448 22 LMatrix4f::operator *= 0 2 865 866 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LMatrix4f &LMatrix4f::operator *=(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator *=(float scalar);

2119 11 operator /= 4 2448 22 LMatrix4f::operator /= 0 1 867 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f &LMatrix4f::operator /=(float scalar);

2120 14 transpose_from 4 2448 25 LMatrix4f::transpose_from 0 1 868 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::transpose_from(LMatrix4f const &other);

2121 18 transpose_in_place 4 2448 29 LMatrix4f::transpose_in_place 0 1 869 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4f::transpose_in_place(void);

2122 11 invert_from 4 2448 22 LMatrix4f::invert_from 0 1 870 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4f::invert_from(LMatrix4f const &other);

2123 18 invert_affine_from 4 2448 29 LMatrix4f::invert_affine_from 0 1 871 929
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4f::invert_affine_from(LMatrix4f const &other);

2124 15 invert_in_place 4 2448 26 LMatrix4f::invert_in_place 0 1 872 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4f::invert_in_place(void);

2125 9 ident_mat 4 2448 20 LMatrix4f::ident_mat 0 1 873 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::ident_mat(void);

2126 8 ones_mat 4 2448 19 LMatrix4f::ones_mat 0 1 874 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4f const &LMatrix4f::ones_mat(void);

2127 9 zeros_mat 4 2448 20 LMatrix4f::zeros_mat 0 1 875 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::zeros_mat(void);

2128 17 set_translate_mat 4 2448 28 LMatrix4f::set_translate_mat 0 1 876 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::set_translate_mat(LVecBase3f const &trans);

2129 14 set_rotate_mat 4 2448 25 LMatrix4f::set_rotate_mat 0 2 877 878 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
104
void LMatrix4f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2130 23 set_rotate_mat_normaxis 4 2448 34 LMatrix4f::set_rotate_mat_normaxis 0 2 879 880 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
113
void LMatrix4f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2131 13 set_scale_mat 4 2448 24 LMatrix4f::set_scale_mat 0 1 881 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::set_scale_mat(LVecBase3f const &scale);

2132 13 set_shear_mat 4 2448 24 LMatrix4f::set_shear_mat 0 2 882 883 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2133 19 set_scale_shear_mat 4 2448 30 LMatrix4f::set_scale_shear_mat 0 2 884 885 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));

2134 13 translate_mat 4 2448 24 LMatrix4f::translate_mat 0 2 886 887 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
154
static inline LMatrix4f LMatrix4f::translate_mat(LVecBase3f const &trans);
static inline LMatrix4f LMatrix4f::translate_mat(float tx, float ty, float tz);

2135 10 rotate_mat 4 2448 21 LMatrix4f::rotate_mat 0 2 888 889 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix4f LMatrix4f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2136 19 rotate_mat_normaxis 4 2448 30 LMatrix4f::rotate_mat_normaxis 0 2 890 891 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
128
static inline LMatrix4f LMatrix4f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (CS_default));

2137 9 scale_mat 4 2448 20 LMatrix4f::scale_mat 0 3 892 893 894 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
205
static inline LMatrix4f LMatrix4f::scale_mat(LVecBase3f const &scale);
static inline LMatrix4f LMatrix4f::scale_mat(float sx, float sy, float sz);
static inline LMatrix4f LMatrix4f::scale_mat(float scale);

2138 9 shear_mat 4 2448 20 LMatrix4f::shear_mat 0 4 895 896 897 898 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
224
static inline LMatrix4f LMatrix4f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4f LMatrix4f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2139 15 scale_shear_mat 4 2448 26 LMatrix4f::scale_shear_mat 0 4 899 900 901 902 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
291
static inline LMatrix4f LMatrix4f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4f LMatrix4f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (CS_default));

2140 13 y_to_z_up_mat 4 2448 24 LMatrix4f::y_to_z_up_mat 0 1 903 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::y_to_z_up_mat(void);

2141 13 z_to_y_up_mat 4 2448 24 LMatrix4f::z_to_y_up_mat 0 1 904 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::z_to_y_up_mat(void);

2142 11 convert_mat 4 2448 22 LMatrix4f::convert_mat 0 1 905 362
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4f const &LMatrix4f::convert_mat(CoordinateSystem from, CoordinateSystem to);

2143 12 almost_equal 4 2448 23 LMatrix4f::almost_equal 0 2 906 907 656
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix4f::almost_equal(LMatrix4f const &other, float threshold) const;
inline bool LMatrix4f::almost_equal(LMatrix4f const &other) const;

2144 6 output 4 2448 17 LMatrix4f::output 0 1 908 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4f::output(ostream &out) const;

2145 5 write 4 2448 16 LMatrix4f::write 0 2 909 910 226
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write(ostream &out, int indent_level = (0)) const;

2146 11 python_repr 4 2448 22 LMatrix4f::python_repr 0 1 911 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2147 14 get_class_type 4 2448 25 LMatrix4f::get_class_type 0 1 912 0
50
static TypeHandle LMatrix4f::get_class_type(void);

2148 10 ~LMatrix4f 4 2448 21 LMatrix4f::~LMatrix4f 0 0 0
28
LMatrix4f::~LMatrix4f(void);

2149 11 operator [] 4 2452 27 LMatrix3d::Row::operator [] 0 2 1017 1018 910
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline double LMatrix3d::Row::operator [](int i) const;
inline double &LMatrix3d::Row::operator [](int i);

2150 11 __setitem__ 4 2452 27 LMatrix3d::Row::__setitem__ 0 1 1019 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LMatrix3d::Row::__setitem__(int i, double v);

2151 4 size 4 2452 20 LMatrix3d::Row::size 0 1 1020 574
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3d::Row::size(void);

2152 4 ~Row 4 2452 20 LMatrix3d::Row::~Row 0 0 0
27
LMatrix3d::Row::~Row(void);

2153 11 operator [] 4 2453 28 LMatrix3d::CRow::operator [] 0 1 1021 456
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline double LMatrix3d::CRow::operator [](int i) const;

2154 4 size 4 2453 21 LMatrix3d::CRow::size 0 1 1022 546
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3d::CRow::size(void);

2155 5 ~CRow 4 2453 22 LMatrix3d::CRow::~CRow 0 0 0
29
LMatrix3d::CRow::~CRow(void);

2156 9 LMatrix3d 4 2451 20 LMatrix3d::LMatrix3d 0 3 919 920 921 1338
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
224
inline LMatrix3d::LMatrix3d(void);
inline LMatrix3d::LMatrix3d(LMatrix3d const &other);
inline LMatrix3d::LMatrix3d(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

2157 10 operator = 4 2451 21 LMatrix3d::operator = 0 2 922 923 926
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LMatrix3d &LMatrix3d::operator =(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator =(double fill_value);

2158 12 operator new 4 2451 23 LMatrix3d::operator new 0 1 924 0
124
inline void *LMatrix3d::operator new(unsigned int size);
inline void *LMatrix3d::operator new(unsigned int size, void *ptr);

2159 15 operator delete 4 2451 26 LMatrix3d::operator delete 0 0 0
106
inline void LMatrix3d::operator delete(void *ptr);
inline void LMatrix3d::operator delete(void *, void *);

2160 12 validate_ptr 4 2451 23 LMatrix3d::validate_ptr 0 0 0
60
static inline bool LMatrix3d::validate_ptr(void const *ptr);

2161 10 __reduce__ 4 2451 21 LMatrix3d::__reduce__ 0 1 925 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix3d::__reduce__(PyObject *self) const;

2162 4 fill 4 2451 15 LMatrix3d::fill 0 1 926 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
40
void LMatrix3d::fill(double fill_value);

2163 3 set 4 2451 14 LMatrix3d::set 0 1 927 420
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
135
inline void LMatrix3d::set(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

2164 7 set_row 4 2451 18 LMatrix3d::set_row 0 2 928 929 1262
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_row(int row, LVecBase3d const &v);
inline void LMatrix3d::set_row(int row, LVecBase2d const &v);

2165 7 set_col 4 2451 18 LMatrix3d::set_col 0 2 930 931 1280
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_col(int col, LVecBase3d const &v);
inline void LMatrix3d::set_col(int col, LVecBase2d const &v);

2166 7 get_row 4 2451 18 LMatrix3d::get_row 0 2 932 933 633
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3d LMatrix3d::get_row(int row) const;
inline void LMatrix3d::get_row(LVecBase3d &result_vec, int row) const;

2167 7 get_col 4 2451 18 LMatrix3d::get_col 0 1 934 606
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3d LMatrix3d::get_col(int col) const;

2168 8 get_row2 4 2451 19 LMatrix3d::get_row2 0 1 935 650
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_row2(int row) const;

2169 8 get_col2 4 2451 19 LMatrix3d::get_col2 0 1 936 650
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_col2(int col) const;

2170 11 operator () 4 2451 22 LMatrix3d::operator () 0 2 937 938 898
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix3d::operator ()(int row, int col);
inline double LMatrix3d::operator ()(int row, int col) const;

2171 11 operator [] 4 2451 22 LMatrix3d::operator [] 0 2 939 940 898
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix3d::CRow LMatrix3d::operator [](int i) const;
inline LMatrix3d::Row LMatrix3d::operator [](int i);

2172 4 size 4 2451 15 LMatrix3d::size 0 1 941 528
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3d::size(void);

2173 6 is_nan 4 2451 17 LMatrix3d::is_nan 0 1 942 616
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3d::is_nan(void) const;

2174 8 get_cell 4 2451 19 LMatrix3d::get_cell 0 1 943 518
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix3d::get_cell(int row, int col) const;

2175 8 set_cell 4 2451 19 LMatrix3d::set_cell 0 1 944 518
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix3d::set_cell(int row, int col, double value);

2176 8 get_data 4 2451 19 LMatrix3d::get_data 0 1 945 798
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix3d::get_data(void) const;

2177 18 get_num_components 4 2451 29 LMatrix3d::get_num_components 0 1 946 554
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3d::get_num_components(void) const;

2178 10 operator < 4 2451 21 LMatrix3d::operator < 0 1 947 1004
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix3d::operator <(LMatrix3d const &other) const;

2179 11 operator == 4 2451 22 LMatrix3d::operator == 0 1 948 448
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator ==(LMatrix3d const &other) const;

2180 11 operator != 4 2451 22 LMatrix3d::operator != 0 1 949 452
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix3d::operator !=(LMatrix3d const &other) const;

2181 10 compare_to 4 2451 21 LMatrix3d::compare_to 0 2 950 951 1139
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
138
inline int LMatrix3d::compare_to(LMatrix3d const &other) const;
int LMatrix3d::compare_to(LMatrix3d const &other, double threshold) const;

2182 8 get_hash 4 2451 19 LMatrix3d::get_hash 0 2 952 953 1018
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix3d::get_hash(void) const;
inline unsigned int LMatrix3d::get_hash(double threshold) const;

2183 8 add_hash 4 2451 19 LMatrix3d::add_hash 0 2 954 955 1018
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix3d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3d::add_hash(unsigned int hash, double threshold) const;

2184 5 xform 4 2451 16 LMatrix3d::xform 0 1 956 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LMatrix3d::xform(LVecBase3d const &v) const;

2185 11 xform_point 4 2451 22 LMatrix3d::xform_point 0 1 957 802
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LMatrix3d::xform_point(LVecBase2d const &v) const;

2186 9 xform_vec 4 2451 20 LMatrix3d::xform_vec 0 2 958 959 1688
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2d LMatrix3d::xform_vec(LVecBase2d const &v) const;
inline LVecBase3d LMatrix3d::xform_vec(LVecBase3d const &v) const;

2187 17 xform_vec_general 4 2451 28 LMatrix3d::xform_vec_general 0 1 960 774
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix3d::xform_vec_general(LVecBase3d const &v) const;

2188 8 multiply 4 2451 19 LMatrix3d::multiply 0 1 961 79
// this = other1 * other2

// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3d::multiply(LMatrix3d const &other1, LMatrix3d const &other2);

2189 10 operator * 4 2451 21 LMatrix3d::operator * 0 2 962 963 890
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline LMatrix3d LMatrix3d::operator *(LMatrix3d const &other) const;
inline LMatrix3d LMatrix3d::operator *(double scalar) const;

2190 10 operator / 4 2451 21 LMatrix3d::operator / 0 1 964 444
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix3d LMatrix3d::operator /(double scalar) const;

2191 11 operator += 4 2451 22 LMatrix3d::operator += 0 1 965 552
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator +=(LMatrix3d const &other);

2192 11 operator -= 4 2451 22 LMatrix3d::operator -= 0 1 966 558
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator -=(LMatrix3d const &other);

2193 11 operator *= 4 2451 22 LMatrix3d::operator *= 0 2 967 968 952
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
122
inline LMatrix3d &LMatrix3d::operator *=(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator *=(double scalar);

2194 11 operator /= 4 2451 22 LMatrix3d::operator /= 0 1 969 504
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
56
inline LMatrix3d &LMatrix3d::operator /=(double scalar);

2195 11 determinant 4 2451 22 LMatrix3d::determinant 0 1 970 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
49
inline double LMatrix3d::determinant(void) const;

2196 14 transpose_from 4 2451 25 LMatrix3d::transpose_from 0 1 971 442
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3d::transpose_from(LMatrix3d const &other);

2197 18 transpose_in_place 4 2451 29 LMatrix3d::transpose_in_place 0 1 972 450
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3d::transpose_in_place(void);

2198 11 invert_from 4 2451 22 LMatrix3d::invert_from 0 1 973 1608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3d::invert_from(LMatrix3d const &other);

2199 15 invert_in_place 4 2451 26 LMatrix3d::invert_in_place 0 1 974 724
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3d::invert_in_place(void);

2200 21 invert_transpose_from 4 2451 32 LMatrix3d::invert_transpose_from 0 2 975 976 1386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3d::invert_transpose_from(LMatrix3d const &other);
inline bool LMatrix3d::invert_transpose_from(LMatrix4d const &other);

2201 9 ident_mat 4 2451 20 LMatrix3d::ident_mat 0 1 977 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3d const &LMatrix3d::ident_mat(void);

2202 17 set_translate_mat 4 2451 28 LMatrix3d::set_translate_mat 0 1 978 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::set_translate_mat(LVecBase2d const &trans);

2203 14 set_rotate_mat 4 2451 25 LMatrix3d::set_rotate_mat 0 3 979 980 981 1133
// The following named constructors return 3x3 matrices suitable for
// scale/rotate transforms in 3-d coordinate space.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////
151
inline void LMatrix3d::set_rotate_mat(double angle);
void LMatrix3d::set_rotate_mat(double angle, LVecBase3d axis, CoordinateSystem cs = (CS_default));

2204 13 set_scale_mat 4 2451 24 LMatrix3d::set_scale_mat 0 2 982 983 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3d::set_scale_mat(LVecBase2d const &scale);
inline void LMatrix3d::set_scale_mat(LVecBase3d const &scale);

2205 13 translate_mat 4 2451 24 LMatrix3d::translate_mat 0 2 984 985 1206
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
146
static inline LMatrix3d LMatrix3d::translate_mat(LVecBase2d const &trans);
static inline LMatrix3d LMatrix3d::translate_mat(double tx, double ty);

2206 10 rotate_mat 4 2451 21 LMatrix3d::rotate_mat 0 3 986 987 988 1332
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
174
static inline LMatrix3d LMatrix3d::rotate_mat(double angle);
static inline LMatrix3d LMatrix3d::rotate_mat(double angle, LVecBase3d axis, CoordinateSystem cs = (CS_default));

2207 9 scale_mat 4 2451 20 LMatrix3d::scale_mat 0 4 989 990 991 992 2534
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
288
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase2d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy);
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase3d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy, double sz);

2208 23 set_rotate_mat_normaxis 4 2451 34 LMatrix3d::set_rotate_mat_normaxis 0 2 993 994 409
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix3d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2209 19 rotate_mat_normaxis 4 2451 30 LMatrix3d::rotate_mat_normaxis 0 2 995 996 812
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix3d LMatrix3d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2210 13 set_shear_mat 4 2451 24 LMatrix3d::set_shear_mat 0 2 997 998 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix3d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2211 9 shear_mat 4 2451 20 LMatrix3d::shear_mat 0 4 999 1000 1001 1002 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix3d LMatrix3d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3d LMatrix3d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2212 19 set_scale_shear_mat 4 2451 30 LMatrix3d::set_scale_shear_mat 0 2 1003 1004 324
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
122
void LMatrix3d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2213 15 scale_shear_mat 4 2451 26 LMatrix3d::scale_shear_mat 0 4 1005 1006 1007 1008 1230
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix3d LMatrix3d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix3d LMatrix3d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2214 11 convert_mat 4 2451 22 LMatrix3d::convert_mat 0 1 1009 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3d const &LMatrix3d::convert_mat(CoordinateSystem from, CoordinateSystem to);

2215 12 almost_equal 4 2451 23 LMatrix3d::almost_equal 0 2 1010 1011 1148
// We don't have a scale_mat() that takes a single uniform scale
// parameter, because it would be ambiguous whether we mean a 2-d or
// a 3-d scale.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
144
bool LMatrix3d::almost_equal(LMatrix3d const &other, double threshold) const;
inline bool LMatrix3d::almost_equal(LMatrix3d const &other) const;

2216 6 output 4 2451 17 LMatrix3d::output 0 1 1012 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3d::output(ostream &out) const;

2217 5 write 4 2451 16 LMatrix3d::write 0 2 1013 1014 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write(ostream &out, int indent_level = (0)) const;

2218 11 python_repr 4 2451 22 LMatrix3d::python_repr 0 1 1015 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2219 14 get_class_type 4 2451 25 LMatrix3d::get_class_type 0 1 1016 0
50
static TypeHandle LMatrix3d::get_class_type(void);

2220 10 ~LMatrix3d 4 2451 21 LMatrix3d::~LMatrix3d 0 0 0
28
LMatrix3d::~LMatrix3d(void);

2221 11 operator [] 4 2455 27 LMatrix4d::Row::operator [] 0 2 1127 1128 1366
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline double LMatrix4d::Row::operator [](int i) const;
inline double &LMatrix4d::Row::operator [](int i);

2222 11 __setitem__ 4 2455 27 LMatrix4d::Row::__setitem__ 0 1 1129 670
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LMatrix4d::Row::__setitem__(int i, double v);

2223 4 size 4 2455 20 LMatrix4d::Row::size 0 1 1130 862
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4d::Row::size(void);

2224 4 ~Row 4 2455 20 LMatrix4d::Row::~Row 0 0 0
27
LMatrix4d::Row::~Row(void);

2225 11 operator [] 4 2456 28 LMatrix4d::CRow::operator [] 0 1 1131 685
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline double LMatrix4d::CRow::operator [](int i) const;

2226 4 size 4 2456 21 LMatrix4d::CRow::size 0 1 1132 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4d::CRow::size(void);

2227 5 ~CRow 4 2456 22 LMatrix4d::CRow::~CRow 0 0 0
29
LMatrix4d::CRow::~CRow(void);

2228 9 LMatrix4d 4 2454 20 LMatrix4d::LMatrix4d 0 5 1023 1024 1025 1026 1027 3633
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
441
inline LMatrix4d::LMatrix4d(void);
inline LMatrix4d::LMatrix4d(LMatrix4d const &other);
inline LMatrix4d::LMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3, LVecBase3d const &trans);

2229 10 operator = 4 2454 21 LMatrix4d::operator = 0 2 1028 1029 1390
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LMatrix4d &LMatrix4d::operator =(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(double fill_value);

2230 12 operator new 4 2454 23 LMatrix4d::operator new 0 1 1030 0
124
inline void *LMatrix4d::operator new(unsigned int size);
inline void *LMatrix4d::operator new(unsigned int size, void *ptr);

2231 15 operator delete 4 2454 26 LMatrix4d::operator delete 0 0 0
106
inline void LMatrix4d::operator delete(void *ptr);
inline void LMatrix4d::operator delete(void *, void *);

2232 12 validate_ptr 4 2454 23 LMatrix4d::validate_ptr 0 0 0
60
static inline bool LMatrix4d::validate_ptr(void const *ptr);

2233 10 __reduce__ 4 2454 21 LMatrix4d::__reduce__ 0 1 1031 318
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
////////////////////////////////////////////////////////////////////
54
PyObject *LMatrix4d::__reduce__(PyObject *self) const;

2234 4 fill 4 2454 15 LMatrix4d::fill 0 1 1032 1168
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LMatrix4d::fill(double fill_value);

2235 3 set 4 2454 14 LMatrix4d::set 0 1 1033 631
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
219
inline void LMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

2236 11 set_upper_3 4 2454 22 LMatrix4d::set_upper_3 0 1 1034 792
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4d::set_upper_3(LMatrix3d const &upper3);

2237 11 get_upper_3 4 2454 22 LMatrix4d::get_upper_3 0 1 1035 807
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3d LMatrix4d::get_upper_3(void) const;

2238 7 set_row 4 2454 18 LMatrix4d::set_row 0 2 1036 1037 1834
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_row(int row, LVecBase4d const &v);
inline void LMatrix4d::set_row(int row, LVecBase3d const &v);

2239 7 set_col 4 2454 18 LMatrix4d::set_col 0 2 1038 1039 1843
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_col(int col, LVecBase4d const &v);
inline void LMatrix4d::set_col(int col, LVecBase3d const &v);

2240 7 get_row 4 2454 18 LMatrix4d::get_row 0 2 1040 1041 928
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4d LMatrix4d::get_row(int row) const;
inline void LMatrix4d::get_row(LVecBase4d &result_vec, int row) const;

2241 7 get_col 4 2454 18 LMatrix4d::get_col 0 1 1042 904
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4d LMatrix4d::get_col(int col) const;

2242 8 get_row3 4 2454 19 LMatrix4d::get_row3 0 2 1043 1044 1000
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3d LMatrix4d::get_row3(int row) const;
inline void LMatrix4d::get_row3(LVecBase3d &result_vec, int row) const;

2243 8 get_col3 4 2454 19 LMatrix4d::get_col3 0 1 1045 976
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LMatrix4d::get_col3(int col) const;

2244 11 operator () 4 2454 22 LMatrix4d::operator () 0 2 1046 1047 1348
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix4d::operator ()(int row, int col);
inline double LMatrix4d::operator ()(int row, int col) const;

2245 11 operator [] 4 2454 22 LMatrix4d::operator [] 0 2 1048 1049 1348
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
inline LMatrix4d::CRow LMatrix4d::operator [](int i) const;
inline LMatrix4d::Row LMatrix4d::operator [](int i);

2246 4 size 4 2454 15 LMatrix4d::size 0 1 1050 793
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4d::size(void);

2247 6 is_nan 4 2454 17 LMatrix4d::is_nan 0 1 1051 925
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4d::is_nan(void) const;

2248 8 get_cell 4 2454 19 LMatrix4d::get_cell 0 1 1052 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix4d::get_cell(int row, int col) const;

2249 8 set_cell 4 2454 19 LMatrix4d::set_cell 0 1 1053 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix4d::set_cell(int row, int col, double value);

2250 8 get_data 4 2454 19 LMatrix4d::get_data 0 1 1054 1198
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix4d::get_data(void) const;

2251 18 get_num_components 4 2454 29 LMatrix4d::get_num_components 0 1 1055 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4d::get_num_components(void) const;

2252 5 begin 4 2454 16 LMatrix4d::begin 0 2 1056 1057 1906
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
95
inline double const *LMatrix4d::begin(void);
inline double const *LMatrix4d::begin(void) const;

2253 3 end 4 2454 14 LMatrix4d::end 0 2 1058 1059 1894
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
91
inline double const *LMatrix4d::end(void);
inline double const *LMatrix4d::end(void) const;

2254 10 operator < 4 2454 21 LMatrix4d::operator < 0 1 1060 1507
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
////////////////////////////////////////////////////////////////////
64
inline bool LMatrix4d::operator <(LMatrix4d const &other) const;

2255 11 operator == 4 2454 22 LMatrix4d::operator == 0 1 1061 673
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator ==(LMatrix4d const &other) const;

2256 11 operator != 4 2454 22 LMatrix4d::operator != 0 1 1062 679
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool LMatrix4d::operator !=(LMatrix4d const &other) const;

2257 10 compare_to 4 2454 21 LMatrix4d::compare_to 0 2 1063 1064 1458
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
138
inline int LMatrix4d::compare_to(LMatrix4d const &other) const;
int LMatrix4d::compare_to(LMatrix4d const &other, double threshold) const;

2258 8 get_hash 4 2454 19 LMatrix4d::get_hash 0 2 1065 1066 1528
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix4d::get_hash(void) const;
inline unsigned int LMatrix4d::get_hash(double threshold) const;

2259 8 add_hash 4 2454 19 LMatrix4d::add_hash 0 2 1067 1068 1528
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix4d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4d::add_hash(unsigned int hash, double threshold) const;

2260 5 xform 4 2454 16 LMatrix4d::xform 0 1 1069 922
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LMatrix4d::xform(LVecBase4d const &v) const;

2261 11 xform_point 4 2454 22 LMatrix4d::xform_point 0 1 1070 1204
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LMatrix4d::xform_point(LVecBase3d const &v) const;

2262 9 xform_vec 4 2454 20 LMatrix4d::xform_vec 0 1 1071 1210
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LMatrix4d::xform_vec(LVecBase3d const &v) const;

2263 17 xform_vec_general 4 2454 28 LMatrix4d::xform_vec_general 0 1 1072 1162
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix4d::xform_vec_general(LVecBase3d const &v) const;

2264 8 multiply 4 2454 19 LMatrix4d::multiply 0 1 1073 106
// this = other1 * other2

// this = other1 * other2

// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4d::multiply(LMatrix4d const &other1, LMatrix4d const &other2);

2265 10 operator * 4 2454 21 LMatrix4d::operator * 0 2 1074 1075 1336
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline LMatrix4d LMatrix4d::operator *(LMatrix4d const &other) const;
inline LMatrix4d LMatrix4d::operator *(double scalar) const;

2266 10 operator / 4 2454 21 LMatrix4d::operator / 0 1 1076 667
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline LMatrix4d LMatrix4d::operator /(double scalar) const;

2267 11 operator += 4 2454 22 LMatrix4d::operator += 0 1 1077 829
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator +=(LMatrix4d const &other);

2268 11 operator -= 4 2454 22 LMatrix4d::operator -= 0 1 1078 829
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator -=(LMatrix4d const &other);

2269 11 operator *= 4 2454 22 LMatrix4d::operator *= 0 2 1079 1080 1342
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
122
inline LMatrix4d &LMatrix4d::operator *=(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator *=(double scalar);

2270 11 operator /= 4 2454 22 LMatrix4d::operator /= 0 1 1081 670
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LMatrix4d &LMatrix4d::operator /=(double scalar);

2271 14 transpose_from 4 2454 25 LMatrix4d::transpose_from 0 1 1082 664
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::transpose_from(LMatrix4d const &other);

2272 18 transpose_in_place 4 2454 29 LMatrix4d::transpose_in_place 0 1 1083 676
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4d::transpose_in_place(void);

2273 11 invert_from 4 2454 22 LMatrix4d::invert_from 0 1 1084 2413
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4d::invert_from(LMatrix4d const &other);

2274 18 invert_affine_from 4 2454 29 LMatrix4d::invert_affine_from 0 1 1085 2791
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4d::invert_affine_from(LMatrix4d const &other);

2275 15 invert_in_place 4 2454 26 LMatrix4d::invert_in_place 0 1 1086 1087
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4d::invert_in_place(void);

2276 9 ident_mat 4 2454 20 LMatrix4d::ident_mat 0 1 1087 1168
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::ident_mat(void);

2277 8 ones_mat 4 2454 19 LMatrix4d::ones_mat 0 1 1088 778
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4d const &LMatrix4d::ones_mat(void);

2278 9 zeros_mat 4 2454 20 LMatrix4d::zeros_mat 0 1 1089 784
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::zeros_mat(void);

2279 17 set_translate_mat 4 2454 28 LMatrix4d::set_translate_mat 0 1 1090 913
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::set_translate_mat(LVecBase3d const &trans);

2280 14 set_rotate_mat 4 2454 25 LMatrix4d::set_rotate_mat 0 2 1091 1092 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
105
void LMatrix4d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2281 23 set_rotate_mat_normaxis 4 2454 34 LMatrix4d::set_rotate_mat_normaxis 0 2 1093 1094 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
114
void LMatrix4d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2282 13 set_scale_mat 4 2454 24 LMatrix4d::set_scale_mat 0 1 1095 961
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::set_scale_mat(LVecBase3d const &scale);

2283 13 set_shear_mat 4 2454 24 LMatrix4d::set_shear_mat 0 2 1096 1097 967
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
98
inline void LMatrix4d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2284 19 set_scale_shear_mat 4 2454 30 LMatrix4d::set_scale_shear_mat 0 2 1098 1099 955
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
129
inline void LMatrix4d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));

2285 13 translate_mat 4 2454 24 LMatrix4d::translate_mat 0 2 1100 1101 1810
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
157
static inline LMatrix4d LMatrix4d::translate_mat(LVecBase3d const &trans);
static inline LMatrix4d LMatrix4d::translate_mat(double tx, double ty, double tz);

2286 10 rotate_mat 4 2454 21 LMatrix4d::rotate_mat 0 2 1102 1103 1039
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix4d LMatrix4d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2287 19 rotate_mat_normaxis 4 2454 30 LMatrix4d::rotate_mat_normaxis 0 2 1104 1105 1228
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
129
static inline LMatrix4d LMatrix4d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (CS_default));

2288 9 scale_mat 4 2454 20 LMatrix4d::scale_mat 0 3 1106 1107 1108 2806
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix4d LMatrix4d::scale_mat(LVecBase3d const &scale);
static inline LMatrix4d LMatrix4d::scale_mat(double sx, double sy, double sz);
static inline LMatrix4d LMatrix4d::scale_mat(double scale);

2289 9 shear_mat 4 2454 20 LMatrix4d::shear_mat 0 4 1109 1110 1111 1112 1918
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
227
static inline LMatrix4d LMatrix4d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4d LMatrix4d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2290 15 scale_shear_mat 4 2454 26 LMatrix4d::scale_shear_mat 0 4 1113 1114 1115 1116 1846
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
297
static inline LMatrix4d LMatrix4d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (CS_default));
static inline LMatrix4d LMatrix4d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (CS_default));

2291 13 y_to_z_up_mat 4 2454 24 LMatrix4d::y_to_z_up_mat 0 1 1117 1021
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::y_to_z_up_mat(void);

2292 13 z_to_y_up_mat 4 2454 24 LMatrix4d::z_to_y_up_mat 0 1 1118 1021
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::z_to_y_up_mat(void);

2293 11 convert_mat 4 2454 22 LMatrix4d::convert_mat 0 1 1119 362
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4d const &LMatrix4d::convert_mat(CoordinateSystem from, CoordinateSystem to);

2294 12 almost_equal 4 2454 23 LMatrix4d::almost_equal 0 2 1120 1121 1338
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
144
bool LMatrix4d::almost_equal(LMatrix4d const &other, double threshold) const;
inline bool LMatrix4d::almost_equal(LMatrix4d const &other) const;

2295 6 output 4 2454 17 LMatrix4d::output 0 1 1122 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4d::output(ostream &out) const;

2296 5 write 4 2454 16 LMatrix4d::write 0 2 1123 1124 226
// HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write(ostream &out, int indent_level = (0)) const;

2297 11 python_repr 4 2454 22 LMatrix4d::python_repr 0 1 1125 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
88
void LMatrix4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2298 14 get_class_type 4 2454 25 LMatrix4d::get_class_type 0 1 1126 0
50
static TypeHandle LMatrix4d::get_class_type(void);

2299 10 ~LMatrix4d 4 2454 21 LMatrix4d::~LMatrix4d 0 0 0
28
LMatrix4d::~LMatrix4d(void);

2300 10 operator * 1 0 10 operator * 0 16 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 0
1115
inline LVecBase3f operator *(LVecBase3f const &v, LMatrix3f const &m);
inline LVector2f operator *(LVector2f const &v, LMatrix3f const &m);
inline LPoint2f operator *(LPoint2f const &v, LMatrix3f const &m);
inline LVecBase4f operator *(LVecBase4f const &v, LMatrix4f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix4f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix4f const &m);
inline LVecBase3d operator *(LVecBase3d const &v, LMatrix3d const &m);
inline LVector2d operator *(LVector2d const &v, LMatrix3d const &m);
inline LPoint2d operator *(LPoint2d const &v, LMatrix3d const &m);
inline LVecBase4d operator *(LVecBase4d const &v, LMatrix4d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix4d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix4d const &m);
inline LMatrix3f operator *(LMatrix3f const &m, LQuaternionf const &q);
inline LMatrix4f operator *(LMatrix4f const &m, LQuaternionf const &q);
inline LMatrix3d operator *(LMatrix3d const &m, LQuaterniond const &q);
inline LMatrix4d operator *(LMatrix4d const &m, LQuaterniond const &q);

2301 22 generic_write_datagram 1 0 22 generic_write_datagram 0 4 1332 1333 1334 1335 0
303
inline void generic_write_datagram(Datagram &dest, LMatrix3f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix3d const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4d const &value);

2302 21 generic_read_datagram 1 0 21 generic_read_datagram 0 4 1336 1337 1338 1339 0
319
inline void generic_read_datagram(LMatrix3f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix3d &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4d &result, DatagramIterator &source);

2303 14 compose_matrix 1 0 14 compose_matrix 0 16 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 0
1494
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));

2304 16 decompose_matrix 1 0 16 decompose_matrix 0 16 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 0
1418
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));

2305 22 compose_matrix_old_hpr 1 0 22 compose_matrix_old_hpr 0 8 1372 1373 1374 1375 1376 1377 1378 1379 1530
// Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////

// Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////
958
void compose_matrix_old_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
void compose_matrix_old_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_old_hpr(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));

2306 24 decompose_matrix_old_hpr 1 0 24 decompose_matrix_old_hpr 0 8 1380 1381 1382 1383 1384 1385 1386 1387 1050
////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////
910
bool decompose_matrix_old_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
bool decompose_matrix_old_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));

2307 22 compose_matrix_new_hpr 1 0 22 compose_matrix_new_hpr 0 8 1388 1389 1390 1391 1392 1393 1394 1395 538
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
////////////////////////////////////////////////////////////////////
958
void compose_matrix_new_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4f &mat, float const components[num_matrix_components], CoordinateSystem cs = (CS_default));
void compose_matrix_new_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (CS_default));
inline void compose_matrix_new_hpr(LMatrix4d &mat, double const components[num_matrix_components], CoordinateSystem cs = (CS_default));

2308 24 decompose_matrix_new_hpr 1 0 24 decompose_matrix_new_hpr 0 8 1396 1397 1398 1399 1400 1401 1402 1403 1050
////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
////////////////////////////////////////////////////////////////////
910
bool decompose_matrix_new_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, float components[num_matrix_components], CoordinateSystem CS = (CS_default));
bool decompose_matrix_new_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (CS_default));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, double components[num_matrix_components], CoordinateSystem CS = (CS_default));

2309 14 old_to_new_hpr 1 0 14 old_to_new_hpr 0 2 1404 1405 1012
////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////
107
LVecBase3f old_to_new_hpr(LVecBase3f const &old_hpr);
LVecBase3d old_to_new_hpr(LVecBase3d const &old_hpr);

2310 14 new_to_old_hpr 1 0 14 new_to_old_hpr 0 2 1406 1407 1072
////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
////////////////////////////////////////////////////////////////////
107
LVecBase3f new_to_old_hpr(LVecBase3f const &new_hpr);
LVecBase3d new_to_old_hpr(LVecBase3d const &new_hpr);

2311 12 LQuaternionf 4 2457 26 LQuaternionf::LQuaternionf 0 4 1133 1134 1135 1136 1395
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
233
inline LQuaternionf::LQuaternionf(void);
inline LQuaternionf::LQuaternionf(LVecBase4f const &copy);
inline LQuaternionf::LQuaternionf(float , LVecBase3f const &copy);
inline LQuaternionf::LQuaternionf(float , float , float , float );

2312 14 pure_imaginary 4 2457 28 LQuaternionf::pure_imaginary 0 1 1137 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaternionf LQuaternionf::pure_imaginary(LVector3f const &);

2313 9 conjugate 4 2457 23 LQuaternionf::conjugate 0 1 1138 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaternionf LQuaternionf::conjugate(void) const;

2314 5 xform 4 2457 19 LQuaternionf::xform 0 2 1139 1140 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3f LQuaternionf::xform(LVecBase3f const &v) const;
inline LVecBase4f LQuaternionf::xform(LVecBase4f const &v) const;

2315 8 multiply 4 2457 22 LQuaternionf::multiply 0 1 1141 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaternionf LQuaternionf::multiply(LQuaternionf const &rhs) const;

2316 10 operator - 68 2457 24 LQuaternionf::operator - 0 1 1142 216
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LQuaternionf LQuaternionf::operator -(void) const;

2317 10 operator + 4 2457 24 LQuaternionf::operator + 0 1 1143 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator +(LQuaternionf const &other) const;

2318 10 operator - 4 2457 24 LQuaternionf::operator - 0 1 1144 232
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaternionf LQuaternionf::operator -(LQuaternionf const &other) const;

2319 9 angle_rad 4 2457 23 LQuaternionf::angle_rad 0 1 1145 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_rad(LQuaternionf const &other) const;

2320 9 angle_deg 4 2457 23 LQuaternionf::angle_deg 0 1 1146 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_deg(LQuaternionf const &other) const;

2321 10 operator * 4 2457 24 LQuaternionf::operator * 0 4 1147 1148 1149 1150 958
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
263
inline LQuaternionf LQuaternionf::operator *(float scalar) const;
inline LQuaternionf LQuaternionf::operator *(LQuaternionf const &) const;
inline LMatrix3f LQuaternionf::operator *(LMatrix3f const &);
inline LMatrix4f LQuaternionf::operator *(LMatrix4f const &);

2322 10 operator / 4 2457 24 LQuaternionf::operator / 0 1 1151 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LQuaternionf LQuaternionf::operator /(float scalar) const;

2323 11 operator *= 4 2457 25 LQuaternionf::operator *= 0 1 1152 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaternionf &LQuaternionf::operator *=(LQuaternionf const &);

2324 12 almost_equal 4 2457 26 LQuaternionf::almost_equal 0 2 1153 1154 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
162
inline bool LQuaternionf::almost_equal(LQuaternionf const &other) const;
inline bool LQuaternionf::almost_equal(LQuaternionf const &other, float threshold) const;

2325 17 is_same_direction 4 2457 31 LQuaternionf::is_same_direction 0 1 1155 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaternionf::is_same_direction(LQuaternionf const &other) const;

2326 21 almost_same_direction 4 2457 35 LQuaternionf::almost_same_direction 0 1 1156 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
98
inline bool LQuaternionf::almost_same_direction(LQuaternionf const &other, float threshold) const;

2327 6 output 4 2457 20 LQuaternionf::output 0 1 1157 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaternionf::output(ostream &) const;

2328 17 extract_to_matrix 4 2457 31 LQuaternionf::extract_to_matrix 0 2 1158 1159 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaternionf::extract_to_matrix(LMatrix3f &m) const;
void LQuaternionf::extract_to_matrix(LMatrix4f &m) const;

2329 15 set_from_matrix 4 2457 29 LQuaternionf::set_from_matrix 0 2 1160 1161 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaternionf::set_from_matrix(LMatrix3f const &m);
inline void LQuaternionf::set_from_matrix(LMatrix4f const &m);

2330 7 set_hpr 4 2457 21 LQuaternionf::set_hpr 0 2 1162 1163 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaternionf::set_hpr(LVecBase3f const &hpr, CoordinateSystem cs = (CS_default));

2331 7 get_hpr 4 2457 21 LQuaternionf::get_hpr 0 2 1164 1165 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3f LQuaternionf::get_hpr(CoordinateSystem cs = (CS_default)) const;

2332 8 get_axis 4 2457 22 LQuaternionf::get_axis 0 1 1166 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3f LQuaternionf::get_axis(void) const;

2333 19 get_axis_normalized 4 2457 33 LQuaternionf::get_axis_normalized 0 1 1167 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3f LQuaternionf::get_axis_normalized(void) const;

2334 13 get_angle_rad 4 2457 27 LQuaternionf::get_angle_rad 0 1 1168 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
53
inline float LQuaternionf::get_angle_rad(void) const;

2335 9 get_angle 4 2457 23 LQuaternionf::get_angle 0 1 1169 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
49
inline float LQuaternionf::get_angle(void) const;

2336 23 set_from_axis_angle_rad 4 2457 37 LQuaternionf::set_from_axis_angle_rad 0 1 1170 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
90
inline void LQuaternionf::set_from_axis_angle_rad(float angle_rad, LVector3f const &axis);

2337 19 set_from_axis_angle 4 2457 33 LQuaternionf::set_from_axis_angle 0 1 1171 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
86
inline void LQuaternionf::set_from_axis_angle(float angle_deg, LVector3f const &axis);

2338 6 get_up 4 2457 20 LQuaternionf::get_up 0 2 1172 1173 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3f LQuaternionf::get_up(CoordinateSystem cs = (CS_default)) const;

2339 9 get_right 4 2457 23 LQuaternionf::get_right 0 2 1174 1175 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3f LQuaternionf::get_right(CoordinateSystem cs = (CS_default)) const;

2340 11 get_forward 4 2457 25 LQuaternionf::get_forward 0 2 1176 1177 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3f LQuaternionf::get_forward(CoordinateSystem cs = (CS_default)) const;

2341 5 get_r 4 2457 19 LQuaternionf::get_r 0 1 1178 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_r(void) const;

2342 5 get_i 4 2457 19 LQuaternionf::get_i 0 1 1179 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_i(void) const;

2343 5 get_j 4 2457 19 LQuaternionf::get_j 0 1 1180 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_j(void) const;

2344 5 get_k 4 2457 19 LQuaternionf::get_k 0 1 1181 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_k(void) const;

2345 5 set_r 4 2457 19 LQuaternionf::set_r 0 1 1182 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_r(float r);

2346 5 set_i 4 2457 19 LQuaternionf::set_i 0 1 1183 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_i(float i);

2347 5 set_j 4 2457 19 LQuaternionf::set_j 0 1 1184 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_j(float j);

2348 5 set_k 4 2457 19 LQuaternionf::set_k 0 1 1185 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_k(float k);

2349 9 normalize 4 2457 23 LQuaternionf::normalize 0 1 1186 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaternionf::normalize(void);

2350 14 conjugate_from 4 2457 28 LQuaternionf::conjugate_from 0 1 1187 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::conjugate_from(LQuaternionf const &other);

2351 18 conjugate_in_place 4 2457 32 LQuaternionf::conjugate_in_place 0 1 1188 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaternionf::conjugate_in_place(void);

2352 11 invert_from 4 2457 25 LQuaternionf::invert_from 0 1 1189 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaternionf::invert_from(LQuaternionf const &other);

2353 15 invert_in_place 4 2457 29 LQuaternionf::invert_in_place 0 1 1190 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaternionf::invert_in_place(void);

2354 11 is_identity 4 2457 25 LQuaternionf::is_identity 0 1 1191 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaternionf::is_identity(void) const;

2355 18 is_almost_identity 4 2457 32 LQuaternionf::is_almost_identity 0 1 1192 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::is_almost_identity(float tolerance) const;

2356 10 ident_quat 4 2457 24 LQuaternionf::ident_quat 0 1 1193 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaternionf const &LQuaternionf::ident_quat(void);

2357 14 get_class_type 4 2457 28 LQuaternionf::get_class_type 0 1 1194 0
53
static TypeHandle LQuaternionf::get_class_type(void);

2358 13 ~LQuaternionf 4 2457 27 LQuaternionf::~LQuaternionf 0 0 0
34
LQuaternionf::~LQuaternionf(void);

2359 12 LQuaterniond 4 2458 26 LQuaterniond::LQuaterniond 0 4 1195 1196 1197 1198 2792
// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

// Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
238
inline LQuaterniond::LQuaterniond(void);
inline LQuaterniond::LQuaterniond(LVecBase4d const &copy);
inline LQuaterniond::LQuaterniond(double , LVecBase3d const &copy);
inline LQuaterniond::LQuaterniond(double , double , double , double );

2360 14 pure_imaginary 4 2458 28 LQuaterniond::pure_imaginary 0 1 1199 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaterniond LQuaterniond::pure_imaginary(LVector3d const &);

2361 9 conjugate 4 2458 23 LQuaterniond::conjugate 0 1 1200 532
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaterniond LQuaterniond::conjugate(void) const;

2362 5 xform 4 2458 19 LQuaterniond::xform 0 2 1201 1202 1074
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3d LQuaterniond::xform(LVecBase3d const &v) const;
inline LVecBase4d LQuaterniond::xform(LVecBase4d const &v) const;

2363 8 multiply 4 2458 22 LQuaterniond::multiply 0 1 1203 512
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaterniond LQuaterniond::multiply(LQuaterniond const &rhs) const;

2364 10 operator - 68 2458 24 LQuaterniond::operator - 0 1 1204 434
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline LQuaterniond LQuaterniond::operator -(void) const;

2365 10 operator + 4 2458 24 LQuaterniond::operator + 0 1 1205 466
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator +(LQuaterniond const &other) const;

2366 10 operator - 4 2458 24 LQuaterniond::operator - 0 1 1206 466
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
inline LQuaterniond LQuaterniond::operator -(LQuaterniond const &other) const;

2367 9 angle_rad 4 2458 23 LQuaterniond::angle_rad 0 1 1207 740
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_rad(LQuaterniond const &other) const;

2368 9 angle_deg 4 2458 23 LQuaterniond::angle_deg 0 1 1208 740
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_deg(LQuaterniond const &other) const;

2369 10 operator * 4 2458 24 LQuaterniond::operator * 0 4 1209 1210 1211 1212 1918
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
////////////////////////////////////////////////////////////////////
264
inline LQuaterniond LQuaterniond::operator *(double scalar) const;
inline LQuaterniond LQuaterniond::operator *(LQuaterniond const &) const;
inline LMatrix3d LQuaterniond::operator *(LMatrix3d const &);
inline LMatrix4d LQuaterniond::operator *(LMatrix4d const &);

2370 10 operator / 4 2458 24 LQuaterniond::operator / 0 1 1213 458
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LQuaterniond LQuaterniond::operator /(double scalar) const;

2371 11 operator *= 4 2458 25 LQuaterniond::operator *= 0 1 1214 476
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaterniond &LQuaterniond::operator *=(LQuaterniond const &);

2372 12 almost_equal 4 2458 26 LQuaterniond::almost_equal 0 2 1215 1216 1338
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
163
inline bool LQuaterniond::almost_equal(LQuaterniond const &other) const;
inline bool LQuaterniond::almost_equal(LQuaterniond const &other, double threshold) const;

2373 17 is_same_direction 4 2458 31 LQuaterniond::is_same_direction 0 1 1217 750
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaterniond::is_same_direction(LQuaterniond const &other) const;

2374 21 almost_same_direction 4 2458 35 LQuaterniond::almost_same_direction 0 1 1218 676
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
99
inline bool LQuaterniond::almost_same_direction(LQuaterniond const &other, double threshold) const;

2375 6 output 4 2458 20 LQuaterniond::output 0 1 1219 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaterniond::output(ostream &) const;

2376 17 extract_to_matrix 4 2458 31 LQuaterniond::extract_to_matrix 0 2 1220 1221 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaterniond::extract_to_matrix(LMatrix3d &m) const;
void LQuaterniond::extract_to_matrix(LMatrix4d &m) const;

2377 15 set_from_matrix 4 2458 29 LQuaterniond::set_from_matrix 0 2 1222 1223 955
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
void LQuaterniond::set_from_matrix(LMatrix3d const &m);
inline void LQuaterniond::set_from_matrix(LMatrix4d const &m);

2378 7 set_hpr 4 2458 21 LQuaterniond::set_hpr 0 2 1224 1225 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
86
void LQuaterniond::set_hpr(LVecBase3d const &hpr, CoordinateSystem cs = (CS_default));

2379 7 get_hpr 4 2458 21 LQuaterniond::get_hpr 0 2 1226 1227 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
75
LVecBase3d LQuaterniond::get_hpr(CoordinateSystem cs = (CS_default)) const;

2380 8 get_axis 4 2458 22 LQuaterniond::get_axis 0 1 1228 866
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3d LQuaterniond::get_axis(void) const;

2381 19 get_axis_normalized 4 2458 33 LQuaterniond::get_axis_normalized 0 1 1229 832
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3d LQuaterniond::get_axis_normalized(void) const;

2382 13 get_angle_rad 4 2458 27 LQuaterniond::get_angle_rad 0 1 1230 1292
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
54
inline double LQuaterniond::get_angle_rad(void) const;

2383 9 get_angle 4 2458 23 LQuaterniond::get_angle 0 1 1231 1284
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
50
inline double LQuaterniond::get_angle(void) const;

2384 23 set_from_axis_angle_rad 4 2458 37 LQuaterniond::set_from_axis_angle_rad 0 1 1232 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
91
inline void LQuaterniond::set_from_axis_angle_rad(double angle_rad, LVector3d const &axis);

2385 19 set_from_axis_angle 4 2458 33 LQuaterniond::set_from_axis_angle 0 1 1233 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
87
inline void LQuaterniond::set_from_axis_angle(double angle_deg, LVector3d const &axis);

2386 6 get_up 4 2458 20 LQuaterniond::get_up 0 2 1234 1235 632
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
80
inline LVector3d LQuaterniond::get_up(CoordinateSystem cs = (CS_default)) const;

2387 9 get_right 4 2458 23 LQuaterniond::get_right 0 2 1236 1237 642
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
83
inline LVector3d LQuaterniond::get_right(CoordinateSystem cs = (CS_default)) const;

2388 11 get_forward 4 2458 25 LQuaterniond::get_forward 0 2 1238 1239 650
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
85
inline LVector3d LQuaterniond::get_forward(CoordinateSystem cs = (CS_default)) const;

2389 5 get_r 4 2458 19 LQuaterniond::get_r 0 1 1240 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_r(void) const;

2390 5 get_i 4 2458 19 LQuaterniond::get_i 0 1 1241 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_i(void) const;

2391 5 get_j 4 2458 19 LQuaterniond::get_j 0 1 1242 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_j(void) const;

2392 5 get_k 4 2458 19 LQuaterniond::get_k 0 1 1243 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_k(void) const;

2393 5 set_r 4 2458 19 LQuaterniond::set_r 0 1 1244 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_r(double r);

2394 5 set_i 4 2458 19 LQuaterniond::set_i 0 1 1245 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_i(double i);

2395 5 set_j 4 2458 19 LQuaterniond::set_j 0 1 1246 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_j(double j);

2396 5 set_k 4 2458 19 LQuaterniond::set_k 0 1 1247 430
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_k(double k);

2397 9 normalize 4 2458 23 LQuaterniond::normalize 0 1 1248 438
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaterniond::normalize(void);

2398 14 conjugate_from 4 2458 28 LQuaterniond::conjugate_from 0 1 1249 1636
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaterniond::conjugate_from(LQuaterniond const &other);

2399 18 conjugate_in_place 4 2458 32 LQuaterniond::conjugate_in_place 0 1 1250 760
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaterniond::conjugate_in_place(void);

2400 11 invert_from 4 2458 25 LQuaterniond::invert_from 0 1 1251 1590
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaterniond::invert_from(LQuaterniond const &other);

2401 15 invert_in_place 4 2458 29 LQuaterniond::invert_in_place 0 1 1252 722
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaterniond::invert_in_place(void);

2402 11 is_identity 4 2458 25 LQuaterniond::is_identity 0 1 1253 646
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaterniond::is_identity(void) const;

2403 18 is_almost_identity 4 2458 32 LQuaterniond::is_almost_identity 0 1 1254 684
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
69
inline bool LQuaterniond::is_almost_identity(double tolerance) const;

2404 10 ident_quat 4 2458 24 LQuaterniond::ident_quat 0 1 1255 520
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaterniond const &LQuaterniond::ident_quat(void);

2405 14 get_class_type 4 2458 28 LQuaterniond::get_class_type 0 1 1256 0
53
static TypeHandle LQuaterniond::get_class_type(void);

2406 13 ~LQuaterniond 4 2458 27 LQuaterniond::~LQuaterniond 0 0 0
34
LQuaterniond::~LQuaterniond(void);

2407 10 LRotationf 4 2459 22 LRotationf::LRotationf 0 8 1257 1258 1259 1260 1261 1262 1263 1264 2365
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
420
inline LRotationf::LRotationf(void);
inline LRotationf::LRotationf(LQuaternionf const &);
inline LRotationf::LRotationf(LVecBase4f const &copy);
inline LRotationf::LRotationf(float , float , float , float );
inline LRotationf::LRotationf(LVector3f const &, float );
inline LRotationf::LRotationf(LMatrix3f const &);
inline LRotationf::LRotationf(LMatrix4f const &);
inline LRotationf::LRotationf(float , float , float );

2408 10 operator * 4 2459 22 LRotationf::operator * 0 3 1265 1266 1267 853
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
211
inline LRotationf LRotationf::operator *(float scalar) const;
inline LRotationf LRotationf::operator *(LRotationf const &other) const;
inline LQuaternionf LRotationf::operator *(LQuaternionf const &other) const;

2409 10 operator / 4 2459 22 LRotationf::operator / 0 1 1268 224
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline LRotationf LRotationf::operator /(float scalar) const;

2410 14 get_class_type 4 2459 26 LRotationf::get_class_type 0 1 1269 0
51
static TypeHandle LRotationf::get_class_type(void);

2411 11 ~LRotationf 4 2459 23 LRotationf::~LRotationf 0 0 0
30
LRotationf::~LRotationf(void);

2412 10 LRotationd 4 2460 22 LRotationd::LRotationd 0 8 1270 1271 1272 1273 1274 1275 1276 1277 4732
// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////

// Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
428
inline LRotationd::LRotationd(void);
inline LRotationd::LRotationd(LQuaterniond const &);
inline LRotationd::LRotationd(LVecBase4d const &copy);
inline LRotationd::LRotationd(double , double , double , double );
inline LRotationd::LRotationd(LVector3d const &, double );
inline LRotationd::LRotationd(LMatrix3d const &);
inline LRotationd::LRotationd(LMatrix4d const &);
inline LRotationd::LRotationd(double , double , double );

2413 10 operator * 4 2460 22 LRotationd::operator * 0 3 1278 1279 1280 1708
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
////////////////////////////////////////////////////////////////////
212
inline LRotationd LRotationd::operator *(double scalar) const;
inline LRotationd LRotationd::operator *(LRotationd const &other) const;
inline LQuaterniond LRotationd::operator *(LQuaterniond const &other) const;

2414 10 operator / 4 2460 22 LRotationd::operator / 0 1 1281 450
////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline LRotationd LRotationd::operator /(double scalar) const;

2415 14 get_class_type 4 2460 26 LRotationd::get_class_type 0 1 1282 0
51
static TypeHandle LRotationd::get_class_type(void);

2416 11 ~LRotationd 4 2460 23 LRotationd::~LRotationd 0 0 0
30
LRotationd::~LRotationd(void);

2417 13 LOrientationf 4 2461 28 LOrientationf::LOrientationf 0 6 1283 1284 1285 1286 1287 1288 1881
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
346
inline LOrientationf::LOrientationf(void);
inline LOrientationf::LOrientationf(LQuaternionf const &);
inline LOrientationf::LOrientationf(float , float , float , float );
inline LOrientationf::LOrientationf(LVector3f const &, float );
inline LOrientationf::LOrientationf(LMatrix3f const &);
inline LOrientationf::LOrientationf(LMatrix4f const &);

2418 10 operator * 4 2461 25 LOrientationf::operator * 0 2 1289 1290 666
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
159
inline LOrientationf LOrientationf::operator *(LRotationf const &other) const;
inline LOrientationf LOrientationf::operator *(LQuaternionf const &other) const;

2419 14 get_class_type 4 2461 29 LOrientationf::get_class_type 0 1 1291 0
54
static TypeHandle LOrientationf::get_class_type(void);

2420 14 ~LOrientationf 4 2461 29 LOrientationf::~LOrientationf 0 0 0
36
LOrientationf::~LOrientationf(void);

2421 13 LOrientationd 4 2462 28 LOrientationd::LOrientationd 0 6 1292 1293 1294 1295 1296 1297 3764
// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////

// Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
350
inline LOrientationd::LOrientationd(void);
inline LOrientationd::LOrientationd(LQuaterniond const &);
inline LOrientationd::LOrientationd(double , double , double , double );
inline LOrientationd::LOrientationd(LVector3d const &, float );
inline LOrientationd::LOrientationd(LMatrix3d const &);
inline LOrientationd::LOrientationd(LMatrix4d const &);

2422 10 operator * 4 2462 25 LOrientationd::operator * 0 2 1298 1299 1334
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
////////////////////////////////////////////////////////////////////
159
inline LOrientationd LOrientationd::operator *(LRotationd const &other) const;
inline LOrientationd LOrientationd::operator *(LQuaterniond const &other) const;

2423 14 get_class_type 4 2462 29 LOrientationd::get_class_type 0 1 1300 0
54
static TypeHandle LOrientationd::get_class_type(void);

2424 14 ~LOrientationd 4 2462 29 LOrientationd::~LOrientationd 0 0 0
36
LOrientationd::~LOrientationd(void);

1407
1 14 Dtool_VZN3gaIU 7 6 2463 1419 14 Dtool_VZN3gaIU 715 // Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_VZN3VQfL 7 6 2463 1419 14 Dtool_VZN3VQfL 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2464  
3 14 Dtool_VZN3lRq3 7 6 2463 1419 14 Dtool_VZN3lRq3 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2466  
4 14 Dtool_VZN3oQsK 7 6 2463 1419 14 Dtool_VZN3oQsK 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2466  1 y 1 2466  
5 14 Dtool_VZN3_ub0 6 7 2463 0 14 Dtool_VZN3_ub0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  4 copy 1 2464  
6 14 Dtool_VZN3_fng 6 7 2463 0 14 Dtool_VZN3_fng 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  10 fill_value 1 2466  
7 14 Dtool_VZN3xPnZ 4 8 2468 0 14 Dtool_VZN3xPnZ 0 2 4 this 3 2463  4 size 1 2467  
8 14 Dtool_VZN3fGvP 6 11 2464 0 14 Dtool_VZN3fGvP 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
9 14 Dtool_VZN3aClz 6 12 2464 0 14 Dtool_VZN3aClz 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
10 14 Dtool_VZN3VCzP 6 13 2464 0 14 Dtool_VZN3VCzP 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
11 14 Dtool_VZN3tjEl 6 15 2469 0 14 Dtool_VZN3tjEl 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  4 self 1 2469  
12 14 Dtool_VZN3Y1X1 4 16 2468 0 14 Dtool_VZN3Y1X1 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  1 i 1 2471  
13 14 Dtool_VZN36qLS 6 16 2466 0 14 Dtool_VZN36qLS 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  1 i 1 2471  
14 14 Dtool_VZN3xNZF 4 17 2468 0 14 Dtool_VZN3xNZF 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2463  1 i 1 2471  1 v 1 2466  
15 14 Dtool_VZN3oYf5 6 18 2471 0 14 Dtool_VZN3oYf5 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
16 14 Dtool_VZN3I5WA 6 19 2472 0 14 Dtool_VZN3I5WA 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2464  
17 14 Dtool_VZN3y_vl 6 20 2466 0 14 Dtool_VZN3y_vl 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  1 i 1 2471  
18 14 Dtool_VZN3uYPR 6 21 2466 0 14 Dtool_VZN3uYPR 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2464  
19 14 Dtool_VZN3u8IW 6 22 2466 0 14 Dtool_VZN3u8IW 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2464  
20 14 Dtool_VZN3nQnT 4 23 2468 0 14 Dtool_VZN3nQnT 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2463  1 i 1 2471  5 value 1 2466  
21 14 Dtool_VZN3gvpl 4 24 2468 0 14 Dtool_VZN3gvpl 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  5 value 1 2466  
22 14 Dtool_VZN3gLiq 4 25 2468 0 14 Dtool_VZN3gLiq 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  5 value 1 2466  
23 14 Dtool_VZN3qznS 4 26 2468 0 14 Dtool_VZN3qznS 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2463  1 i 1 2471  5 value 1 2466  
24 14 Dtool_VZN3BpGk 4 27 2468 0 14 Dtool_VZN3BpGk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  5 value 1 2466  
25 14 Dtool_VZN3BN_o 4 28 2468 0 14 Dtool_VZN3BN_o 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  5 value 1 2466  
26 14 Dtool_VZN3MuTE 4 29 2468 0 14 Dtool_VZN3MuTE 392 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2464  
27 14 Dtool_VZN3dEX3 6 30 2471 0 14 Dtool_VZN3dEX3 276 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2464  
28 14 Dtool_VZN391nF 4 31 2468 0 14 Dtool_VZN391nF 361 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  10 fill_value 1 2466  
29 14 Dtool_VZN3mT_9 4 32 2468 0 14 Dtool_VZN3mT_9 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2463  1 x 1 2466  1 y 1 2466  
30 14 Dtool_VZN3vbI8 6 33 2466 0 14 Dtool_VZN3vbI8 292 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2464  
31 14 Dtool_VZN3IV8b 6 34 2466 0 14 Dtool_VZN3IV8b 297 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2464  
32 14 Dtool_VZN37siR 6 35 2472 0 14 Dtool_VZN37siR 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2463  
33 14 Dtool_VZN39RXz 6 36 2466 0 14 Dtool_VZN39RXz 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  5 other 1 2464  
34 14 Dtool_VZN3km2c 7 37 2463 1419 14 Dtool_VZN3km2c 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  4 onto 1 2464  
35 14 Dtool_VZN3JkIg 6 38 2472 0 14 Dtool_VZN3JkIg 495 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  5 other 1 2464  
36 14 Dtool_VZN3ssYs 6 39 2472 0 14 Dtool_VZN3ssYs 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  5 other 1 2464  
37 14 Dtool_VZN3oMAb 6 40 2472 0 14 Dtool_VZN3oMAb 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  5 other 1 2464  
38 14 Dtool_VZN3VWAg 6 41 2471 0 14 Dtool_VZN3VWAg 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  5 other 1 2464  
39 14 Dtool_VZN3gmxE 6 41 2471 0 14 Dtool_VZN3gmxE 501 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2464  5 other 1 2464  9 threshold 1 2466  
40 14 Dtool_VZN3it5w 6 42 2467 0 14 Dtool_VZN3it5w 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2464  
41 14 Dtool_VZN3cmf3 6 42 2467 0 14 Dtool_VZN3cmf3 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  9 threshold 1 2466  
42 14 Dtool_VZN3T3v_ 6 43 2467 0 14 Dtool_VZN3T3v_ 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  4 hash 1 2467  
43 14 Dtool_VZN3kEhk 6 43 2467 0 14 Dtool_VZN3kEhk 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2464  4 hash 1 2467  9 threshold 1 2466  
44 14 Dtool_VZN3WPOu 7 44 2463 1419 14 Dtool_VZN3WPOu 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2464  
45 14 Dtool_VZN3KsJ6 7 45 2463 1419 14 Dtool_VZN3KsJ6 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  5 other 1 2464  
46 14 Dtool_VZN3LcrN 7 46 2463 1419 14 Dtool_VZN3LcrN 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  5 other 1 2464  
47 14 Dtool_VZN30d1B 7 47 2463 1419 14 Dtool_VZN30d1B 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  6 scalar 1 2466  
48 14 Dtool_VZN301py 7 48 2463 1419 14 Dtool_VZN301py 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  6 scalar 1 2466  
49 14 Dtool_VZN3_q3M 6 49 2463 0 14 Dtool_VZN3_q3M 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  5 other 1 2464  
50 14 Dtool_VZN3_aZg 6 50 2463 0 14 Dtool_VZN3_aZg 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  5 other 1 2464  
51 14 Dtool_VZN3iYvI 6 51 2463 0 14 Dtool_VZN3iYvI 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  6 scalar 1 2466  
52 14 Dtool_VZN3igj5 6 52 2463 0 14 Dtool_VZN3igj5 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  6 scalar 1 2466  
53 14 Dtool_VZN3KIsE 7 53 2463 1419 14 Dtool_VZN3KIsE 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  5 other 1 2464  
54 14 Dtool_VZN3oFND 7 54 2463 1419 14 Dtool_VZN3oFND 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2463  5 other 1 2464  
55 14 Dtool_VZN3NeTt 6 55 2472 0 14 Dtool_VZN3NeTt 339 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  5 other 1 2464  
56 14 Dtool_VZN3nTFd 6 55 2472 0 14 Dtool_VZN3nTFd 315 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2464  5 other 1 2464  9 threshold 1 2466  
57 14 Dtool_VZN3pO8G 4 56 2468 0 14 Dtool_VZN3pO8G 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2464  3 out 1 2473  
58 14 Dtool_VZN3iNXa 4 57 2468 0 14 Dtool_VZN3iNXa 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2464  3 out 1 2473  10 class_name 1 2475  
59 14 Dtool_VZN3KNOA 7 58 2477 0 14 Dtool_VZN3KNOA 0 0 
60 14 Dtool_VZN3GdnQ 7 60 2478 1472 14 Dtool_VZN3GdnQ 715 // Filename: lvecBase2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
61 14 Dtool_VZN3CUdE 7 60 2478 1472 14 Dtool_VZN3CUdE 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2479  
62 14 Dtool_VZN3i9B6 7 60 2478 1472 14 Dtool_VZN3i9B6 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2481  
63 14 Dtool_VZN3CY0M 7 60 2478 1472 14 Dtool_VZN3CY0M 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2481  1 y 1 2481  
64 14 Dtool_VZN3G77A 6 61 2478 0 14 Dtool_VZN3G77A 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  4 copy 1 2479  
65 14 Dtool_VZN3jNf2 6 61 2478 0 14 Dtool_VZN3jNf2 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  10 fill_value 1 2481  
66 14 Dtool_VZN3v7np 4 62 2468 0 14 Dtool_VZN3v7np 0 2 4 this 3 2478  4 size 1 2467  
67 14 Dtool_VZN3xrvf 6 65 2479 0 14 Dtool_VZN3xrvf 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
68 14 Dtool_VZN352lD 6 66 2479 0 14 Dtool_VZN352lD 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
69 14 Dtool_VZN372zf 6 67 2479 0 14 Dtool_VZN372zf 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
70 14 Dtool_VZN3POE1 6 69 2469 0 14 Dtool_VZN3POE1 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  4 self 1 2469  
71 14 Dtool_VZN35ZXF 4 70 2468 0 14 Dtool_VZN35ZXF 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  1 i 1 2471  
72 14 Dtool_VZN3cHLi 6 70 2481 0 14 Dtool_VZN3cHLi 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  1 i 1 2471  
73 14 Dtool_VZN3JisN 4 71 2468 0 14 Dtool_VZN3JisN 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2478  1 i 1 2471  1 v 1 2481  
74 14 Dtool_VZN3P1fJ 6 72 2471 0 14 Dtool_VZN3P1fJ 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Public, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
75 14 Dtool_VZN3muWQ 6 73 2472 0 14 Dtool_VZN3muWQ 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2479  
76 14 Dtool_VZN3Urv1 6 74 2481 0 14 Dtool_VZN3Urv1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  1 i 1 2471  
77 14 Dtool_VZN3QsPh 6 75 2481 0 14 Dtool_VZN3QsPh 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2479  
78 14 Dtool_VZN3QIIm 6 76 2481 0 14 Dtool_VZN3QIIm 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2479  
79 14 Dtool_VZN33_g8 4 77 2468 0 14 Dtool_VZN33_g8 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2478  1 i 1 2471  5 value 1 2481  
80 14 Dtool_VZN3KZlY 4 78 2468 0 14 Dtool_VZN3KZlY 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  5 value 1 2481  
81 14 Dtool_VZN3K9dd 4 79 2468 0 14 Dtool_VZN3K9dd 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  5 value 1 2481  
82 14 Dtool_VZN30P6a 4 80 2468 0 14 Dtool_VZN30P6a 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2478  1 i 1 2471  5 value 1 2481  
83 14 Dtool_VZN3rQCX 4 81 2468 0 14 Dtool_VZN3rQCX 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  5 value 1 2481  
84 14 Dtool_VZN3r06b 4 82 2468 0 14 Dtool_VZN3r06b 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  5 value 1 2481  
85 14 Dtool_VZN3u9TU 4 83 2468 0 14 Dtool_VZN3u9TU 392 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Public
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2479  
86 14 Dtool_VZN38xWH 6 84 2471 0 14 Dtool_VZN38xWH 276 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2479  
87 14 Dtool_VZN3sasc 4 85 2468 0 14 Dtool_VZN3sasc 361 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  10 fill_value 1 2481  
88 14 Dtool_VZN3bAy_ 4 86 2468 0 14 Dtool_VZN3bAy_ 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2478  1 x 1 2481  1 y 1 2481  
89 14 Dtool_VZN3MHIM 6 87 2481 0 14 Dtool_VZN3MHIM 292 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2479  
90 14 Dtool_VZN3qI8r 6 88 2481 0 14 Dtool_VZN3qI8r 297 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2479  
91 14 Dtool_VZN3ZAih 6 89 2472 0 14 Dtool_VZN3ZAih 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2478  
92 14 Dtool_VZN3cCJC 6 90 2481 0 14 Dtool_VZN3cCJC 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  5 other 1 2479  
93 14 Dtool_VZN3mCxs 7 91 2478 1472 14 Dtool_VZN3mCxs 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  4 onto 1 2479  
94 14 Dtool_VZN3Leos 6 92 2472 0 14 Dtool_VZN3Leos 495 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  5 other 1 2479  
95 14 Dtool_VZN3gLYM 6 93 2472 0 14 Dtool_VZN3gLYM 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  5 other 1 2479  
96 14 Dtool_VZN3trA7 6 94 2472 0 14 Dtool_VZN3trA7 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  5 other 1 2479  
97 14 Dtool_VZN3cKgs 6 95 2471 0 14 Dtool_VZN3cKgs 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  5 other 1 2479  
98 14 Dtool_VZN3e1W3 6 95 2471 0 14 Dtool_VZN3e1W3 501 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2479  5 other 1 2479  9 threshold 1 2481  
99 14 Dtool_VZN3F_5A 6 96 2467 0 14 Dtool_VZN3F_5A 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2479  
100 14 Dtool_VZN31_3f 6 96 2467 0 14 Dtool_VZN31_3f 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  9 threshold 1 2481  
101 14 Dtool_VZN3wrvP 6 97 2467 0 14 Dtool_VZN3wrvP 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  4 hash 1 2467  
102 14 Dtool_VZN3_Zma 6 97 2467 0 14 Dtool_VZN3_Zma 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2479  4 hash 1 2467  9 threshold 1 2481  
103 14 Dtool_VZN34yP_ 7 98 2478 1472 14 Dtool_VZN34yP_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2479  
104 14 Dtool_VZN3FWpG 7 99 2478 1472 14 Dtool_VZN3FWpG 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  5 other 1 2479  
105 14 Dtool_VZN3FmLa 7 100 2478 1472 14 Dtool_VZN3FmLa 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  5 other 1 2479  
106 14 Dtool_VZN3P52U 7 101 2478 1472 14 Dtool_VZN3P52U 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  6 scalar 1 2481  
107 14 Dtool_VZN3IRtF 7 102 2478 1472 14 Dtool_VZN3IRtF 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::vector / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  6 scalar 1 2481  
108 14 Dtool_VZN3zz2s 6 103 2478 0 14 Dtool_VZN3zz2s 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator +=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  5 other 1 2479  
109 14 Dtool_VZN38DYA 6 104 2478 0 14 Dtool_VZN38DYA 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator -=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  5 other 1 2479  
110 14 Dtool_VZN3WC3U 6 105 2478 0 14 Dtool_VZN3WC3U 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator *=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  6 scalar 1 2481  
111 14 Dtool_VZN3X6rF 6 106 2478 0 14 Dtool_VZN3X6rF 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::operator /=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  6 scalar 1 2481  
112 14 Dtool_VZN3mSot 7 107 2478 1472 14 Dtool_VZN3mSot 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  5 other 1 2479  
113 14 Dtool_VZN3EfJs 7 108 2478 1472 14 Dtool_VZN3EfJs 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2478  5 other 1 2479  
114 14 Dtool_VZN3nTK9 6 109 2472 0 14 Dtool_VZN3nTK9 339 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  5 other 1 2479  
115 14 Dtool_VZN3_OqN 6 109 2472 0 14 Dtool_VZN3_OqN 315 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2479  5 other 1 2479  9 threshold 1 2481  
116 14 Dtool_VZN3SB9W 4 110 2468 0 14 Dtool_VZN3SB9W 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2479  3 out 1 2473  
117 14 Dtool_VZN3HCWq 4 111 2468 0 14 Dtool_VZN3HCWq 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2479  3 out 1 2473  10 class_name 1 2475  
118 14 Dtool_VZN3vAPQ 7 112 2477 0 14 Dtool_VZN3vAPQ 0 0 
119 14 Dtool_VZN3Qv_8 7 114 2482 1532 14 Dtool_VZN3Qv_8 713 // Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
120 14 Dtool_VZN3_wFf 7 114 2482 1532 14 Dtool_VZN3_wFf 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2464  
121 14 Dtool_VZN3tvIb 7 114 2482 1532 14 Dtool_VZN3tvIb 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2466  
122 14 Dtool_VZN3Os00 7 114 2482 1532 14 Dtool_VZN3Os00 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2466  1 y 1 2466  
123 14 Dtool_VZN3rg1b 6 115 2482 0 14 Dtool_VZN3rg1b 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2482  4 copy 1 2464  
124 14 Dtool_VZN3OfPd 6 115 2482 0 14 Dtool_VZN3OfPd 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2482  10 fill_value 1 2466  
125 14 Dtool_VZN3MCtA 6 116 2483 0 14 Dtool_VZN3MCtA 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
126 14 Dtool_VZN3yI1V 6 117 2483 0 14 Dtool_VZN3yI1V 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
127 14 Dtool_VZN3ykua 6 118 2483 0 14 Dtool_VZN3ykua 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
128 14 Dtool_VZN3VMph 7 119 2482 1532 14 Dtool_VZN3VMph 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2483  
129 14 Dtool_VZN3JC_P 7 120 2463 1419 14 Dtool_VZN3JC_P 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2483  5 other 1 2464  
130 14 Dtool_VZN3jfKg 7 120 2482 1532 14 Dtool_VZN3jfKg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2483  5 other 1 2483  
131 14 Dtool_VZN3pPmQ 7 121 2463 1419 14 Dtool_VZN3pPmQ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2483  5 other 1 2464  
132 14 Dtool_VZN3Dbxg 7 121 2482 1532 14 Dtool_VZN3Dbxg 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2483  5 other 1 2483  
133 14 Dtool_VZN3dPP0 7 122 2482 1532 14 Dtool_VZN3dPP0 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2483  6 scalar 1 2466  
134 14 Dtool_VZN3tnx1 7 123 2482 1532 14 Dtool_VZN3tnx1 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2483  6 scalar 1 2466  
135 14 Dtool_VZN3piFZ 7 124 2482 1532 14 Dtool_VZN3piFZ 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2483  4 onto 1 2464  
136 14 Dtool_VZN3e9_x 6 125 2466 0 14 Dtool_VZN3e9_x 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2483  5 other 1 2483  
137 14 Dtool_VZN3_avu 6 126 2466 0 14 Dtool_VZN3_avu 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2483  5 other 1 2483  
138 14 Dtool_VZN3fA9I 4 127 2468 0 14 Dtool_VZN3fA9I 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2483  3 out 1 2473  10 class_name 1 2475  
139 14 Dtool_VZN3hYMy 7 128 2477 0 14 Dtool_VZN3hYMy 0 0 
140 14 Dtool_VZN3wcd5 7 131 2485 1548 14 Dtool_VZN3wcd5 713 // Filename: lvector2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
141 14 Dtool_VZN3qdIZ 7 131 2485 1548 14 Dtool_VZN3qdIZ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2479  
142 14 Dtool_VZN3eGDk 7 131 2485 1548 14 Dtool_VZN3eGDk 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2481  
143 14 Dtool_VZN3Ay7S 7 131 2485 1548 14 Dtool_VZN3Ay7S 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2481  1 y 1 2481  
144 14 Dtool_VZN3zhOK 6 132 2485 0 14 Dtool_VZN3zhOK 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2485  4 copy 1 2479  
145 14 Dtool_VZN32_5n 6 132 2485 0 14 Dtool_VZN32_5n 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2485  10 fill_value 1 2481  
146 14 Dtool_VZN30FN9 6 133 2486 0 14 Dtool_VZN30FN9 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
147 14 Dtool_VZN3pXVS 6 134 2486 0 14 Dtool_VZN3pXVS 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
148 14 Dtool_VZN3p7OX 6 135 2486 0 14 Dtool_VZN3p7OX 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
149 14 Dtool_VZN3ONJe 7 136 2485 1548 14 Dtool_VZN3ONJe 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2486  
150 14 Dtool_VZN3gDY_ 7 137 2478 1472 14 Dtool_VZN3gDY_ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2486  5 other 1 2479  
151 14 Dtool_VZN3KsOa 7 137 2485 1548 14 Dtool_VZN3KsOa 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2486  5 other 1 2486  
152 14 Dtool_VZN3AO__ 7 138 2478 1472 14 Dtool_VZN3AO__ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2486  5 other 1 2479  
153 14 Dtool_VZN3qo1a 7 138 2485 1548 14 Dtool_VZN3qo1a 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2486  5 other 1 2486  
154 14 Dtool_VZN3_Z18 7 139 2485 1548 14 Dtool_VZN3_Z18 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2486  6 scalar 1 2481  
155 14 Dtool_VZN3vwW_ 7 140 2485 1548 14 Dtool_VZN3vwW_ 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2486  6 scalar 1 2481  
156 14 Dtool_VZN3Ymkd 7 141 2485 1548 14 Dtool_VZN3Ymkd 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2486  4 onto 1 2479  
157 14 Dtool_VZN3H_RS 6 142 2481 0 14 Dtool_VZN3H_RS 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2486  5 other 1 2486  
158 14 Dtool_VZN3oZBP 6 143 2481 0 14 Dtool_VZN3oZBP 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 2486  5 other 1 2486  
159 14 Dtool_VZN32DdF 4 144 2468 0 14 Dtool_VZN32DdF 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2486  3 out 1 2473  10 class_name 1 2475  
160 14 Dtool_VZN34Zsu 7 145 2477 0 14 Dtool_VZN34Zsu 0 0 
161 14 Dtool_VZN3zKKY 7 148 2488 1562 14 Dtool_VZN3zKKY 711 // Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
162 14 Dtool_VZN3tY8N 7 148 2488 1562 14 Dtool_VZN3tY8N 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2464  
163 14 Dtool_VZN3CtvQ 7 148 2488 1562 14 Dtool_VZN3CtvQ 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2466  
164 14 Dtool_VZN3qlQB 7 148 2488 1562 14 Dtool_VZN3qlQB 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2466  1 y 1 2466  
165 14 Dtool_VZN3_egO 6 149 2488 0 14 Dtool_VZN3_egO 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2488  4 copy 1 2464  
166 14 Dtool_VZN3qvjK 6 149 2488 0 14 Dtool_VZN3qvjK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2488  10 fill_value 1 2466  
167 14 Dtool_VZN3qnt3 6 150 2489 0 14 Dtool_VZN3qnt3 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
168 14 Dtool_VZN3CGWE 6 151 2489 0 14 Dtool_VZN3CGWE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
169 14 Dtool_VZN3aRgE 6 152 2489 0 14 Dtool_VZN3aRgE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
170 14 Dtool_VZN301sU 7 153 2488 1562 14 Dtool_VZN301sU 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2489  
171 14 Dtool_VZN3sVHw 7 154 2463 1419 14 Dtool_VZN3sVHw 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2489  5 other 1 2464  
172 14 Dtool_VZN3f_os 7 154 2488 1562 14 Dtool_VZN3f_os 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2489  5 other 1 2483  
173 14 Dtool_VZN3YCqi 7 155 2482 1532 14 Dtool_VZN3YCqi 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2489  5 other 1 2489  
174 14 Dtool_VZN33nIw 7 155 2463 1419 14 Dtool_VZN33nIw 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2489  5 other 1 2464  
175 14 Dtool_VZN3ggps 7 155 2488 1562 14 Dtool_VZN3ggps 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2489  5 other 1 2483  
176 14 Dtool_VZN3ULR7 7 156 2488 1562 14 Dtool_VZN3ULR7 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2489  6 scalar 1 2466  
177 14 Dtool_VZN3rFUb 7 157 2488 1562 14 Dtool_VZN3rFUb 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2489  6 scalar 1 2466  
178 14 Dtool_VZN3P_bo 7 158 2488 1562 14 Dtool_VZN3P_bo 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2489  4 onto 1 2464  
179 14 Dtool_VZN3Fi0t 4 159 2468 0 14 Dtool_VZN3Fi0t 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2489  3 out 1 2473  10 class_name 1 2475  
180 14 Dtool_VZN3ntNT 7 160 2477 0 14 Dtool_VZN3ntNT 0 0 
181 14 Dtool_VZN3tKnR 7 163 2491 1576 14 Dtool_VZN3tKnR 711 // Filename: lpoint2_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
182 14 Dtool_VZN3kCZP 7 163 2491 1576 14 Dtool_VZN3kCZP 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2479  
183 14 Dtool_VZN338Ro 7 163 2491 1576 14 Dtool_VZN338Ro 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2481  
184 14 Dtool_VZN3VLaV 7 163 2491 1576 14 Dtool_VZN3VLaV 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 2481  1 y 1 2481  
185 14 Dtool_VZN39M99 6 164 2491 0 14 Dtool_VZN39M99 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2491  4 copy 1 2479  
186 14 Dtool_VZN3MH4I 6 164 2491 0 14 Dtool_VZN3MH4I 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2491  10 fill_value 1 2481  
187 14 Dtool_VZN3rnmp 6 165 2492 0 14 Dtool_VZN3rnmp 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
188 14 Dtool_VZN3AGP2 6 166 2492 0 14 Dtool_VZN3AGP2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
189 14 Dtool_VZN3YRZ2 6 167 2492 0 14 Dtool_VZN3YRZ2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
190 14 Dtool_VZN311lG 7 168 2491 1576 14 Dtool_VZN311lG 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2492  
191 14 Dtool_VZN3vLkf 7 169 2478 1472 14 Dtool_VZN3vLkf 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2492  5 other 1 2479  
192 14 Dtool_VZN3Cmce 7 169 2491 1576 14 Dtool_VZN3Cmce 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2492  5 other 1 2486  
193 14 Dtool_VZN3NGic 7 170 2485 1548 14 Dtool_VZN3NGic 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2492  5 other 1 2492  
194 14 Dtool_VZN30Vlf 7 170 2478 1472 14 Dtool_VZN30Vlf 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2492  5 other 1 2479  
195 14 Dtool_VZN3Fode 7 170 2491 1576 14 Dtool_VZN3Fode 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2492  5 other 1 2486  
196 14 Dtool_VZN3rAiF 7 171 2491 1576 14 Dtool_VZN3rAiF 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2492  6 scalar 1 2481  
197 14 Dtool_VZN36Vkl 7 172 2491 1576 14 Dtool_VZN36Vkl 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2492  6 scalar 1 2481  
198 14 Dtool_VZN3i_k4 7 173 2491 1576 14 Dtool_VZN3i_k4 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2492  4 onto 1 2479  
199 14 Dtool_VZN3Eitf 4 174 2468 0 14 Dtool_VZN3Eitf 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2492  3 out 1 2473  10 class_name 1 2475  
200 14 Dtool_VZN3mtGF 7 175 2477 0 14 Dtool_VZN3mtGF 0 0 
201 14 Dtool_VZN39GM2 7 178 2494 1586 14 Dtool_VZN39GM2 715 // Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
202 14 Dtool_VZN3RRmU 7 178 2494 1586 14 Dtool_VZN3RRmU 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2495  
203 14 Dtool_VZN3BPuZ 7 178 2494 1586 14 Dtool_VZN3BPuZ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2466  
204 14 Dtool_VZN3nj6v 7 178 2494 1586 14 Dtool_VZN3nj6v 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2466  1 y 1 2466  1 z 1 2466  
205 14 Dtool_VZN3qOP9 6 179 2494 0 14 Dtool_VZN3qOP9 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  4 copy 1 2495  
206 14 Dtool_VZN3rfXC 6 179 2494 0 14 Dtool_VZN3rfXC 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  10 fill_value 1 2466  
207 14 Dtool_VZN3kPX7 4 180 2468 0 14 Dtool_VZN3kPX7 0 2 4 this 3 2494  4 size 1 2467  
208 14 Dtool_VZN3KGfx 6 183 2495 0 14 Dtool_VZN3KGfx 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
209 14 Dtool_VZN3mCVV 6 184 2495 0 14 Dtool_VZN3mCVV 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
210 14 Dtool_VZN3gCjx 6 185 2495 0 14 Dtool_VZN3gCjx 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
211 14 Dtool_VZN3jCxN 6 186 2495 0 14 Dtool_VZN3jCxN 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
212 14 Dtool_VZN3Bi0G 6 188 2469 0 14 Dtool_VZN3Bi0G 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  4 self 1 2469  
213 14 Dtool_VZN301HX 4 189 2468 0 14 Dtool_VZN301HX 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  1 i 1 2471  
214 14 Dtool_VZN3nq7z 6 189 2466 0 14 Dtool_VZN3nq7z 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  1 i 1 2471  
215 14 Dtool_VZN3CMJn 4 190 2468 0 14 Dtool_VZN3CMJn 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2494  1 i 1 2471  1 v 1 2466  
216 14 Dtool_VZN3EZPb 6 191 2471 0 14 Dtool_VZN3EZPb 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
217 14 Dtool_VZN3d5Gi 6 192 2472 0 14 Dtool_VZN3d5Gi 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
218 14 Dtool_VZN3O_fH 6 193 2466 0 14 Dtool_VZN3O_fH 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  1 i 1 2471  
219 14 Dtool_VZN3dY_y 6 194 2466 0 14 Dtool_VZN3dY_y 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
220 14 Dtool_VZN3d843 6 195 2466 0 14 Dtool_VZN3d843 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
221 14 Dtool_VZN3dQw8 6 196 2466 0 14 Dtool_VZN3dQw8 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
222 14 Dtool_VZN3UQX1 4 197 2468 0 14 Dtool_VZN3UQX1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2494  1 i 1 2471  5 value 1 2466  
223 14 Dtool_VZN3cuZH 4 198 2468 0 14 Dtool_VZN3cuZH 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 value 1 2466  
224 14 Dtool_VZN3cKSM 4 199 2468 0 14 Dtool_VZN3cKSM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 value 1 2466  
225 14 Dtool_VZN3cWKR 4 200 2468 0 14 Dtool_VZN3cWKR 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 value 1 2466  
226 14 Dtool_VZN3WJYp 7 201 2463 1419 14 Dtool_VZN3WJYp 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
227 14 Dtool_VZN3bJmF 7 202 2463 1419 14 Dtool_VZN3bJmF 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
228 14 Dtool_VZN3bleK 7 203 2463 1419 14 Dtool_VZN3bleK 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
229 14 Dtool_VZN3HyX0 4 204 2468 0 14 Dtool_VZN3HyX0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2494  1 i 1 2471  5 value 1 2466  
230 14 Dtool_VZN31m2F 4 205 2468 0 14 Dtool_VZN31m2F 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 value 1 2466  
231 14 Dtool_VZN31CvK 4 206 2468 0 14 Dtool_VZN31CvK 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 value 1 2466  
232 14 Dtool_VZN31unP 4 207 2468 0 14 Dtool_VZN31unP 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 value 1 2466  
233 14 Dtool_VZN3jRCm 4 208 2468 0 14 Dtool_VZN3jRCm 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
234 14 Dtool_VZN3pFHZ 6 209 2471 0 14 Dtool_VZN3pFHZ 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
235 14 Dtool_VZN3q1Xn 4 210 2468 0 14 Dtool_VZN3q1Xn 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  10 fill_value 1 2466  
236 14 Dtool_VZN3Oavy 4 211 2468 0 14 Dtool_VZN3Oavy 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2494  1 x 1 2466  1 y 1 2466  1 z 1 2466  
237 14 Dtool_VZN3bb4d 6 212 2466 0 14 Dtool_VZN3bb4d 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
238 14 Dtool_VZN3lUs9 6 213 2466 0 14 Dtool_VZN3lUs9 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
239 14 Dtool_VZN3OsSz 6 214 2472 0 14 Dtool_VZN3OsSz 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2494  
240 14 Dtool_VZN3aDIV 6 215 2466 0 14 Dtool_VZN3aDIV 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  5 other 1 2495  
241 14 Dtool_VZN3aJ6l 7 216 2494 1586 14 Dtool_VZN3aJ6l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  5 other 1 2495  
242 14 Dtool_VZN3Qhma 7 217 2494 1586 14 Dtool_VZN3Qhma 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  4 onto 1 2495  
243 14 Dtool_VZN3dE8o 6 218 2472 0 14 Dtool_VZN3dE8o 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  5 other 1 2495  
244 14 Dtool_VZN3Ft4v 6 219 2472 0 14 Dtool_VZN3Ft4v 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  5 other 1 2495  
245 14 Dtool_VZN3BNge 6 220 2472 0 14 Dtool_VZN3BNge 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  5 other 1 2495  
246 14 Dtool_VZN3W_5p 7 221 2494 1586 14 Dtool_VZN3W_5p 1029 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary posible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
247 14 Dtool_VZN353zo 6 222 2471 0 14 Dtool_VZN353zo 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  5 other 1 2495  
248 14 Dtool_VZN38GlN 6 222 2471 0 14 Dtool_VZN38GlN 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2495  5 other 1 2495  9 threshold 1 2466  
249 14 Dtool_VZN3OipS 6 223 2467 0 14 Dtool_VZN3OipS 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
250 14 Dtool_VZN3gnPZ 6 223 2467 0 14 Dtool_VZN3gnPZ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  9 threshold 1 2466  
251 14 Dtool_VZN3H3fh 6 224 2467 0 14 Dtool_VZN3H3fh 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  4 hash 1 2467  
252 14 Dtool_VZN3wERG 6 224 2467 0 14 Dtool_VZN3wERG 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2495  4 hash 1 2467  9 threshold 1 2466  
253 14 Dtool_VZN3iO_P 7 225 2494 1586 14 Dtool_VZN3iO_P 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2495  
254 14 Dtool_VZN3fM9C 7 226 2494 1586 14 Dtool_VZN3fM9C 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  5 other 1 2495  
255 14 Dtool_VZN3f8eW 7 227 2494 1586 14 Dtool_VZN3f8eW 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  5 other 1 2495  
256 14 Dtool_VZN3Hdlj 7 228 2494 1586 14 Dtool_VZN3Hdlj 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  6 scalar 1 2466  
257 14 Dtool_VZN3Y1ZU 7 229 2494 1586 14 Dtool_VZN3Y1ZU 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  6 scalar 1 2466  
258 14 Dtool_VZN3GqXQ 6 230 2494 0 14 Dtool_VZN3GqXQ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 other 1 2495  
259 14 Dtool_VZN3Ga5j 6 231 2494 0 14 Dtool_VZN3Ga5j 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 other 1 2495  
260 14 Dtool_VZN3PZfq 6 232 2494 0 14 Dtool_VZN3PZfq 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  6 scalar 1 2466  
261 14 Dtool_VZN3OhTb 6 233 2494 0 14 Dtool_VZN3OhTb 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  6 scalar 1 2466  
262 14 Dtool_VZN3XVDn 7 234 2494 1586 14 Dtool_VZN3XVDn 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 other 1 2495  
263 14 Dtool_VZN31Bkl 7 235 2494 1586 14 Dtool_VZN31Bkl 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 other 1 2495  
264 14 Dtool_VZN3vCKa 4 236 2468 0 14 Dtool_VZN3vCKa 240 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assigment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2494  5 other 1 2495  
265 14 Dtool_VZN32ADH 6 237 2472 0 14 Dtool_VZN32ADH 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  5 other 1 2495  
266 14 Dtool_VZN3jJ12 6 237 2472 0 14 Dtool_VZN3jJ12 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2495  5 other 1 2495  9 threshold 1 2466  
267 14 Dtool_VZN38Oso 4 238 2468 0 14 Dtool_VZN38Oso 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2495  3 out 1 2473  
268 14 Dtool_VZN3RMH8 4 239 2468 0 14 Dtool_VZN3RMH8 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2495  3 out 1 2473  10 class_name 1 2475  
269 14 Dtool_VZN3dN_h 7 240 2477 0 14 Dtool_VZN3dN_h 0 0 
270 14 Dtool_VZN3jiry 7 242 2497 1649 14 Dtool_VZN3jiry 715 // Filename: lvecBase3_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
271 14 Dtool_VZN3uakN 7 242 2497 1649 14 Dtool_VZN3uakN 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2498  
272 14 Dtool_VZN3_fFc 7 242 2497 1649 14 Dtool_VZN3_fFc 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2481  
273 14 Dtool_VZN3pccq 7 242 2497 1649 14 Dtool_VZN3pccq 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2481  1 y 1 2481  1 z 1 2481  
274 14 Dtool_VZN3yavJ 6 243 2497 0 14 Dtool_VZN3yavJ 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  4 copy 1 2498  
275 14 Dtool_VZN3_NPY 6 243 2497 0 14 Dtool_VZN3_NPY 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  10 fill_value 1 2481  
276 14 Dtool_VZN3D6XL 4 244 2468 0 14 Dtool_VZN3D6XL 0 2 4 this 3 2497  4 size 1 2467  
277 14 Dtool_VZN3trfB 6 247 2498 0 14 Dtool_VZN3trfB 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
278 14 Dtool_VZN3ExVl 6 248 2498 0 14 Dtool_VZN3ExVl 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
279 14 Dtool_VZN3HxjB 6 249 2498 0 14 Dtool_VZN3HxjB 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
280 14 Dtool_VZN3Bxxd 6 250 2498 0 14 Dtool_VZN3Bxxd 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
281 14 Dtool_VZN3jO0W 6 252 2469 0 14 Dtool_VZN3jO0W 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  4 self 1 2469  
282 14 Dtool_VZN3KmHn 4 253 2468 0 14 Dtool_VZN3KmHn 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  1 i 1 2471  
283 14 Dtool_VZN3IH7D 6 253 2481 0 14 Dtool_VZN3IH7D 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  1 i 1 2471  
284 14 Dtool_VZN3Uicv 4 254 2468 0 14 Dtool_VZN3Uicv 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2497  1 i 1 2471  1 v 1 2481  
285 14 Dtool_VZN361Pr 6 255 2471 0 14 Dtool_VZN361Pr 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
286 14 Dtool_VZN37uGy 6 256 2472 0 14 Dtool_VZN37uGy 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
287 14 Dtool_VZN3gqfX 6 257 2481 0 14 Dtool_VZN3gqfX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  1 i 1 2471  
288 14 Dtool_VZN38t_C 6 258 2481 0 14 Dtool_VZN38t_C 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
289 14 Dtool_VZN38J4H 6 259 2481 0 14 Dtool_VZN38J4H 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
290 14 Dtool_VZN38lwM 6 260 2481 0 14 Dtool_VZN38lwM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
291 14 Dtool_VZN3j_Qe 4 261 2468 0 14 Dtool_VZN3j_Qe 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2497  1 i 1 2471  5 value 1 2481  
292 14 Dtool_VZN3fZV6 4 262 2468 0 14 Dtool_VZN3fZV6 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 value 1 2481  
293 14 Dtool_VZN3f9N_ 4 263 2468 0 14 Dtool_VZN3f9N_ 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 value 1 2481  
294 14 Dtool_VZN3eBGE 4 264 2468 0 14 Dtool_VZN3eBGE 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 value 1 2481  
295 14 Dtool_VZN3wlZ5 7 265 2478 1472 14 Dtool_VZN3wlZ5 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
296 14 Dtool_VZN31lnV 7 266 2478 1472 14 Dtool_VZN31lnV 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
297 14 Dtool_VZN31Jfa 7 267 2478 1472 14 Dtool_VZN31Jfa 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
298 14 Dtool_VZN3LMq8 4 268 2468 0 14 Dtool_VZN3LMq8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2497  1 i 1 2471  5 value 1 2481  
299 14 Dtool_VZN30Qy4 4 269 2468 0 14 Dtool_VZN30Qy4 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 value 1 2481  
300 14 Dtool_VZN300q9 4 270 2468 0 14 Dtool_VZN300q9 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 value 1 2481  
301 14 Dtool_VZN33YjC 4 271 2468 0 14 Dtool_VZN33YjC 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 value 1 2481  
302 14 Dtool_VZN3d9D2 4 272 2468 0 14 Dtool_VZN3d9D2 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
303 14 Dtool_VZN3LxGp 6 273 2471 0 14 Dtool_VZN3LxGp 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
304 14 Dtool_VZN3xac_ 4 274 2468 0 14 Dtool_VZN3xac_ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  10 fill_value 1 2481  
305 14 Dtool_VZN3L816 4 275 2468 0 14 Dtool_VZN3L816 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 2497  1 x 1 2481  1 y 1 2481  1 z 1 2481  
306 14 Dtool_VZN35E4t 6 276 2481 0 14 Dtool_VZN35E4t 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
307 14 Dtool_VZN3GIsN 6 277 2481 0 14 Dtool_VZN3GIsN 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
308 14 Dtool_VZN3tBSD 6 278 2472 0 14 Dtool_VZN3tBSD 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2497  
309 14 Dtool_VZN34N6j 6 279 2481 0 14 Dtool_VZN34N6j 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  5 other 1 2498  
310 14 Dtool_VZN3vmLU 7 280 2497 1649 14 Dtool_VZN3vmLU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  5 other 1 2498  
311 14 Dtool_VZN3a8hq 7 281 2497 1649 14 Dtool_VZN3a8hq 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  4 onto 1 2498  
312 14 Dtool_VZN3f_c1 6 282 2472 0 14 Dtool_VZN3f_c1 498 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator <
//       Access: Published
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  5 other 1 2498  
313 14 Dtool_VZN35E4P 6 283 2472 0 14 Dtool_VZN35E4P 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator ==
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  5 other 1 2498  
314 14 Dtool_VZN3Ckg_ 6 284 2472 0 14 Dtool_VZN3Ckg_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator !=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  5 other 1 2498  
315 14 Dtool_VZN3wK45 7 285 2497 1649 14 Dtool_VZN3wK45 1029 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary posible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
316 14 Dtool_VZN3AqT1 6 286 2471 0 14 Dtool_VZN3AqT1 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  5 other 1 2498  
317 14 Dtool_VZN3DVKA 6 286 2471 0 14 Dtool_VZN3DVKA 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2498  5 other 1 2498  9 threshold 1 2481  
318 14 Dtool_VZN3Q_pi 6 287 2467 0 14 Dtool_VZN3Q_pi 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
319 14 Dtool_VZN3BwnB 6 287 2467 0 14 Dtool_VZN3BwnB 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  9 threshold 1 2481  
320 14 Dtool_VZN3lrfx 6 288 2467 0 14 Dtool_VZN3lrfx 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  4 hash 1 2467  
321 14 Dtool_VZN3jZW8 6 288 2467 0 14 Dtool_VZN3jZW8 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2498  4 hash 1 2467  9 threshold 1 2481  
322 14 Dtool_VZN3Ey_f 7 289 2497 1649 14 Dtool_VZN3Ey_f 217 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2498  
323 14 Dtool_VZN3Z2dP 7 290 2497 1649 14 Dtool_VZN3Z2dP 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  5 other 1 2498  
324 14 Dtool_VZN3ZG_i 7 291 2497 1649 14 Dtool_VZN3ZG_i 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  5 other 1 2498  
325 14 Dtool_VZN36_m2 7 292 2497 1649 14 Dtool_VZN36_m2 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  6 scalar 1 2481  
326 14 Dtool_VZN37Wdn 7 293 2497 1649 14 Dtool_VZN37Wdn 225 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::vector / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  6 scalar 1 2481  
327 14 Dtool_VZN3azWw 6 294 2497 0 14 Dtool_VZN3azWw 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator +=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 other 1 2498  
328 14 Dtool_VZN3bD4D 6 295 2497 0 14 Dtool_VZN3bD4D 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator -=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 other 1 2498  
329 14 Dtool_VZN3FCn2 6 296 2497 0 14 Dtool_VZN3FCn2 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator *=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  6 scalar 1 2481  
330 14 Dtool_VZN3K6bn 6 297 2497 0 14 Dtool_VZN3K6bn 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::operator /=
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  6 scalar 1 2481  
331 14 Dtool_VZN3yw_P 7 298 2497 1649 14 Dtool_VZN3yw_P 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 other 1 2498  
332 14 Dtool_VZN3QkhO 7 299 2497 1649 14 Dtool_VZN3QkhO 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 other 1 2498  
333 14 Dtool_VZN3mWqm 4 300 2468 0 14 Dtool_VZN3mWqm 240 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assigment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2497  5 other 1 2498  
334 14 Dtool_VZN3gl6W 6 301 2472 0 14 Dtool_VZN3gl6W 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  5 other 1 2498  
335 14 Dtool_VZN36Cbn 6 301 2472 0 14 Dtool_VZN36Cbn 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2498  5 other 1 2498  9 threshold 1 2481  
336 14 Dtool_VZN3hBt4 4 302 2468 0 14 Dtool_VZN3hBt4 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2498  3 out 1 2473  
337 14 Dtool_VZN3rCGM 4 303 2468 0 14 Dtool_VZN3rCGM 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2498  3 out 1 2473  10 class_name 1 2475  
338 14 Dtool_VZN3yA_x 7 304 2477 0 14 Dtool_VZN3yA_x 0 0 
339 14 Dtool_VZN3hACr 7 308 2500 1735 14 Dtool_VZN3hACr 716 // Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
340 14 Dtool_VZN3Z8LN 7 308 2500 1735 14 Dtool_VZN3Z8LN 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2495  
341 14 Dtool_VZN36OMJ 7 308 2500 1735 14 Dtool_VZN36OMJ 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2466  
342 14 Dtool_VZN3hp6I 7 308 2500 1735 14 Dtool_VZN3hp6I 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2466  1 y 1 2466  1 z 1 2466  
343 14 Dtool_VZN3qZGE 6 309 2500 0 14 Dtool_VZN3qZGE 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2500  4 copy 1 2495  
344 14 Dtool_VZN3R_QE 6 309 2500 0 14 Dtool_VZN3R_QE 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2500  10 fill_value 1 2466  
345 14 Dtool_VZN3Mixn 6 310 2501 0 14 Dtool_VZN3Mixn 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
346 14 Dtool_VZN3yo58 6 311 2501 0 14 Dtool_VZN3yo58 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
347 14 Dtool_VZN3xExB 6 312 2501 0 14 Dtool_VZN3xExB 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
348 14 Dtool_VZN3xgqG 6 313 2501 0 14 Dtool_VZN3xgqG 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
349 14 Dtool_VZN38jfB 7 314 2482 1532 14 Dtool_VZN38jfB 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2501  
350 14 Dtool_VZN38PYG 7 315 2482 1532 14 Dtool_VZN38PYG 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2501  
351 14 Dtool_VZN3E_hG 7 316 2482 1532 14 Dtool_VZN3E_hG 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2501  
352 14 Dtool_VZN3WstI 7 317 2500 1735 14 Dtool_VZN3WstI 216 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2501  
353 14 Dtool_VZN3JrR4 7 318 2494 1586 14 Dtool_VZN3JrR4 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  5 other 1 2495  
354 14 Dtool_VZN3ciQH 7 318 2500 1735 14 Dtool_VZN3ciQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  5 other 1 2501  
355 14 Dtool_VZN3po44 7 319 2494 1586 14 Dtool_VZN3po44 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  5 other 1 2495  
356 14 Dtool_VZN38f3H 7 319 2500 1735 14 Dtool_VZN38f3H 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  5 other 1 2501  
357 14 Dtool_VZN3XSXn 7 320 2500 1735 14 Dtool_VZN3XSXn 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  5 other 1 2495  
358 14 Dtool_VZN3zCBx 7 321 2500 1735 14 Dtool_VZN3zCBx 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  4 onto 1 2495  
359 14 Dtool_VZN3i1_1 6 322 2466 0 14 Dtool_VZN3i1_1 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  5 other 1 2501  
360 14 Dtool_VZN3Se7m 6 323 2466 0 14 Dtool_VZN3Se7m 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  5 other 1 2501  
361 14 Dtool_VZN3qxe0 6 324 2466 0 14 Dtool_VZN3qxe0 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2501  5 other 1 2501  3 ref 1 2501  
362 14 Dtool_VZN3DYOx 6 325 2466 0 14 Dtool_VZN3DYOx 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2501  5 other 1 2501  3 ref 1 2501  
363 14 Dtool_VZN3_dvn 6 326 2466 0 14 Dtool_VZN3_dvn 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  5 other 1 2501  
364 14 Dtool_VZN3zM2t 6 327 2466 0 14 Dtool_VZN3zM2t 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  5 other 1 2501  
365 14 Dtool_VZN3cvTb 7 328 2500 1735 14 Dtool_VZN3cvTb 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  6 scalar 1 2466  
366 14 Dtool_VZN3sH0c 7 329 2500 1735 14 Dtool_VZN3sH0c 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2501  6 scalar 1 2466  
367 14 Dtool_VZN3lOZo 7 330 2500 1735 14 Dtool_VZN3lOZo 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
368 14 Dtool_VZN3z_MF 7 330 2500 1735 14 Dtool_VZN3z_MF 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
369 14 Dtool_VZN33sup 7 331 2500 1735 14 Dtool_VZN33sup 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
370 14 Dtool_VZN3YM3h 7 331 2500 1735 14 Dtool_VZN3YM3h 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
371 14 Dtool_VZN3n621 7 332 2500 1735 14 Dtool_VZN3n621 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
372 14 Dtool_VZN3oQbv 7 332 2500 1735 14 Dtool_VZN3oQbv 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
373 14 Dtool_VZN35s4e 7 333 2500 1735 14 Dtool_VZN35s4e 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
374 14 Dtool_VZN3jBqg 7 333 2500 1735 14 Dtool_VZN3jBqg 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
375 14 Dtool_VZN3vT2J 7 334 2500 1735 14 Dtool_VZN3vT2J 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
376 14 Dtool_VZN31_pL 7 334 2500 1735 14 Dtool_VZN31_pL 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
377 14 Dtool_VZN3xPd_ 7 335 2500 1735 14 Dtool_VZN3xPd_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
378 14 Dtool_VZN3UzPA 7 335 2500 1735 14 Dtool_VZN3UzPA 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
379 14 Dtool_VZN3hSqR 7 336 2500 1735 14 Dtool_VZN3hSqR 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 4 5 right 1 2466  3 fwd 1 2466  2 up 1 2466  2 cs 1 2434  
380 14 Dtool_VZN3UW9c 7 336 2500 1735 14 Dtool_VZN3UW9c 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 3 5 right 1 2466  3 fwd 1 2466  2 up 1 2466  
381 14 Dtool_VZN3fg_v 4 337 2468 0 14 Dtool_VZN3fg_v 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2501  3 out 1 2473  10 class_name 1 2475  
382 14 Dtool_VZN3g4QZ 7 338 2477 0 14 Dtool_VZN3g4QZ 0 0 
383 14 Dtool_VZN3Dyhn 7 341 2503 1767 14 Dtool_VZN3Dyhn 716 // Filename: lvector3_src.I
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
384 14 Dtool_VZN3vfOH 7 341 2503 1767 14 Dtool_VZN3vfOH 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2498  
385 14 Dtool_VZN3vhGS 7 341 2503 1767 14 Dtool_VZN3vhGS 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2481  
386 14 Dtool_VZN3_Wm1 7 341 2503 1767 14 Dtool_VZN3_Wm1 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2481  1 y 1 2481  1 z 1 2481  
387 14 Dtool_VZN3zYfy 6 342 2503 0 14 Dtool_VZN3zYfy 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2503  4 copy 1 2498  
388 14 Dtool_VZN3pe8O 6 342 2503 0 14 Dtool_VZN3pe8O 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2503  10 fill_value 1 2481  
389 14 Dtool_VZN33lRk 6 343 2504 0 14 Dtool_VZN33lRk 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
390 14 Dtool_VZN3p3Z5 6 344 2504 0 14 Dtool_VZN3p3Z5 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
391 14 Dtool_VZN3pbR_ 6 345 2504 0 14 Dtool_VZN3pbR_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
392 14 Dtool_VZN3o_KD 6 346 2504 0 14 Dtool_VZN3o_KD 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
393 14 Dtool_VZN3Uj_9 7 347 2485 1548 14 Dtool_VZN3Uj_9 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2504  
394 14 Dtool_VZN3VP4C 7 348 2485 1548 14 Dtool_VZN3VP4C 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2504  
395 14 Dtool_VZN3t_BD 7 349 2485 1548 14 Dtool_VZN3t_BD 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2504  
396 14 Dtool_VZN3PtNF 7 350 2503 1767 14 Dtool_VZN3PtNF 216 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unary -
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2504  
397 14 Dtool_VZN3hqqm 7 351 2497 1649 14 Dtool_VZN3hqqm 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 other 1 2498  
398 14 Dtool_VZN3zxUB 7 351 2503 1767 14 Dtool_VZN3zxUB 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector + vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 other 1 2504  
399 14 Dtool_VZN3BpRn 7 352 2497 1649 14 Dtool_VZN3BpRn 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vecbase
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 other 1 2498  
400 14 Dtool_VZN3Ts7B 7 352 2503 1767 14 Dtool_VZN3Ts7B 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::vector - vector
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 other 1 2504  
401 14 Dtool_VZN3Pzz8 7 353 2503 1767 14 Dtool_VZN3Pzz8 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 other 1 2498  
402 14 Dtool_VZN3iGg1 7 354 2503 1767 14 Dtool_VZN3iGg1 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  4 onto 1 2498  
403 14 Dtool_VZN3_6Zy 6 355 2481 0 14 Dtool_VZN3_6Zy 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 other 1 2504  
404 14 Dtool_VZN3lnWj 6 356 2481 0 14 Dtool_VZN3lnWj 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 other 1 2504  
405 14 Dtool_VZN3I_w4 6 357 2481 0 14 Dtool_VZN3I_w4 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2504  5 other 1 2504  3 ref 1 2504  
406 14 Dtool_VZN3lWg1 6 358 2481 0 14 Dtool_VZN3lWg1 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2504  5 other 1 2504  3 ref 1 2504  
407 14 Dtool_VZN3l1PE 6 359 2481 0 14 Dtool_VZN3l1PE 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 other 1 2504  
408 14 Dtool_VZN3ZkXK 6 360 2481 0 14 Dtool_VZN3ZkXK 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  5 other 1 2504  
409 14 Dtool_VZN3_54j 7 361 2503 1767 14 Dtool_VZN3_54j 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator * scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  6 scalar 1 2481  
410 14 Dtool_VZN3uQal 7 362 2503 1767 14 Dtool_VZN3uQal 226 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::operator / scalar
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2504  6 scalar 1 2481  
411 14 Dtool_VZN38N5k 7 363 2503 1767 14 Dtool_VZN38N5k 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
412 14 Dtool_VZN3I8sB 7 363 2503 1767 14 Dtool_VZN3I8sB 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
413 14 Dtool_VZN3QtOm 7 364 2503 1767 14 Dtool_VZN3QtOm 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
414 14 Dtool_VZN3xMXe 7 364 2503 1767 14 Dtool_VZN3xMXe 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
415 14 Dtool_VZN38FXy 7 365 2503 1767 14 Dtool_VZN38FXy 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
416 14 Dtool_VZN3PT7r 7 365 2503 1767 14 Dtool_VZN3PT7r 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
417 14 Dtool_VZN3gtYb 7 366 2503 1767 14 Dtool_VZN3gtYb 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
418 14 Dtool_VZN3KBKd 7 366 2503 1767 14 Dtool_VZN3KBKd 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
419 14 Dtool_VZN32UWG 7 367 2503 1767 14 Dtool_VZN32UWG 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
420 14 Dtool_VZN3cxJI 7 367 2503 1767 14 Dtool_VZN3cxJI 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
421 14 Dtool_VZN3WP96 7 368 2503 1767 14 Dtool_VZN3WP96 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
422 14 Dtool_VZN3Myv8 7 368 2503 1767 14 Dtool_VZN3Myv8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
423 14 Dtool_VZN3uPAa 7 369 2503 1767 14 Dtool_VZN3uPAa 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 4 5 right 1 2481  3 fwd 1 2481  2 up 1 2481  2 cs 1 2434  
424 14 Dtool_VZN3nVMh 7 369 2503 1767 14 Dtool_VZN3nVMh 454 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) & FLOATNAME(LVector3):: 3 5 right 1 2481  3 fwd 1 2481  2 up 1 2481  
425 14 Dtool_VZN32jes 4 370 2468 0 14 Dtool_VZN32jes 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2504  3 out 1 2473  10 class_name 1 2475  
426 14 Dtool_VZN3H5wV 7 371 2477 0 14 Dtool_VZN3H5wV 0 0 
427 14 Dtool_VZN3z3Qe 7 374 2506 1788 14 Dtool_VZN3z3Qe 711 // Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
428 14 Dtool_VZN3b_6E 7 374 2506 1788 14 Dtool_VZN3b_6E 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2495  
429 14 Dtool_VZN3CO2W 7 374 2506 1788 14 Dtool_VZN3CO2W 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2466  
430 14 Dtool_VZN3Mxu6 7 374 2506 1788 14 Dtool_VZN3Mxu6 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2466  1 y 1 2466  1 z 1 2466  
431 14 Dtool_VZN3J6xP 6 375 2506 0 14 Dtool_VZN3J6xP 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2506  4 copy 1 2495  
432 14 Dtool_VZN3qkxL 6 375 2506 0 14 Dtool_VZN3qkxL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2506  10 fill_value 1 2466  
433 14 Dtool_VZN3qu74 6 376 2507 0 14 Dtool_VZN3qu74 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
434 14 Dtool_VZN3CPkF 6 377 2507 0 14 Dtool_VZN3CPkF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
435 14 Dtool_VZN3aeuF 6 378 2507 0 14 Dtool_VZN3aeuF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
436 14 Dtool_VZN3Sp3F 6 379 2507 0 14 Dtool_VZN3Sp3F 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
437 14 Dtool_VZN3xis3 7 380 2488 1562 14 Dtool_VZN3xis3 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2507  
438 14 Dtool_VZN3pT23 7 381 2488 1562 14 Dtool_VZN3pT23 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2507  
439 14 Dtool_VZN3LH2n 7 382 2488 1562 14 Dtool_VZN3LH2n 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2507  
440 14 Dtool_VZN30M7V 7 383 2506 1788 14 Dtool_VZN30M7V 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2507  
441 14 Dtool_VZN3_4Xx 7 384 2494 1586 14 Dtool_VZN3_4Xx 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2507  5 other 1 2495  
442 14 Dtool_VZN3g12J 7 384 2506 1788 14 Dtool_VZN3g12J 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2507  5 other 1 2501  
443 14 Dtool_VZN3SFwU 7 385 2500 1735 14 Dtool_VZN3SFwU 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2507  5 other 1 2507  
444 14 Dtool_VZN3BLZx 7 385 2494 1586 14 Dtool_VZN3BLZx 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2507  5 other 1 2495  
445 14 Dtool_VZN3fn3J 7 385 2506 1788 14 Dtool_VZN3fn3J 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2507  5 other 1 2501  
446 14 Dtool_VZN33m20 7 386 2506 1788 14 Dtool_VZN33m20 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2507  5 other 1 2495  
447 14 Dtool_VZN3PmL9 7 387 2506 1788 14 Dtool_VZN3PmL9 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2507  4 onto 1 2495  
448 14 Dtool_VZN3UCf8 7 388 2506 1788 14 Dtool_VZN3UCf8 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2507  6 scalar 1 2466  
449 14 Dtool_VZN3rOic 7 389 2506 1788 14 Dtool_VZN3rOic 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2507  6 scalar 1 2466  
450 14 Dtool_VZN3VRyH 7 390 2506 1788 14 Dtool_VZN3VRyH 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
451 14 Dtool_VZN3M16_ 7 390 2506 1788 14 Dtool_VZN3M16_ 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
452 14 Dtool_VZN3kaIy 7 391 2506 1788 14 Dtool_VZN3kaIy 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 2466  3 fwd 1 2466  2 up 1 2466  2 cs 1 2434  
453 14 Dtool_VZN32tjk 7 391 2506 1788 14 Dtool_VZN32tjk 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 2466  3 fwd 1 2466  2 up 1 2466  
454 14 Dtool_VZN3FpCv 4 392 2468 0 14 Dtool_VZN3FpCv 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2507  3 out 1 2473  10 class_name 1 2475  
455 14 Dtool_VZN3nkbU 7 393 2477 0 14 Dtool_VZN3nkbU 0 0 
456 14 Dtool_VZN3t3tX 7 396 2509 1809 14 Dtool_VZN3t3tX 711 // Filename: lpoint3_src.I
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
457 14 Dtool_VZN3SkXG 7 396 2509 1809 14 Dtool_VZN3SkXG 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2498  
458 14 Dtool_VZN33ZYu 7 396 2509 1809 14 Dtool_VZN33ZYu 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2481  
459 14 Dtool_VZN3k1qU 7 396 2509 1809 14 Dtool_VZN3k1qU 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 2481  1 y 1 2481  1 z 1 2481  
460 14 Dtool_VZN3LoO_ 6 397 2509 0 14 Dtool_VZN3LoO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2509  4 copy 1 2498  
461 14 Dtool_VZN3MIGK 6 397 2509 0 14 Dtool_VZN3MIGK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2509  10 fill_value 1 2481  
462 14 Dtool_VZN3ru0q 6 398 2510 0 14 Dtool_VZN3ru0q 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
463 14 Dtool_VZN3APd3 6 399 2510 0 14 Dtool_VZN3APd3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
464 14 Dtool_VZN3Yen3 6 400 2510 0 14 Dtool_VZN3Yen3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
465 14 Dtool_VZN3Qpw3 6 401 2510 0 14 Dtool_VZN3Qpw3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
466 14 Dtool_VZN3Oilp 7 402 2491 1576 14 Dtool_VZN3Oilp 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2510  
467 14 Dtool_VZN3WTvp 7 403 2491 1576 14 Dtool_VZN3WTvp 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2510  
468 14 Dtool_VZN3IHvZ 7 404 2491 1576 14 Dtool_VZN3IHvZ 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2510  
469 14 Dtool_VZN31M0H 7 405 2509 1809 14 Dtool_VZN31M0H 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2510  
470 14 Dtool_VZN39u0g 7 406 2497 1649 14 Dtool_VZN39u0g 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2510  5 other 1 2498  
471 14 Dtool_VZN36tq7 7 406 2509 1809 14 Dtool_VZN36tq7 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2510  5 other 1 2504  
472 14 Dtool_VZN3HBoO 7 407 2503 1767 14 Dtool_VZN3HBoO 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2510  5 other 1 2510  
473 14 Dtool_VZN3C51g 7 407 2497 1649 14 Dtool_VZN3C51g 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2510  5 other 1 2498  
474 14 Dtool_VZN39fr7 7 407 2509 1809 14 Dtool_VZN39fr7 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2510  5 other 1 2504  
475 14 Dtool_VZN3wvhl 7 408 2509 1809 14 Dtool_VZN3wvhl 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2510  5 other 1 2498  
476 14 Dtool_VZN3jmUN 7 409 2509 1809 14 Dtool_VZN3jmUN 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2510  4 onto 1 2498  
477 14 Dtool_VZN3rZwG 7 410 2509 1809 14 Dtool_VZN3rZwG 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2510  6 scalar 1 2481  
478 14 Dtool_VZN36cym 7 411 2509 1809 14 Dtool_VZN36cym 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2510  6 scalar 1 2481  
479 14 Dtool_VZN3XRr5 7 412 2509 1809 14 Dtool_VZN3XRr5 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 2434  
480 14 Dtool_VZN3N1zx 7 412 2509 1809 14 Dtool_VZN3N1zx 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
481 14 Dtool_VZN3x8Y0 7 413 2509 1809 14 Dtool_VZN3x8Y0 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 2481  3 fwd 1 2481  2 up 1 2481  2 cs 1 2434  
482 14 Dtool_VZN3s_qG 7 413 2509 1809 14 Dtool_VZN3s_qG 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 2481  3 fwd 1 2481  2 up 1 2481  
483 14 Dtool_VZN3Ep7g 4 414 2468 0 14 Dtool_VZN3Ep7g 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2510  3 out 1 2473  10 class_name 1 2475  
484 14 Dtool_VZN3mkUG 7 415 2477 0 14 Dtool_VZN3mkUG 0 0 
485 14 Dtool_VZN35kRY 7 418 2512 1820 14 Dtool_VZN35kRY 715 // Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
486 14 Dtool_VZN3dTtd 7 418 2512 1820 14 Dtool_VZN3dTtd 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2513  
487 14 Dtool_VZN3ity7 7 418 2512 1820 14 Dtool_VZN3ity7 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2466  
488 14 Dtool_VZN3DRvG 7 418 2512 1820 14 Dtool_VZN3DRvG 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2466  1 y 1 2466  1 z 1 2466  1 w 1 2466  
489 14 Dtool_VZN3XuCG 6 419 2512 0 14 Dtool_VZN3XuCG 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  4 copy 1 2513  
490 14 Dtool_VZN3GYHk 6 419 2512 0 14 Dtool_VZN3GYHk 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  10 fill_value 1 2466  
491 14 Dtool_VZN3YOHd 4 420 2468 0 14 Dtool_VZN3YOHd 0 2 4 this 3 2512  4 size 1 2467  
492 14 Dtool_VZN3mHPT 6 423 2513 0 14 Dtool_VZN3mHPT 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
493 14 Dtool_VZN3xCF3 6 424 2513 0 14 Dtool_VZN3xCF3 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
494 14 Dtool_VZN3MdTT 6 425 2513 0 14 Dtool_VZN3MdTT 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
495 14 Dtool_VZN3Odhv 6 426 2513 0 14 Dtool_VZN3Odhv 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
496 14 Dtool_VZN33C3a 6 427 2513 0 14 Dtool_VZN33C3a 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
497 14 Dtool_VZN32iko 6 429 2469 0 14 Dtool_VZN32iko 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  4 self 1 2469  
498 14 Dtool_VZN3By34 4 430 2468 0 14 Dtool_VZN3By34 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  1 i 1 2471  
499 14 Dtool_VZN3TrrV 6 430 2466 0 14 Dtool_VZN3TrrV 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  1 i 1 2471  
500 14 Dtool_VZN3WM5I 4 431 2468 0 14 Dtool_VZN3WM5I 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2512  1 i 1 2471  1 v 1 2466  
501 14 Dtool_VZN33Z_8 6 432 2471 0 14 Dtool_VZN33Z_8 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
502 14 Dtool_VZN3x62D 6 433 2472 0 14 Dtool_VZN3x62D 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
503 14 Dtool_VZN3d_Pp 6 434 2466 0 14 Dtool_VZN3d_Pp 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  1 i 1 2471  
504 14 Dtool_VZN3JYvU 6 435 2466 0 14 Dtool_VZN3JYvU 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
505 14 Dtool_VZN3J8oZ 6 436 2466 0 14 Dtool_VZN3J8oZ 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
506 14 Dtool_VZN3JQge 6 437 2466 0 14 Dtool_VZN3JQge 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
507 14 Dtool_VZN3JE3P 6 438 2466 0 14 Dtool_VZN3JE3P 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
508 14 Dtool_VZN3AQHX 4 439 2468 0 14 Dtool_VZN3AQHX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2512  1 i 1 2471  5 value 1 2466  
509 14 Dtool_VZN3JuJp 4 440 2468 0 14 Dtool_VZN3JuJp 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2466  
510 14 Dtool_VZN3JKCu 4 441 2468 0 14 Dtool_VZN3JKCu 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2466  
511 14 Dtool_VZN3JW6y 4 442 2468 0 14 Dtool_VZN3JW6y 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2466  
512 14 Dtool_VZN3JCRk 4 443 2468 0 14 Dtool_VZN3JCRk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2466  
513 14 Dtool_VZN3zyHW 4 444 2468 0 14 Dtool_VZN3zyHW 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2512  1 i 1 2471  5 value 1 2466  
514 14 Dtool_VZN3mmmn 4 445 2468 0 14 Dtool_VZN3mmmn 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2466  
515 14 Dtool_VZN3mCfs 4 446 2468 0 14 Dtool_VZN3mCfs 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2466  
516 14 Dtool_VZN3muXx 4 447 2468 0 14 Dtool_VZN3muXx 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2466  
517 14 Dtool_VZN3maui 4 448 2468 0 14 Dtool_VZN3maui 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 value 1 2466  
518 14 Dtool_VZN3XRyH 4 449 2468 0 14 Dtool_VZN3XRyH 398 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
519 14 Dtool_VZN30F36 6 450 2471 0 14 Dtool_VZN30F36 277 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
520 14 Dtool_VZN3W1HJ 4 451 2468 0 14 Dtool_VZN3W1HJ 361 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  10 fill_value 1 2466  
521 14 Dtool_VZN3__rX 4 452 2468 0 14 Dtool_VZN3__rX 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2512  1 x 1 2466  1 y 1 2466  1 z 1 2466  1 w 1 2466  
522 14 Dtool_VZN30Yo_ 6 453 2466 0 14 Dtool_VZN30Yo_ 292 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
523 14 Dtool_VZN3xUcf 6 454 2466 0 14 Dtool_VZN3xUcf 297 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
524 14 Dtool_VZN3SsCV 6 455 2472 0 14 Dtool_VZN3SsCV 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2512  
525 14 Dtool_VZN32052 6 456 2466 0 14 Dtool_VZN32052 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  5 other 1 2513  
526 14 Dtool_VZN3MsWY 7 457 2512 1820 14 Dtool_VZN3MsWY 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  4 onto 1 2513  
527 14 Dtool_VZN3xlvx 6 458 2472 0 14 Dtool_VZN3xlvx 495 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  5 other 1 2513  
528 14 Dtool_VZN3auYz 6 459 2472 0 14 Dtool_VZN3auYz 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  5 other 1 2513  
529 14 Dtool_VZN3mNAi 6 460 2472 0 14 Dtool_VZN3mNAi 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  5 other 1 2513  
530 14 Dtool_VZN3tXnx 6 461 2471 0 14 Dtool_VZN3tXnx 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  5 other 1 2513  
531 14 Dtool_VZN3IZYW 6 461 2471 0 14 Dtool_VZN3IZYW 501 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2513  5 other 1 2513  9 threshold 1 2466  
532 14 Dtool_VZN3diZ0 6 462 2467 0 14 Dtool_VZN3diZ0 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
533 14 Dtool_VZN3zn_6 6 462 2467 0 14 Dtool_VZN3zn_6 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  9 threshold 1 2466  
534 14 Dtool_VZN3r3PD 6 463 2467 0 14 Dtool_VZN3r3PD 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  4 hash 1 2467  
535 14 Dtool_VZN3NEBo 6 463 2467 0 14 Dtool_VZN3NEBo 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2513  4 hash 1 2467  9 threshold 1 2466  
536 14 Dtool_VZN3POux 7 464 2512 1820 14 Dtool_VZN3POux 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2513  
537 14 Dtool_VZN3ztwL 7 465 2512 1820 14 Dtool_VZN3ztwL 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  5 other 1 2513  
538 14 Dtool_VZN3zdSf 7 466 2512 1820 14 Dtool_VZN3zdSf 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  5 other 1 2513  
539 14 Dtool_VZN3reVF 7 467 2512 1820 14 Dtool_VZN3reVF 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  6 scalar 1 2466  
540 14 Dtool_VZN3r2J2 7 468 2512 1820 14 Dtool_VZN3r2J2 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  6 scalar 1 2466  
541 14 Dtool_VZN3tr3T 6 469 2512 0 14 Dtool_VZN3tr3T 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 other 1 2513  
542 14 Dtool_VZN3tbZn 6 470 2512 0 14 Dtool_VZN3tbZn 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 other 1 2513  
543 14 Dtool_VZN37ZPM 6 471 2512 0 14 Dtool_VZN37ZPM 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  6 scalar 1 2466  
544 14 Dtool_VZN37hD9 6 472 2512 0 14 Dtool_VZN37hD9 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  6 scalar 1 2466  
545 14 Dtool_VZN3jRaJ 7 473 2512 1820 14 Dtool_VZN3jRaJ 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 other 1 2513  
546 14 Dtool_VZN3BC7H 7 474 2512 1820 14 Dtool_VZN3BC7H 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2512  5 other 1 2513  
547 14 Dtool_VZN3yKzg 6 475 2472 0 14 Dtool_VZN3yKzg 339 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  5 other 1 2513  
548 14 Dtool_VZN3__lQ 6 475 2472 0 14 Dtool_VZN3__lQ 315 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2513  5 other 1 2513  9 threshold 1 2466  
549 14 Dtool_VZN3QPcK 4 476 2468 0 14 Dtool_VZN3QPcK 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2513  3 out 1 2473  
550 14 Dtool_VZN3FM3d 4 477 2468 0 14 Dtool_VZN3FM3d 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2513  3 out 1 2473  10 class_name 1 2475  
551 14 Dtool_VZN3hKuD 7 478 2477 0 14 Dtool_VZN3hKuD 0 0 
552 14 Dtool_VZN3fAuU 7 480 2515 1881 14 Dtool_VZN3fAuU 715 // Filename: lvecBase4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
553 14 Dtool_VZN3KfrW 7 480 2515 1881 14 Dtool_VZN3KfrW 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2516  
554 14 Dtool_VZN35BJ_ 7 480 2515 1881 14 Dtool_VZN35BJ_ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2481  
555 14 Dtool_VZN3GENf 7 480 2515 1881 14 Dtool_VZN3GENf 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2481  1 y 1 2481  1 z 1 2481  1 w 1 2481  
556 14 Dtool_VZN3e6iS 6 481 2515 0 14 Dtool_VZN3e6iS 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  4 copy 1 2516  
557 14 Dtool_VZN3IM_5 6 481 2515 0 14 Dtool_VZN3IM_5 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  10 fill_value 1 2481  
558 14 Dtool_VZN326Ht 4 482 2468 0 14 Dtool_VZN326Ht 0 2 4 this 3 2515  4 size 1 2467  
559 14 Dtool_VZN3YrPj 6 485 2516 0 14 Dtool_VZN3YrPj 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
560 14 Dtool_VZN3QxFH 6 486 2516 0 14 Dtool_VZN3QxFH 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
561 14 Dtool_VZN3SxTj 6 487 2516 0 14 Dtool_VZN3SxTj 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
562 14 Dtool_VZN3sxh_ 6 488 2516 0 14 Dtool_VZN3sxh_ 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
563 14 Dtool_VZN3Vx3q 6 489 2516 0 14 Dtool_VZN3Vx3q 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
564 14 Dtool_VZN3Qxk4 6 491 2469 0 14 Dtool_VZN3Qxk4 319 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  4 self 1 2469  
565 14 Dtool_VZN3mm3I 4 492 2468 0 14 Dtool_VZN3mm3I 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  1 i 1 2471  
566 14 Dtool_VZN31Hrl 6 492 2481 0 14 Dtool_VZN31Hrl 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  1 i 1 2471  
567 14 Dtool_VZN3glMR 4 493 2468 0 14 Dtool_VZN3glMR 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2515  1 i 1 2471  1 v 1 2481  
568 14 Dtool_VZN3WK_M 6 494 2471 0 14 Dtool_VZN3WK_M 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
569 14 Dtool_VZN3Pu2T 6 495 2472 0 14 Dtool_VZN3Pu2T 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
570 14 Dtool_VZN3_qP5 6 496 2481 0 14 Dtool_VZN3_qP5 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  1 i 1 2471  
571 14 Dtool_VZN3rtvk 6 497 2481 0 14 Dtool_VZN3rtvk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
572 14 Dtool_VZN3rJop 6 498 2481 0 14 Dtool_VZN3rJop 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
573 14 Dtool_VZN3rlgu 6 499 2481 0 14 Dtool_VZN3rlgu 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
574 14 Dtool_VZN3rx3f 6 500 2481 0 14 Dtool_VZN3rx3f 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
575 14 Dtool_VZN3f_AA 4 501 2468 0 14 Dtool_VZN3f_AA 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2515  1 i 1 2471  5 value 1 2481  
576 14 Dtool_VZN3jGFc 4 502 2468 0 14 Dtool_VZN3jGFc 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2481  
577 14 Dtool_VZN3ji9g 4 503 2468 0 14 Dtool_VZN3ji9g 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2481  
578 14 Dtool_VZN3je2l 4 504 2468 0 14 Dtool_VZN3je2l 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2481  
579 14 Dtool_VZN3jqMX 4 505 2468 0 14 Dtool_VZN3jqMX 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2481  
580 14 Dtool_VZN3fMae 4 506 2468 0 14 Dtool_VZN3fMae 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2515  1 i 1 2471  5 value 1 2481  
581 14 Dtool_VZN3ARia 4 507 2468 0 14 Dtool_VZN3ARia 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2481  
582 14 Dtool_VZN3A1af 4 508 2468 0 14 Dtool_VZN3A1af 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2481  
583 14 Dtool_VZN3AZTk 4 509 2468 0 14 Dtool_VZN3AZTk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2481  
584 14 Dtool_VZN3ANqV 4 510 2468 0 14 Dtool_VZN3ANqV 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 value 1 2481  
585 14 Dtool_VZN3x8zX 4 511 2468 0 14 Dtool_VZN3x8zX 398 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
586 14 Dtool_VZN3Xx2K 6 512 2471 0 14 Dtool_VZN3Xx2K 277 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
587 14 Dtool_VZN3FbMg 4 513 2468 0 14 Dtool_VZN3FbMg 361 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Public
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  10 fill_value 1 2481  
588 14 Dtool_VZN3dT7O 4 514 2468 0 14 Dtool_VZN3dT7O 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 2515  1 x 1 2481  1 y 1 2481  1 z 1 2481  1 w 1 2481  
589 14 Dtool_VZN3VEoP 6 515 2481 0 14 Dtool_VZN3VEoP 292 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Public
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
590 14 Dtool_VZN3TIcv 6 516 2481 0 14 Dtool_VZN3TIcv 297 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Public
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
591 14 Dtool_VZN3wBCl 6 517 2472 0 14 Dtool_VZN3wBCl 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Public
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2515  
592 14 Dtool_VZN3VfrF 6 518 2481 0 14 Dtool_VZN3VfrF 210 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  5 other 1 2516  
593 14 Dtool_VZN3O3Ro 7 519 2515 1881 14 Dtool_VZN3O3Ro 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  4 onto 1 2516  
594 14 Dtool_VZN3zfP_ 6 520 2472 0 14 Dtool_VZN3zfP_ 495 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator <
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  5 other 1 2516  
595 14 Dtool_VZN3eFYT 6 521 2472 0 14 Dtool_VZN3eFYT 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator ==
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  5 other 1 2516  
596 14 Dtool_VZN3alAC 6 522 2472 0 14 Dtool_VZN3alAC 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator !=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  5 other 1 2516  
597 14 Dtool_VZN30LH_ 6 523 2471 0 14 Dtool_VZN30LH_ 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  5 other 1 2516  
598 14 Dtool_VZN3319I 6 523 2471 0 14 Dtool_VZN3319I 501 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Public
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2516  5 other 1 2516  9 threshold 1 2481  
599 14 Dtool_VZN38_ZE 6 524 2467 0 14 Dtool_VZN38_ZE 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
600 14 Dtool_VZN3SwXj 6 524 2467 0 14 Dtool_VZN3SwXj 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  9 threshold 1 2481  
601 14 Dtool_VZN3JoPT 6 525 2467 0 14 Dtool_VZN3JoPT 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  4 hash 1 2467  
602 14 Dtool_VZN3XZGe 6 525 2467 0 14 Dtool_VZN3XZGe 254 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2516  4 hash 1 2467  9 threshold 1 2481  
603 14 Dtool_VZN3QyvB 7 526 2515 1881 14 Dtool_VZN3QyvB 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2516  
604 14 Dtool_VZN3tXQY 7 527 2515 1881 14 Dtool_VZN3tXQY 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  5 other 1 2516  
605 14 Dtool_VZN3tnyr 7 528 2515 1881 14 Dtool_VZN3tnyr 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  5 other 1 2516  
606 14 Dtool_VZN3W_WY 7 529 2515 1881 14 Dtool_VZN3W_WY 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  6 scalar 1 2481  
607 14 Dtool_VZN3XWNJ 7 530 2515 1881 14 Dtool_VZN3XWNJ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::vector / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  6 scalar 1 2481  
608 14 Dtool_VZN3hw2z 6 531 2515 0 14 Dtool_VZN3hw2z 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator +=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 other 1 2516  
609 14 Dtool_VZN3iAYH 6 532 2515 0 14 Dtool_VZN3iAYH 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator -=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 other 1 2516  
610 14 Dtool_VZN35DXY 6 533 2515 0 14 Dtool_VZN35DXY 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator *=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  6 scalar 1 2481  
611 14 Dtool_VZN3_7LJ 6 534 2515 0 14 Dtool_VZN3_7LJ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::operator /=
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  6 scalar 1 2481  
612 14 Dtool_VZN3_0Xy 7 535 2515 1881 14 Dtool_VZN3_0Xy 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 other 1 2516  
613 14 Dtool_VZN3dn2w 7 536 2515 1881 14 Dtool_VZN3dn2w 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2515  5 other 1 2516  
614 14 Dtool_VZN3coqw 6 537 2472 0 14 Dtool_VZN3coqw 339 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  5 other 1 2516  
615 14 Dtool_VZN39ILB 6 537 2472 0 14 Dtool_VZN39ILB 315 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Public
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2516  5 other 1 2516  9 threshold 1 2481  
616 14 Dtool_VZN31Bda 4 538 2468 0 14 Dtool_VZN31Bda 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2516  3 out 1 2473  
617 14 Dtool_VZN3eB2t 4 539 2468 0 14 Dtool_VZN3eB2t 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2516  3 out 1 2473  10 class_name 1 2475  
618 14 Dtool_VZN3GAvT 7 540 2477 0 14 Dtool_VZN3GAvT 0 0 
619 14 Dtool_VZN32hGZ 7 542 2518 1947 14 Dtool_VZN32hGZ 713 // Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
620 14 Dtool_VZN355R7 7 542 2518 1947 14 Dtool_VZN355R7 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2513  
621 14 Dtool_VZN3IgP3 7 542 2518 1947 14 Dtool_VZN3IgP3 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2466  
622 14 Dtool_VZN3GLX9 7 542 2518 1947 14 Dtool_VZN3GLX9 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2466  1 y 1 2466  1 z 1 2466  1 w 1 2466  
623 14 Dtool_VZN3q2Ys 6 543 2518 0 14 Dtool_VZN3q2Ys 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2518  4 copy 1 2513  
624 14 Dtool_VZN3RfUr 6 543 2518 0 14 Dtool_VZN3RfUr 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2518  10 fill_value 1 2466  
625 14 Dtool_VZN3PC0O 6 544 2519 0 14 Dtool_VZN3PC0O 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
626 14 Dtool_VZN3xI8j 6 545 2519 0 14 Dtool_VZN3xI8j 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
627 14 Dtool_VZN3xk1o 6 546 2519 0 14 Dtool_VZN3xk1o 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
628 14 Dtool_VZN3xAtt 6 547 2519 0 14 Dtool_VZN3xAtt 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
629 14 Dtool_VZN3xsEf 6 548 2519 0 14 Dtool_VZN3xsEf 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
630 14 Dtool_VZN3WMwv 7 549 2518 1947 14 Dtool_VZN3WMwv 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2519  
631 14 Dtool_VZN3WUig 7 550 2512 1820 14 Dtool_VZN3WUig 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 other 1 2513  
632 14 Dtool_VZN3OmWu 7 550 2518 1947 14 Dtool_VZN3OmWu 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 other 1 2519  
633 14 Dtool_VZN32RJh 7 551 2512 1820 14 Dtool_VZN32RJh 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 other 1 2513  
634 14 Dtool_VZN3uj9u 7 551 2518 1947 14 Dtool_VZN3uj9u 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  5 other 1 2519  
635 14 Dtool_VZN3TPWC 7 552 2518 1947 14 Dtool_VZN3TPWC 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  6 scalar 1 2466  
636 14 Dtool_VZN3jn4D 7 553 2518 1947 14 Dtool_VZN3jn4D 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  6 scalar 1 2466  
637 14 Dtool_VZN3Gh8I 7 554 2518 1947 14 Dtool_VZN3Gh8I 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2519  4 onto 1 2513  
638 14 Dtool_VZN3eACX 4 555 2468 0 14 Dtool_VZN3eACX 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2519  3 out 1 2473  10 class_name 1 2475  
639 14 Dtool_VZN3vYTA 7 556 2477 0 14 Dtool_VZN3vYTA 0 0 
640 14 Dtool_VZN3STkV 7 559 2521 1963 14 Dtool_VZN3STkV 713 // Filename: lvector4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
641 14 Dtool_VZN3rcU1 7 559 2521 1963 14 Dtool_VZN3rcU1 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2516  
642 14 Dtool_VZN38AKA 7 559 2521 1963 14 Dtool_VZN38AKA 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2481  
643 14 Dtool_VZN372XI 7 559 2521 1963 14 Dtool_VZN372XI 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2481  1 y 1 2481  1 z 1 2481  1 w 1 2481  
644 14 Dtool_VZN3y3xa 6 560 2521 0 14 Dtool_VZN3y3xa 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2521  4 copy 1 2516  
645 14 Dtool_VZN3p_A2 6 560 2521 0 14 Dtool_VZN3p_A2 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2521  10 fill_value 1 2481  
646 14 Dtool_VZN32FUL 6 561 2522 0 14 Dtool_VZN32FUL 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
647 14 Dtool_VZN3oXcg 6 562 2522 0 14 Dtool_VZN3oXcg 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
648 14 Dtool_VZN3o7Vl 6 563 2522 0 14 Dtool_VZN3o7Vl 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
649 14 Dtool_VZN3ofNq 6 564 2522 0 14 Dtool_VZN3ofNq 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
650 14 Dtool_VZN3ozkb 6 565 2522 0 14 Dtool_VZN3ozkb 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
651 14 Dtool_VZN3PNQs 7 566 2521 1963 14 Dtool_VZN3PNQs 213 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2522  
652 14 Dtool_VZN3uV7O 7 567 2515 1881 14 Dtool_VZN3uV7O 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2522  5 other 1 2516  
653 14 Dtool_VZN3h1ao 7 567 2521 1963 14 Dtool_VZN3h1ao 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2522  5 other 1 2522  
654 14 Dtool_VZN3OQiP 7 568 2515 1881 14 Dtool_VZN3OQiP 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2522  5 other 1 2516  
655 14 Dtool_VZN3BwBp 7 568 2521 1963 14 Dtool_VZN3BwBp 221 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::vector - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2522  5 other 1 2522  
656 14 Dtool_VZN39Z8K 7 569 2521 1963 14 Dtool_VZN39Z8K 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2522  6 scalar 1 2481  
657 14 Dtool_VZN3twdM 7 570 2521 1963 14 Dtool_VZN3twdM 223 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2522  6 scalar 1 2481  
658 14 Dtool_VZN31mdN 7 571 2521 1963 14 Dtool_VZN31mdN 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2522  4 onto 1 2516  
659 14 Dtool_VZN3xDiT 4 572 2468 0 14 Dtool_VZN3xDiT 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2522  3 out 1 2473  10 class_name 1 2475  
660 14 Dtool_VZN3HZz8 7 573 2477 0 14 Dtool_VZN3HZz8 0 0 
661 14 Dtool_VZN3zUXk 7 576 2524 1979 14 Dtool_VZN3zUXk 711 // Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
662 14 Dtool_VZN3SD57 7 576 2524 1979 14 Dtool_VZN3SD57 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2513  
663 14 Dtool_VZN3Cj8c 7 576 2524 1979 14 Dtool_VZN3Cj8c 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2466  
664 14 Dtool_VZN3zr8M 7 576 2524 1979 14 Dtool_VZN3zr8M 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2466  1 y 1 2466  1 z 1 2466  1 w 1 2466  
665 14 Dtool_VZN3bZBR 6 577 2524 0 14 Dtool_VZN3bZBR 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2524  4 copy 1 2513  
666 14 Dtool_VZN3qdAN 6 577 2524 0 14 Dtool_VZN3qdAN 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2524  10 fill_value 1 2466  
667 14 Dtool_VZN3q1J6 6 578 2525 0 14 Dtool_VZN3q1J6 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
668 14 Dtool_VZN3C0yG 6 579 2525 0 14 Dtool_VZN3C0yG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
669 14 Dtool_VZN3aH8G 6 580 2525 0 14 Dtool_VZN3aH8G 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
670 14 Dtool_VZN3SWGH 6 581 2525 0 14 Dtool_VZN3SWGH 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
671 14 Dtool_VZN3KloG 6 582 2525 0 14 Dtool_VZN3KloG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
672 14 Dtool_VZN30LJX 7 583 2524 1979 14 Dtool_VZN30LJX 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2525  
673 14 Dtool_VZN3Icoy 7 584 2512 1820 14 Dtool_VZN3Icoy 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  5 other 1 2513  
674 14 Dtool_VZN3opEn 7 584 2524 1979 14 Dtool_VZN3opEn 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  5 other 1 2519  
675 14 Dtool_VZN3MM2G 7 585 2518 1947 14 Dtool_VZN3MM2G 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  5 other 1 2525  
676 14 Dtool_VZN3Tupy 7 585 2512 1820 14 Dtool_VZN3Tupy 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  5 other 1 2513  
677 14 Dtool_VZN3XbFn 7 585 2524 1979 14 Dtool_VZN3XbFn 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  5 other 1 2519  
678 14 Dtool_VZN3Udt9 7 586 2524 1979 14 Dtool_VZN3Udt9 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  6 scalar 1 2466  
679 14 Dtool_VZN3rXwd 7 587 2524 1979 14 Dtool_VZN3rXwd 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  6 scalar 1 2466  
680 14 Dtool_VZN3It7R 7 588 2524 1979 14 Dtool_VZN3It7R 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2525  4 onto 1 2513  
681 14 Dtool_VZN3FwQw 4 589 2468 0 14 Dtool_VZN3FwQw 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2525  3 out 1 2473  10 class_name 1 2475  
682 14 Dtool_VZN3nbpV 7 590 2477 0 14 Dtool_VZN3nbpV 0 0 
683 14 Dtool_VZN3tU0d 7 593 2527 1995 14 Dtool_VZN3tU0d 711 // Filename: lpoint4_src.I
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
684 14 Dtool_VZN3JZW9 7 593 2527 1995 14 Dtool_VZN3JZW9 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2516  
685 14 Dtool_VZN336e0 7 593 2527 1995 14 Dtool_VZN336e0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 2481  
686 14 Dtool_VZN3CpeG 7 593 2527 1995 14 Dtool_VZN3CpeG 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 2481  1 y 1 2481  1 z 1 2481  1 w 1 2481  
687 14 Dtool_VZN3YHeA 6 594 2527 0 14 Dtool_VZN3YHeA 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2527  4 copy 1 2516  
688 14 Dtool_VZN3MxVL 6 594 2527 0 14 Dtool_VZN3MxVL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2527  10 fill_value 1 2481  
689 14 Dtool_VZN3r1Cs 6 595 2528 0 14 Dtool_VZN3r1Cs 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
690 14 Dtool_VZN3A0r4 6 596 2528 0 14 Dtool_VZN3A0r4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
691 14 Dtool_VZN3YH14 6 597 2528 0 14 Dtool_VZN3YH14 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
692 14 Dtool_VZN3QW_4 6 598 2528 0 14 Dtool_VZN3QW_4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
693 14 Dtool_VZN3Ilh4 6 599 2528 0 14 Dtool_VZN3Ilh4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
694 14 Dtool_VZN31LCJ 7 600 2527 1995 14 Dtool_VZN31LCJ 212 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2528  
695 14 Dtool_VZN3LSFi 7 601 2515 1881 14 Dtool_VZN3LSFi 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2528  5 other 1 2516  
696 14 Dtool_VZN3zh4Y 7 601 2527 1995 14 Dtool_VZN3zh4Y 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point + vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2528  5 other 1 2522  
697 14 Dtool_VZN3xIuA 7 602 2521 1963 14 Dtool_VZN3xIuA 218 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - point
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2528  5 other 1 2528  
698 14 Dtool_VZN3QcGi 7 602 2515 1881 14 Dtool_VZN3QcGi 220 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vecbase
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2528  5 other 1 2516  
699 14 Dtool_VZN30T5Y 7 602 2527 1995 14 Dtool_VZN30T5Y 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::point - vector
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2528  5 other 1 2522  
700 14 Dtool_VZN3re_H 7 603 2527 1995 14 Dtool_VZN3re_H 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2528  6 scalar 1 2481  
701 14 Dtool_VZN36DAo 7 604 2527 1995 14 Dtool_VZN36DAo 222 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::operator / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2528  6 scalar 1 2481  
702 14 Dtool_VZN3jtEi 7 605 2527 1995 14 Dtool_VZN3jtEi 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2528  4 onto 1 2516  
703 14 Dtool_VZN3EwJi 4 606 2468 0 14 Dtool_VZN3EwJi 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2528  3 out 1 2473  10 class_name 1 2475  
704 14 Dtool_VZN3mbiH 7 607 2477 0 14 Dtool_VZN3mbiH 0 0 
705 14 Dtool_VZN3l0PU 7 619 2530 2067 14 Dtool_VZN3l0PU 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
706 14 Dtool_VZN3sN2u 7 619 2530 2067 14 Dtool_VZN3sN2u 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2531  
707 14 Dtool_VZN3Qz8c 7 619 2530 2067 14 Dtool_VZN3Qz8c 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 2466  3 e01 1 2466  3 e02 1 2466  3 e10 1 2466  3 e11 1 2466  3 e12 1 2466  3 e20 1 2466  3 e21 1 2466  3 e22 1 2466  
708 14 Dtool_VZN3WGVN 6 620 2530 0 14 Dtool_VZN3WGVN 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 other 1 2531  
709 14 Dtool_VZN3OZp_ 6 620 2530 0 14 Dtool_VZN3OZp_ 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  10 fill_value 1 2466  
710 14 Dtool_VZN3xIaw 4 621 2468 0 14 Dtool_VZN3xIaw 0 2 4 this 3 2530  4 size 1 2467  
711 14 Dtool_VZN374w_ 6 624 2469 0 14 Dtool_VZN374w_ 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  4 self 1 2469  
712 14 Dtool_VZN3gH0z 4 625 2468 0 14 Dtool_VZN3gH0z 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  10 fill_value 1 2466  
713 14 Dtool_VZN3z3qU 4 626 2468 0 14 Dtool_VZN3z3qU 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 2530  3 e00 1 2466  3 e01 1 2466  3 e02 1 2466  3 e10 1 2466  3 e11 1 2466  3 e12 1 2466  3 e20 1 2466  3 e21 1 2466  3 e22 1 2466  
714 14 Dtool_VZN3N5w9 4 627 2468 0 14 Dtool_VZN3N5w9 326 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2530  3 row 1 2471  1 v 1 2464  
715 14 Dtool_VZN355gf 4 627 2468 0 14 Dtool_VZN355gf 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2530  3 row 1 2471  1 v 1 2495  
716 14 Dtool_VZN3vDEF 4 628 2468 0 14 Dtool_VZN3vDEF 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2530  3 col 1 2471  1 v 1 2464  
717 14 Dtool_VZN3ac0m 4 628 2468 0 14 Dtool_VZN3ac0m 308 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2530  3 col 1 2471  1 v 1 2495  
718 14 Dtool_VZN3dfDX 4 629 2468 0 14 Dtool_VZN3dfDX 31 // these versions inline better 3 4 this 3 2531  10 result_vec 1 2494  3 row 1 2471  
719 14 Dtool_VZN3wROZ 7 629 2494 1586 14 Dtool_VZN3wROZ 299 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  3 row 1 2471  
720 14 Dtool_VZN3Fuhg 7 630 2494 1586 14 Dtool_VZN3Fuhg 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  3 col 1 2471  
721 14 Dtool_VZN37qSI 7 631 2463 1419 14 Dtool_VZN37qSI 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  3 row 1 2471  
722 14 Dtool_VZN3WJmP 7 632 2463 1419 14 Dtool_VZN3WJmP 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  3 col 1 2471  
723 14 Dtool_VZN3HBvR 4 633 2468 0 14 Dtool_VZN3HBvR 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2530  3 row 1 2471  3 col 1 2471  
724 14 Dtool_VZN3_Fgz 6 633 2466 0 14 Dtool_VZN3_Fgz 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2531  3 row 1 2471  3 col 1 2471  
725 14 Dtool_VZN3n3T3 7 634 2533 1999 14 Dtool_VZN3n3T3 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  1 i 1 2471  
726 14 Dtool_VZN3cUMI 7 634 2534 2002 14 Dtool_VZN3cUMI 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  1 i 1 2471  
727 14 Dtool_VZN3kTdF 6 635 2471 0 14 Dtool_VZN3kTdF 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
728 14 Dtool_VZN3R3pT 6 636 2472 0 14 Dtool_VZN3R3pT 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2531  
729 14 Dtool_VZN3H4Zy 6 637 2466 0 14 Dtool_VZN3H4Zy 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2531  3 row 1 2471  3 col 1 2471  
730 14 Dtool_VZN3l0_H 4 638 2468 0 14 Dtool_VZN3l0_H 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2530  3 row 1 2471  3 col 1 2471  5 value 1 2466  
731 14 Dtool_VZN3WvxR 4 639 2468 0 14 Dtool_VZN3WvxR 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2531  
732 14 Dtool_VZN3bMUR 6 640 2471 0 14 Dtool_VZN3bMUR 276 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2531  
733 14 Dtool_VZN3vhzu 6 641 2472 0 14 Dtool_VZN3vhzu 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  5 other 1 2531  
734 14 Dtool_VZN3JQr_ 6 642 2472 0 14 Dtool_VZN3JQr_ 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  5 other 1 2531  
735 14 Dtool_VZN3JhJ3 6 643 2472 0 14 Dtool_VZN3JhJ3 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  5 other 1 2531  
736 14 Dtool_VZN3KM0m 6 644 2471 0 14 Dtool_VZN3KM0m 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  5 other 1 2531  
737 14 Dtool_VZN3xCZj 6 644 2471 0 14 Dtool_VZN3xCZj 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2531  5 other 1 2531  9 threshold 1 2466  
738 14 Dtool_VZN3W4In 6 645 2467 0 14 Dtool_VZN3W4In 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2531  
739 14 Dtool_VZN3G8W5 6 645 2467 0 14 Dtool_VZN3G8W5 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  9 threshold 1 2466  
740 14 Dtool_VZN3pcnj 6 646 2467 0 14 Dtool_VZN3pcnj 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  4 hash 1 2467  
741 14 Dtool_VZN3Gmv2 6 646 2467 0 14 Dtool_VZN3Gmv2 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2531  4 hash 1 2467  9 threshold 1 2466  
742 14 Dtool_VZN3Hzw6 7 647 2494 1586 14 Dtool_VZN3Hzw6 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  1 v 1 2495  
743 14 Dtool_VZN3E0BQ 7 648 2463 1419 14 Dtool_VZN3E0BQ 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  1 v 1 2464  
744 14 Dtool_VZN3I3MJ 7 649 2463 1419 14 Dtool_VZN3I3MJ 397 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  1 v 1 2464  
745 14 Dtool_VZN3abOJ 7 649 2494 1586 14 Dtool_VZN3abOJ 444 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  1 v 1 2495  
746 14 Dtool_VZN3J0pj 7 650 2494 1586 14 Dtool_VZN3J0pj 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  1 v 1 2495  
747 14 Dtool_VZN3SR6_ 4 651 2468 0 14 Dtool_VZN3SR6_ 25 // this = other1 * other2 3 4 this 3 2530  6 other1 1 2531  6 other2 1 2531  
748 14 Dtool_VZN3PBTp 7 652 2530 2067 14 Dtool_VZN3PBTp 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  5 other 1 2531  
749 14 Dtool_VZN3cFqV 7 652 2530 2067 14 Dtool_VZN3cFqV 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  6 scalar 1 2466  
750 14 Dtool_VZN3MqMX 7 653 2530 2067 14 Dtool_VZN3MqMX 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  6 scalar 1 2466  
751 14 Dtool_VZN3E0iA 6 654 2530 0 14 Dtool_VZN3E0iA 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 other 1 2531  
752 14 Dtool_VZN3kIJB 6 655 2530 0 14 Dtool_VZN3kIJB 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 other 1 2531  
753 14 Dtool_VZN30XOA 6 656 2530 0 14 Dtool_VZN30XOA 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 other 1 2531  
754 14 Dtool_VZN3MH5p 6 656 2530 0 14 Dtool_VZN3MH5p 251 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  6 scalar 1 2466  
755 14 Dtool_VZN3c8ar 6 657 2530 0 14 Dtool_VZN3c8ar 251 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  6 scalar 1 2466  
756 14 Dtool_VZN33zlL 6 658 2466 0 14 Dtool_VZN33zlL 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2531  
757 14 Dtool_VZN3lS3s 4 659 2468 0 14 Dtool_VZN3lS3s 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 other 1 2531  
758 14 Dtool_VZN38Ojo 4 660 2468 0 14 Dtool_VZN38Ojo 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2530  
759 14 Dtool_VZN3UKZ2 6 661 2472 0 14 Dtool_VZN3UKZ2 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 other 1 2531  
760 14 Dtool_VZN3huLY 6 662 2472 0 14 Dtool_VZN3huLY 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2530  
761 14 Dtool_VZN3KfCp 6 663 2472 0 14 Dtool_VZN3KfCp 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 other 1 2531  
762 14 Dtool_VZN3KD6t 6 663 2472 0 14 Dtool_VZN3KD6t 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 other 1 2535  
763 14 Dtool_VZN3q8vo 6 664 2531 0 14 Dtool_VZN3q8vo 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
764 14 Dtool_VZN3oByR 4 665 2468 0 14 Dtool_VZN3oByR 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 trans 1 2464  
765 14 Dtool_VZN3d4J2 4 666 2468 0 14 Dtool_VZN3d4J2 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 angle 1 2466  
766 14 Dtool_VZN3PymL 4 666 2468 0 14 Dtool_VZN3PymL 365 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2530  5 angle 1 2466  4 axis 1 2494  2 cs 1 2434  
767 14 Dtool_VZN3diBV 4 666 2468 0 14 Dtool_VZN3diBV 365 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2530  5 angle 1 2466  4 axis 1 2494  
768 14 Dtool_VZN3SAXQ 4 667 2468 0 14 Dtool_VZN3SAXQ 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 scale 1 2464  
769 14 Dtool_VZN3B2WI 4 667 2468 0 14 Dtool_VZN3B2WI 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 scale 1 2495  
770 14 Dtool_VZN39Yv7 7 668 2530 2067 14 Dtool_VZN39Yv7 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2464  
771 14 Dtool_VZN31aHR 7 668 2530 2067 14 Dtool_VZN31aHR 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 2466  2 ty 1 2466  
772 14 Dtool_VZN3wS2A 7 669 2530 2067 14 Dtool_VZN3wS2A 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 2466  
773 14 Dtool_VZN3zgNZ 7 669 2530 2067 14 Dtool_VZN3zgNZ 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2466  4 axis 1 2494  2 cs 1 2434  
774 14 Dtool_VZN3y0rv 7 669 2530 2067 14 Dtool_VZN3y0rv 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2466  4 axis 1 2494  
775 14 Dtool_VZN3fF2k 7 670 2530 2067 14 Dtool_VZN3fF2k 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2464  
776 14 Dtool_VZN3Np4k 7 670 2530 2067 14 Dtool_VZN3Np4k 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2495  
777 14 Dtool_VZN3KKk6 7 670 2530 2067 14 Dtool_VZN3KKk6 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 2466  2 sy 1 2466  
778 14 Dtool_VZN3x6ng 7 670 2530 2067 14 Dtool_VZN3x6ng 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2466  2 sy 1 2466  2 sz 1 2466  
779 14 Dtool_VZN3A7ca 4 671 2468 0 14 Dtool_VZN3A7ca 409 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2530  5 angle 1 2466  4 axis 1 2495  2 cs 1 2434  
780 14 Dtool_VZN3iLqT 4 671 2468 0 14 Dtool_VZN3iLqT 409 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2530  5 angle 1 2466  4 axis 1 2495  
781 14 Dtool_VZN3Sl9G 7 672 2530 2067 14 Dtool_VZN3Sl9G 405 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2466  4 axis 1 2495  2 cs 1 2434  
782 14 Dtool_VZN3if2Z 7 672 2530 2067 14 Dtool_VZN3if2Z 405 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2466  4 axis 1 2495  
783 14 Dtool_VZN3_oI_ 4 673 2468 0 14 Dtool_VZN3_oI_ 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2530  5 shear 1 2495  2 cs 1 2434  
784 14 Dtool_VZN35pyk 4 673 2468 0 14 Dtool_VZN35pyk 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2530  5 shear 1 2495  
785 14 Dtool_VZN34aMC 7 674 2530 2067 14 Dtool_VZN34aMC 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2495  2 cs 1 2434  
786 14 Dtool_VZN3KUWr 7 674 2530 2067 14 Dtool_VZN3KUWr 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2495  
787 14 Dtool_VZN3iw5Z 7 674 2530 2067 14 Dtool_VZN3iw5Z 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2466  4 shxz 1 2466  4 shyz 1 2466  2 cs 1 2434  
788 14 Dtool_VZN3wRFn 7 674 2530 2067 14 Dtool_VZN3wRFn 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2466  4 shxz 1 2466  4 shyz 1 2466  
789 14 Dtool_VZN3ZjM_ 4 675 2468 0 14 Dtool_VZN3ZjM_ 324 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2530  5 scale 1 2495  5 shear 1 2495  2 cs 1 2434  
790 14 Dtool_VZN3Fn4k 4 675 2468 0 14 Dtool_VZN3Fn4k 324 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2530  5 scale 1 2495  5 shear 1 2495  
791 14 Dtool_VZN3aF0T 7 676 2530 2067 14 Dtool_VZN3aF0T 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2495  5 shear 1 2495  2 cs 1 2434  
792 14 Dtool_VZN3_Jjt 7 676 2530 2067 14 Dtool_VZN3_Jjt 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2495  5 shear 1 2495  
793 14 Dtool_VZN3iFf9 7 676 2530 2067 14 Dtool_VZN3iFf9 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2466  2 sy 1 2466  2 sz 1 2466  4 shxy 1 2466  4 shxz 1 2466  4 shyz 1 2466  2 cs 1 2434  
794 14 Dtool_VZN3ie6G 7 676 2530 2067 14 Dtool_VZN3ie6G 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2466  2 sy 1 2466  2 sz 1 2466  4 shxy 1 2466  4 shxz 1 2466  4 shyz 1 2466  
795 14 Dtool_VZN3jv0p 6 677 2531 0 14 Dtool_VZN3jv0p 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2434  2 to 1 2434  
796 14 Dtool_VZN35LZV 6 678 2472 0 14 Dtool_VZN35LZV 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  5 other 1 2531  
797 14 Dtool_VZN3jSL6 6 678 2472 0 14 Dtool_VZN3jSL6 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2531  5 other 1 2531  9 threshold 1 2466  
798 14 Dtool_VZN3zE1n 4 679 2468 0 14 Dtool_VZN3zE1n 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  3 out 1 2473  
799 14 Dtool_VZN3xi6e 4 680 2468 0 14 Dtool_VZN3xi6e 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2531  3 out 1 2473  12 indent_level 1 2471  
800 14 Dtool_VZN3t5Vo 4 680 2468 0 14 Dtool_VZN3t5Vo 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2531  3 out 1 2473  
801 14 Dtool_VZN3f4Xq 4 681 2468 0 14 Dtool_VZN3f4Xq 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2531  3 out 1 2473  10 class_name 1 2475  
802 14 Dtool_VZN3IXnT 7 682 2477 0 14 Dtool_VZN3IXnT 0 0 
803 14 Dtool_VZN3sICl 4 611 2468 0 14 Dtool_VZN3sICl 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2533  1 i 1 2471  
804 14 Dtool_VZN3UN1G 6 611 2466 0 14 Dtool_VZN3UN1G 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2537  1 i 1 2471  
805 14 Dtool_VZN3g9AW 4 612 2468 0 14 Dtool_VZN3g9AW 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2533  1 i 1 2471  1 v 1 2466  
806 14 Dtool_VZN3OlSB 6 613 2471 0 14 Dtool_VZN3OlSB 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
807 14 Dtool_VZN3KWHJ 6 616 2466 0 14 Dtool_VZN3KWHJ 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2539  1 i 1 2471  
808 14 Dtool_VZN3S_uX 6 617 2471 0 14 Dtool_VZN3S_uX 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
809 14 Dtool_VZN30VSC 7 696 2541 2148 14 Dtool_VZN30VSC 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
810 14 Dtool_VZN3fs5c 7 696 2541 2148 14 Dtool_VZN3fs5c 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 2531  
811 14 Dtool_VZN36_z9 7 696 2541 2148 14 Dtool_VZN36_z9 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 2531  5 trans 1 2495  
812 14 Dtool_VZN3X354 7 696 2541 2148 14 Dtool_VZN3X354 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2535  
813 14 Dtool_VZN3kfiq 7 696 2541 2148 14 Dtool_VZN3kfiq 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2466  3 e01 1 2466  3 e02 1 2466  3 e03 1 2466  3 e10 1 2466  3 e11 1 2466  3 e12 1 2466  3 e13 1 2466  3 e20 1 2466  3 e21 1 2466  3 e22 1 2466  3 e23 1 2466  3 e30 1 2466  3 e31 1 2466  3 e32 1 2466  3 e33 1 2466  
814 14 Dtool_VZN3kLb0 6 697 2541 0 14 Dtool_VZN3kLb0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  5 other 1 2535  
815 14 Dtool_VZN3J5tl 6 697 2541 0 14 Dtool_VZN3J5tl 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  10 fill_value 1 2466  
816 14 Dtool_VZN32oeX 4 698 2468 0 14 Dtool_VZN32oeX 0 2 4 this 3 2541  4 size 1 2467  
817 14 Dtool_VZN34Yzl 6 701 2469 0 14 Dtool_VZN34Yzl 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  4 self 1 2469  
818 14 Dtool_VZN3hn3a 4 702 2468 0 14 Dtool_VZN3hn3a 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  10 fill_value 1 2466  
819 14 Dtool_VZN3b_Gk 4 703 2468 0 14 Dtool_VZN3b_Gk 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2541  3 e00 1 2466  3 e01 1 2466  3 e02 1 2466  3 e03 1 2466  3 e10 1 2466  3 e11 1 2466  3 e12 1 2466  3 e13 1 2466  3 e20 1 2466  3 e21 1 2466  3 e22 1 2466  3 e23 1 2466  3 e30 1 2466  3 e31 1 2466  3 e32 1 2466  3 e33 1 2466  
820 14 Dtool_VZN3QITa 4 704 2468 0 14 Dtool_VZN3QITa 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  6 upper3 1 2531  
821 14 Dtool_VZN31ZhQ 7 705 2530 2067 14 Dtool_VZN31ZhQ 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2535  
822 14 Dtool_VZN32ZkG 4 706 2468 0 14 Dtool_VZN32ZkG 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  3 row 1 2471  1 v 1 2495  
823 14 Dtool_VZN3lZUo 4 706 2468 0 14 Dtool_VZN3lZUo 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  3 row 1 2471  1 v 1 2513  
824 14 Dtool_VZN3b83N 4 707 2468 0 14 Dtool_VZN3b83N 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  3 col 1 2471  1 v 1 2495  
825 14 Dtool_VZN328nv 4 707 2468 0 14 Dtool_VZN328nv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  3 col 1 2471  1 v 1 2513  
826 14 Dtool_VZN3n__u 4 708 2468 0 14 Dtool_VZN3n__u 31 // these versions inline better 3 4 this 3 2535  10 result_vec 1 2512  3 row 1 2471  
827 14 Dtool_VZN3xxRA 7 708 2512 1820 14 Dtool_VZN3xxRA 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  3 row 1 2471  
828 14 Dtool_VZN3COlH 7 709 2512 1820 14 Dtool_VZN3COlH 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  3 col 1 2471  
829 14 Dtool_VZN3dF7x 4 710 2468 0 14 Dtool_VZN3dF7x 31 // these versions inline better 3 4 this 3 2535  10 result_vec 1 2494  3 row 1 2471  
830 14 Dtool_VZN3JMW2 7 710 2494 1586 14 Dtool_VZN3JMW2 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  3 row 1 2471  
831 14 Dtool_VZN3kop9 7 711 2494 1586 14 Dtool_VZN3kop9 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  3 col 1 2471  
832 14 Dtool_VZN3Hhy4 4 712 2468 0 14 Dtool_VZN3Hhy4 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  3 row 1 2471  3 col 1 2471  
833 14 Dtool_VZN3_lka 6 712 2466 0 14 Dtool_VZN3_lka 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  3 row 1 2471  3 col 1 2471  
834 14 Dtool_VZN3kXWe 7 713 2542 2073 14 Dtool_VZN3kXWe 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  1 i 1 2471  
835 14 Dtool_VZN3c0Pv 7 713 2543 2076 14 Dtool_VZN3c0Pv 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  1 i 1 2471  
836 14 Dtool_VZN3kzgs 6 714 2471 0 14 Dtool_VZN3kzgs 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
837 14 Dtool_VZN3RXs6 6 715 2472 0 14 Dtool_VZN3RXs6 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2535  
838 14 Dtool_VZN3GYcZ 6 716 2466 0 14 Dtool_VZN3GYcZ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  3 row 1 2471  3 col 1 2471  
839 14 Dtool_VZN3lUBv 4 717 2468 0 14 Dtool_VZN3lUBv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2541  3 row 1 2471  3 col 1 2471  5 value 1 2466  
840 14 Dtool_VZN3WP14 4 718 2468 0 14 Dtool_VZN3WP14 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2535  
841 14 Dtool_VZN3bsX4 6 719 2471 0 14 Dtool_VZN3bsX4 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2535  
842 14 Dtool_VZN3KK3S 4 720 2468 0 14 Dtool_VZN3KK3S 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2541  
843 14 Dtool_VZN3BQDa 4 720 2468 0 14 Dtool_VZN3BQDa 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2535  
844 14 Dtool_VZN3m_kL 4 721 2468 0 14 Dtool_VZN3m_kL 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2541  
845 14 Dtool_VZN3gxNr 4 721 2468 0 14 Dtool_VZN3gxNr 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2535  
846 14 Dtool_VZN38l5V 6 722 2472 0 14 Dtool_VZN38l5V 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2535  
847 14 Dtool_VZN3I59n 6 723 2472 0 14 Dtool_VZN3I59n 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2535  
848 14 Dtool_VZN3IOaf 6 724 2472 0 14 Dtool_VZN3IOaf 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2535  
849 14 Dtool_VZN3zB6N 6 725 2471 0 14 Dtool_VZN3zB6N 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2535  
850 14 Dtool_VZN3mOfK 6 725 2471 0 14 Dtool_VZN3mOfK 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  5 other 1 2535  9 threshold 1 2466  
851 14 Dtool_VZN3VYMO 6 726 2467 0 14 Dtool_VZN3VYMO 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2535  
852 14 Dtool_VZN3FcZg 6 726 2467 0 14 Dtool_VZN3FcZg 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  9 threshold 1 2466  
853 14 Dtool_VZN3o8oK 6 727 2467 0 14 Dtool_VZN3o8oK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  4 hash 1 2467  
854 14 Dtool_VZN3JGyd 6 727 2467 0 14 Dtool_VZN3JGyd 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  4 hash 1 2467  9 threshold 1 2466  
855 14 Dtool_VZN3mWbi 7 728 2512 1820 14 Dtool_VZN3mWbi 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  1 v 1 2513  
856 14 Dtool_VZN3F0Ie 7 729 2494 1586 14 Dtool_VZN3F0Ie 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  1 v 1 2495  
857 14 Dtool_VZN3a7Sw 7 730 2494 1586 14 Dtool_VZN3a7Sw 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  1 v 1 2495  
858 14 Dtool_VZN3IUtK 7 731 2494 1586 14 Dtool_VZN3IUtK 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  1 v 1 2495  
859 14 Dtool_VZN3cv3G 4 732 2468 0 14 Dtool_VZN3cv3G 25 // this = other1 * other2 3 4 this 3 2541  6 other1 1 2535  6 other2 1 2535  
860 14 Dtool_VZN3cFZQ 7 733 2541 2148 14 Dtool_VZN3cFZQ 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2535  
861 14 Dtool_VZN3clu8 7 733 2541 2148 14 Dtool_VZN3clu8 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  6 scalar 1 2466  
862 14 Dtool_VZN3MKP_ 7 734 2541 2148 14 Dtool_VZN3MKP_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  6 scalar 1 2466  
863 14 Dtool_VZN3Ev0o 6 735 2541 0 14 Dtool_VZN3Ev0o 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  5 other 1 2535  
864 14 Dtool_VZN3kjbp 6 736 2541 0 14 Dtool_VZN3kjbp 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  5 other 1 2535  
865 14 Dtool_VZN30Ogo 6 737 2541 0 14 Dtool_VZN30Ogo 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  5 other 1 2535  
866 14 Dtool_VZN3Nn8Q 6 737 2541 0 14 Dtool_VZN3Nn8Q 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  6 scalar 1 2466  
867 14 Dtool_VZN3dceS 6 738 2541 0 14 Dtool_VZN3dceS 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  6 scalar 1 2466  
868 14 Dtool_VZN3rI6L 4 739 2468 0 14 Dtool_VZN3rI6L 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  5 other 1 2535  
869 14 Dtool_VZN39umP 4 740 2468 0 14 Dtool_VZN39umP 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2541  
870 14 Dtool_VZN3Vtqe 6 741 2472 0 14 Dtool_VZN3Vtqe 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  5 other 1 2535  
871 14 Dtool_VZN3KvHn 6 742 2472 0 14 Dtool_VZN3KvHn 929 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 2541  5 other 1 2535  
872 14 Dtool_VZN3hOP_ 6 743 2472 0 14 Dtool_VZN3hOP_ 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2541  
873 14 Dtool_VZN3rczP 6 744 2535 0 14 Dtool_VZN3rczP 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
874 14 Dtool_VZN3mxV_ 6 745 2535 0 14 Dtool_VZN3mxV_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
875 14 Dtool_VZN3LEvk 6 746 2535 0 14 Dtool_VZN3LEvk 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
876 14 Dtool_VZN3TiW8 4 747 2468 0 14 Dtool_VZN3TiW8 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  5 trans 1 2495  
877 14 Dtool_VZN3PSpy 4 748 2468 0 14 Dtool_VZN3PSpy 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2541  5 angle 1 2466  4 axis 1 2495  2 cs 1 2434  
878 14 Dtool_VZN3dCF8 4 748 2468 0 14 Dtool_VZN3dCF8 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  5 angle 1 2466  4 axis 1 2495  
879 14 Dtool_VZN3BbgB 4 749 2468 0 14 Dtool_VZN3BbgB 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2541  5 angle 1 2466  4 axis 1 2495  2 cs 1 2434  
880 14 Dtool_VZN3iru6 4 749 2468 0 14 Dtool_VZN3iru6 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  5 angle 1 2466  4 axis 1 2495  
881 14 Dtool_VZN3BWav 4 750 2468 0 14 Dtool_VZN3BWav 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  5 scale 1 2495  
882 14 Dtool_VZN3_IMl 4 751 2468 0 14 Dtool_VZN3_IMl 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  5 shear 1 2495  2 cs 1 2434  
883 14 Dtool_VZN36J2L 4 751 2468 0 14 Dtool_VZN36J2L 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2541  5 shear 1 2495  
884 14 Dtool_VZN3aDQm 4 752 2468 0 14 Dtool_VZN3aDQm 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2541  5 scale 1 2495  5 shear 1 2495  2 cs 1 2434  
885 14 Dtool_VZN3CH7L 4 752 2468 0 14 Dtool_VZN3CH7L 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2541  5 scale 1 2495  5 shear 1 2495  
886 14 Dtool_VZN3jyza 7 753 2541 2148 14 Dtool_VZN3jyza 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2495  
887 14 Dtool_VZN3Q9hS 7 753 2541 2148 14 Dtool_VZN3Q9hS 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 2466  2 ty 1 2466  2 tz 1 2466  
888 14 Dtool_VZN38AQA 7 754 2541 2148 14 Dtool_VZN38AQA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2466  4 axis 1 2495  2 cs 1 2434  
889 14 Dtool_VZN3zUuW 7 754 2541 2148 14 Dtool_VZN3zUuW 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2466  4 axis 1 2495  
890 14 Dtool_VZN3SFBu 7 755 2541 2148 14 Dtool_VZN3SFBu 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2466  4 axis 1 2495  2 cs 1 2434  
891 14 Dtool_VZN3l_5A 7 755 2541 2148 14 Dtool_VZN3l_5A 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2466  4 axis 1 2495  
892 14 Dtool_VZN3OJ8L 7 756 2541 2148 14 Dtool_VZN3OJ8L 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2495  
893 14 Dtool_VZN3gj9H 7 756 2541 2148 14 Dtool_VZN3gj9H 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2466  
894 14 Dtool_VZN3waqH 7 756 2541 2148 14 Dtool_VZN3waqH 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2466  2 sy 1 2466  2 sz 1 2466  
895 14 Dtool_VZN346Pp 7 757 2541 2148 14 Dtool_VZN346Pp 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2495  2 cs 1 2434  
896 14 Dtool_VZN3J0aS 7 757 2541 2148 14 Dtool_VZN3J0aS 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2495  
897 14 Dtool_VZN3lQ9A 7 757 2541 2148 14 Dtool_VZN3lQ9A 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2466  4 shxz 1 2466  4 shyz 1 2466  2 cs 1 2434  
898 14 Dtool_VZN3xxJO 7 757 2541 2148 14 Dtool_VZN3xxJO 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2466  4 shxz 1 2466  4 shyz 1 2466  
899 14 Dtool_VZN3al56 7 758 2541 2148 14 Dtool_VZN3al56 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2495  5 shear 1 2495  2 cs 1 2434  
900 14 Dtool_VZN3gpnU 7 758 2541 2148 14 Dtool_VZN3gpnU 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2495  5 shear 1 2495  
901 14 Dtool_VZN39lik 7 758 2541 2148 14 Dtool_VZN39lik 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2466  2 sy 1 2466  2 sz 1 2466  4 shxy 1 2466  4 shxz 1 2466  4 shyz 1 2466  2 cs 1 2434  
902 14 Dtool_VZN3i__t 7 758 2541 2148 14 Dtool_VZN3i__t 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2466  2 sy 1 2466  2 sz 1 2466  4 shxy 1 2466  4 shxz 1 2466  4 shyz 1 2466  
903 14 Dtool_VZN3lIST 6 759 2535 0 14 Dtool_VZN3lIST 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
904 14 Dtool_VZN3lG2Q 6 760 2535 0 14 Dtool_VZN3lG2Q 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
905 14 Dtool_VZN3gP4Q 6 761 2535 0 14 Dtool_VZN3gP4Q 362 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2434  2 to 1 2434  
906 14 Dtool_VZN34Lgj 6 762 2472 0 14 Dtool_VZN34Lgj 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  5 other 1 2535  
907 14 Dtool_VZN39SSI 6 762 2472 0 14 Dtool_VZN39SSI 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  5 other 1 2535  9 threshold 1 2466  
908 14 Dtool_VZN30k4O 4 763 2468 0 14 Dtool_VZN30k4O 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  3 out 1 2473  
909 14 Dtool_VZN3wC_F 4 764 2468 0 14 Dtool_VZN3wC_F 226 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  3 out 1 2473  12 indent_level 1 2471  
910 14 Dtool_VZN3sZZP 4 764 2468 0 14 Dtool_VZN3sZZP 226 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2535  3 out 1 2473  
911 14 Dtool_VZN3eYaR 4 765 2468 0 14 Dtool_VZN3eYaR 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2535  3 out 1 2473  10 class_name 1 2475  
912 14 Dtool_VZN3I3r6 7 766 2477 0 14 Dtool_VZN3I3r6 0 0 
913 14 Dtool_VZN3roGM 4 688 2468 0 14 Dtool_VZN3roGM 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2542  1 i 1 2471  
914 14 Dtool_VZN3Ut2t 6 688 2466 0 14 Dtool_VZN3Ut2t 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2544  1 i 1 2471  
915 14 Dtool_VZN3gdD9 4 689 2468 0 14 Dtool_VZN3gdD9 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2542  1 i 1 2471  1 v 1 2466  
916 14 Dtool_VZN3OFWo 6 690 2471 0 14 Dtool_VZN3OFWo 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
917 14 Dtool_VZN3K2Kw 6 693 2466 0 14 Dtool_VZN3K2Kw 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2546  1 i 1 2471  
918 14 Dtool_VZN3Sfy_ 6 694 2471 0 14 Dtool_VZN3Sfy_ 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
919 14 Dtool_VZN3HKtQ 7 778 2548 2220 14 Dtool_VZN3HKtQ 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
920 14 Dtool_VZN3gwPr 7 778 2548 2220 14 Dtool_VZN3gwPr 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2549  
921 14 Dtool_VZN31oPv 7 778 2548 2220 14 Dtool_VZN31oPv 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 2481  3 e01 1 2481  3 e02 1 2481  3 e10 1 2481  3 e11 1 2481  3 e12 1 2481  3 e20 1 2481  3 e21 1 2481  3 e22 1 2481  
922 14 Dtool_VZN39QZH 6 779 2548 0 14 Dtool_VZN39QZH 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 other 1 2549  
923 14 Dtool_VZN3ByUJ 6 779 2548 0 14 Dtool_VZN3ByUJ 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  10 fill_value 1 2481  
924 14 Dtool_VZN3eI6s 4 780 2468 0 14 Dtool_VZN3eI6s 0 2 4 this 3 2548  4 size 1 2467  
925 14 Dtool_VZN3Q4Q7 6 783 2469 0 14 Dtool_VZN3Q4Q7 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  4 self 1 2469  
926 14 Dtool_VZN3tMiW 4 784 2468 0 14 Dtool_VZN3tMiW 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  10 fill_value 1 2481  
927 14 Dtool_VZN3YSjO 4 785 2468 0 14 Dtool_VZN3YSjO 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 2548  3 e00 1 2481  3 e01 1 2481  3 e02 1 2481  3 e10 1 2481  3 e11 1 2481  3 e12 1 2481  3 e20 1 2481  3 e21 1 2481  3 e22 1 2481  
928 14 Dtool_VZN3MjRK 4 786 2468 0 14 Dtool_VZN3MjRK 326 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2548  3 row 1 2471  1 v 1 2479  
929 14 Dtool_VZN37jBs 4 786 2468 0 14 Dtool_VZN37jBs 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2548  3 row 1 2471  1 v 1 2498  
930 14 Dtool_VZN3hFlR 4 787 2468 0 14 Dtool_VZN3hFlR 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2548  3 col 1 2471  1 v 1 2479  
931 14 Dtool_VZN3cGVz 4 787 2468 0 14 Dtool_VZN3cGVz 308 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Public
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2548  3 col 1 2471  1 v 1 2498  
932 14 Dtool_VZN3FRjb 4 788 2468 0 14 Dtool_VZN3FRjb 31 // these versions inline better 3 4 this 3 2549  10 result_vec 1 2497  3 row 1 2471  
933 14 Dtool_VZN3pQuV 7 788 2497 1649 14 Dtool_VZN3pQuV 299 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  3 row 1 2471  
934 14 Dtool_VZN3qvBd 7 789 2497 1649 14 Dtool_VZN3qvBd 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  3 col 1 2471  
935 14 Dtool_VZN3CqyE 7 790 2478 1472 14 Dtool_VZN3CqyE 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Public
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  3 row 1 2471  
936 14 Dtool_VZN3xKGM 7 791 2478 1472 14 Dtool_VZN3xKGM 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Public
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  3 col 1 2471  
937 14 Dtool_VZN3YAPO 4 792 2468 0 14 Dtool_VZN3YAPO 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2548  3 row 1 2471  3 col 1 2471  
938 14 Dtool_VZN3nEAw 6 792 2481 0 14 Dtool_VZN3nEAw 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2549  3 row 1 2471  3 col 1 2471  
939 14 Dtool_VZN380zz 7 793 2551 2152 14 Dtool_VZN380zz 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  1 i 1 2471  
940 14 Dtool_VZN31LsE 7 793 2552 2155 14 Dtool_VZN31LsE 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  1 i 1 2471  
941 14 Dtool_VZN3DT9B 6 794 2471 0 14 Dtool_VZN3DT9B 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Public, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
942 14 Dtool_VZN3u3JQ 6 795 2472 0 14 Dtool_VZN3u3JQ 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2549  
943 14 Dtool_VZN3u75u 6 796 2481 0 14 Dtool_VZN3u75u 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2549  3 row 1 2471  3 col 1 2471  
944 14 Dtool_VZN3YWBO 4 797 2468 0 14 Dtool_VZN3YWBO 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2548  3 row 1 2471  3 col 1 2471  5 value 1 2481  
945 14 Dtool_VZN3tvRO 4 798 2468 0 14 Dtool_VZN3tvRO 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2549  
946 14 Dtool_VZN3wP0N 6 799 2471 0 14 Dtool_VZN3wP0N 276 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2549  
947 14 Dtool_VZN3Gv3o 6 800 2472 0 14 Dtool_VZN3Gv3o 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  5 other 1 2549  
948 14 Dtool_VZN3RREu 6 801 2472 0 14 Dtool_VZN3RREu 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  5 other 1 2549  
949 14 Dtool_VZN3Rgil 6 802 2472 0 14 Dtool_VZN3Rgil 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  5 other 1 2549  
950 14 Dtool_VZN3t_3g 6 803 2471 0 14 Dtool_VZN3t_3g 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  5 other 1 2549  
951 14 Dtool_VZN3Sbnp 6 803 2471 0 14 Dtool_VZN3Sbnp 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2549  5 other 1 2549  9 threshold 1 2481  
952 14 Dtool_VZN3t7oj 6 804 2467 0 14 Dtool_VZN3t7oj 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2549  
953 14 Dtool_VZN3ACnK 6 804 2467 0 14 Dtool_VZN3ACnK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  9 threshold 1 2481  
954 14 Dtool_VZN3QfHg 6 805 2467 0 14 Dtool_VZN3QfHg 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  4 hash 1 2467  
955 14 Dtool_VZN3e2a4 6 805 2467 0 14 Dtool_VZN3e2a4 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2549  4 hash 1 2467  9 threshold 1 2481  
956 14 Dtool_VZN3uQNQ 7 806 2497 1649 14 Dtool_VZN3uQNQ 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Public
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  1 v 1 2498  
957 14 Dtool_VZN3S1BJ 7 807 2478 1472 14 Dtool_VZN3S1BJ 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Public
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  1 v 1 2479  
958 14 Dtool_VZN3RGPD 7 808 2478 1472 14 Dtool_VZN3RGPD 397 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  1 v 1 2479  
959 14 Dtool_VZN3DiSD 7 808 2497 1649 14 Dtool_VZN3DiSD 444 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  1 v 1 2498  
960 14 Dtool_VZN3sKJA 7 809 2497 1649 14 Dtool_VZN3sKJA 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  1 v 1 2498  
961 14 Dtool_VZN3Z5GD 4 810 2468 0 14 Dtool_VZN3Z5GD 25 // this = other1 * other2 3 4 this 3 2548  6 other1 1 2549  6 other2 1 2549  
962 14 Dtool_VZN3mPXj 7 811 2548 2220 14 Dtool_VZN3mPXj 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  5 other 1 2549  
963 14 Dtool_VZN3_fQe 7 811 2548 2220 14 Dtool_VZN3_fQe 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  6 scalar 1 2481  
964 14 Dtool_VZN3Ooxf 7 812 2548 2220 14 Dtool_VZN3Ooxf 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  6 scalar 1 2481  
965 14 Dtool_VZN3_07u 6 813 2548 0 14 Dtool_VZN3_07u 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 other 1 2549  
966 14 Dtool_VZN3fIiv 6 814 2548 0 14 Dtool_VZN3fIiv 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 other 1 2549  
967 14 Dtool_VZN3PXnu 6 815 2548 0 14 Dtool_VZN3PXnu 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 other 1 2549  
968 14 Dtool_VZN3X0Qs 6 815 2548 0 14 Dtool_VZN3X0Qs 251 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  6 scalar 1 2481  
969 14 Dtool_VZN3ndyt 6 816 2548 0 14 Dtool_VZN3ndyt 251 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Public
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  6 scalar 1 2481  
970 14 Dtool_VZN3syFI 6 817 2481 0 14 Dtool_VZN3syFI 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Public
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2549  
971 14 Dtool_VZN3aONp 4 818 2468 0 14 Dtool_VZN3aONp 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 other 1 2549  
972 14 Dtool_VZN3lPDl 4 819 2468 0 14 Dtool_VZN3lPDl 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2548  
973 14 Dtool_VZN3MJyk 6 820 2472 0 14 Dtool_VZN3MJyk 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 other 1 2549  
974 14 Dtool_VZN3IurU 6 821 2472 0 14 Dtool_VZN3IurU 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2548  
975 14 Dtool_VZN3meGt 6 822 2472 0 14 Dtool_VZN3meGt 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 other 1 2549  
976 14 Dtool_VZN3mC_x 6 822 2472 0 14 Dtool_VZN3mC_x 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Public
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 other 1 2553  
977 14 Dtool_VZN3D_Pl 6 823 2549 0 14 Dtool_VZN3D_Pl 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
978 14 Dtool_VZN39pSu 4 824 2468 0 14 Dtool_VZN39pSu 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 trans 1 2479  
979 14 Dtool_VZN39uiL 4 825 2468 0 14 Dtool_VZN39uiL 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 angle 1 2481  
980 14 Dtool_VZN358U8 4 825 2468 0 14 Dtool_VZN358U8 365 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2548  5 angle 1 2481  4 axis 1 2497  2 cs 1 2434  
981 14 Dtool_VZN3HjMp 4 825 2468 0 14 Dtool_VZN3HjMp 365 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2548  5 angle 1 2481  4 axis 1 2497  
982 14 Dtool_VZN3hzuM 4 826 2468 0 14 Dtool_VZN3hzuM 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 scale 1 2479  
983 14 Dtool_VZN3wFvE 4 826 2468 0 14 Dtool_VZN3wFvE 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 scale 1 2498  
984 14 Dtool_VZN3cpG4 7 827 2548 2220 14 Dtool_VZN3cpG4 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2479  
985 14 Dtool_VZN3Zis7 7 827 2548 2220 14 Dtool_VZN3Zis7 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 2481  2 ty 1 2481  
986 14 Dtool_VZN3B6hL 7 828 2548 2220 14 Dtool_VZN3B6hL 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 2481  
987 14 Dtool_VZN3aFgZ 7 828 2548 2220 14 Dtool_VZN3aFgZ 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2481  4 axis 1 2497  2 cs 1 2434  
988 14 Dtool_VZN3z6sm 7 828 2548 2220 14 Dtool_VZN3z6sm 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2481  4 axis 1 2497  
989 14 Dtool_VZN3kw5e 7 829 2548 2220 14 Dtool_VZN3kw5e 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2479  
990 14 Dtool_VZN32c8e 7 829 2548 2220 14 Dtool_VZN32c8e 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2498  
991 14 Dtool_VZN3KYtY 7 829 2548 2220 14 Dtool_VZN3KYtY 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 2481  2 sy 1 2481  
992 14 Dtool_VZN3XTVN 7 829 2548 2220 14 Dtool_VZN3XTVN 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2481  2 sy 1 2481  2 sz 1 2481  
993 14 Dtool_VZN3oZc9 4 830 2468 0 14 Dtool_VZN3oZc9 409 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2548  5 angle 1 2481  4 axis 1 2498  2 cs 1 2434  
994 14 Dtool_VZN3r2Hj 4 830 2468 0 14 Dtool_VZN3r2Hj 409 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2548  5 angle 1 2481  4 axis 1 2498  
995 14 Dtool_VZN3yh6r 7 831 2548 2220 14 Dtool_VZN3yh6r 405 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2481  4 axis 1 2498  2 cs 1 2434  
996 14 Dtool_VZN3YlqF 7 831 2548 2220 14 Dtool_VZN3YlqF 405 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2481  4 axis 1 2498  
997 14 Dtool_VZN3f5e6 4 832 2468 0 14 Dtool_VZN3f5e6 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2548  5 shear 1 2498  2 cs 1 2434  
998 14 Dtool_VZN3a_Ih 4 832 2468 0 14 Dtool_VZN3a_Ih 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2548  5 shear 1 2498  
999 14 Dtool_VZN3QoP8 7 833 2548 2220 14 Dtool_VZN3QoP8 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2498  2 cs 1 2434  
1000 14 Dtool_VZN3xJal 7 833 2548 2220 14 Dtool_VZN3xJal 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2498  
1001 14 Dtool_VZN31tYK 7 833 2548 2220 14 Dtool_VZN31tYK 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2481  4 shxz 1 2481  4 shyz 1 2481  2 cs 1 2434  
1002 14 Dtool_VZN3n6zT 7 833 2548 2220 14 Dtool_VZN3n6zT 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2481  4 shxz 1 2481  4 shyz 1 2481  
1003 14 Dtool_VZN3on65 4 834 2468 0 14 Dtool_VZN3on65 324 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2548  5 scale 1 2498  5 shear 1 2498  2 cs 1 2434  
1004 14 Dtool_VZN39Qnf 4 834 2468 0 14 Dtool_VZN39Qnf 324 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2548  5 scale 1 2498  5 shear 1 2498  
1005 14 Dtool_VZN3ipF0 7 835 2548 2220 14 Dtool_VZN3ipF0 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2498  5 shear 1 2498  2 cs 1 2434  
1006 14 Dtool_VZN3EtzN 7 835 2548 2220 14 Dtool_VZN3EtzN 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2498  5 shear 1 2498  
1007 14 Dtool_VZN3erao 7 835 2548 2220 14 Dtool_VZN3erao 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2481  2 sy 1 2481  2 sz 1 2481  4 shxy 1 2481  4 shxz 1 2481  4 shyz 1 2481  2 cs 1 2434  
1008 14 Dtool_VZN3kqKC 7 835 2548 2220 14 Dtool_VZN3kqKC 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2481  2 sy 1 2481  2 sz 1 2481  4 shxy 1 2481  4 shxz 1 2481  4 shyz 1 2481  
1009 14 Dtool_VZN34uUm 6 836 2549 0 14 Dtool_VZN34uUm 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2434  2 to 1 2434  
1010 14 Dtool_VZN3rIZO 6 837 2472 0 14 Dtool_VZN3rIZO 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  5 other 1 2549  
1011 14 Dtool_VZN3pOQZ 6 837 2472 0 14 Dtool_VZN3pOQZ 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2549  5 other 1 2549  9 threshold 1 2481  
1012 14 Dtool_VZN3cEVk 4 838 2468 0 14 Dtool_VZN3cEVk 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  3 out 1 2473  
1013 14 Dtool_VZN3Ihab 4 839 2468 0 14 Dtool_VZN3Ihab 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2549  3 out 1 2473  12 indent_level 1 2471  
1014 14 Dtool_VZN3U41k 4 839 2468 0 14 Dtool_VZN3U41k 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2549  3 out 1 2473  
1015 14 Dtool_VZN3253m 4 840 2468 0 14 Dtool_VZN3253m 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2549  3 out 1 2473  10 class_name 1 2475  
1016 14 Dtool_VZN3nXHQ 7 841 2477 0 14 Dtool_VZN3nXHQ 0 0 
1017 14 Dtool_VZN3DIih 4 770 2468 0 14 Dtool_VZN3DIih 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2551  1 i 1 2471  
1018 14 Dtool_VZN37NVD 6 770 2481 0 14 Dtool_VZN37NVD 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2555  1 i 1 2471  
1019 14 Dtool_VZN3rNBq 4 771 2468 0 14 Dtool_VZN3rNBq 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2551  1 i 1 2471  1 v 1 2481  
1020 14 Dtool_VZN3mly9 6 772 2471 0 14 Dtool_VZN3mly9 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1021 14 Dtool_VZN3jWnF 6 775 2481 0 14 Dtool_VZN3jWnF 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2557  1 i 1 2471  
1022 14 Dtool_VZN398OU 6 776 2471 0 14 Dtool_VZN398OU 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Public, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1023 14 Dtool_VZN3Vrx_ 7 853 2559 2299 14 Dtool_VZN3Vrx_ 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1024 14 Dtool_VZN3RSTZ 7 853 2559 2299 14 Dtool_VZN3RSTZ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 2549  
1025 14 Dtool_VZN3y2xB 7 853 2559 2299 14 Dtool_VZN3y2xB 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 2549  5 trans 1 2498  
1026 14 Dtool_VZN3pOT1 7 853 2559 2299 14 Dtool_VZN3pOT1 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 2553  
1027 14 Dtool_VZN3LfZS 7 853 2559 2299 14 Dtool_VZN3LfZS 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 2481  3 e01 1 2481  3 e02 1 2481  3 e03 1 2481  3 e10 1 2481  3 e11 1 2481  3 e12 1 2481  3 e13 1 2481  3 e20 1 2481  3 e21 1 2481  3 e22 1 2481  3 e23 1 2481  3 e30 1 2481  3 e31 1 2481  3 e32 1 2481  3 e33 1 2481  
1028 14 Dtool_VZN3PVfu 6 854 2559 0 14 Dtool_VZN3PVfu 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  5 other 1 2553  
1029 14 Dtool_VZN3BSXw 6 854 2559 0 14 Dtool_VZN3BSXw 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  10 fill_value 1 2481  
1030 14 Dtool_VZN3fo_T 4 855 2468 0 14 Dtool_VZN3fo_T 0 2 4 this 3 2559  4 size 1 2467  
1031 14 Dtool_VZN3RYTi 6 858 2469 0 14 Dtool_VZN3RYTi 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::__reduce__
//       Access: Published
//  Description: This special Python method is implement to provide
//               support for the pickle module.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  4 self 1 2469  
1032 14 Dtool_VZN3tsm9 4 859 2468 0 14 Dtool_VZN3tsm9 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  10 fill_value 1 2481  
1033 14 Dtool_VZN3E5Uz 4 860 2468 0 14 Dtool_VZN3E5Uz 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 2559  3 e00 1 2481  3 e01 1 2481  3 e02 1 2481  3 e03 1 2481  3 e10 1 2481  3 e11 1 2481  3 e12 1 2481  3 e13 1 2481  3 e20 1 2481  3 e21 1 2481  3 e22 1 2481  3 e23 1 2481  3 e30 1 2481  3 e31 1 2481  3 e32 1 2481  3 e33 1 2481  
1034 14 Dtool_VZN34JsI 4 861 2468 0 14 Dtool_VZN34JsI 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  6 upper3 1 2549  
1035 14 Dtool_VZN3cZBN 7 862 2548 2220 14 Dtool_VZN3cZBN 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2553  
1036 14 Dtool_VZN34DFT 4 863 2468 0 14 Dtool_VZN34DFT 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2559  3 row 1 2471  1 v 1 2498  
1037 14 Dtool_VZN3nD10 4 863 2468 0 14 Dtool_VZN3nD10 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2559  3 row 1 2471  1 v 1 2516  
1038 14 Dtool_VZN3dmWa 4 864 2468 0 14 Dtool_VZN3dmWa 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2559  3 col 1 2471  1 v 1 2498  
1039 14 Dtool_VZN3ImG8 4 864 2468 0 14 Dtool_VZN3ImG8 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2559  3 col 1 2471  1 v 1 2516  
1040 14 Dtool_VZN3Pxez 4 865 2468 0 14 Dtool_VZN3Pxez 31 // these versions inline better 3 4 this 3 2553  10 result_vec 1 2515  3 row 1 2471  
1041 14 Dtool_VZN3pwx8 7 865 2515 1881 14 Dtool_VZN3pwx8 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  3 row 1 2471  
1042 14 Dtool_VZN3rPFE 7 866 2515 1881 14 Dtool_VZN3rPFE 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  3 col 1 2471  
1043 14 Dtool_VZN3eTWu 4 867 2468 0 14 Dtool_VZN3eTWu 31 // these versions inline better 3 4 this 3 2553  10 result_vec 1 2497  3 row 1 2471  
1044 14 Dtool_VZN3QL2y 7 867 2497 1649 14 Dtool_VZN3QL2y 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  3 row 1 2471  
1045 14 Dtool_VZN3_pJ6 7 868 2497 1649 14 Dtool_VZN3_pJ6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  3 col 1 2471  
1046 14 Dtool_VZN3YgS1 4 869 2468 0 14 Dtool_VZN3YgS1 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2559  3 row 1 2471  3 col 1 2471  
1047 14 Dtool_VZN3gkEX 6 869 2481 0 14 Dtool_VZN3gkEX 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2553  3 row 1 2471  3 col 1 2471  
1048 14 Dtool_VZN39U2a 7 870 2560 2224 14 Dtool_VZN39U2a 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  1 i 1 2471  
1049 14 Dtool_VZN31rvr 7 870 2561 2227 14 Dtool_VZN31rvr 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  1 i 1 2471  
1050 14 Dtool_VZN3DzAp 6 871 2471 0 14 Dtool_VZN3DzAp 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1051 14 Dtool_VZN3uXM3 6 872 2472 0 14 Dtool_VZN3uXM3 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2553  
1052 14 Dtool_VZN3tb8V 6 873 2481 0 14 Dtool_VZN3tb8V 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2553  3 row 1 2471  3 col 1 2471  
1053 14 Dtool_VZN3Y2F1 4 874 2468 0 14 Dtool_VZN3Y2F1 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2559  3 row 1 2471  3 col 1 2471  5 value 1 2481  
1054 14 Dtool_VZN3tPV1 4 875 2468 0 14 Dtool_VZN3tPV1 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2553  
1055 14 Dtool_VZN3wv30 6 876 2471 0 14 Dtool_VZN3wv30 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2553  
1056 14 Dtool_VZN3jKXP 4 877 2468 0 14 Dtool_VZN3jKXP 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2559  
1057 14 Dtool_VZN3mQjW 4 877 2468 0 14 Dtool_VZN3mQjW 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2553  
1058 14 Dtool_VZN3PBFI 4 878 2468 0 14 Dtool_VZN3PBFI 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2559  
1059 14 Dtool_VZN35wtn 4 878 2468 0 14 Dtool_VZN35wtn 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2553  
1060 14 Dtool_VZN3Xz9P 6 879 2472 0 14 Dtool_VZN3Xz9P 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Ordering Operator
//       Access: Public
//  Description: This performs a lexicographical comparison.  It's of
//               questionable mathematical meaning, but sometimes has
//               a practical purpose for sorting unique vectors,
//               especially in an STL container.  Also see
//               compare_to().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  5 other 1 2553  
1061 14 Dtool_VZN3Q4WW 6 880 2472 0 14 Dtool_VZN3Q4WW 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Equality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  5 other 1 2553  
1062 14 Dtool_VZN3QPzN 6 881 2472 0 14 Dtool_VZN3QPzN 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Inequality Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  5 other 1 2553  
1063 14 Dtool_VZN3az9H 6 882 2471 0 14 Dtool_VZN3az9H 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  5 other 1 2553  
1064 14 Dtool_VZN3lGtQ 6 882 2471 0 14 Dtool_VZN3lGtQ 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 2553  5 other 1 2553  9 threshold 1 2481  
1065 14 Dtool_VZN3sbsK 6 883 2467 0 14 Dtool_VZN3sbsK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2553  
1066 14 Dtool_VZN3Aiqx 6 883 2467 0 14 Dtool_VZN3Aiqx 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  9 threshold 1 2481  
1067 14 Dtool_VZN3T_IH 6 884 2467 0 14 Dtool_VZN3T_IH 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  4 hash 1 2467  
1068 14 Dtool_VZN3dWef 6 884 2467 0 14 Dtool_VZN3dWef 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2553  4 hash 1 2467  9 threshold 1 2481  
1069 14 Dtool_VZN3O133 7 885 2515 1881 14 Dtool_VZN3O133 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  1 v 1 2516  
1070 14 Dtool_VZN3T1IX 7 886 2497 1649 14 Dtool_VZN3T1IX 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  1 v 1 2498  
1071 14 Dtool_VZN3DCVq 7 887 2497 1649 14 Dtool_VZN3DCVq 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  1 v 1 2498  
1072 14 Dtool_VZN3sqNn 7 888 2497 1649 14 Dtool_VZN3sqNn 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  1 v 1 2498  
1073 14 Dtool_VZN3U8DL 4 889 2468 0 14 Dtool_VZN3U8DL 25 // this = other1 * other2 3 4 this 3 2559  6 other1 1 2553  6 other2 1 2553  
1074 14 Dtool_VZN33TdK 7 890 2559 2299 14 Dtool_VZN33TdK 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  5 other 1 2553  
1075 14 Dtool_VZN39_TF 7 890 2559 2299 14 Dtool_VZN39_TF 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  6 scalar 1 2481  
1076 14 Dtool_VZN3NI1G 7 891 2559 2299 14 Dtool_VZN3NI1G 221 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  6 scalar 1 2481  
1077 14 Dtool_VZN38vNX 6 892 2559 0 14 Dtool_VZN38vNX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  5 other 1 2553  
1078 14 Dtool_VZN3cj0X 6 893 2559 0 14 Dtool_VZN3cj0X 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  5 other 1 2553  
1079 14 Dtool_VZN3MO5W 6 894 2559 0 14 Dtool_VZN3MO5W 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  5 other 1 2553  
1080 14 Dtool_VZN3WUUT 6 894 2559 0 14 Dtool_VZN3WUUT 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  6 scalar 1 2481  
1081 14 Dtool_VZN3m93U 6 895 2559 0 14 Dtool_VZN3m93U 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  6 scalar 1 2481  
1082 14 Dtool_VZN3oYQI 4 896 2468 0 14 Dtool_VZN3oYQI 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  5 other 1 2553  
1083 14 Dtool_VZN3ivGM 4 897 2468 0 14 Dtool_VZN3ivGM 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2559  
1084 14 Dtool_VZN3NuDN 6 898 2472 0 14 Dtool_VZN3NuDN 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  5 other 1 2553  
1085 14 Dtool_VZN3g2mD 6 899 2472 0 14 Dtool_VZN3g2mD 929 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_affine_from
//       Access: Public
//  Description: Performs an invert of the indicated matrix, storing
//               the result in this matrix.  The calculation is only
//               correct of the other matrix represents an affine
//               transform.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 2559  5 other 1 2553  
1086 14 Dtool_VZN3IOv7 6 900 2472 0 14 Dtool_VZN3IOv7 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2559  
1087 14 Dtool_VZN3AfTM 6 901 2553 0 14 Dtool_VZN3AfTM 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1088 14 Dtool_VZN3Ny16 6 902 2553 0 14 Dtool_VZN3Ny16 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1089 14 Dtool_VZN3QFPh 6 903 2553 0 14 Dtool_VZN3QFPh 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1090 14 Dtool_VZN3lK2Y 4 904 2468 0 14 Dtool_VZN3lK2Y 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  5 trans 1 2498  
1091 14 Dtool_VZN34cXj 4 905 2468 0 14 Dtool_VZN34cXj 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2559  5 angle 1 2481  4 axis 1 2498  2 cs 1 2434  
1092 14 Dtool_VZN3EDQQ 4 905 2468 0 14 Dtool_VZN3EDQQ 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2559  5 angle 1 2481  4 axis 1 2498  
1093 14 Dtool_VZN3r5fk 4 906 2468 0 14 Dtool_VZN3r5fk 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2559  5 angle 1 2481  4 axis 1 2498  2 cs 1 2434  
1094 14 Dtool_VZN3qWLK 4 906 2468 0 14 Dtool_VZN3qWLK 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2559  5 angle 1 2481  4 axis 1 2498  
1095 14 Dtool_VZN3wlwr 4 907 2468 0 14 Dtool_VZN3wlwr 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  5 scale 1 2498  
1096 14 Dtool_VZN3cZih 4 908 2468 0 14 Dtool_VZN3cZih 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2559  5 shear 1 2498  2 cs 1 2434  
1097 14 Dtool_VZN3bfMI 4 908 2468 0 14 Dtool_VZN3bfMI 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2559  5 shear 1 2498  
1098 14 Dtool_VZN3pH_g 4 909 2468 0 14 Dtool_VZN3pH_g 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 2559  5 scale 1 2498  5 shear 1 2498  2 cs 1 2434  
1099 14 Dtool_VZN36wrG 4 909 2468 0 14 Dtool_VZN36wrG 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2559  5 scale 1 2498  5 shear 1 2498  
1100 14 Dtool_VZN3SDJX 7 910 2559 2299 14 Dtool_VZN3SDJX 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 2498  
1101 14 Dtool_VZN3tfAu 7 910 2559 2299 14 Dtool_VZN3tfAu 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 2481  2 ty 1 2481  2 tz 1 2481  
1102 14 Dtool_VZN3blkA 7 911 2559 2299 14 Dtool_VZN3blkA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2481  4 axis 1 2498  2 cs 1 2434  
1103 14 Dtool_VZN3yawN 7 911 2559 2299 14 Dtool_VZN3yawN 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2481  4 axis 1 2498  
1104 14 Dtool_VZN39B_S 7 912 2559 2299 14 Dtool_VZN39B_S 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 2481  4 axis 1 2498  2 cs 1 2434  
1105 14 Dtool_VZN3YFts 7 912 2559 2299 14 Dtool_VZN3YFts 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 2481  4 axis 1 2498  
1106 14 Dtool_VZN338_F 7 913 2559 2299 14 Dtool_VZN338_F 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2498  
1107 14 Dtool_VZN3H84Q 7 913 2559 2299 14 Dtool_VZN3H84Q 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 2481  
1108 14 Dtool_VZN3XzZ0 7 913 2559 2299 14 Dtool_VZN3XzZ0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 2481  2 sy 1 2481  2 sz 1 2481  
1109 14 Dtool_VZN3fITj 7 914 2559 2299 14 Dtool_VZN3fITj 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 2498  2 cs 1 2434  
1110 14 Dtool_VZN3wpeM 7 914 2559 2299 14 Dtool_VZN3wpeM 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 2498  
1111 14 Dtool_VZN31Nbx 7 914 2559 2299 14 Dtool_VZN31Nbx 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 2481  4 shxz 1 2481  4 shyz 1 2481  2 cs 1 2434  
1112 14 Dtool_VZN3na36 7 914 2559 2299 14 Dtool_VZN3na36 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 2481  4 shxz 1 2481  4 shyz 1 2481  
1113 14 Dtool_VZN3jJJb 7 915 2559 2299 14 Dtool_VZN3jJJb 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 2498  5 shear 1 2498  2 cs 1 2434  
1114 14 Dtool_VZN3EN20 7 915 2559 2299 14 Dtool_VZN3EN20 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 2498  5 shear 1 2498  
1115 14 Dtool_VZN3fLeP 7 915 2559 2299 14 Dtool_VZN3fLeP 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 2481  2 sy 1 2481  2 sz 1 2481  4 shxy 1 2481  4 shxz 1 2481  4 shyz 1 2481  2 cs 1 2434  
1116 14 Dtool_VZN3kKNp 7 915 2559 2299 14 Dtool_VZN3kKNp 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 2481  2 sy 1 2481  2 sz 1 2481  4 shxy 1 2481  4 shxz 1 2481  4 shyz 1 2481  
1117 14 Dtool_VZN3MIyP 6 916 2553 0 14 Dtool_VZN3MIyP 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1118 14 Dtool_VZN3MGWN 6 917 2553 0 14 Dtool_VZN3MGWN 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1119 14 Dtool_VZN35OYN 6 918 2553 0 14 Dtool_VZN35OYN 362 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 2434  2 to 1 2434  
1120 14 Dtool_VZN3qIgc 6 919 2472 0 14 Dtool_VZN3qIgc 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  5 other 1 2553  
1121 14 Dtool_VZN3oOXn 6 919 2472 0 14 Dtool_VZN3oOXn 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2553  5 other 1 2553  9 threshold 1 2481  
1122 14 Dtool_VZN3dkYL 4 920 2468 0 14 Dtool_VZN3dkYL 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  3 out 1 2473  
1123 14 Dtool_VZN3XBeC 4 921 2468 0 14 Dtool_VZN3XBeC 226 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2553  3 out 1 2473  12 indent_level 1 2471  
1124 14 Dtool_VZN3XY5L 4 921 2468 0 14 Dtool_VZN3XY5L 226 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2553  3 out 1 2473  
1125 14 Dtool_VZN35Z6N 4 922 2468 0 14 Dtool_VZN35Z6N 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::python_repr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2553  3 out 1 2473  10 class_name 1 2475  
1126 14 Dtool_VZN3n3L3 7 923 2477 0 14 Dtool_VZN3n3L3 0 0 
1127 14 Dtool_VZN3ComI 4 845 2468 0 14 Dtool_VZN3ComI 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2560  1 i 1 2471  
1128 14 Dtool_VZN37tWq 6 845 2481 0 14 Dtool_VZN37tWq 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2562  1 i 1 2471  
1129 14 Dtool_VZN3stFR 4 846 2468 0 14 Dtool_VZN3stFR 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::__setitem__
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2560  1 i 1 2471  1 v 1 2481  
1130 14 Dtool_VZN3lF2k 6 847 2471 0 14 Dtool_VZN3lF2k 286 // HAVE_PYTHON
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1131 14 Dtool_VZN3j2qs 6 850 2481 0 14 Dtool_VZN3j2qs 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::operator []
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2564  1 i 1 2471  
1132 14 Dtool_VZN39cS7 6 851 2471 0 14 Dtool_VZN39cS7 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1133 14 Dtool_VZN3rtd_ 7 937 2566 2358 14 Dtool_VZN3rtd_ 719 // Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1134 14 Dtool_VZN3vDxK 7 937 2566 2358 14 Dtool_VZN3vDxK 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2513  
1135 14 Dtool_VZN3M1Wm 7 937 2566 2358 14 Dtool_VZN3M1Wm 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2466  4 copy 1 2495  
1136 14 Dtool_VZN3zNTV 7 937 2566 2358 14 Dtool_VZN3zNTV 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2466  6 param1 0 2466  6 param2 0 2466  6 param3 0 2466  
1137 14 Dtool_VZN3Qoeb 7 938 2566 2358 14 Dtool_VZN3Qoeb 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2501  
1138 14 Dtool_VZN3_F9y 7 939 2566 2358 14 Dtool_VZN3_F9y 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1139 14 Dtool_VZN3rkOj 7 940 2494 1586 14 Dtool_VZN3rkOj 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  1 v 1 2495  
1140 14 Dtool_VZN3jhO_ 7 940 2512 1820 14 Dtool_VZN3jhO_ 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  1 v 1 2513  
1141 14 Dtool_VZN3eJuF 7 941 2566 2358 14 Dtool_VZN3eJuF 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  3 rhs 1 2567  
1142 14 Dtool_VZN3XaQp 7 942 2566 2358 14 Dtool_VZN3XaQp 216 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1143 14 Dtool_VZN3I56X 7 943 2566 2358 14 Dtool_VZN3I56X 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
1144 14 Dtool_VZN3b27z 7 944 2566 2358 14 Dtool_VZN3b27z 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
1145 14 Dtool_VZN33Uhy 6 945 2466 0 14 Dtool_VZN33Uhy 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
1146 14 Dtool_VZN3mSn_ 6 946 2466 0 14 Dtool_VZN3mSn_ 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
1147 14 Dtool_VZN3j8YK 7 947 2530 2067 14 Dtool_VZN3j8YK 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  6 param0 0 2531  
1148 14 Dtool_VZN3e9Is 7 947 2541 2148 14 Dtool_VZN3e9Is 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  6 param0 0 2535  
1149 14 Dtool_VZN3U_6J 7 947 2566 2358 14 Dtool_VZN3U_6J 226 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  6 param0 0 2567  
1150 14 Dtool_VZN3ppqj 7 947 2566 2358 14 Dtool_VZN3ppqj 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  6 scalar 1 2466  
1151 14 Dtool_VZN3e9qp 7 948 2566 2358 14 Dtool_VZN3e9qp 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  6 scalar 1 2466  
1152 14 Dtool_VZN3MJVd 6 949 2566 0 14 Dtool_VZN3MJVd 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  6 param0 0 2567  
1153 14 Dtool_VZN3rHMU 6 950 2472 0 14 Dtool_VZN3rHMU 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
1154 14 Dtool_VZN3lDKH 6 950 2472 0 14 Dtool_VZN3lDKH 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2567  5 other 1 2567  9 threshold 1 2466  
1155 14 Dtool_VZN3i2zi 6 951 2472 0 14 Dtool_VZN3i2zi 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  5 other 1 2567  
1156 14 Dtool_VZN3gEa5 6 952 2472 0 14 Dtool_VZN3gEa5 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2567  5 other 1 2567  9 threshold 1 2466  
1157 14 Dtool_VZN3clzP 4 953 2468 0 14 Dtool_VZN3clzP 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  6 param0 0 2473  
1158 14 Dtool_VZN3QnH2 4 954 2468 0 14 Dtool_VZN3QnH2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  1 m 1 2530  
1159 14 Dtool_VZN3IWR2 4 954 2468 0 14 Dtool_VZN3IWR2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  1 m 1 2541  
1160 14 Dtool_VZN3adwD 4 955 2468 0 14 Dtool_VZN3adwD 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  1 m 1 2531  
1161 14 Dtool_VZN31eQH 4 955 2468 0 14 Dtool_VZN31eQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  1 m 1 2535  
1162 14 Dtool_VZN3Rc8G 4 956 2468 0 14 Dtool_VZN3Rc8G 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 2566  3 hpr 1 2495  2 cs 1 2434  
1163 14 Dtool_VZN3ghkq 4 956 2468 0 14 Dtool_VZN3ghkq 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  3 hpr 1 2495  
1164 14 Dtool_VZN3WRZg 7 957 2494 1586 14 Dtool_VZN3WRZg 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  2 cs 1 2434  
1165 14 Dtool_VZN3O1A0 7 957 2494 1586 14 Dtool_VZN3O1A0 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1166 14 Dtool_VZN3YcKh 7 958 2500 1735 14 Dtool_VZN3YcKh 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1167 14 Dtool_VZN3NIeK 7 959 2500 1735 14 Dtool_VZN3NIeK 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1168 14 Dtool_VZN3ZTUN 6 960 2466 0 14 Dtool_VZN3ZTUN 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1169 14 Dtool_VZN3eAIg 6 961 2466 0 14 Dtool_VZN3eAIg 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1170 14 Dtool_VZN3yPe0 4 962 2468 0 14 Dtool_VZN3yPe0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2566  9 angle_rad 1 2466  4 axis 1 2501  
1171 14 Dtool_VZN3Ykah 4 963 2468 0 14 Dtool_VZN3Ykah 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2566  9 angle_deg 1 2466  4 axis 1 2501  
1172 14 Dtool_VZN33KoZ 7 964 2500 1735 14 Dtool_VZN33KoZ 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  2 cs 1 2434  
1173 14 Dtool_VZN3rwSS 7 964 2500 1735 14 Dtool_VZN3rwSS 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1174 14 Dtool_VZN3Mxzz 7 965 2500 1735 14 Dtool_VZN3Mxzz 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  2 cs 1 2434  
1175 14 Dtool_VZN386me 7 965 2500 1735 14 Dtool_VZN386me 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1176 14 Dtool_VZN36X_p 7 966 2500 1735 14 Dtool_VZN36X_p 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  2 cs 1 2434  
1177 14 Dtool_VZN3IjTb 7 966 2500 1735 14 Dtool_VZN3IjTb 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1178 14 Dtool_VZN3k8aD 6 967 2466 0 14 Dtool_VZN3k8aD 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1179 14 Dtool_VZN3jxaE 6 968 2466 0 14 Dtool_VZN3jxaE 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1180 14 Dtool_VZN31yaL 6 969 2466 0 14 Dtool_VZN31yaL 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1181 14 Dtool_VZN3H0aS 6 970 2466 0 14 Dtool_VZN3H0aS 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1182 14 Dtool_VZN33PLX 4 971 2468 0 14 Dtool_VZN33PLX 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  1 r 1 2466  
1183 14 Dtool_VZN304KY 4 972 2468 0 14 Dtool_VZN304KY 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  1 i 1 2466  
1184 14 Dtool_VZN3m5Kf 4 973 2468 0 14 Dtool_VZN3m5Kf 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  1 j 1 2466  
1185 14 Dtool_VZN3YGLm 4 974 2468 0 14 Dtool_VZN3YGLm 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  1 k 1 2466  
1186 14 Dtool_VZN3aBWQ 6 975 2472 0 14 Dtool_VZN3aBWQ 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2566  
1187 14 Dtool_VZN3MknV 6 976 2472 0 14 Dtool_VZN3MknV 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 other 1 2567  
1188 14 Dtool_VZN3Dgwh 6 977 2472 0 14 Dtool_VZN3Dgwh 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2566  
1189 14 Dtool_VZN3ed84 6 978 2472 0 14 Dtool_VZN3ed84 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2566  5 other 1 2567  
1190 14 Dtool_VZN3vLqt 6 979 2472 0 14 Dtool_VZN3vLqt 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2566  
1191 14 Dtool_VZN3Jkak 6 980 2472 0 14 Dtool_VZN3Jkak 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2567  
1192 14 Dtool_VZN34P4N 6 981 2472 0 14 Dtool_VZN34P4N 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2567  9 tolerance 1 2466  
1193 14 Dtool_VZN3mmMR 6 982 2567 0 14 Dtool_VZN3mmMR 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1194 14 Dtool_VZN3ndKd 7 983 2477 0 14 Dtool_VZN3ndKd 0 0 
1195 14 Dtool_VZN3rOX4 7 986 2569 2406 14 Dtool_VZN3rOX4 719 // Filename: lquaternion_src.I
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1196 14 Dtool_VZN3wmdo 7 986 2569 2406 14 Dtool_VZN3wmdo 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2516  
1197 14 Dtool_VZN3BaVV 7 986 2569 2406 14 Dtool_VZN3BaVV 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2481  4 copy 1 2498  
1198 14 Dtool_VZN36Z6w 7 986 2569 2406 14 Dtool_VZN36Z6w 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2481  6 param1 0 2481  6 param2 0 2481  6 param3 0 2481  
1199 14 Dtool_VZN3OPmP 7 987 2569 2406 14 Dtool_VZN3OPmP 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2504  
1200 14 Dtool_VZN3_hFu 7 988 2569 2406 14 Dtool_VZN3_hFu 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1201 14 Dtool_VZN3PTTe 7 989 2497 1649 14 Dtool_VZN3PTTe 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  1 v 1 2498  
1202 14 Dtool_VZN3HWT6 7 989 2515 1881 14 Dtool_VZN3HWT6 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  1 v 1 2516  
1203 14 Dtool_VZN3GGsA 7 990 2569 2406 14 Dtool_VZN3GGsA 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  3 rhs 1 2570  
1204 14 Dtool_VZN3X_Xk 7 991 2569 2406 14 Dtool_VZN3X_Xk 216 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::unary -
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1205 14 Dtool_VZN3PV02 7 992 2569 2406 14 Dtool_VZN3PV02 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion + quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
1206 14 Dtool_VZN3Za1S 7 993 2569 2406 14 Dtool_VZN3Za1S 232 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion - quaternion
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
1207 14 Dtool_VZN33sxo 6 994 2481 0 14 Dtool_VZN33sxo 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
1208 14 Dtool_VZN3mq30 6 995 2481 0 14 Dtool_VZN3mq30 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
1209 14 Dtool_VZN3BNgV 7 996 2548 2220 14 Dtool_VZN3BNgV 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  6 param0 0 2549  
1210 14 Dtool_VZN38NQ3 7 996 2559 2299 14 Dtool_VZN38NQ3 249 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description: Quat * Matrix = matrix
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  6 param0 0 2553  
1211 14 Dtool_VZN3rQ0o 7 996 2569 2406 14 Dtool_VZN3rQ0o 226 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  6 param0 0 2570  
1212 14 Dtool_VZN3A0TI 7 996 2569 2406 14 Dtool_VZN3A0TI 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  6 scalar 1 2481  
1213 14 Dtool_VZN3PASO 7 997 2569 2406 14 Dtool_VZN3PASO 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::quaternion / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  6 scalar 1 2481  
1214 14 Dtool_VZN36vdR 6 998 2569 0 14 Dtool_VZN36vdR 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  6 param0 0 2570  
1215 14 Dtool_VZN3sATv 6 999 2472 0 14 Dtool_VZN3sATv 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
1216 14 Dtool_VZN3KRVo 6 999 2472 0 14 Dtool_VZN3KRVo 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2570  5 other 1 2570  9 threshold 1 2481  
1217 14 Dtool_VZN3Zg5d 6 1000 2472 0 14 Dtool_VZN3Zg5d 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  5 other 1 2570  
1218 14 Dtool_VZN3UNTJ 6 1001 2472 0 14 Dtool_VZN3UNTJ 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2570  5 other 1 2570  9 threshold 1 2481  
1219 14 Dtool_VZN3cZ7K 4 1002 2468 0 14 Dtool_VZN3cZ7K 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  6 param0 0 2473  
1220 14 Dtool_VZN3QLcn 4 1003 2468 0 14 Dtool_VZN3QLcn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  1 m 1 2548  
1221 14 Dtool_VZN3I6nn 4 1003 2468 0 14 Dtool_VZN3I6nn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  1 m 1 2559  
1222 14 Dtool_VZN3ea4e 4 1004 2468 0 14 Dtool_VZN3ea4e 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  1 m 1 2549  
1223 14 Dtool_VZN35bYi 4 1004 2468 0 14 Dtool_VZN35bYi 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  1 m 1 2553  
1224 14 Dtool_VZN3X48z 4 1005 2468 0 14 Dtool_VZN3X48z 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 2569  3 hpr 1 2498  2 cs 1 2434  
1225 14 Dtool_VZN3hFnX 4 1005 2468 0 14 Dtool_VZN3hFnX 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  3 hpr 1 2498  
1226 14 Dtool_VZN3W1gb 7 1006 2497 1649 14 Dtool_VZN3W1gb 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  2 cs 1 2434  
1227 14 Dtool_VZN3ORIv 7 1006 2497 1649 14 Dtool_VZN3ORIv 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1228 14 Dtool_VZN3Y4Rc 7 1007 2503 1767 14 Dtool_VZN3Y4Rc 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1229 14 Dtool_VZN3NkmF 7 1008 2503 1767 14 Dtool_VZN3NkmF 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1230 14 Dtool_VZN3Z_bI 6 1009 2481 0 14 Dtool_VZN3Z_bI 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1231 14 Dtool_VZN3e8Rb 6 1010 2481 0 14 Dtool_VZN3e8Rb 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1232 14 Dtool_VZN3Z91x 4 1011 2468 0 14 Dtool_VZN3Z91x 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2569  9 angle_rad 1 2481  4 axis 1 2504  
1233 14 Dtool_VZN3VKOA 4 1012 2468 0 14 Dtool_VZN3VKOA 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2569  9 angle_deg 1 2481  4 axis 1 2504  
1234 14 Dtool_VZN33uwU 7 1013 2503 1767 14 Dtool_VZN33uwU 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  2 cs 1 2434  
1235 14 Dtool_VZN3rsaN 7 1013 2503 1767 14 Dtool_VZN3rsaN 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1236 14 Dtool_VZN3Mt7u 7 1014 2503 1767 14 Dtool_VZN3Mt7u 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  2 cs 1 2434  
1237 14 Dtool_VZN38etZ 7 1014 2503 1767 14 Dtool_VZN38etZ 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1238 14 Dtool_VZN36zHl 7 1015 2503 1767 14 Dtool_VZN36zHl 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  2 cs 1 2434  
1239 14 Dtool_VZN3IPaW 7 1015 2503 1767 14 Dtool_VZN3IPaW 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1240 14 Dtool_VZN3lYi_ 6 1016 2481 0 14 Dtool_VZN3lYi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1241 14 Dtool_VZN3kVi_ 6 1017 2481 0 14 Dtool_VZN3kVi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1242 14 Dtool_VZN31WiG 6 1018 2481 0 14 Dtool_VZN31WiG 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1243 14 Dtool_VZN3HQiN 6 1019 2481 0 14 Dtool_VZN3HQiN 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1244 14 Dtool_VZN32srU 4 1020 2468 0 14 Dtool_VZN32srU 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  1 r 1 2481  
1245 14 Dtool_VZN33hrV 4 1021 2468 0 14 Dtool_VZN33hrV 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  1 i 1 2481  
1246 14 Dtool_VZN35irc 4 1022 2468 0 14 Dtool_VZN35irc 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  1 j 1 2481  
1247 14 Dtool_VZN3Ljrj 4 1023 2468 0 14 Dtool_VZN3Ljrj 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  1 k 1 2481  
1248 14 Dtool_VZN3aleL 6 1024 2472 0 14 Dtool_VZN3aleL 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2569  
1249 14 Dtool_VZN3Mw_G 6 1025 2472 0 14 Dtool_VZN3Mw_G 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 other 1 2570  
1250 14 Dtool_VZN3DM3c 6 1026 2472 0 14 Dtool_VZN3DM3c 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2569  
1251 14 Dtool_VZN3IgEt 6 1027 2472 0 14 Dtool_VZN3IgEt 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2569  5 other 1 2570  
1252 14 Dtool_VZN3v3zo 6 1028 2472 0 14 Dtool_VZN3v3zo 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2569  
1253 14 Dtool_VZN3JIif 6 1029 2472 0 14 Dtool_VZN3JIif 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2570  
1254 14 Dtool_VZN3Z4KV 6 1030 2472 0 14 Dtool_VZN3Z4KV 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2570  9 tolerance 1 2481  
1255 14 Dtool_VZN3maTM 6 1031 2570 0 14 Dtool_VZN3maTM 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1256 14 Dtool_VZN3nxRY 7 1032 2477 0 14 Dtool_VZN3nxRY 0 0 
1257 14 Dtool_VZN31ufs 7 1035 2572 2411 14 Dtool_VZN31ufs 724 // Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1258 14 Dtool_VZN3oHWm 7 1035 2572 2411 14 Dtool_VZN3oHWm 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2531  
1259 14 Dtool_VZN3oMkn 7 1035 2572 2411 14 Dtool_VZN3oMkn 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2535  
1260 14 Dtool_VZN3dC6k 7 1035 2572 2411 14 Dtool_VZN3dC6k 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2567  
1261 14 Dtool_VZN3ZE8x 7 1035 2572 2411 14 Dtool_VZN3ZE8x 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2513  
1262 14 Dtool_VZN3zssT 7 1035 2572 2411 14 Dtool_VZN3zssT 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2501  6 param1 0 2466  
1263 14 Dtool_VZN3LwNm 7 1035 2572 2411 14 Dtool_VZN3LwNm 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 2466  6 param1 0 2466  6 param2 0 2466  
1264 14 Dtool_VZN36t_a 7 1035 2572 2411 14 Dtool_VZN36t_a 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2466  6 param1 0 2466  6 param2 0 2466  6 param3 0 2466  
1265 14 Dtool_VZN3cT59 7 1036 2566 2358 14 Dtool_VZN3cT59 377 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2567  
1266 14 Dtool_VZN3ttc8 7 1036 2572 2411 14 Dtool_VZN3ttc8 248 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  5 other 1 2573  
1267 14 Dtool_VZN3mMpJ 7 1036 2572 2411 14 Dtool_VZN3mMpJ 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  6 scalar 1 2466  
1268 14 Dtool_VZN3mkd6 7 1037 2572 2411 14 Dtool_VZN3mkd6 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2573  6 scalar 1 2466  
1269 14 Dtool_VZN3scCI 7 1038 2477 0 14 Dtool_VZN3scCI 0 0 
1270 14 Dtool_VZN3XT9o 7 1041 2575 2416 14 Dtool_VZN3XT9o 724 // Filename: lrotation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1271 14 Dtool_VZN31jtU 7 1041 2575 2416 14 Dtool_VZN31jtU 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2549  
1272 14 Dtool_VZN31o7V 7 1041 2575 2416 14 Dtool_VZN31o7V 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2553  
1273 14 Dtool_VZN371Oh 7 1041 2575 2416 14 Dtool_VZN371Oh 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2570  
1274 14 Dtool_VZN3bq7q 7 1041 2575 2416 14 Dtool_VZN3bq7q 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2516  
1275 14 Dtool_VZN3Ldpy 7 1041 2575 2416 14 Dtool_VZN3Ldpy 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2504  6 param1 0 2481  
1276 14 Dtool_VZN34Iug 7 1041 2575 2416 14 Dtool_VZN34Iug 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 2481  6 param1 0 2481  6 param2 0 2481  
1277 14 Dtool_VZN3A9cz 7 1041 2575 2416 14 Dtool_VZN3A9cz 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2481  6 param1 0 2481  6 param2 0 2481  6 param3 0 2481  
1278 14 Dtool_VZN3ukuN 7 1042 2569 2406 14 Dtool_VZN3ukuN 377 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Orientation = Orientation
//               This is another meaningless operation, attempting
//               to apply an orientation to a rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2570  
1279 14 Dtool_VZN31Z8I 7 1042 2575 2416 14 Dtool_VZN31Z8I 248 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::operator *
//       Access: public
//  Description: Rotation * Rotation = Rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  5 other 1 2576  
1280 14 Dtool_VZN3y_rc 7 1042 2575 2416 14 Dtool_VZN3y_rc 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation * scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  6 scalar 1 2481  
1281 14 Dtool_VZN3zWgN 7 1043 2575 2416 14 Dtool_VZN3zWgN 224 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::rotation / scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2576  6 scalar 1 2481  
1282 14 Dtool_VZN3KPCY 7 1044 2477 0 14 Dtool_VZN3KPCY 0 0 
1283 14 Dtool_VZN3cX4n 7 1047 2578 2420 14 Dtool_VZN3cX4n 730 // Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1284 14 Dtool_VZN3kodg 7 1047 2578 2420 14 Dtool_VZN3kodg 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2531  
1285 14 Dtool_VZN3loku 7 1047 2578 2420 14 Dtool_VZN3loku 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2535  
1286 14 Dtool_VZN3_eNF 7 1047 2578 2420 14 Dtool_VZN3_eNF 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2567  
1287 14 Dtool_VZN3Os13 7 1047 2578 2420 14 Dtool_VZN3Os13 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2501  6 param1 0 2466  
1288 14 Dtool_VZN3WFbK 7 1047 2578 2420 14 Dtool_VZN3WFbK 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2466  6 param1 0 2466  6 param2 0 2466  6 param3 0 2466  
1289 14 Dtool_VZN31nPz 7 1048 2578 2420 14 Dtool_VZN31nPz 352 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  5 other 1 2567  
1290 14 Dtool_VZN3yr_X 7 1048 2578 2420 14 Dtool_VZN3yr_X 312 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2579  5 other 1 2573  
1291 14 Dtool_VZN3yKEa 7 1049 2477 0 14 Dtool_VZN3yKEa 0 0 
1292 14 Dtool_VZN32Y6p 7 1052 2581 2424 14 Dtool_VZN32Y6p 730 // Filename: lorientation_src.I
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1293 14 Dtool_VZN3Yrfb 7 1052 2581 2424 14 Dtool_VZN3Yrfb 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2549  
1294 14 Dtool_VZN3Zrmp 7 1052 2581 2424 14 Dtool_VZN3Zrmp 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2553  
1295 14 Dtool_VZN3RFe9 7 1052 2581 2424 14 Dtool_VZN3RFe9 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 2570  
1296 14 Dtool_VZN3yi3y 7 1052 2581 2424 14 Dtool_VZN3yi3y 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 2504  6 param1 0 2466  
1297 14 Dtool_VZN3QOxM 7 1052 2581 2424 14 Dtool_VZN3QOxM 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 2481  6 param1 0 2481  6 param2 0 2481  6 param3 0 2481  
1298 14 Dtool_VZN3lgBQ 7 1053 2581 2424 14 Dtool_VZN3lgBQ 352 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * Orientation
//               This is a meaningless operation, and will always
//               simply return the rhs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  5 other 1 2570  
1299 14 Dtool_VZN39P52 7 1053 2581 2424 14 Dtool_VZN39P52 312 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::operator *
//       Access: public
//  Description: Orientation * rotation = Orientation
//               Applies a rotation to an orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2582  5 other 1 2576  
1300 14 Dtool_VZN3xK29 7 1054 2477 0 14 Dtool_VZN3xK29 0 0 
1301 14 Dtool_VZN3aTo4 6 3 2481 0 14 Dtool_VZN3aTo4 0 1 1 f 1 2481  
1302 14 Dtool_VZN3RKCI 6 3 2466 0 14 Dtool_VZN3RKCI 0 1 1 f 1 2466  
1303 14 Dtool_VZN3gpRs 6 4 2481 0 14 Dtool_VZN3gpRs 0 1 1 f 1 2481  
1304 14 Dtool_VZN3Ibq7 6 4 2466 0 14 Dtool_VZN3Ibq7 0 1 1 f 1 2466  
1305 14 Dtool_VZN3t1jy 6 306 2434 0 14 Dtool_VZN3t1jy 0 0 
1306 14 Dtool_VZN3p_eQ 7 684 2548 2220 14 Dtool_VZN3p_eQ 0 1 1 a 1 2549  
1307 14 Dtool_VZN3N4ee 7 684 2530 2067 14 Dtool_VZN3N4ee 0 1 1 a 1 2531  
1308 14 Dtool_VZN3n_ss 7 684 2559 2299 14 Dtool_VZN3n_ss 0 1 1 a 1 2553  
1309 14 Dtool_VZN3L4s6 7 684 2541 2148 14 Dtool_VZN3L4s6 0 1 1 a 1 2535  
1310 14 Dtool_VZN39Gem 7 685 2548 2220 14 Dtool_VZN39Gem 0 1 1 a 1 2549  
1311 14 Dtool_VZN3Ngym 7 685 2530 2067 14 Dtool_VZN3Ngym 0 1 1 a 1 2531  
1312 14 Dtool_VZN3YJfW 7 685 2559 2299 14 Dtool_VZN3YJfW 0 1 1 a 1 2553  
1313 14 Dtool_VZN3orzW 7 685 2541 2148 14 Dtool_VZN3orzW 0 1 1 a 1 2535  
1314 14 Dtool_VZN3G8wm 7 685 2569 2406 14 Dtool_VZN3G8wm 0 1 1 a 1 2570  
1315 14 Dtool_VZN3qBx0 7 685 2566 2358 14 Dtool_VZN3qBx0 0 1 1 a 1 2567  
1316 14 Dtool_VZN3DzjX 7 925 2548 2220 14 Dtool_VZN3DzjX 0 2 1 m 1 2549  1 q 1 2570  
1317 14 Dtool_VZN3kolH 7 925 2530 2067 14 Dtool_VZN3kolH 0 2 1 m 1 2531  1 q 1 2567  
1318 14 Dtool_VZN3Rsje 7 925 2559 2299 14 Dtool_VZN3Rsje 0 2 1 m 1 2553  1 q 1 2570  
1319 14 Dtool_VZN3qplO 7 925 2541 2148 14 Dtool_VZN3qplO 0 2 1 m 1 2535  1 q 1 2567  
1320 14 Dtool_VZN3yfKI 7 925 2491 1576 14 Dtool_VZN3yfKI 0 2 1 v 1 2492  1 m 1 2549  
1321 14 Dtool_VZN3SCRW 7 925 2488 1562 14 Dtool_VZN3SCRW 0 2 1 v 1 2489  1 m 1 2531  
1322 14 Dtool_VZN3mWZA 7 925 2509 1809 14 Dtool_VZN3mWZA 0 2 1 v 1 2510  1 m 1 2553  
1323 14 Dtool_VZN3eNeO 7 925 2506 1788 14 Dtool_VZN3eNeO 0 2 1 v 1 2507  1 m 1 2535  
1324 14 Dtool_VZN36f4W 7 925 2497 1649 14 Dtool_VZN36f4W 0 2 1 v 1 2498  1 m 1 2549  
1325 14 Dtool_VZN3ZSml 7 925 2494 1586 14 Dtool_VZN3ZSml 0 2 1 v 1 2495  1 m 1 2531  
1326 14 Dtool_VZN3HpH4 7 925 2515 1881 14 Dtool_VZN3HpH4 0 2 1 v 1 2516  1 m 1 2553  
1327 14 Dtool_VZN3lt1G 7 925 2512 1820 14 Dtool_VZN3lt1G 0 2 1 v 1 2513  1 m 1 2535  
1328 14 Dtool_VZN3QlWf 7 925 2485 1548 14 Dtool_VZN3QlWf 0 2 1 v 1 2486  1 m 1 2549  
1329 14 Dtool_VZN3fZ0h 7 925 2482 1532 14 Dtool_VZN3fZ0h 0 2 1 v 1 2483  1 m 1 2531  
1330 14 Dtool_VZN3wbZm 7 925 2503 1767 14 Dtool_VZN3wbZm 0 2 1 v 1 2504  1 m 1 2553  
1331 14 Dtool_VZN37_2o 7 925 2500 1735 14 Dtool_VZN37_2o 0 2 1 v 1 2501  1 m 1 2535  
1332 14 Dtool_VZN3J63D 4 926 2468 0 14 Dtool_VZN3J63D 0 2 4 dest 1 2584  5 value 1 2549  
1333 14 Dtool_VZN3Qo4D 4 926 2468 0 14 Dtool_VZN3Qo4D 0 2 4 dest 1 2584  5 value 1 2531  
1334 14 Dtool_VZN3b53K 4 926 2468 0 14 Dtool_VZN3b53K 0 2 4 dest 1 2584  5 value 1 2553  
1335 14 Dtool_VZN3Cr4K 4 926 2468 0 14 Dtool_VZN3Cr4K 0 2 4 dest 1 2584  5 value 1 2535  
1336 14 Dtool_VZN3G74L 4 927 2468 0 14 Dtool_VZN3G74L 0 2 6 result 1 2548  6 source 1 2586  
1337 14 Dtool_VZN3GpUO 4 927 2468 0 14 Dtool_VZN3GpUO 0 2 6 result 1 2530  6 source 1 2586  
1338 14 Dtool_VZN30f6L 4 927 2468 0 14 Dtool_VZN30f6L 0 2 6 result 1 2559  6 source 1 2586  
1339 14 Dtool_VZN30NWO 4 927 2468 0 14 Dtool_VZN30NWO 0 2 6 result 1 2541  6 source 1 2586  
1340 14 Dtool_VZN3yVzC 4 928 2468 0 14 Dtool_VZN3yVzC 0 4 3 mat 1 2548  5 scale 1 2498  3 hpr 1 2498  2 cs 1 2434  
1341 14 Dtool_VZN3hQb3 4 928 2468 0 14 Dtool_VZN3hQb3 0 3 3 mat 1 2548  5 scale 1 2498  3 hpr 1 2498  
1342 14 Dtool_VZN33KHb 4 928 2468 0 14 Dtool_VZN33KHb 0 5 3 mat 1 2548  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  2 cs 1 2434  
1343 14 Dtool_VZN3RK2_ 4 928 2468 0 14 Dtool_VZN3RK2_ 0 4 3 mat 1 2548  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  
1344 14 Dtool_VZN34aBn 4 928 2468 0 14 Dtool_VZN34aBn 0 4 3 mat 1 2530  5 scale 1 2495  3 hpr 1 2495  2 cs 1 2434  
1345 14 Dtool_VZN36xpb 4 928 2468 0 14 Dtool_VZN36xpb 0 3 3 mat 1 2530  5 scale 1 2495  3 hpr 1 2495  
1346 14 Dtool_VZN3s_WG 4 928 2468 0 14 Dtool_VZN3s_WG 0 5 3 mat 1 2530  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  2 cs 1 2434  
1347 14 Dtool_VZN3k7Er 4 928 2468 0 14 Dtool_VZN3k7Er 0 4 3 mat 1 2530  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  
1348 14 Dtool_VZN38KjT 4 928 2468 0 14 Dtool_VZN38KjT 0 5 3 mat 1 2559  5 scale 1 2498  3 hpr 1 2498  9 translate 1 2498  2 cs 1 2434  
1349 14 Dtool_VZN3UKS4 4 928 2468 0 14 Dtool_VZN3UKS4 0 4 3 mat 1 2559  5 scale 1 2498  3 hpr 1 2498  9 translate 1 2498  
1350 14 Dtool_VZN3oQjw 4 928 2468 0 14 Dtool_VZN3oQjw 0 6 3 mat 1 2559  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  9 translate 1 2498  2 cs 1 2434  
1351 14 Dtool_VZN39vLl 4 928 2468 0 14 Dtool_VZN39vLl 0 5 3 mat 1 2559  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  9 translate 1 2498  
1352 14 Dtool_VZN3Q_y_ 4 928 2468 0 14 Dtool_VZN3Q_y_ 0 5 3 mat 1 2541  5 scale 1 2495  3 hpr 1 2495  9 translate 1 2495  2 cs 1 2434  
1353 14 Dtool_VZN377gj 4 928 2468 0 14 Dtool_VZN377gj 0 4 3 mat 1 2541  5 scale 1 2495  3 hpr 1 2495  9 translate 1 2495  
1354 14 Dtool_VZN31X_c 4 928 2468 0 14 Dtool_VZN31X_c 0 6 3 mat 1 2541  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  9 translate 1 2495  2 cs 1 2434  
1355 14 Dtool_VZN3CknR 4 928 2468 0 14 Dtool_VZN3CknR 0 5 3 mat 1 2541  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  9 translate 1 2495  
1356 14 Dtool_VZN3rGAD 6 929 2472 0 14 Dtool_VZN3rGAD 0 4 3 mat 1 2549  5 scale 1 2497  3 hpr 1 2497  2 cs 1 2434  
1357 14 Dtool_VZN3VxX2 6 929 2472 0 14 Dtool_VZN3VxX2 0 3 3 mat 1 2549  5 scale 1 2497  3 hpr 1 2497  
1358 14 Dtool_VZN3wk1_ 6 929 2472 0 14 Dtool_VZN3wk1_ 0 5 3 mat 1 2549  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  2 cs 1 2434  
1359 14 Dtool_VZN3syts 6 929 2472 0 14 Dtool_VZN3syts 0 4 3 mat 1 2549  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  
1360 14 Dtool_VZN3KI_s 6 929 2472 0 14 Dtool_VZN3KI_s 0 4 3 mat 1 2531  5 scale 1 2494  3 hpr 1 2494  2 cs 1 2434  
1361 14 Dtool_VZN3zJVg 6 929 2472 0 14 Dtool_VZN3zJVg 0 3 3 mat 1 2531  5 scale 1 2494  3 hpr 1 2494  
1362 14 Dtool_VZN3b5Pi 6 929 2472 0 14 Dtool_VZN3b5Pi 0 5 3 mat 1 2531  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  2 cs 1 2434  
1363 14 Dtool_VZN3FoHP 6 929 2472 0 14 Dtool_VZN3FoHP 0 4 3 mat 1 2531  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  
1364 14 Dtool_VZN37y0_ 6 929 2472 0 14 Dtool_VZN37y0_ 0 5 3 mat 1 2553  5 scale 1 2497  3 hpr 1 2497  9 translate 1 2497  2 cs 1 2434  
1365 14 Dtool_VZN31gus 6 929 2472 0 14 Dtool_VZN31gus 0 4 3 mat 1 2553  5 scale 1 2497  3 hpr 1 2497  9 translate 1 2497  
1366 14 Dtool_VZN3Fy__ 6 929 2472 0 14 Dtool_VZN3Fy__ 0 6 3 mat 1 2553  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  9 translate 1 2497  2 cs 1 2434  
1367 14 Dtool_VZN3ioSK 6 929 2472 0 14 Dtool_VZN3ioSK 0 5 3 mat 1 2553  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  9 translate 1 2497  
1368 14 Dtool_VZN3QLRi 6 929 2472 0 14 Dtool_VZN3QLRi 0 5 3 mat 1 2535  5 scale 1 2494  3 hpr 1 2494  9 translate 1 2494  2 cs 1 2434  
1369 14 Dtool_VZN3cmIP 6 929 2472 0 14 Dtool_VZN3cmIP 0 4 3 mat 1 2535  5 scale 1 2494  3 hpr 1 2494  9 translate 1 2494  
1370 14 Dtool_VZN3t1gv 6 929 2472 0 14 Dtool_VZN3t1gv 0 6 3 mat 1 2535  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  9 translate 1 2494  2 cs 1 2434  
1371 14 Dtool_VZN3Jlz6 6 929 2472 0 14 Dtool_VZN3Jlz6 0 5 3 mat 1 2535  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  9 translate 1 2494  
1372 14 Dtool_VZN35kiD 4 930 2468 0 14 Dtool_VZN35kiD 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2548  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  2 cs 1 2434  
1373 14 Dtool_VZN3TMeM 4 930 2468 0 14 Dtool_VZN3TMeM 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2548  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  
1374 14 Dtool_VZN3URso 4 930 2468 0 14 Dtool_VZN3URso 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2530  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  2 cs 1 2434  
1375 14 Dtool_VZN3_Rpx 4 930 2468 0 14 Dtool_VZN3_Rpx 764 // Filename: compose_matrix_src.cxx
// Created by:  drose (27Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_old_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2530  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  
1376 14 Dtool_VZN3aU0J 4 930 2468 0 14 Dtool_VZN3aU0J 0 6 3 mat 1 2559  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  9 translate 1 2498  2 cs 1 2434  
1377 14 Dtool_VZN3_LGV 4 930 2468 0 14 Dtool_VZN3_LGV 0 5 3 mat 1 2559  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  9 translate 1 2498  
1378 14 Dtool_VZN3Xr_e 4 930 2468 0 14 Dtool_VZN3Xr_e 0 6 3 mat 1 2541  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  9 translate 1 2495  2 cs 1 2434  
1379 14 Dtool_VZN3gMRq 4 930 2468 0 14 Dtool_VZN3gMRq 0 5 3 mat 1 2541  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  9 translate 1 2495  
1380 14 Dtool_VZN3tC1N 6 931 2472 0 14 Dtool_VZN3tC1N 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2549  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  2 cs 1 2434  
1381 14 Dtool_VZN3z5DH 6 931 2472 0 14 Dtool_VZN3z5DH 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2549  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  
1382 14 Dtool_VZN3POdX 6 931 2472 0 14 Dtool_VZN3POdX 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2531  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  2 cs 1 2434  
1383 14 Dtool_VZN3RWrQ 6 931 2472 0 14 Dtool_VZN3RWrQ 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_old_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2531  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  
1384 14 Dtool_VZN3vhAZ 6 931 2472 0 14 Dtool_VZN3vhAZ 0 6 3 mat 1 2553  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  9 translate 1 2497  2 cs 1 2434  
1385 14 Dtool_VZN3PJWn 6 931 2472 0 14 Dtool_VZN3PJWn 0 5 3 mat 1 2553  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  9 translate 1 2497  
1386 14 Dtool_VZN3ST9i 6 931 2472 0 14 Dtool_VZN3ST9i 0 6 3 mat 1 2535  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  9 translate 1 2494  2 cs 1 2434  
1387 14 Dtool_VZN395Tx 6 931 2472 0 14 Dtool_VZN395Tx 0 5 3 mat 1 2535  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  9 translate 1 2494  
1388 14 Dtool_VZN32yX5 4 932 2468 0 14 Dtool_VZN32yX5 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2548  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  2 cs 1 2434  
1389 14 Dtool_VZN3ZHTC 4 932 2468 0 14 Dtool_VZN3ZHTC 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2548  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  
1390 14 Dtool_VZN3SFhe 4 932 2468 0 14 Dtool_VZN3SFhe 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2530  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  2 cs 1 2434  
1391 14 Dtool_VZN31Zen 4 932 2468 0 14 Dtool_VZN31Zen 268 ////////////////////////////////////////////////////////////////////
//     Function: compose_matrix_new_hpr
//  Description: Computes the 3x3 matrix from scale, shear, and
//               rotation.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2530  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  
1392 14 Dtool_VZN3XOp_ 4 932 2468 0 14 Dtool_VZN3XOp_ 0 6 3 mat 1 2559  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  9 translate 1 2498  2 cs 1 2434  
1393 14 Dtool_VZN3IA7K 4 932 2468 0 14 Dtool_VZN3IA7K 0 5 3 mat 1 2559  5 scale 1 2498  5 shear 1 2498  3 hpr 1 2498  9 translate 1 2498  
1394 14 Dtool_VZN3R3yU 4 932 2468 0 14 Dtool_VZN3R3yU 0 6 3 mat 1 2541  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  9 translate 1 2495  2 cs 1 2434  
1395 14 Dtool_VZN3KHGg 4 932 2468 0 14 Dtool_VZN3KHGg 0 5 3 mat 1 2541  5 scale 1 2495  5 shear 1 2495  3 hpr 1 2495  9 translate 1 2495  
1396 14 Dtool_VZN30nyg 6 933 2472 0 14 Dtool_VZN30nyg 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2549  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  2 cs 1 2434  
1397 14 Dtool_VZN3WfBa 6 933 2472 0 14 Dtool_VZN3WfBa 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2549  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  
1398 14 Dtool_VZN3Suaq 6 933 2472 0 14 Dtool_VZN3Suaq 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 5 3 mat 1 2531  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  2 cs 1 2434  
1399 14 Dtool_VZN37noj 6 933 2472 0 14 Dtool_VZN37noj 524 ////////////////////////////////////////////////////////////////////
//     Function: decompose_matrix_new_hpr
//  Description: Extracts out the components of a 3x3 rotation matrix.
//               Returns true if successful, or false if there was an
//               error.  Since a 3x3 matrix always contains an affine
//               transform, this should succeed in the normal case;
//               singular transforms are not treated as an error.
//////////////////////////////////////////////////////////////////// 4 3 mat 1 2531  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  
1400 14 Dtool_VZN3Bw_r 6 933 2472 0 14 Dtool_VZN3Bw_r 0 6 3 mat 1 2553  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  9 translate 1 2497  2 cs 1 2434  
1401 14 Dtool_VZN31_T6 6 933 2472 0 14 Dtool_VZN31_T6 0 5 3 mat 1 2553  5 scale 1 2497  5 shear 1 2497  3 hpr 1 2497  9 translate 1 2497  
1402 14 Dtool_VZN33x61 6 933 2472 0 14 Dtool_VZN33x61 0 6 3 mat 1 2535  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  9 translate 1 2494  2 cs 1 2434  
1403 14 Dtool_VZN3GpPE 6 933 2472 0 14 Dtool_VZN3GpPE 0 5 3 mat 1 2535  5 scale 1 2494  5 shear 1 2494  3 hpr 1 2494  9 translate 1 2494  
1404 14 Dtool_VZN32peC 7 934 2497 1649 14 Dtool_VZN32peC 505 ////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 old_hpr 1 2498  
1405 14 Dtool_VZN3I0gC 7 934 2494 1586 14 Dtool_VZN3I0gC 505 ////////////////////////////////////////////////////////////////////
//     Function: old_to_new_hpr
//  Description: Converts the HPR as represented in the old, broken
//               way to the new, correct representation.  Returns the
//               new HPR.
//
//               This function is provided to ease transition from old
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 old_hpr 1 2495  
1406 14 Dtool_VZN3Pgfc 7 935 2497 1649 14 Dtool_VZN3Pgfc 535 ////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 new_hpr 1 2498  
1407 14 Dtool_VZN3ZEhc 7 935 2494 1586 14 Dtool_VZN3ZEhc 535 ////////////////////////////////////////////////////////////////////
//     Function: new_to_old_hpr
//  Description: Converts the HPR as represented in the new, correct
//               representation to the old, broken way.  Returns the
//               old HPR.  Useful only for backporting.
//
//               This function is provided to ease transition from new
//               systems that relied on Panda's original broken HPR
//               calculation.
//////////////////////////////////////////////////////////////////// 1 7 new_hpr 1 2495  
163
2425 11 MathNumbers 141313 11 MathNumbers 11 MathNumbers 0 0 0 0 1408 0 0 0 0 0 0 0 0

2426 10 LVecBase2f 26625 10 LVecBase2f 10 LVecBase2f 0 0 0 1 1411 1419 0 51 1412 1413 1414 1415 1416 1417 1418 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 0 0 0 0 0 805
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2427 10 LVecBase2d 26625 10 LVecBase2d 10 LVecBase2d 0 0 0 1 1464 1472 0 51 1465 1466 1467 1468 1469 1470 1471 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 0 0 0 0 0 805
// Filename: lvecBase2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
//typedef struct {FLOATTYPE _0, _1} FLOATNAME(data);
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2428 9 LVector2f 141313 9 LVector2f 9 LVector2f 0 0 0 1 1517 1532 0 14 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 0 0 1 0 2426 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2429 9 LVector2d 141313 9 LVector2d 9 LVector2d 0 0 0 1 1533 1548 0 14 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 0 0 1 0 2427 0 0 0 0 707
// Filename: lvector2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

2430 8 LPoint2f 141313 8 LPoint2f 8 LPoint2f 0 0 0 1 1549 1562 0 12 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 0 0 1 0 2426 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2431 8 LPoint2d 141313 8 LPoint2d 8 LPoint2d 0 0 0 1 1563 1576 0 12 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 0 0 1 0 2427 0 0 0 0 706
// Filename: lpoint2_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

2432 10 LVecBase3f 26625 10 LVecBase3f 10 LVecBase3f 0 0 0 1 1577 1586 0 61 1578 1579 1580 1581 1582 1583 1584 1585 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2433 10 LVecBase3d 26625 10 LVecBase3d 10 LVecBase3d 0 0 0 1 1640 1649 0 61 1641 1642 1643 1644 1645 1646 1647 1648 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 0 0 0 0 0 754
// Filename: lvecBase3_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2434 16 CoordinateSystem 532481 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 0 12 CS_zup_right 12 CS_zup_right 1 12 CS_yup_right 12 CS_yup_right 2 11 CS_zup_left 11 CS_zup_left 3 11 CS_yup_left 11 CS_yup_left 4 10 CS_invalid 10 CS_invalid 5 0 0

2435 9 LVector3f 141313 9 LVector3f 9 LVector3f 0 0 0 1 1704 1735 0 30 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 0 0 1 0 2432 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2436 9 LVector3d 141313 9 LVector3d 9 LVector3d 0 0 0 1 1736 1767 0 30 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 0 0 1 0 2433 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2437 8 LPoint3f 141313 8 LPoint3f 8 LPoint3f 0 0 0 1 1768 1788 0 19 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 0 0 1 0 2432 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2438 8 LPoint3d 141313 8 LPoint3d 8 LPoint3d 0 0 0 1 1789 1809 0 19 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 0 0 1 0 2433 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

2439 10 LVecBase4f 26625 10 LVecBase4f 10 LVecBase4f 0 0 0 1 1810 1820 0 59 1811 1812 1813 1814 1815 1816 1817 1818 1819 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 0 0 0 0 0 754
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2440 10 LVecBase4d 26625 10 LVecBase4d 10 LVecBase4d 0 0 0 1 1871 1881 0 59 1872 1873 1874 1875 1876 1877 1878 1879 1880 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 0 0 0 0 0 754
// Filename: lvecBase4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

2441 9 LVector4f 141313 9 LVector4f 9 LVector4f 0 0 0 1 1932 1947 0 14 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 0 0 1 0 2439 0 0 0 0 710
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2442 9 LVector4d 141313 9 LVector4d 9 LVector4d 0 0 0 1 1948 1963 0 14 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 0 0 1 0 2440 0 0 0 0 710
// Filename: lvector4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

2443 8 LPoint4f 141313 8 LPoint4f 8 LPoint4f 0 0 0 1 1964 1979 0 14 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 0 0 1 0 2439 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2444 8 LPoint4d 141313 8 LPoint4d 8 LPoint4d 0 0 0 1 1980 1995 0 14 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 0 0 1 0 2440 0 0 0 0 707
// Filename: lpoint4_src.h
// Created by:  drose (08Mar00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

2445 9 LMatrix3f 141313 9 LMatrix3f 9 LMatrix3f 0 0 0 1 2003 2067 0 63 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 4 2588 2589 2590 2591 0 0 0 2 2446 2447 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2446 3 Row 403457 14 LMatrix3f::Row 14 LMatrix3f::Row 2445 0 0 0 1999 0 3 1996 1997 1998 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2447 4 CRow 403457 15 LMatrix3f::CRow 15 LMatrix3f::CRow 2445 0 0 0 2002 0 2 2000 2001 0 0 0 0 0 0

2448 9 LMatrix4f 141313 9 LMatrix4f 9 LMatrix4f 0 0 0 1 2077 2148 0 70 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 3 2592 2593 2594 0 0 0 2 2449 2450 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2449 3 Row 403457 14 LMatrix4f::Row 14 LMatrix4f::Row 2448 0 0 0 2073 0 3 2070 2071 2072 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2450 4 CRow 403457 15 LMatrix4f::CRow 15 LMatrix4f::CRow 2448 0 0 0 2076 0 2 2074 2075 0 0 0 0 0 0

2451 9 LMatrix3d 141313 9 LMatrix3d 9 LMatrix3d 0 0 0 1 2156 2220 0 63 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 4 2595 2596 2597 2598 0 0 0 2 2452 2453 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

2452 3 Row 403457 14 LMatrix3d::Row 14 LMatrix3d::Row 2451 0 0 0 2152 0 3 2149 2150 2151 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2453 4 CRow 403457 15 LMatrix3d::CRow 15 LMatrix3d::CRow 2451 0 0 0 2155 0 2 2153 2154 0 0 0 0 0 0

2454 9 LMatrix4d 141313 9 LMatrix4d 9 LMatrix4d 0 0 0 1 2228 2299 0 70 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 3 2599 2600 2601 0 0 0 2 2455 2456 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

2455 3 Row 403457 14 LMatrix4d::Row 14 LMatrix4d::Row 2454 0 0 0 2224 0 3 2221 2222 2223 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

2456 4 CRow 403457 15 LMatrix4d::CRow 15 LMatrix4d::CRow 2454 0 0 0 2227 0 2 2225 2226 0 0 0 0 0 0

2457 12 LQuaternionf 141313 12 LQuaternionf 12 LQuaternionf 0 0 0 1 2311 2358 0 46 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 0 0 1 0 2439 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2458 12 LQuaterniond 141313 12 LQuaterniond 12 LQuaterniond 0 0 0 1 2359 2406 0 46 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 0 0 1 0 2440 0 0 0 0 719
// Filename: lquaternion_src.h
// Created by:  frang (06Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

2459 10 LRotationf 141313 10 LRotationf 10 LRotationf 0 0 0 1 2407 2411 0 3 2408 2409 2410 0 0 1 0 2457 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2460 10 LRotationd 141313 10 LRotationd 10 LRotationd 0 0 0 1 2412 2416 0 3 2413 2414 2415 0 0 1 0 2458 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

2461 13 LOrientationf 141313 13 LOrientationf 13 LOrientationf 0 0 0 1 2417 2420 0 2 2418 2419 0 0 1 0 2457 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2462 13 LOrientationd 141313 13 LOrientationd 13 LOrientationd 0 0 0 1 2421 2424 0 2 2422 2423 0 0 1 0 2458 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

2463 12 LVecBase2f * 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 2426 0 0 0 0 0 0 0 0 0 0

2464 18 LVecBase2f const * 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2465 0 0 0 0 0 0 0 0 0 0

2465 16 LVecBase2f const 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2426 0 0 0 0 0 0 0 0 0 0

2466 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2467 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2468 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2469 10 PyObject * 8576 10 PyObject * 10 PyObject * 0 0 2470 0 0 0 0 0 0 0 0 0 0

2470 8 PyObject 2048 8 PyObject 8 PyObject 0 0 0 0 0 0 0 0 0 0 0 0 0

2471 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2472 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2473 9 ostream * 8576 9 ostream * 9 ostream * 0 0 2474 0 0 0 0 0 0 0 0 0 0

2474 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

2475 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2476 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2477 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 2476 0 0 0 0 0 0 0 0 0 0

2478 12 LVecBase2d * 8576 12 LVecBase2d * 12 LVecBase2d * 0 0 2427 0 0 0 0 0 0 0 0 0 0

2479 18 LVecBase2d const * 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2480 0 0 0 0 0 0 0 0 0 0

2480 16 LVecBase2d const 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2427 0 0 0 0 0 0 0 0 0 0

2481 6 double 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2482 11 LVector2f * 8576 11 LVector2f * 11 LVector2f * 0 0 2428 0 0 0 0 0 0 0 0 0 0

2483 17 LVector2f const * 8576 17 LVector2f const * 17 LVector2f const * 0 0 2484 0 0 0 0 0 0 0 0 0 0

2484 15 LVector2f const 8832 15 LVector2f const 15 LVector2f const 0 0 2428 0 0 0 0 0 0 0 0 0 0

2485 11 LVector2d * 8576 11 LVector2d * 11 LVector2d * 0 0 2429 0 0 0 0 0 0 0 0 0 0

2486 17 LVector2d const * 8576 17 LVector2d const * 17 LVector2d const * 0 0 2487 0 0 0 0 0 0 0 0 0 0

2487 15 LVector2d const 8832 15 LVector2d const 15 LVector2d const 0 0 2429 0 0 0 0 0 0 0 0 0 0

2488 10 LPoint2f * 8576 10 LPoint2f * 10 LPoint2f * 0 0 2430 0 0 0 0 0 0 0 0 0 0

2489 16 LPoint2f const * 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 2490 0 0 0 0 0 0 0 0 0 0

2490 14 LPoint2f const 8832 14 LPoint2f const 14 LPoint2f const 0 0 2430 0 0 0 0 0 0 0 0 0 0

2491 10 LPoint2d * 8576 10 LPoint2d * 10 LPoint2d * 0 0 2431 0 0 0 0 0 0 0 0 0 0

2492 16 LPoint2d const * 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 2493 0 0 0 0 0 0 0 0 0 0

2493 14 LPoint2d const 8832 14 LPoint2d const 14 LPoint2d const 0 0 2431 0 0 0 0 0 0 0 0 0 0

2494 12 LVecBase3f * 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 2432 0 0 0 0 0 0 0 0 0 0

2495 18 LVecBase3f const * 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2496 0 0 0 0 0 0 0 0 0 0

2496 16 LVecBase3f const 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2432 0 0 0 0 0 0 0 0 0 0

2497 12 LVecBase3d * 8576 12 LVecBase3d * 12 LVecBase3d * 0 0 2433 0 0 0 0 0 0 0 0 0 0

2498 18 LVecBase3d const * 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2499 0 0 0 0 0 0 0 0 0 0

2499 16 LVecBase3d const 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2433 0 0 0 0 0 0 0 0 0 0

2500 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 2435 0 0 0 0 0 0 0 0 0 0

2501 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 2502 0 0 0 0 0 0 0 0 0 0

2502 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 2435 0 0 0 0 0 0 0 0 0 0

2503 11 LVector3d * 8576 11 LVector3d * 11 LVector3d * 0 0 2436 0 0 0 0 0 0 0 0 0 0

2504 17 LVector3d const * 8576 17 LVector3d const * 17 LVector3d const * 0 0 2505 0 0 0 0 0 0 0 0 0 0

2505 15 LVector3d const 8832 15 LVector3d const 15 LVector3d const 0 0 2436 0 0 0 0 0 0 0 0 0 0

2506 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 2437 0 0 0 0 0 0 0 0 0 0

2507 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 2508 0 0 0 0 0 0 0 0 0 0

2508 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 2437 0 0 0 0 0 0 0 0 0 0

2509 10 LPoint3d * 8576 10 LPoint3d * 10 LPoint3d * 0 0 2438 0 0 0 0 0 0 0 0 0 0

2510 16 LPoint3d const * 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 2511 0 0 0 0 0 0 0 0 0 0

2511 14 LPoint3d const 8832 14 LPoint3d const 14 LPoint3d const 0 0 2438 0 0 0 0 0 0 0 0 0 0

2512 12 LVecBase4f * 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 2439 0 0 0 0 0 0 0 0 0 0

2513 18 LVecBase4f const * 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2514 0 0 0 0 0 0 0 0 0 0

2514 16 LVecBase4f const 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2439 0 0 0 0 0 0 0 0 0 0

2515 12 LVecBase4d * 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 2440 0 0 0 0 0 0 0 0 0 0

2516 18 LVecBase4d const * 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2517 0 0 0 0 0 0 0 0 0 0

2517 16 LVecBase4d const 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2440 0 0 0 0 0 0 0 0 0 0

2518 11 LVector4f * 8576 11 LVector4f * 11 LVector4f * 0 0 2441 0 0 0 0 0 0 0 0 0 0

2519 17 LVector4f const * 8576 17 LVector4f const * 17 LVector4f const * 0 0 2520 0 0 0 0 0 0 0 0 0 0

2520 15 LVector4f const 8832 15 LVector4f const 15 LVector4f const 0 0 2441 0 0 0 0 0 0 0 0 0 0

2521 11 LVector4d * 8576 11 LVector4d * 11 LVector4d * 0 0 2442 0 0 0 0 0 0 0 0 0 0

2522 17 LVector4d const * 8576 17 LVector4d const * 17 LVector4d const * 0 0 2523 0 0 0 0 0 0 0 0 0 0

2523 15 LVector4d const 8832 15 LVector4d const 15 LVector4d const 0 0 2442 0 0 0 0 0 0 0 0 0 0

2524 10 LPoint4f * 8576 10 LPoint4f * 10 LPoint4f * 0 0 2443 0 0 0 0 0 0 0 0 0 0

2525 16 LPoint4f const * 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 2526 0 0 0 0 0 0 0 0 0 0

2526 14 LPoint4f const 8832 14 LPoint4f const 14 LPoint4f const 0 0 2443 0 0 0 0 0 0 0 0 0 0

2527 10 LPoint4d * 8576 10 LPoint4d * 10 LPoint4d * 0 0 2444 0 0 0 0 0 0 0 0 0 0

2528 16 LPoint4d const * 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 2529 0 0 0 0 0 0 0 0 0 0

2529 14 LPoint4d const 8832 14 LPoint4d const 14 LPoint4d const 0 0 2444 0 0 0 0 0 0 0 0 0 0

2530 11 LMatrix3f * 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 2445 0 0 0 0 0 0 0 0 0 0

2531 17 LMatrix3f const * 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2532 0 0 0 0 0 0 0 0 0 0

2532 15 LMatrix3f const 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2445 0 0 0 0 0 0 0 0 0 0

2533 5 Row * 8576 16 LMatrix3f::Row * 16 LMatrix3f::Row * 0 0 2446 0 0 0 0 0 0 0 0 0 0

2534 6 CRow * 8576 17 LMatrix3f::CRow * 17 LMatrix3f::CRow * 0 0 2447 0 0 0 0 0 0 0 0 0 0

2535 17 LMatrix4f const * 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2536 0 0 0 0 0 0 0 0 0 0

2536 15 LMatrix4f const 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2448 0 0 0 0 0 0 0 0 0 0

2537 11 Row const * 8576 22 LMatrix3f::Row const * 22 LMatrix3f::Row const * 0 0 2538 0 0 0 0 0 0 0 0 0 0

2538 9 Row const 8832 20 LMatrix3f::Row const 20 LMatrix3f::Row const 0 0 2446 0 0 0 0 0 0 0 0 0 0

2539 12 CRow const * 8576 23 LMatrix3f::CRow const * 23 LMatrix3f::CRow const * 0 0 2540 0 0 0 0 0 0 0 0 0 0

2540 10 CRow const 8832 21 LMatrix3f::CRow const 21 LMatrix3f::CRow const 0 0 2447 0 0 0 0 0 0 0 0 0 0

2541 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 2448 0 0 0 0 0 0 0 0 0 0

2542 5 Row * 8576 16 LMatrix4f::Row * 16 LMatrix4f::Row * 0 0 2449 0 0 0 0 0 0 0 0 0 0

2543 6 CRow * 8576 17 LMatrix4f::CRow * 17 LMatrix4f::CRow * 0 0 2450 0 0 0 0 0 0 0 0 0 0

2544 11 Row const * 8576 22 LMatrix4f::Row const * 22 LMatrix4f::Row const * 0 0 2545 0 0 0 0 0 0 0 0 0 0

2545 9 Row const 8832 20 LMatrix4f::Row const 20 LMatrix4f::Row const 0 0 2449 0 0 0 0 0 0 0 0 0 0

2546 12 CRow const * 8576 23 LMatrix4f::CRow const * 23 LMatrix4f::CRow const * 0 0 2547 0 0 0 0 0 0 0 0 0 0

2547 10 CRow const 8832 21 LMatrix4f::CRow const 21 LMatrix4f::CRow const 0 0 2450 0 0 0 0 0 0 0 0 0 0

2548 11 LMatrix3d * 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 2451 0 0 0 0 0 0 0 0 0 0

2549 17 LMatrix3d const * 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2550 0 0 0 0 0 0 0 0 0 0

2550 15 LMatrix3d const 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2451 0 0 0 0 0 0 0 0 0 0

2551 5 Row * 8576 16 LMatrix3d::Row * 16 LMatrix3d::Row * 0 0 2452 0 0 0 0 0 0 0 0 0 0

2552 6 CRow * 8576 17 LMatrix3d::CRow * 17 LMatrix3d::CRow * 0 0 2453 0 0 0 0 0 0 0 0 0 0

2553 17 LMatrix4d const * 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2554 0 0 0 0 0 0 0 0 0 0

2554 15 LMatrix4d const 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2454 0 0 0 0 0 0 0 0 0 0

2555 11 Row const * 8576 22 LMatrix3d::Row const * 22 LMatrix3d::Row const * 0 0 2556 0 0 0 0 0 0 0 0 0 0

2556 9 Row const 8832 20 LMatrix3d::Row const 20 LMatrix3d::Row const 0 0 2452 0 0 0 0 0 0 0 0 0 0

2557 12 CRow const * 8576 23 LMatrix3d::CRow const * 23 LMatrix3d::CRow const * 0 0 2558 0 0 0 0 0 0 0 0 0 0

2558 10 CRow const 8832 21 LMatrix3d::CRow const 21 LMatrix3d::CRow const 0 0 2453 0 0 0 0 0 0 0 0 0 0

2559 11 LMatrix4d * 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 2454 0 0 0 0 0 0 0 0 0 0

2560 5 Row * 8576 16 LMatrix4d::Row * 16 LMatrix4d::Row * 0 0 2455 0 0 0 0 0 0 0 0 0 0

2561 6 CRow * 8576 17 LMatrix4d::CRow * 17 LMatrix4d::CRow * 0 0 2456 0 0 0 0 0 0 0 0 0 0

2562 11 Row const * 8576 22 LMatrix4d::Row const * 22 LMatrix4d::Row const * 0 0 2563 0 0 0 0 0 0 0 0 0 0

2563 9 Row const 8832 20 LMatrix4d::Row const 20 LMatrix4d::Row const 0 0 2455 0 0 0 0 0 0 0 0 0 0

2564 12 CRow const * 8576 23 LMatrix4d::CRow const * 23 LMatrix4d::CRow const * 0 0 2565 0 0 0 0 0 0 0 0 0 0

2565 10 CRow const 8832 21 LMatrix4d::CRow const 21 LMatrix4d::CRow const 0 0 2456 0 0 0 0 0 0 0 0 0 0

2566 14 LQuaternionf * 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 2457 0 0 0 0 0 0 0 0 0 0

2567 20 LQuaternionf const * 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 2568 0 0 0 0 0 0 0 0 0 0

2568 18 LQuaternionf const 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 2457 0 0 0 0 0 0 0 0 0 0

2569 14 LQuaterniond * 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 2458 0 0 0 0 0 0 0 0 0 0

2570 20 LQuaterniond const * 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 2571 0 0 0 0 0 0 0 0 0 0

2571 18 LQuaterniond const 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 2458 0 0 0 0 0 0 0 0 0 0

2572 12 LRotationf * 8576 12 LRotationf * 12 LRotationf * 0 0 2459 0 0 0 0 0 0 0 0 0 0

2573 18 LRotationf const * 8576 18 LRotationf const * 18 LRotationf const * 0 0 2574 0 0 0 0 0 0 0 0 0 0

2574 16 LRotationf const 8832 16 LRotationf const 16 LRotationf const 0 0 2459 0 0 0 0 0 0 0 0 0 0

2575 12 LRotationd * 8576 12 LRotationd * 12 LRotationd * 0 0 2460 0 0 0 0 0 0 0 0 0 0

2576 18 LRotationd const * 8576 18 LRotationd const * 18 LRotationd const * 0 0 2577 0 0 0 0 0 0 0 0 0 0

2577 16 LRotationd const 8832 16 LRotationd const 16 LRotationd const 0 0 2460 0 0 0 0 0 0 0 0 0 0

2578 15 LOrientationf * 8576 15 LOrientationf * 15 LOrientationf * 0 0 2461 0 0 0 0 0 0 0 0 0 0

2579 21 LOrientationf const * 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 2580 0 0 0 0 0 0 0 0 0 0

2580 19 LOrientationf const 8832 19 LOrientationf const 19 LOrientationf const 0 0 2461 0 0 0 0 0 0 0 0 0 0

2581 15 LOrientationd * 8576 15 LOrientationd * 15 LOrientationd * 0 0 2462 0 0 0 0 0 0 0 0 0 0

2582 21 LOrientationd const * 8576 21 LOrientationd const * 21 LOrientationd const * 0 0 2583 0 0 0 0 0 0 0 0 0 0

2583 19 LOrientationd const 8832 19 LOrientationd const 19 LOrientationd const 0 0 2462 0 0 0 0 0 0 0 0 0 0

2584 10 Datagram * 8576 10 Datagram * 10 Datagram * 0 0 2585 0 0 0 0 0 0 0 0 0 0

2585 8 Datagram 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

2586 18 DatagramIterator * 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2587 0 0 0 0 0 0 0 0 0 0

2587 16 DatagramIterator 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

0
0
14
2588 0 609 8 get_rows 4 size 7 get_row 
2589 0 609 8 get_cols 4 size 7 get_col 
2590 0 609 9 get_col2s 4 size 8 get_col2 
2591 0 609 9 get_row2s 4 size 8 get_row2 
2592 0 686 8 get_rows 4 size 7 get_row 
2593 0 686 8 get_cols 4 size 7 get_col 
2594 0 686 9 get_row3s 4 size 8 get_row3 
2595 0 768 8 get_rows 4 size 7 get_row 
2596 0 768 8 get_cols 4 size 7 get_col 
2597 0 768 9 get_col2s 4 size 8 get_col2 
2598 0 768 9 get_row2s 4 size 8 get_row2 
2599 0 843 8 get_rows 4 size 7 get_row 
2600 0 843 8 get_cols 4 size 7 get_col 
2601 0 843 9 get_row3s 4 size 8 get_row3 
