1687213608
2 2
10 libphysics 4 9fJJ 12 pandaphysics 
216
293 13 PhysicsObject 4 509 28 PhysicsObject::PhysicsObject 0 2 1 2 463
////////////////////////////////////////////////////////////////////
//     Function : PhysicsObject
//       Access : Public
//  Description : Default Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : PhysicsObject
//       Access : Public
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
92
PhysicsObject::PhysicsObject(void);
PhysicsObject::PhysicsObject(PhysicsObject const &copy);

294 10 operator = 4 509 25 PhysicsObject::operator = 0 1 3 218
////////////////////////////////////////////////////////////////////
//     Function : Assignment operator
//       Access : Public
//  Description :
////////////////////////////////////////////////////////////////////
75
PhysicsObject const &PhysicsObject::operator =(PhysicsObject const &other);

295 10 set_active 4 509 25 PhysicsObject::set_active 0 1 4 230
////////////////////////////////////////////////////////////////////
//    Function : set_active
//      Access : Public
// Description : Process Flag assignment
////////////////////////////////////////////////////////////////////
49
inline void PhysicsObject::set_active(bool flag);

296 10 get_active 4 509 25 PhysicsObject::get_active 0 1 5 225
////////////////////////////////////////////////////////////////////
//    Function : get_active
//      Access : Public
// Description : Process Flag Query
////////////////////////////////////////////////////////////////////
50
inline bool PhysicsObject::get_active(void) const;

297 8 set_mass 4 509 23 PhysicsObject::set_mass 0 1 6 733
// Filename: physicsObject.I
// Created by:  charles (13Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_mass
//      Access : Public
// Description : Set the mass in slugs (or kilograms).
////////////////////////////////////////////////////////////////////
44
inline void PhysicsObject::set_mass(float );

298 8 get_mass 4 509 23 PhysicsObject::get_mass 0 1 7 242
////////////////////////////////////////////////////////////////////
//    Function : get_mass
//      Access : Public
// Description : Get the mass in slugs (or kilograms).
////////////////////////////////////////////////////////////////////
49
inline float PhysicsObject::get_mass(void) const;

299 12 set_position 4 509 27 PhysicsObject::set_position 0 2 8 9 683
//INLINE void set_center_of_mass(const LPoint3f &pos); use set_position.

//INLINE void set_center_of_mass(const LPoint3f &pos); use set_position.

////////////////////////////////////////////////////////////////////
//    Function : set_position
//      Access : Public
// Description : Vector position assignment.  This is also used as
//               the center of mass.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_position
//      Access : Public
// Description : Piecewise position assignment
////////////////////////////////////////////////////////////////////
129
inline void PhysicsObject::set_position(LPoint3f const &pos);
inline void PhysicsObject::set_position(float x, float y, float z);

300 12 get_position 4 509 27 PhysicsObject::get_position 0 1 10 223
////////////////////////////////////////////////////////////////////
//    Function : get_position
//      Access : Public
// Description : Position Query
////////////////////////////////////////////////////////////////////
56
inline LPoint3f PhysicsObject::get_position(void) const;

301 14 reset_position 4 509 29 PhysicsObject::reset_position 0 1 11 349
////////////////////////////////////////////////////////////////////
//    Function : reset_position
//      Access : Public
// Description : use this to place an object in a completely new
//               position, that has nothing to do with its last
//               position.
////////////////////////////////////////////////////////////////////
63
inline void PhysicsObject::reset_position(LPoint3f const &pos);

302 17 set_last_position 4 509 32 PhysicsObject::set_last_position 0 1 12 238
////////////////////////////////////////////////////////////////////
//    Function : set_last_position
//      Access : Public
// Description : Last position assignment
////////////////////////////////////////////////////////////////////
66
inline void PhysicsObject::set_last_position(LPoint3f const &pos);

303 17 get_last_position 4 509 32 PhysicsObject::get_last_position 0 1 13 313
////////////////////////////////////////////////////////////////////
//    Function : get_last_position
//      Access : Public
// Description : Get the position of the physics object at the start
//               of the most recent do_physics.
////////////////////////////////////////////////////////////////////
61
inline LPoint3f PhysicsObject::get_last_position(void) const;

304 12 set_velocity 4 509 27 PhysicsObject::set_velocity 0 2 14 15 475
////////////////////////////////////////////////////////////////////
//    Function : set_velocity
//      Access : Public
// Description : Vector velocity assignment
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_velocity
//      Access : Public
// Description : Piecewise velocity assignment
////////////////////////////////////////////////////////////////////
130
inline void PhysicsObject::set_velocity(LVector3f const &vel);
inline void PhysicsObject::set_velocity(float x, float y, float z);

305 12 get_velocity 4 509 27 PhysicsObject::get_velocity 0 1 16 234
////////////////////////////////////////////////////////////////////
//    Function : get_velocity
//      Access : Public
// Description : Velocity Query per second
////////////////////////////////////////////////////////////////////
57
inline LVector3f PhysicsObject::get_velocity(void) const;

306 21 get_implicit_velocity 4 509 36 PhysicsObject::get_implicit_velocity 0 1 17 249
////////////////////////////////////////////////////////////////////
//    Function : get_implicit_velocity
//      Access : Public
// Description : Velocity Query over the last dt
////////////////////////////////////////////////////////////////////
66
inline LVector3f PhysicsObject::get_implicit_velocity(void) const;

307 10 add_torque 4 509 25 PhysicsObject::add_torque 0 1 18 477
// Global instantanious forces

////////////////////////////////////////////////////////////////////
//    Function : add_torque
//      Access : Public
// Description : Adds an torque force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               angular velocity, add a vector to it and set that
//               value to be the new angular velocity.
////////////////////////////////////////////////////////////////////
64
inline void PhysicsObject::add_torque(LRotationf const &torque);

308 11 add_impulse 4 509 26 PhysicsObject::add_impulse 0 1 19 463
// Global instantanious forces

////////////////////////////////////////////////////////////////////
//    Function : add_impulse
//      Access : Public
// Description : Adds an impulse force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               velocity, add a vector to it and set that value to
//               be the new velocity.
////////////////////////////////////////////////////////////////////
65
inline void PhysicsObject::add_impulse(LVector3f const &impulse);

309 10 add_impact 4 509 25 PhysicsObject::add_impact 0 1 20 656
////////////////////////////////////////////////////////////////////
//    Function : add_impact
//      Access : Public
// Description : Adds an impulse and/or torque (i.e. an instantanious
//               change in velocity) based on how well the offset and
//               impulse align with the center of mass (aka position).
//               If you wanted to immitate this function you could
//               work out the impulse and torque and call add_impulse
//               and add_torque respectively.
//               offset and force are in global (or parent) coordinates.
////////////////////////////////////////////////////////////////////
109
virtual void PhysicsObject::add_impact(LPoint3f const &offset_from_center_of_mass, LVector3f const &impulse);

310 16 add_local_torque 4 509 31 PhysicsObject::add_local_torque 0 1 21 482
// Local instantanious forces

////////////////////////////////////////////////////////////////////
//    Function : add_local_torque
//      Access : Public
// Description : Adds an torque force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               angular velocity, add a vector to it and set that
//               value to be the new angular velocity.
////////////////////////////////////////////////////////////////////
70
inline void PhysicsObject::add_local_torque(LRotationf const &torque);

311 17 add_local_impulse 4 509 32 PhysicsObject::add_local_impulse 0 1 22 468
// Local instantanious forces

////////////////////////////////////////////////////////////////////
//    Function : add_local_impulse
//      Access : Public
// Description : Adds an impulse force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               velocity, add a vector to it and set that value to
//               be the new velocity.
////////////////////////////////////////////////////////////////////
71
inline void PhysicsObject::add_local_impulse(LVector3f const &impulse);

312 16 add_local_impact 4 509 31 PhysicsObject::add_local_impact 0 1 23 649
////////////////////////////////////////////////////////////////////
//    Function : add_local_impact
//      Access : Public
// Description : Adds an impulse and/or torque (i.e. an instantanious
//               change in velocity) based on how well the offset and
//               impulse align with the center of mass (aka position).
//               If you wanted to immitate this function you could
//               work out the impulse and torque and call add_impulse
//               and add_torque respectively.
//               offset and force are in local coordinates.
////////////////////////////////////////////////////////////////////
115
virtual void PhysicsObject::add_local_impact(LPoint3f const &offset_from_center_of_mass, LVector3f const &impulse);

313 21 set_terminal_velocity 4 509 36 PhysicsObject::set_terminal_velocity 0 1 24 231
////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity
//      Access : Public
// Description : tv assignment
////////////////////////////////////////////////////////////////////
59
inline void PhysicsObject::set_terminal_velocity(float tv);

314 21 get_terminal_velocity 4 509 36 PhysicsObject::get_terminal_velocity 0 1 25 226
////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity
//      Access : Public
// Description : tv query
////////////////////////////////////////////////////////////////////
62
inline float PhysicsObject::get_terminal_velocity(void) const;

315 12 set_oriented 4 509 27 PhysicsObject::set_oriented 0 1 26 334
////////////////////////////////////////////////////////////////////
//    Function : set_oriented
//      Access : Public
// Description : Set flag to determine whether this object should do
//               any rotation or orientation calculations.  Optimization.
////////////////////////////////////////////////////////////////////
51
inline void PhysicsObject::set_oriented(bool flag);

316 12 get_oriented 4 509 27 PhysicsObject::get_oriented 0 1 27 228
////////////////////////////////////////////////////////////////////
//    Function : get_oriented
//      Access : Public
// Description : See set_oriented().
////////////////////////////////////////////////////////////////////
52
inline bool PhysicsObject::get_oriented(void) const;

317 15 set_orientation 4 509 30 PhysicsObject::set_orientation 0 1 28 211
////////////////////////////////////////////////////////////////////
//    Function : set_orientation
//      Access : Public
// Description :
////////////////////////////////////////////////////////////////////
77
inline void PhysicsObject::set_orientation(LOrientationf const &orientation);

318 15 get_orientation 4 509 30 PhysicsObject::get_orientation 0 1 29 236
////////////////////////////////////////////////////////////////////
//    Function : get_orientation
//      Access : Public
// Description : get current orientation.
////////////////////////////////////////////////////////////////////
64
inline LOrientationf PhysicsObject::get_orientation(void) const;

319 17 reset_orientation 4 509 32 PhysicsObject::reset_orientation 0 1 30 288
////////////////////////////////////////////////////////////////////
//    Function : reset_orientation
//      Access : Public
// Description : set the orientation while clearing the rotation
//               velocity.
////////////////////////////////////////////////////////////////////
79
inline void PhysicsObject::reset_orientation(LOrientationf const &orientation);

320 12 set_rotation 4 509 27 PhysicsObject::set_rotation 0 1 31 255
////////////////////////////////////////////////////////////////////
//    Function : set_rotation
//      Access : Public
// Description : set rotation as a quaternion delta per second.
////////////////////////////////////////////////////////////////////
68
inline void PhysicsObject::set_rotation(LRotationf const &rotation);

321 12 get_rotation 4 509 27 PhysicsObject::get_rotation 0 1 32 233
////////////////////////////////////////////////////////////////////
//    Function : get_rotation
//      Access : Public
// Description : get rotation per second.
////////////////////////////////////////////////////////////////////
58
inline LRotationf PhysicsObject::get_rotation(void) const;

322 19 get_inertial_tensor 4 509 34 PhysicsObject::get_inertial_tensor 0 1 33 318
////////////////////////////////////////////////////////////////////
//     Function : get_inertial_tensor
//       Access : Public
//  Description : returns a transform matrix that represents the
//                object's willingness to be forced.
////////////////////////////////////////////////////////////////////
65
virtual LMatrix4f PhysicsObject::get_inertial_tensor(void) const;

323 7 get_lcs 4 509 22 PhysicsObject::get_lcs 0 1 34 293
////////////////////////////////////////////////////////////////////
//     Function : get_lcs
//       Access : Public
//  Description : returns a transform matrix to this object's
//                local coordinate system.
////////////////////////////////////////////////////////////////////
53
virtual LMatrix4f PhysicsObject::get_lcs(void) const;

324 9 make_copy 4 509 24 PhysicsObject::make_copy 0 1 35 231
////////////////////////////////////////////////////////////////////
//     Function : make_copy
//       Access : Public, virtual
//  Description : dynamic copy.
////////////////////////////////////////////////////////////////////
60
virtual PhysicsObject *PhysicsObject::make_copy(void) const;

325 6 output 4 509 21 PhysicsObject::output 0 1 36 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
55
virtual void PhysicsObject::output(ostream &out) const;

326 5 write 4 509 20 PhysicsObject::write 0 2 37 38 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
81
virtual void PhysicsObject::write(ostream &out, unsigned int indent = (0)) const;

327 14 get_class_type 4 509 29 PhysicsObject::get_class_type 0 1 39 0
54
static TypeHandle PhysicsObject::get_class_type(void);

328 23 PhysicsObjectCollection 4 511 48 PhysicsObjectCollection::PhysicsObjectCollection 0 2 40 41 477
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
142
PhysicsObjectCollection::PhysicsObjectCollection(void);
PhysicsObjectCollection::PhysicsObjectCollection(PhysicsObjectCollection const &copy);

329 10 operator = 4 511 35 PhysicsObjectCollection::operator = 0 1 42 248
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
78
void PhysicsObjectCollection::operator =(PhysicsObjectCollection const &copy);

330 24 ~PhysicsObjectCollection 4 511 49 PhysicsObjectCollection::~PhysicsObjectCollection 0 0 736
// Filename: physicsObjectCollection.I
// Created by:  joswilso (12Jul06)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline PhysicsObjectCollection::~PhysicsObjectCollection(void);

331 18 add_physics_object 4 511 43 PhysicsObjectCollection::add_physics_object 0 1 43 286
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::add_physics_object
//       Access: Published
//  Description: Adds a new PhysicsObject to the collection.
////////////////////////////////////////////////////////////////////
92
void PhysicsObjectCollection::add_physics_object(PointerTo< PhysicsObject > physics_object);

332 21 remove_physics_object 4 511 46 PhysicsObjectCollection::remove_physics_object 0 1 44 432
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_physics_object
//       Access: Published
//  Description: Removes the indicated PhysicsObject from the collection.
//               Returns true if the physics_object was removed, false if it was
//               not a member of the collection.
////////////////////////////////////////////////////////////////////
95
bool PhysicsObjectCollection::remove_physics_object(PointerTo< PhysicsObject > physics_object);

333 24 add_physics_objects_from 4 511 49 PhysicsObjectCollection::add_physics_objects_from 0 1 45 537
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::add_physics_objects_from
//       Access: Published
//  Description: Adds all the PhysicsObjects indicated in the other
//               collection to this collection.  The other 
//               physics_objects are simply appended to the end of 
//               the physics_objects in this list;
//               duplicates are not automatically removed.
////////////////////////////////////////////////////////////////////
93
void PhysicsObjectCollection::add_physics_objects_from(PhysicsObjectCollection const &other);

334 27 remove_physics_objects_from 4 511 52 PhysicsObjectCollection::remove_physics_objects_from 0 1 46 355
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_physics_objects_from
//       Access: Published
//  Description: Removes from this collection all of the PhysicsObjects
//               listed in the other collection.
////////////////////////////////////////////////////////////////////
96
void PhysicsObjectCollection::remove_physics_objects_from(PhysicsObjectCollection const &other);

335 32 remove_duplicate_physics_objects 4 511 57 PhysicsObjectCollection::remove_duplicate_physics_objects 0 1 47 498
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_duplicate_physics_objects
//       Access: Published
//  Description: Removes any duplicate entries of the same PhysicsObjects
//               on this collection.  If a PhysicsObject appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
////////////////////////////////////////////////////////////////////
69
void PhysicsObjectCollection::remove_duplicate_physics_objects(void);

336 18 has_physics_object 4 511 43 PhysicsObjectCollection::has_physics_object 0 1 48 348
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::has_physics_object
//       Access: Published
//  Description: Returns true if the indicated PhysicsObject appears in
//               this collection, false otherwise.
////////////////////////////////////////////////////////////////////
98
bool PhysicsObjectCollection::has_physics_object(PointerTo< PhysicsObject > physics_object) const;

337 5 clear 4 511 30 PhysicsObjectCollection::clear 0 1 49 277
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::clear
//       Access: Published
//  Description: Removes all PhysicsObjects from the collection.
////////////////////////////////////////////////////////////////////
42
void PhysicsObjectCollection::clear(void);

338 8 is_empty 4 511 33 PhysicsObjectCollection::is_empty 0 1 50 329
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no PhysicsObjects in the
//               collection, false otherwise.
////////////////////////////////////////////////////////////////////
51
bool PhysicsObjectCollection::is_empty(void) const;

339 23 get_num_physics_objects 4 511 48 PhysicsObjectCollection::get_num_physics_objects 0 1 51 303
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::get_num_physics_objects
//       Access: Published
//  Description: Returns the number of PhysicsObjects in the collection.
////////////////////////////////////////////////////////////////////
65
int PhysicsObjectCollection::get_num_physics_objects(void) const;

340 18 get_physics_object 4 511 43 PhysicsObjectCollection::get_physics_object 0 1 52 291
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::get_physics_object
//       Access: Published
//  Description: Returns the nth PhysicsObject in the collection.
////////////////////////////////////////////////////////////////////
88
PointerTo< PhysicsObject > PhysicsObjectCollection::get_physics_object(int index) const;

341 11 operator [] 4 511 36 PhysicsObjectCollection::operator [] 0 1 53 411
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator []
//       Access: Published
//  Description: Returns the nth PhysicsObject in the collection.  This is
//               the same as get_physics_object(), but it may be a more
//               convenient way to access it.
////////////////////////////////////////////////////////////////////
81
PointerTo< PhysicsObject > PhysicsObjectCollection::operator [](int index) const;

342 4 size 4 511 29 PhysicsObjectCollection::size 0 1 54 373
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::size
//       Access: Published
//  Description: Returns the number of physics objects in the
//               collection.  This is the same thing as
//               get_num_physics_objects().
////////////////////////////////////////////////////////////////////
46
int PhysicsObjectCollection::size(void) const;

343 11 operator += 4 511 36 PhysicsObjectCollection::operator += 0 1 55 284
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
////////////////////////////////////////////////////////////////////
87
inline void PhysicsObjectCollection::operator +=(PhysicsObjectCollection const &other);

344 10 operator + 4 511 35 PhysicsObjectCollection::operator + 0 1 56 334
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator +
//       Access: Published
//  Description: Returns a PhysicsObjectCollection representing the
//               concatenation of the two lists.
////////////////////////////////////////////////////////////////////
111
inline PhysicsObjectCollection PhysicsObjectCollection::operator +(PhysicsObjectCollection const &other) const;

345 6 output 4 511 31 PhysicsObjectCollection::output 0 1 57 346
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               PhysicsObjectCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
57
void PhysicsObjectCollection::output(ostream &out) const;

346 5 write 4 511 30 PhysicsObjectCollection::write 0 2 58 59 350
////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               PhysicsObjectCollection to the indicated output stream.
////////////////////////////////////////////////////////////////////
80
void PhysicsObjectCollection::write(ostream &out, int indent_level = (0)) const;

347 10 get_active 4 512 21 BaseForce::get_active 0 1 60 189
////////////////////////////////////////////////////////////////////
//    Function : get_active
//      Access : Public
////////////////////////////////////////////////////////////////////
46
inline bool BaseForce::get_active(void) const;

348 10 set_active 4 512 21 BaseForce::set_active 0 1 61 189
////////////////////////////////////////////////////////////////////
//    Function : set_active
//      Access : Public
////////////////////////////////////////////////////////////////////
47
inline void BaseForce::set_active(bool active);

349 9 is_linear 4 512 20 BaseForce::is_linear 0 1 62 0
50
virtual bool BaseForce::is_linear(void) const = 0;

350 14 get_force_node 4 512 25 BaseForce::get_force_node 0 1 63 680
// Filename: baseForce.I
// Created by:  charles (08Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : get_force_node
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline ForceNode *BaseForce::get_force_node(void) const;

351 19 get_force_node_path 4 512 30 BaseForce::get_force_node_path 0 1 64 198
////////////////////////////////////////////////////////////////////
//    Function : get_force_node_path
//      Access : Public
////////////////////////////////////////////////////////////////////
59
inline NodePath BaseForce::get_force_node_path(void) const;

352 6 output 4 512 17 BaseForce::output 0 1 65 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
51
virtual void BaseForce::output(ostream &out) const;

353 5 write 4 512 16 BaseForce::write 0 2 66 67 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
74
virtual void BaseForce::write(ostream &out, int indent_level = (0)) const;

354 14 get_class_type 4 512 25 BaseForce::get_class_type 0 1 68 0
50
static TypeHandle BaseForce::get_class_type(void);

355 13 set_amplitude 4 513 26 LinearForce::set_amplitude 0 1 69 681
// Filename: linearForce.I
// Created by:  charles (13Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_amplitude
//      Access : Public
////////////////////////////////////////////////////////////////////
54
inline void LinearForce::set_amplitude(float const a);

356 18 set_mass_dependent 4 513 31 LinearForce::set_mass_dependent 0 1 70 197
////////////////////////////////////////////////////////////////////
//    Function : set_mass_Dependent
//      Access : Public
////////////////////////////////////////////////////////////////////
52
inline void LinearForce::set_mass_dependent(bool m);

357 13 get_amplitude 4 513 26 LinearForce::get_amplitude 0 1 71 192
////////////////////////////////////////////////////////////////////
//    Function : get_amplitude
//      Access : Public
////////////////////////////////////////////////////////////////////
52
inline float LinearForce::get_amplitude(void) const;

358 18 get_mass_dependent 4 513 31 LinearForce::get_mass_dependent 0 1 72 197
////////////////////////////////////////////////////////////////////
//    Function : get_mass_dependent
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline bool LinearForce::get_mass_dependent(void) const;

359 16 set_vector_masks 4 513 29 LinearForce::set_vector_masks 0 1 73 195
////////////////////////////////////////////////////////////////////
//    Function : set_vector_masks
//      Access : Public
////////////////////////////////////////////////////////////////////
66
inline void LinearForce::set_vector_masks(bool x, bool y, bool z);

360 16 get_vector_masks 4 513 29 LinearForce::get_vector_masks 0 1 74 195
////////////////////////////////////////////////////////////////////
//    Function : set_vector_masks
//      Access : Public
////////////////////////////////////////////////////////////////////
53
inline LVector3f LinearForce::get_vector_masks(void);

361 10 get_vector 4 513 23 LinearForce::get_vector 0 1 75 189
////////////////////////////////////////////////////////////////////
//    Function : get_vector
//      Access : Public
////////////////////////////////////////////////////////////////////
59
LVector3f LinearForce::get_vector(PhysicsObject const *po);

362 9 make_copy 4 513 22 LinearForce::make_copy 0 1 76 0
54
virtual LinearForce *LinearForce::make_copy(void) = 0;

363 5 write 4 513 18 LinearForce::write 0 2 77 78 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
79
virtual void LinearForce::write(ostream &out, unsigned int indent = (0)) const;

364 14 get_class_type 4 513 27 LinearForce::get_class_type 0 1 79 0
52
static TypeHandle LinearForce::get_class_type(void);

365 9 make_copy 4 514 23 AngularForce::make_copy 0 1 80 0
62
virtual AngularForce *AngularForce::make_copy(void) const = 0;

366 8 get_quat 4 514 22 AngularForce::get_quat 0 1 81 217
////////////////////////////////////////////////////////////////////
//    Function : get_quat
//      Access : public
// Description : access query
////////////////////////////////////////////////////////////////////
59
LRotationf AngularForce::get_quat(PhysicsObject const *po);

367 5 write 4 514 19 AngularForce::write 0 2 82 83 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
80
virtual void AngularForce::write(ostream &out, unsigned int indent = (0)) const;

368 14 get_class_type 4 514 28 AngularForce::get_class_type 0 1 84 0
53
static TypeHandle AngularForce::get_class_type(void);

369 8 Physical 4 515 18 Physical::Physical 0 4 85 86 87 88 1257
////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : Default Constructor
//
//                The idea here is that most physicals will NOT 
//                be collections of sets (i.e. particle systems 
//                and whatever else).  Because of this, the default 
//                constructor, unless otherwise specified, will 
//                automatically allocate and initialize one 
//                PhysicalObject.  This makes it easier for 
//                high-level work.
//
//                pre-alloc is ONLY for multiple-object physicals, 
//                and if true, fills the physics_object vector 
//                with dead nodes, pre-allocating for the speed
//                end of the speed-vs-overhead deal.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : copy constructor (note- does deep copy of pn's)
//                but does NOT attach itself to its template's
//                physicsmanager.
////////////////////////////////////////////////////////////////////
108
Physical::Physical(int total_objects = (1), bool pre_alloc = (0));
Physical::Physical(Physical const &copy);

370 19 get_physics_manager 4 515 29 Physical::get_physics_manager 0 1 89 210
// helpers

////////////////////////////////////////////////////////////////////
//    Function : get_physics_manager
//      Access : Public
////////////////////////////////////////////////////////////////////
65
inline PhysicsManager *Physical::get_physics_manager(void) const;

371 17 get_physical_node 4 515 27 Physical::get_physical_node 0 1 90 208
// helpers

////////////////////////////////////////////////////////////////////
//    Function : get_physical_node
//      Access : Public
////////////////////////////////////////////////////////////////////
61
inline PhysicalNode *Physical::get_physical_node(void) const;

372 22 get_physical_node_path 4 515 32 Physical::get_physical_node_path 0 1 91 201
////////////////////////////////////////////////////////////////////
//    Function : get_physical_node_path
//      Access : Public
////////////////////////////////////////////////////////////////////
61
inline NodePath Physical::get_physical_node_path(void) const;

373 13 get_phys_body 4 515 23 Physical::get_phys_body 0 1 92 192
////////////////////////////////////////////////////////////////////
//    Function : get_phys_body
//      Access : Public
////////////////////////////////////////////////////////////////////
58
inline PhysicsObject *Physical::get_phys_body(void) const;

374 19 clear_linear_forces 4 515 29 Physical::clear_linear_forces 0 1 93 244
////////////////////////////////////////////////////////////////////
//    Function : clear_linear_forces
//      Access : Public
// Description : Erases the linear force list
////////////////////////////////////////////////////////////////////
48
inline void Physical::clear_linear_forces(void);

375 20 clear_angular_forces 4 515 30 Physical::clear_angular_forces 0 1 94 246
////////////////////////////////////////////////////////////////////
//    Function : clear_angular_forces
//      Access : Public
// Description : Erases the angular force list
////////////////////////////////////////////////////////////////////
49
inline void Physical::clear_angular_forces(void);

376 21 clear_physics_objects 4 515 31 Physical::clear_physics_objects 0 1 95 240
////////////////////////////////////////////////////////////////////
//    Function : clear_physics_objects
//      Access : Public
// Description : Erases the object list
////////////////////////////////////////////////////////////////////
50
inline void Physical::clear_physics_objects(void);

377 16 add_linear_force 4 515 26 Physical::add_linear_force 0 1 96 250
////////////////////////////////////////////////////////////////////
//    Function : add_linear_force
//      Access : Public
// Description : Adds a linear force to the force list
////////////////////////////////////////////////////////////////////
55
inline void Physical::add_linear_force(LinearForce *f);

378 17 add_angular_force 4 515 27 Physical::add_angular_force 0 1 97 253
////////////////////////////////////////////////////////////////////
//    Function : add_angular_force
//      Access : Public
// Description : Adds an angular force to the force list
////////////////////////////////////////////////////////////////////
57
inline void Physical::add_angular_force(AngularForce *f);

379 18 add_physics_object 4 515 28 Physical::add_physics_object 0 1 98 258
////////////////////////////////////////////////////////////////////
//    Function : add_physics_object
//      Access : Public
// Description : Adds an object to the physics object vector
////////////////////////////////////////////////////////////////////
60
inline void Physical::add_physics_object(PhysicsObject *po);

380 19 remove_linear_force 4 515 29 Physical::remove_linear_force 0 1 99 258
////////////////////////////////////////////////////////////////////
//    Function : remove_linear_force
//      Access : Public
// Description : removes a linear force from the force list
////////////////////////////////////////////////////////////////////
58
inline void Physical::remove_linear_force(LinearForce *f);

381 20 remove_angular_force 4 515 30 Physical::remove_angular_force 0 1 100 261
////////////////////////////////////////////////////////////////////
//    Function : remove_angular_force
//      Access : Public
// Description : removes an angular force from the force list
////////////////////////////////////////////////////////////////////
60
inline void Physical::remove_angular_force(AngularForce *f);

382 21 get_num_linear_forces 4 515 31 Physical::get_num_linear_forces 0 1 101 200
////////////////////////////////////////////////////////////////////
//    Function : get_num_linear_forces
//      Access : Public
////////////////////////////////////////////////////////////////////
55
inline int Physical::get_num_linear_forces(void) const;

383 16 get_linear_force 4 515 26 Physical::get_linear_force 0 1 102 195
////////////////////////////////////////////////////////////////////
//    Function : get_linear_force
//      Access : Public
////////////////////////////////////////////////////////////////////
76
inline PointerTo< LinearForce > Physical::get_linear_force(int index) const;

384 22 get_num_angular_forces 4 515 32 Physical::get_num_angular_forces 0 1 103 201
////////////////////////////////////////////////////////////////////
//    Function : get_num_angular_forces
//      Access : Public
////////////////////////////////////////////////////////////////////
56
inline int Physical::get_num_angular_forces(void) const;

385 17 get_angular_force 4 515 27 Physical::get_angular_force 0 1 104 196
////////////////////////////////////////////////////////////////////
//    Function : get_angular_force
//      Access : Public
////////////////////////////////////////////////////////////////////
78
inline PointerTo< AngularForce > Physical::get_angular_force(int index) const;

386 13 set_viscosity 4 515 23 Physical::set_viscosity 0 1 105 234
////////////////////////////////////////////////////////////////////
//    Function : set_viscosity
//      Access : Public
// Description : Set the local viscosity.
////////////////////////////////////////////////////////////////////
53
inline void Physical::set_viscosity(float viscosity);

387 13 get_viscosity 4 515 23 Physical::get_viscosity 0 1 106 234
////////////////////////////////////////////////////////////////////
//    Function : get_viscosity
//      Access : Public
// Description : Get the local viscosity.
////////////////////////////////////////////////////////////////////
49
inline float Physical::get_viscosity(void) const;

388 11 get_objects 4 515 21 Physical::get_objects 0 1 107 190
////////////////////////////////////////////////////////////////////
//    Function : get_objects
//      Access : Public
////////////////////////////////////////////////////////////////////
64
PhysicsObjectCollection const Physical::get_objects(void) const;

389 6 output 4 515 16 Physical::output 0 2 108 109 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
59
virtual void Physical::output(ostream &out = (cout)) const;

390 21 write_physics_objects 4 515 31 Physical::write_physics_objects 0 3 110 111 112 295
////////////////////////////////////////////////////////////////////
//     Function : write_physics_objects
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
101
virtual void Physical::write_physics_objects(ostream &out = (cout), unsigned int indent = (0)) const;

391 19 write_linear_forces 4 515 29 Physical::write_linear_forces 0 3 113 114 115 293
////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
99
virtual void Physical::write_linear_forces(ostream &out = (cout), unsigned int indent = (0)) const;

392 20 write_angular_forces 4 515 30 Physical::write_angular_forces 0 3 116 117 118 294
////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
100
virtual void Physical::write_angular_forces(ostream &out = (cout), unsigned int indent = (0)) const;

393 5 write 4 515 15 Physical::write 0 3 119 120 121 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
85
virtual void Physical::write(ostream &out = (cout), unsigned int indent = (0)) const;

394 14 get_class_type 4 515 24 Physical::get_class_type 0 1 122 0
49
static TypeHandle Physical::get_class_type(void);

395 12 PhysicalNode 4 516 26 PhysicalNode::PhysicalNode 0 1 123 464
////////////////////////////////////////////////////////////////////
//     Function : PhysicalNode
//       Access : public
//  Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : PhysicalNode
//       Access : protected
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
61
PhysicalNode::PhysicalNode(basic_string< char > const &name);

396 5 clear 4 516 19 PhysicalNode::clear 0 1 124 670
// Filename: physicalNode.I
// Created by:  charles (01Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : clear
//    Access : public
////////////////////////////////////////////////////////////////////
38
inline void PhysicalNode::clear(void);

397 12 get_physical 4 516 26 PhysicalNode::get_physical 0 1 125 187
////////////////////////////////////////////////////////////////////
//  Function : get_physical
//    Access : public
////////////////////////////////////////////////////////////////////
61
inline Physical *PhysicalNode::get_physical(int index) const;

398 17 get_num_physicals 4 516 31 PhysicalNode::get_num_physicals 0 1 126 192
////////////////////////////////////////////////////////////////////
//  Function : get_num_physicals
//    Access : public
////////////////////////////////////////////////////////////////////
55
inline int PhysicalNode::get_num_physicals(void) const;

399 12 add_physical 4 516 26 PhysicalNode::add_physical 0 1 127 187
////////////////////////////////////////////////////////////////////
//  Function : add_physical
//    Access : public
////////////////////////////////////////////////////////////////////
59
inline void PhysicalNode::add_physical(Physical *physical);

400 18 add_physicals_from 4 516 32 PhysicalNode::add_physicals_from 0 1 128 234
////////////////////////////////////////////////////////////////////
//     Function : add_physicals_from
//       Access : public
//  Description : append operation
////////////////////////////////////////////////////////////////////
65
void PhysicalNode::add_physicals_from(PhysicalNode const &other);

401 15 remove_physical 4 516 29 PhysicalNode::remove_physical 0 2 129 130 464
////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : public
//  Description : remove operation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : public
//  Description : remove operation
////////////////////////////////////////////////////////////////////
102
void PhysicalNode::remove_physical(Physical *physical);
void PhysicalNode::remove_physical(int index);

402 5 write 4 516 19 PhysicalNode::write 0 2 131 132 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
80
virtual void PhysicalNode::write(ostream &out, unsigned int indent = (0)) const;

403 14 get_class_type 4 516 28 PhysicalNode::get_class_type 0 1 133 0
53
static TypeHandle PhysicalNode::get_class_type(void);

404 9 ActorNode 4 518 20 ActorNode::ActorNode 0 3 134 135 136 448
////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Copy Constructor.
////////////////////////////////////////////////////////////////////
107
ActorNode::ActorNode(basic_string< char > const &name = (""));
ActorNode::ActorNode(ActorNode const &copy);

405 18 get_physics_object 4 518 29 ActorNode::get_physics_object 0 1 137 0
51
PhysicsObject *ActorNode::get_physics_object(void);

406 18 set_contact_vector 4 518 29 ActorNode::set_contact_vector 0 1 138 702
// Filename: actorNode.I
// Created by:  charles (07Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_contact_vector
//      Access : Public
// Description : 
////////////////////////////////////////////////////////////////////
68
void ActorNode::set_contact_vector(LVector3f const &contact_vector);

407 18 get_contact_vector 4 518 29 ActorNode::get_contact_vector 0 1 139 215
////////////////////////////////////////////////////////////////////
//    Function : get_contact_vector
//      Access : Public
// Description : 
////////////////////////////////////////////////////////////////////
59
LVector3f const &ActorNode::get_contact_vector(void) const;

408 16 update_transform 4 518 27 ActorNode::update_transform 0 1 140 510
// update the parent scene graph node with PhysicsObject information
// i.e. copy from PhysicsObject to PandaNode

////////////////////////////////////////////////////////////////////
//     Function : update_transform
//       Access : public
//  Description : this sets the transform generated by the contained
//                Physical, moving the node and subsequent geometry.
//                i.e. copy from PhysicsObject to PandaNode
////////////////////////////////////////////////////////////////////
39
void ActorNode::update_transform(void);

409 19 set_transform_limit 4 518 30 ActorNode::set_transform_limit 0 1 141 0
49
void ActorNode::set_transform_limit(float limit);

410 14 get_class_type 4 518 25 ActorNode::get_class_type 0 1 142 0
50
static TypeHandle ActorNode::get_class_type(void);

411 6 output 4 519 22 BaseIntegrator::output 0 1 143 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
56
virtual void BaseIntegrator::output(ostream &out) const;

412 33 write_precomputed_linear_matrices 4 519 49 BaseIntegrator::write_precomputed_linear_matrices 0 2 144 145 307
////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_linear_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
110
virtual void BaseIntegrator::write_precomputed_linear_matrices(ostream &out, unsigned int indent = (0)) const;

413 34 write_precomputed_angular_matrices 4 519 50 BaseIntegrator::write_precomputed_angular_matrices 0 2 146 147 308
////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_angular_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
111
virtual void BaseIntegrator::write_precomputed_angular_matrices(ostream &out, unsigned int indent = (0)) const;

414 5 write 4 519 21 BaseIntegrator::write 0 2 148 149 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
82
virtual void BaseIntegrator::write(ostream &out, unsigned int indent = (0)) const;

415 22 AngularEulerIntegrator 4 522 46 AngularEulerIntegrator::AngularEulerIntegrator 0 1 150 233
////////////////////////////////////////////////////////////////////
//     Function : AngularEulerIntegrator
//       Access : Public
//  Description : constructor
////////////////////////////////////////////////////////////////////
53
AngularEulerIntegrator::AngularEulerIntegrator(void);

416 18 AngularVectorForce 4 523 38 AngularVectorForce::AngularVectorForce 0 3 151 152 153 687
////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
202
AngularVectorForce::AngularVectorForce(LRotationf const &quat);
AngularVectorForce::AngularVectorForce(float h, float p, float r);
AngularVectorForce::AngularVectorForce(AngularVectorForce const &copy);

417 8 set_quat 4 523 28 AngularVectorForce::set_quat 0 1 154 677
// Filename: angularVectorForce.I
// Created by:  charles (09Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_quat
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline void AngularVectorForce::set_quat(LRotationf const &quat);

418 7 set_hpr 4 523 27 AngularVectorForce::set_hpr 0 1 155 180
////////////////////////////////////////////////////////////////////
// Function : set_hpr
//   Access : public
////////////////////////////////////////////////////////////////////
67
inline void AngularVectorForce::set_hpr(float h, float p, float r);

419 14 get_local_quat 4 523 34 AngularVectorForce::get_local_quat 0 1 156 187
////////////////////////////////////////////////////////////////////
// Function : get_local_quat
//   Access : public
////////////////////////////////////////////////////////////////////
65
inline LRotationf AngularVectorForce::get_local_quat(void) const;

420 14 get_class_type 4 523 34 AngularVectorForce::get_class_type 0 1 157 0
59
static TypeHandle AngularVectorForce::get_class_type(void);

421 9 ForceNode 4 524 20 ForceNode::ForceNode 0 1 158 458
////////////////////////////////////////////////////////////////////
//     Function : ForceNode
//       Access : public
//  Description : default constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : ForceNode
//       Access : protected
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
55
ForceNode::ForceNode(basic_string< char > const &name);

422 5 clear 4 524 16 ForceNode::clear 0 1 159 667
// Filename: forceNode.I
// Created by:  charles (02Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : clear
//    Access : public
////////////////////////////////////////////////////////////////////
35
inline void ForceNode::clear(void);

423 9 get_force 4 524 20 ForceNode::get_force 0 1 160 184
////////////////////////////////////////////////////////////////////
//  Function : get_force
//    Access : public
////////////////////////////////////////////////////////////////////
56
inline BaseForce *ForceNode::get_force(int index) const;

424 14 get_num_forces 4 524 25 ForceNode::get_num_forces 0 1 161 189
////////////////////////////////////////////////////////////////////
//  Function : get_num_forces
//    Access : public
////////////////////////////////////////////////////////////////////
49
inline int ForceNode::get_num_forces(void) const;

425 9 add_force 4 524 20 ForceNode::add_force 0 1 162 184
////////////////////////////////////////////////////////////////////
//  Function : add_force
//    Access : public
////////////////////////////////////////////////////////////////////
51
inline void ForceNode::add_force(BaseForce *force);

426 15 add_forces_from 4 524 26 ForceNode::add_forces_from 0 1 163 231
////////////////////////////////////////////////////////////////////
//     Function : add_forces_from
//       Access : public
//  Description : append operation
////////////////////////////////////////////////////////////////////
56
void ForceNode::add_forces_from(ForceNode const &other);

427 12 remove_force 4 524 23 ForceNode::remove_force 0 2 164 165 458
////////////////////////////////////////////////////////////////////
//     Function : remove_force
//       Access : public
//  Description : remove operation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : remove_force
//       Access : public
//  Description : remove operation
////////////////////////////////////////////////////////////////////
84
void ForceNode::remove_force(BaseForce *f);
void ForceNode::remove_force(int index);

428 12 write_forces 4 524 23 ForceNode::write_forces 0 2 166 167 293
////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
84
virtual void ForceNode::write_forces(ostream &out, unsigned int indent = (0)) const;

429 5 write 4 524 16 ForceNode::write 0 2 168 169 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
77
virtual void ForceNode::write(ostream &out, unsigned int indent = (0)) const;

430 14 get_class_type 4 524 25 ForceNode::get_class_type 0 1 170 0
50
static TypeHandle ForceNode::get_class_type(void);

431 18 LinearControlForce 4 525 38 LinearControlForce::LinearControlForce 0 5 171 172 173 174 175 472
////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Copy Constructor
////////////////////////////////////////////////////////////////////
174
LinearControlForce::LinearControlForce(PhysicsObject const *po = (0), float a = (1), bool mass = (0));
LinearControlForce::LinearControlForce(LinearControlForce const &copy);

432 20 clear_physics_object 4 525 40 LinearControlForce::clear_physics_object 0 1 176 736
// Filename: linearControlForce.I
// Created by: Dave Schuyler (2006)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : clear_physics_object
//      Access : Public
// Description : encapsulating wrapper
////////////////////////////////////////////////////////////////////
59
inline void LinearControlForce::clear_physics_object(void);

433 18 set_physics_object 4 525 38 LinearControlForce::set_physics_object 0 1 177 236
////////////////////////////////////////////////////////////////////
//    Function : set_physics_object
//      Access : Public
// Description : encapsulating wrapper
////////////////////////////////////////////////////////////////////
76
inline void LinearControlForce::set_physics_object(PhysicsObject const *po);

434 18 get_physics_object 4 525 38 LinearControlForce::get_physics_object 0 1 178 246
////////////////////////////////////////////////////////////////////
//    Function : get_physics_object
//      Access : Public
// Description : piecewise encapsulating wrapper
////////////////////////////////////////////////////////////////////
90
inline ConstPointerTo< PhysicsObject > LinearControlForce::get_physics_object(void) const;

435 10 set_vector 4 525 30 LinearControlForce::set_vector 0 2 179 180 468
////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : encapsulating wrapper
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : piecewise encapsulating wrapper
////////////////////////////////////////////////////////////////////
134
inline void LinearControlForce::set_vector(LVector3f const &v);
inline void LinearControlForce::set_vector(float x, float y, float z);

436 16 get_local_vector 4 525 36 LinearControlForce::get_local_vector 0 1 181 212
////////////////////////////////////////////////////////////////////
//    Function : get_local_vector
//      Access : Public
// Description :
////////////////////////////////////////////////////////////////////
66
inline LVector3f LinearControlForce::get_local_vector(void) const;

437 14 get_class_type 4 525 34 LinearControlForce::get_class_type 0 1 182 0
59
static TypeHandle LinearControlForce::get_class_type(void);

438 25 LinearCylinderVortexForce 4 526 52 LinearCylinderVortexForce::LinearCylinderVortexForce 0 7 183 184 185 186 187 188 189 480
////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : copy Constructor
////////////////////////////////////////////////////////////////////
234
LinearCylinderVortexForce::LinearCylinderVortexForce(float radius = (1), float length = (0), float coef = (1), float a = (1), bool md = (0));
LinearCylinderVortexForce::LinearCylinderVortexForce(LinearCylinderVortexForce const &copy);

439 8 set_coef 4 526 35 LinearCylinderVortexForce::set_coef 0 1 190 181
////////////////////////////////////////////////////////////////////
// Function : set_coef
//   Access : public
////////////////////////////////////////////////////////////////////
60
inline void LinearCylinderVortexForce::set_coef(float coef);

440 8 get_coef 4 526 35 LinearCylinderVortexForce::get_coef 0 1 191 181
////////////////////////////////////////////////////////////////////
// Function : get_coef
//   Access : public
////////////////////////////////////////////////////////////////////
61
inline float LinearCylinderVortexForce::get_coef(void) const;

441 10 set_radius 4 526 37 LinearCylinderVortexForce::set_radius 0 1 192 686
// Filename: linearCylinderVortexForce.I
// Created by:  charles (24Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_radius
//   Access : public
////////////////////////////////////////////////////////////////////
64
inline void LinearCylinderVortexForce::set_radius(float radius);

442 10 get_radius 4 526 37 LinearCylinderVortexForce::get_radius 0 1 193 183
////////////////////////////////////////////////////////////////////
// Function : get_radius
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline float LinearCylinderVortexForce::get_radius(void) const;

443 10 set_length 4 526 37 LinearCylinderVortexForce::set_length 0 1 194 183
////////////////////////////////////////////////////////////////////
// Function : set_length
//   Access : public
////////////////////////////////////////////////////////////////////
64
inline void LinearCylinderVortexForce::set_length(float length);

444 10 get_length 4 526 37 LinearCylinderVortexForce::get_length 0 1 195 183
////////////////////////////////////////////////////////////////////
// Function : get_length
//   Access : public
////////////////////////////////////////////////////////////////////
63
inline float LinearCylinderVortexForce::get_length(void) const;

445 14 get_class_type 4 526 41 LinearCylinderVortexForce::get_class_type 0 1 196 0
66
static TypeHandle LinearCylinderVortexForce::get_class_type(void);

446 10 set_radius 4 527 31 LinearDistanceForce::set_radius 0 1 197 221
////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : Public
// Description : set the radius
////////////////////////////////////////////////////////////////////
53
inline void LinearDistanceForce::set_radius(float r);

447 16 set_falloff_type 4 527 37 LinearDistanceForce::set_falloff_type 0 1 198 741
// Filename: linearDistanceForce.I
// Created by:  charles (21Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_falloff_type
//      Access : Public
// Description : falloff_type encapsulating wrap
////////////////////////////////////////////////////////////////////
87
inline void LinearDistanceForce::set_falloff_type(LinearDistanceForce::FalloffType ft);

448 16 set_force_center 4 527 37 LinearDistanceForce::set_force_center 0 1 199 233
////////////////////////////////////////////////////////////////////
//    Function : set_force_center
//      Access : Public
// Description : set the force center
////////////////////////////////////////////////////////////////////
69
inline void LinearDistanceForce::set_force_center(LPoint3f const &p);

449 10 get_radius 4 527 31 LinearDistanceForce::get_radius 0 1 200 219
////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius query
////////////////////////////////////////////////////////////////////
57
inline float LinearDistanceForce::get_radius(void) const;

450 16 get_falloff_type 4 527 37 LinearDistanceForce::get_falloff_type 0 1 201 231
////////////////////////////////////////////////////////////////////
//    Function : get_falloff_type
//      Access : public
// Description : falloff_type query
////////////////////////////////////////////////////////////////////
90
inline LinearDistanceForce::FalloffType LinearDistanceForce::get_falloff_type(void) const;

451 16 get_force_center 4 527 37 LinearDistanceForce::get_force_center 0 1 202 231
////////////////////////////////////////////////////////////////////
//    Function : get_force_center
//      Access : public
// Description : force_center query
////////////////////////////////////////////////////////////////////
66
inline LPoint3f LinearDistanceForce::get_force_center(void) const;

452 15 get_scalar_term 4 527 36 LinearDistanceForce::get_scalar_term 0 1 203 248
////////////////////////////////////////////////////////////////////
//    Function : get_scalar_term
//      Access : private
// Description : calculate the term based on falloff
////////////////////////////////////////////////////////////////////
62
inline float LinearDistanceForce::get_scalar_term(void) const;

453 14 get_class_type 4 527 35 LinearDistanceForce::get_class_type 0 1 204 0
60
static TypeHandle LinearDistanceForce::get_class_type(void);

454 21 LinearEulerIntegrator 4 530 44 LinearEulerIntegrator::LinearEulerIntegrator 0 1 205 232
////////////////////////////////////////////////////////////////////
//     Function : LinearEulerIntegrator
//       Access : Public
//  Description : constructor
////////////////////////////////////////////////////////////////////
51
LinearEulerIntegrator::LinearEulerIntegrator(void);

455 19 LinearFrictionForce 4 531 40 LinearFrictionForce::LinearFrictionForce 0 5 206 207 208 209 210 461
////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
163
LinearFrictionForce::LinearFrictionForce(float coef = (1), float a = (1), bool m = (0));
LinearFrictionForce::LinearFrictionForce(LinearFrictionForce const &copy);

456 8 set_coef 4 531 29 LinearFrictionForce::set_coef 0 1 211 678
// Filename: linearFrictionForce.I
// Created by:  charles (31Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_coef
//   Access : public
////////////////////////////////////////////////////////////////////
54
inline void LinearFrictionForce::set_coef(float coef);

457 8 get_coef 4 531 29 LinearFrictionForce::get_coef 0 1 212 181
////////////////////////////////////////////////////////////////////
// Function : get_coef
//   Access : public
////////////////////////////////////////////////////////////////////
55
inline float LinearFrictionForce::get_coef(void) const;

458 14 get_class_type 4 531 35 LinearFrictionForce::get_class_type 0 1 213 0
60
static TypeHandle LinearFrictionForce::get_class_type(void);

459 14 get_class_type 4 532 33 LinearRandomForce::get_class_type 0 1 214 0
58
static TypeHandle LinearRandomForce::get_class_type(void);

460 17 LinearJitterForce 4 533 36 LinearJitterForce::LinearJitterForce 0 4 215 216 217 218 457
////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
135
LinearJitterForce::LinearJitterForce(float a = (1), bool m = (0));
LinearJitterForce::LinearJitterForce(LinearJitterForce const &copy);

461 14 get_class_type 4 533 33 LinearJitterForce::get_class_type 0 1 219 0
58
static TypeHandle LinearJitterForce::get_class_type(void);

462 16 LinearNoiseForce 4 534 34 LinearNoiseForce::LinearNoiseForce 0 4 220 221 222 223 461
////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : copy constructor
////////////////////////////////////////////////////////////////////
130
LinearNoiseForce::LinearNoiseForce(float a = (1), bool m = (0));
LinearNoiseForce::LinearNoiseForce(LinearNoiseForce const &copy);

463 14 get_class_type 4 534 32 LinearNoiseForce::get_class_type 0 1 224 0
57
static TypeHandle LinearNoiseForce::get_class_type(void);

464 15 LinearSinkForce 4 535 32 LinearSinkForce::LinearSinkForce 0 5 225 226 227 228 229 692
////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
229
LinearSinkForce::LinearSinkForce(LPoint3f const &p, LinearDistanceForce::FalloffType f, float r, float a = (1), bool m = (1));
LinearSinkForce::LinearSinkForce(void);
LinearSinkForce::LinearSinkForce(LinearSinkForce const &copy);

465 14 get_class_type 4 535 31 LinearSinkForce::get_class_type 0 1 230 0
56
static TypeHandle LinearSinkForce::get_class_type(void);

466 17 LinearSourceForce 4 536 36 LinearSourceForce::LinearSourceForce 0 5 231 232 233 234 235 698
////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
246
LinearSourceForce::LinearSourceForce(LPoint3f const &p, LinearDistanceForce::FalloffType f, float r, float a = (1), bool mass = (1));
LinearSourceForce::LinearSourceForce(void);
LinearSourceForce::LinearSourceForce(LinearSourceForce const &copy);

467 14 get_class_type 4 536 33 LinearSourceForce::get_class_type 0 1 236 0
58
static TypeHandle LinearSourceForce::get_class_type(void);

468 22 LinearUserDefinedForce 4 537 46 LinearUserDefinedForce::LinearUserDefinedForce 0 2 237 238 467
////////////////////////////////////////////////////////////////////
//    Function : LinearUserDefinedForce
//      Access : public
// Description : constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : LinearUserDefinedForce
//      Access : public
// Description : copy constructor
////////////////////////////////////////////////////////////////////
219
LinearUserDefinedForce::LinearUserDefinedForce(LVector3f (*proc)(PhysicsObject const *) = ((void *)(0)), float a = (1), bool md = (0));
LinearUserDefinedForce::LinearUserDefinedForce(LinearUserDefinedForce const &copy);

469 8 set_proc 4 537 32 LinearUserDefinedForce::set_proc 0 0 681
// Filename: linearUserDefinedForce.I
// Created by:  charles (31Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_proc
//   Access : public
////////////////////////////////////////////////////////////////////
87
inline void LinearUserDefinedForce::set_proc(LVector3f (*proc)(PhysicsObject const *));

470 14 get_class_type 4 537 38 LinearUserDefinedForce::get_class_type 0 1 239 0
63
static TypeHandle LinearUserDefinedForce::get_class_type(void);

471 17 LinearVectorForce 4 538 36 LinearVectorForce::LinearVectorForce 0 10 240 241 242 243 244 245 246 247 248 249 718
////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Vector Constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Copy Constructor
////////////////////////////////////////////////////////////////////
275
LinearVectorForce::LinearVectorForce(LVector3f const &vec, float a = (1), bool mass = (0));
LinearVectorForce::LinearVectorForce(LinearVectorForce const &copy);
LinearVectorForce::LinearVectorForce(float x = (0), float y = (0), float z = (0), float a = (1), bool mass = (0));

472 10 set_vector 4 538 29 LinearVectorForce::set_vector 0 2 250 251 963
// Filename: linearVectorForce.I
// Created by:  charles (21Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : encapsulating wrapper
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : piecewise encapsulating wrapper
////////////////////////////////////////////////////////////////////
132
inline void LinearVectorForce::set_vector(LVector3f const &v);
inline void LinearVectorForce::set_vector(float x, float y, float z);

473 16 get_local_vector 4 538 35 LinearVectorForce::get_local_vector 0 1 252 212
////////////////////////////////////////////////////////////////////
//    Function : get_local_vector
//      Access : Public
// Description :
////////////////////////////////////////////////////////////////////
65
inline LVector3f LinearVectorForce::get_local_vector(void) const;

474 14 get_class_type 4 538 33 LinearVectorForce::get_class_type 0 1 253 0
58
static TypeHandle LinearVectorForce::get_class_type(void);

475 23 PhysicsCollisionHandler 4 539 48 PhysicsCollisionHandler::PhysicsCollisionHandler 0 1 254 232
////////////////////////////////////////////////////////////////////
//     Function: PhysicsCollisionHandler::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
PhysicsCollisionHandler::PhysicsCollisionHandler(void);

476 27 set_almost_stationary_speed 4 539 52 PhysicsCollisionHandler::set_almost_stationary_speed 0 1 255 48
// These setters and getter are a bit of a hack:
78
inline void PhysicsCollisionHandler::set_almost_stationary_speed(float speed);

477 27 get_almost_stationary_speed 4 539 52 PhysicsCollisionHandler::get_almost_stationary_speed 0 1 256 48
// These setters and getter are a bit of a hack:
72
inline float PhysicsCollisionHandler::get_almost_stationary_speed(void);

478 24 set_static_friction_coef 4 539 49 PhysicsCollisionHandler::set_static_friction_coef 0 1 257 0
74
inline void PhysicsCollisionHandler::set_static_friction_coef(float coef);

479 24 get_static_friction_coef 4 539 49 PhysicsCollisionHandler::get_static_friction_coef 0 1 258 0
69
inline float PhysicsCollisionHandler::get_static_friction_coef(void);

480 25 set_dynamic_friction_coef 4 539 50 PhysicsCollisionHandler::set_dynamic_friction_coef 0 1 259 0
75
inline void PhysicsCollisionHandler::set_dynamic_friction_coef(float coef);

481 25 get_dynamic_friction_coef 4 539 50 PhysicsCollisionHandler::get_dynamic_friction_coef 0 1 260 0
70
inline float PhysicsCollisionHandler::get_dynamic_friction_coef(void);

482 14 get_class_type 4 539 39 PhysicsCollisionHandler::get_class_type 0 1 261 0
64
static TypeHandle PhysicsCollisionHandler::get_class_type(void);

483 14 PhysicsManager 4 541 30 PhysicsManager::PhysicsManager 0 1 262 300
////////////////////////////////////////////////////////////////////
//     Function : PhysicsManager
//       Access : Public
//  Description : Default Constructor.  NOTE: EulerIntegrator is
//                the standard default.
////////////////////////////////////////////////////////////////////
37
PhysicsManager::PhysicsManager(void);

484 15 ~PhysicsManager 4 541 31 PhysicsManager::~PhysicsManager 0 0 232
////////////////////////////////////////////////////////////////////
//     Function : ~PhysicsManager
//       Access : Public
//  Description : Simple Destructor
////////////////////////////////////////////////////////////////////
46
virtual PhysicsManager::~PhysicsManager(void);

485 24 attach_linear_integrator 4 541 40 PhysicsManager::attach_linear_integrator 0 1 263 263
////////////////////////////////////////////////////////////////////
//    Function : attach_linear_integrator
//      Access : Public
// Description : Hooks a linear integrator into the manager
////////////////////////////////////////////////////////////////////
74
inline void PhysicsManager::attach_linear_integrator(LinearIntegrator *i);

486 25 attach_angular_integrator 4 541 41 PhysicsManager::attach_angular_integrator 0 1 264 266
////////////////////////////////////////////////////////////////////
//    Function : attach_angular_integrator
//      Access : Public
// Description : Hooks an angular integrator into the manager
////////////////////////////////////////////////////////////////////
76
inline void PhysicsManager::attach_angular_integrator(AngularIntegrator *i);

487 15 attach_physical 4 541 31 PhysicsManager::attach_physical 0 1 265 747
// Filename: physicsManager.I
// Created by:  charles (14Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : attach_physical
//      Access : Public
// Description : Registers a Physical class with the manager
////////////////////////////////////////////////////////////////////
57
inline void PhysicsManager::attach_physical(Physical *p);

488 19 attach_physicalnode 4 541 35 PhysicsManager::attach_physicalnode 0 1 266 257
////////////////////////////////////////////////////////////////////
//    Function : attach_physicalnode
//      Access : Public
// Description : Please call attach_physical_node instead.
////////////////////////////////////////////////////////////////////
65
inline void PhysicsManager::attach_physicalnode(PhysicalNode *p);

489 20 attach_physical_node 4 541 36 PhysicsManager::attach_physical_node 0 1 267 296
// use attach_physical_node instead.

////////////////////////////////////////////////////////////////////
//    Function : attach_physical_node
//      Access : Public
// Description : Registers a physicalnode with the manager
////////////////////////////////////////////////////////////////////
66
inline void PhysicsManager::attach_physical_node(PhysicalNode *p);

490 16 add_linear_force 4 541 32 PhysicsManager::add_linear_force 0 1 268 303
// use attach_physical_node instead.

////////////////////////////////////////////////////////////////////
//    Function : attach_linear_force
//      Access : Public
// Description : Adds a global linear force to the physics manager
////////////////////////////////////////////////////////////////////
61
inline void PhysicsManager::add_linear_force(LinearForce *f);

491 17 add_angular_force 4 541 33 PhysicsManager::add_angular_force 0 1 269 267
////////////////////////////////////////////////////////////////////
//    Function : attach_angular_force
//      Access : Public
// Description : Adds a global angular force to the physics manager
////////////////////////////////////////////////////////////////////
63
inline void PhysicsManager::add_angular_force(AngularForce *f);

492 19 clear_linear_forces 4 541 35 PhysicsManager::clear_linear_forces 0 1 270 255
////////////////////////////////////////////////////////////////////
//    Function : clear_linear_forces
//      Access : Public
// Description : Resets the physics manager force vector
////////////////////////////////////////////////////////////////////
54
inline void PhysicsManager::clear_linear_forces(void);

493 20 clear_angular_forces 4 541 36 PhysicsManager::clear_angular_forces 0 1 271 256
////////////////////////////////////////////////////////////////////
//    Function : clear_angular_forces
//      Access : Public
// Description : Resets the physics manager force vector
////////////////////////////////////////////////////////////////////
55
inline void PhysicsManager::clear_angular_forces(void);

494 15 clear_physicals 4 541 31 PhysicsManager::clear_physicals 0 1 272 253
////////////////////////////////////////////////////////////////////
//    Function : clear_physicals
//      Access : Public
// Description : Resets the physics manager objects vector
////////////////////////////////////////////////////////////////////
50
inline void PhysicsManager::clear_physicals(void);

495 13 set_viscosity 4 541 29 PhysicsManager::set_viscosity 0 1 273 235
////////////////////////////////////////////////////////////////////
//    Function : set_viscosity
//      Access : Public
// Description : Set the global viscosity.
////////////////////////////////////////////////////////////////////
59
inline void PhysicsManager::set_viscosity(float viscosity);

496 13 get_viscosity 4 541 29 PhysicsManager::get_viscosity 0 1 274 235
////////////////////////////////////////////////////////////////////
//    Function : get_viscosity
//      Access : Public
// Description : Get the global viscosity.
////////////////////////////////////////////////////////////////////
55
inline float PhysicsManager::get_viscosity(void) const;

497 15 remove_physical 4 541 31 PhysicsManager::remove_physical 0 1 275 254
////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : Public
//  Description : takes a physical out of the object list
////////////////////////////////////////////////////////////////////
50
void PhysicsManager::remove_physical(Physical *p);

498 20 remove_physical_node 4 541 36 PhysicsManager::remove_physical_node 0 1 276 256
////////////////////////////////////////////////////////////////////
//    Function : remove_physical_node
//      Access : Public
// Description : Removes a physicalnode from the manager
////////////////////////////////////////////////////////////////////
59
void PhysicsManager::remove_physical_node(PhysicalNode *p);

499 19 remove_linear_force 4 541 35 PhysicsManager::remove_linear_force 0 1 277 263
////////////////////////////////////////////////////////////////////
//     Function : remove_linear_force
//       Access : Public
//  Description : takes a linear force out of the physics list
////////////////////////////////////////////////////////////////////
57
void PhysicsManager::remove_linear_force(LinearForce *f);

500 20 remove_angular_force 4 541 36 PhysicsManager::remove_angular_force 0 1 278 266
////////////////////////////////////////////////////////////////////
//     Function : remove_angular_force
//       Access : Public
//  Description : takes an angular force out of the physics list
////////////////////////////////////////////////////////////////////
59
void PhysicsManager::remove_angular_force(AngularForce *f);

501 10 do_physics 4 541 26 PhysicsManager::do_physics 0 2 279 280 688
////////////////////////////////////////////////////////////////////
//     Function : DoPhysics
//       Access : Public
//  Description : This is the main high-level API call.  Performs
//                integration on every attached Physical.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : DoPhysics
//       Access : Public
//  Description : This is the main high-level API call.  Performs
//                integration on a single physical.  Make sure its 
//                associated forces are active.
////////////////////////////////////////////////////////////////////
98
void PhysicsManager::do_physics(float dt);
void PhysicsManager::do_physics(float dt, Physical *p);

502 16 init_random_seed 4 541 32 PhysicsManager::init_random_seed 0 1 281 388
////////////////////////////////////////////////////////////////////
//     Function : InitRandomSeed
//       Access : Public
//  Description : One-time config function, sets up the random seed
//                used by the physics and particle systems.
//                For synchronizing across distributed computers
////////////////////////////////////////////////////////////////////
44
void PhysicsManager::init_random_seed(void);

503 6 output 4 541 22 PhysicsManager::output 0 1 282 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
56
virtual void PhysicsManager::output(ostream &out) const;

504 15 write_physicals 4 541 31 PhysicsManager::write_physicals 0 2 283 284 289
////////////////////////////////////////////////////////////////////
//     Function : write_physicals
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
92
virtual void PhysicsManager::write_physicals(ostream &out, unsigned int indent = (0)) const;

505 19 write_linear_forces 4 541 35 PhysicsManager::write_linear_forces 0 2 285 286 286
////////////////////////////////////////////////////////////////////
//     Function : write_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
96
virtual void PhysicsManager::write_linear_forces(ostream &out, unsigned int indent = (0)) const;

506 20 write_angular_forces 4 541 36 PhysicsManager::write_angular_forces 0 2 287 288 294
////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
97
virtual void PhysicsManager::write_angular_forces(ostream &out, unsigned int indent = (0)) const;

507 5 write 4 541 21 PhysicsManager::write 0 2 289 290 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
82
virtual void PhysicsManager::write(ostream &out, unsigned int indent = (0)) const;

508 12 debug_output 4 541 28 PhysicsManager::debug_output 0 2 291 292 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
89
virtual void PhysicsManager::debug_output(ostream &out, unsigned int indent = (0)) const;

292
1 14 Dtool_9fJJ19Dv 7 3 542 0 14 Dtool_9fJJ19Dv 232 ////////////////////////////////////////////////////////////////////
//     Function : PhysicsObject
//       Access : Public
//  Description : Default Constructor
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_9fJJniDU 7 3 542 0 14 Dtool_9fJJniDU 229 ////////////////////////////////////////////////////////////////////
//     Function : PhysicsObject
//       Access : Public
//  Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 543  
3 14 Dtool_9fJJK_qc 7 4 542 0 14 Dtool_9fJJK_qc 218 ////////////////////////////////////////////////////////////////////
//     Function : Assignment operator
//       Access : Public
//  Description :
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  5 other 1 543  
4 14 Dtool_9fJJk3K1 4 5 546 0 14 Dtool_9fJJk3K1 230 ////////////////////////////////////////////////////////////////////
//    Function : set_active
//      Access : Public
// Description : Process Flag assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  4 flag 1 545  
5 14 Dtool_9fJJA4xf 6 6 545 0 14 Dtool_9fJJA4xf 225 ////////////////////////////////////////////////////////////////////
//    Function : get_active
//      Access : Public
// Description : Process Flag Query
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
6 14 Dtool_9fJJ7Zyt 4 7 546 0 14 Dtool_9fJJ7Zyt 733 // Filename: physicsObject.I
// Created by:  charles (13Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_mass
//      Access : Public
// Description : Set the mass in slugs (or kilograms).
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  6 param0 0 547  
7 14 Dtool_9fJJ4psm 6 8 547 0 14 Dtool_9fJJ4psm 242 ////////////////////////////////////////////////////////////////////
//    Function : get_mass
//      Access : Public
// Description : Get the mass in slugs (or kilograms).
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
8 14 Dtool_9fJJxgAg 4 9 546 0 14 Dtool_9fJJxgAg 295 ////////////////////////////////////////////////////////////////////
//    Function : set_position
//      Access : Public
// Description : Vector position assignment.  This is also used as
//               the center of mass.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  3 pos 1 548  
9 14 Dtool_9fJJ2VGQ 4 9 546 0 14 Dtool_9fJJ2VGQ 238 ////////////////////////////////////////////////////////////////////
//    Function : set_position
//      Access : Public
// Description : Piecewise position assignment
//////////////////////////////////////////////////////////////////// 4 4 this 3 542  1 x 1 547  1 y 1 547  1 z 1 547  
10 14 Dtool_9fJJ2Mf1 7 10 551 0 14 Dtool_9fJJ2Mf1 223 ////////////////////////////////////////////////////////////////////
//    Function : get_position
//      Access : Public
// Description : Position Query
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
11 14 Dtool_9fJJrXx9 4 11 546 0 14 Dtool_9fJJrXx9 349 ////////////////////////////////////////////////////////////////////
//    Function : reset_position
//      Access : Public
// Description : use this to place an object in a completely new
//               position, that has nothing to do with its last
//               position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  3 pos 1 548  
12 14 Dtool_9fJJy9P2 4 12 546 0 14 Dtool_9fJJy9P2 238 ////////////////////////////////////////////////////////////////////
//    Function : set_last_position
//      Access : Public
// Description : Last position assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  3 pos 1 548  
13 14 Dtool_9fJJfPBj 7 13 551 0 14 Dtool_9fJJfPBj 313 ////////////////////////////////////////////////////////////////////
//    Function : get_last_position
//      Access : Public
// Description : Get the position of the physics object at the start
//               of the most recent do_physics.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
14 14 Dtool_9fJJZTzH 4 14 546 0 14 Dtool_9fJJZTzH 235 ////////////////////////////////////////////////////////////////////
//    Function : set_velocity
//      Access : Public
// Description : Vector velocity assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  3 vel 1 552  
15 14 Dtool_9fJJAJOH 4 14 546 0 14 Dtool_9fJJAJOH 238 ////////////////////////////////////////////////////////////////////
//    Function : set_velocity
//      Access : Public
// Description : Piecewise velocity assignment
//////////////////////////////////////////////////////////////////// 4 4 this 3 542  1 x 1 547  1 y 1 547  1 z 1 547  
16 14 Dtool_9fJJYDns 7 15 555 0 14 Dtool_9fJJYDns 234 ////////////////////////////////////////////////////////////////////
//    Function : get_velocity
//      Access : Public
// Description : Velocity Query per second
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
17 14 Dtool_9fJJm1Ut 7 16 555 0 14 Dtool_9fJJm1Ut 249 ////////////////////////////////////////////////////////////////////
//    Function : get_implicit_velocity
//      Access : Public
// Description : Velocity Query over the last dt
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
18 14 Dtool_9fJJfYuT 4 17 546 0 14 Dtool_9fJJfYuT 445 ////////////////////////////////////////////////////////////////////
//    Function : add_torque
//      Access : Public
// Description : Adds an torque force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               angular velocity, add a vector to it and set that
//               value to be the new angular velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  6 torque 1 556  
19 14 Dtool_9fJJuEW4 4 18 546 0 14 Dtool_9fJJuEW4 431 ////////////////////////////////////////////////////////////////////
//    Function : add_impulse
//      Access : Public
// Description : Adds an impulse force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               velocity, add a vector to it and set that value to
//               be the new velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  7 impulse 1 552  
20 14 Dtool_9fJJpp9_ 4 19 546 0 14 Dtool_9fJJpp9_ 656 ////////////////////////////////////////////////////////////////////
//    Function : add_impact
//      Access : Public
// Description : Adds an impulse and/or torque (i.e. an instantanious
//               change in velocity) based on how well the offset and
//               impulse align with the center of mass (aka position).
//               If you wanted to immitate this function you could
//               work out the impulse and torque and call add_impulse
//               and add_torque respectively.
//               offset and force are in global (or parent) coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 542  26 offset_from_center_of_mass 1 548  7 impulse 1 552  
21 14 Dtool_9fJJQTAy 4 20 546 0 14 Dtool_9fJJQTAy 451 ////////////////////////////////////////////////////////////////////
//    Function : add_local_torque
//      Access : Public
// Description : Adds an torque force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               angular velocity, add a vector to it and set that
//               value to be the new angular velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  6 torque 1 556  
22 14 Dtool_9fJJyfsY 4 21 546 0 14 Dtool_9fJJyfsY 437 ////////////////////////////////////////////////////////////////////
//    Function : add_local_impulse
//      Access : Public
// Description : Adds an impulse force (i.e. an instantanious change
//               in velocity).  This is a quicker way to get the 
//               velocity, add a vector to it and set that value to
//               be the new velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  7 impulse 1 552  
23 14 Dtool_9fJJ4miC 4 22 546 0 14 Dtool_9fJJ4miC 649 ////////////////////////////////////////////////////////////////////
//    Function : add_local_impact
//      Access : Public
// Description : Adds an impulse and/or torque (i.e. an instantanious
//               change in velocity) based on how well the offset and
//               impulse align with the center of mass (aka position).
//               If you wanted to immitate this function you could
//               work out the impulse and torque and call add_impulse
//               and add_torque respectively.
//               offset and force are in local coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 542  26 offset_from_center_of_mass 1 548  7 impulse 1 552  
24 14 Dtool_9fJJcEdt 4 23 546 0 14 Dtool_9fJJcEdt 231 ////////////////////////////////////////////////////////////////////
//    Function : set_terminal_velocity
//      Access : Public
// Description : tv assignment
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  2 tv 1 547  
25 14 Dtool_9fJJVEE2 6 24 547 0 14 Dtool_9fJJVEE2 226 ////////////////////////////////////////////////////////////////////
//    Function : get_terminal_velocity
//      Access : Public
// Description : tv query
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
26 14 Dtool_9fJJ_NXG 4 25 546 0 14 Dtool_9fJJ_NXG 334 ////////////////////////////////////////////////////////////////////
//    Function : set_oriented
//      Access : Public
// Description : Set flag to determine whether this object should do
//               any rotation or orientation calculations.  Optimization.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  4 flag 1 545  
27 14 Dtool_9fJJeb01 6 26 545 0 14 Dtool_9fJJeb01 228 ////////////////////////////////////////////////////////////////////
//    Function : get_oriented
//      Access : Public
// Description : See set_oriented().
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
28 14 Dtool_9fJJQXq_ 4 27 546 0 14 Dtool_9fJJQXq_ 211 ////////////////////////////////////////////////////////////////////
//    Function : set_orientation
//      Access : Public
// Description :
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  11 orientation 1 559  
29 14 Dtool_9fJJLaE6 7 28 562 0 14 Dtool_9fJJLaE6 236 ////////////////////////////////////////////////////////////////////
//    Function : get_orientation
//      Access : Public
// Description : get current orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
30 14 Dtool_9fJJueOQ 4 29 546 0 14 Dtool_9fJJueOQ 288 ////////////////////////////////////////////////////////////////////
//    Function : reset_orientation
//      Access : Public
// Description : set the orientation while clearing the rotation
//               velocity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  11 orientation 1 559  
31 14 Dtool_9fJJnwCa 4 30 546 0 14 Dtool_9fJJnwCa 255 ////////////////////////////////////////////////////////////////////
//    Function : set_rotation
//      Access : Public
// Description : set rotation as a quaternion delta per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 542  8 rotation 1 556  
32 14 Dtool_9fJJYNx7 7 31 563 0 14 Dtool_9fJJYNx7 233 ////////////////////////////////////////////////////////////////////
//    Function : get_rotation
//      Access : Public
// Description : get rotation per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
33 14 Dtool_9fJJ2KW7 7 32 565 0 14 Dtool_9fJJ2KW7 318 ////////////////////////////////////////////////////////////////////
//     Function : get_inertial_tensor
//       Access : Public
//  Description : returns a transform matrix that represents the
//                object's willingness to be forced.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
34 14 Dtool_9fJJj4Kt 7 33 565 0 14 Dtool_9fJJj4Kt 293 ////////////////////////////////////////////////////////////////////
//     Function : get_lcs
//       Access : Public
//  Description : returns a transform matrix to this object's
//                local coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
35 14 Dtool_9fJJWP2J 7 34 542 0 14 Dtool_9fJJWP2J 231 ////////////////////////////////////////////////////////////////////
//     Function : make_copy
//       Access : Public, virtual
//  Description : dynamic copy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 543  
36 14 Dtool_9fJJkx3h 4 35 546 0 14 Dtool_9fJJkx3h 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 543  3 out 1 566  
37 14 Dtool_9fJJygbI 4 36 546 0 14 Dtool_9fJJygbI 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 543  3 out 1 566  6 indent 1 568  
38 14 Dtool_9fJJax5t 4 36 546 0 14 Dtool_9fJJax5t 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 543  3 out 1 566  
39 14 Dtool_9fJJbfoM 7 37 570 0 14 Dtool_9fJJbfoM 0 0 
40 14 Dtool_9fJJyOhw 7 39 571 330 14 Dtool_9fJJyOhw 235 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
41 14 Dtool_9fJJc5Rv 7 39 571 330 14 Dtool_9fJJc5Rv 240 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 572  
42 14 Dtool_9fJJWCBo 6 40 571 0 14 Dtool_9fJJWCBo 248 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  4 copy 1 572  
43 14 Dtool_9fJJ37uu 4 42 546 0 14 Dtool_9fJJ37uu 286 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::add_physics_object
//       Access: Published
//  Description: Adds a new PhysicsObject to the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  14 physics_object 1 542  
44 14 Dtool_9fJJq7HH 6 43 545 0 14 Dtool_9fJJq7HH 432 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_physics_object
//       Access: Published
//  Description: Removes the indicated PhysicsObject from the collection.
//               Returns true if the physics_object was removed, false if it was
//               not a member of the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  14 physics_object 1 542  
45 14 Dtool_9fJJZbIx 4 44 546 0 14 Dtool_9fJJZbIx 537 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::add_physics_objects_from
//       Access: Published
//  Description: Adds all the PhysicsObjects indicated in the other
//               collection to this collection.  The other 
//               physics_objects are simply appended to the end of 
//               the physics_objects in this list;
//               duplicates are not automatically removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  5 other 1 572  
46 14 Dtool_9fJJ7olt 4 45 546 0 14 Dtool_9fJJ7olt 355 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_physics_objects_from
//       Access: Published
//  Description: Removes from this collection all of the PhysicsObjects
//               listed in the other collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  5 other 1 572  
47 14 Dtool_9fJJ5KRU 4 46 546 0 14 Dtool_9fJJ5KRU 498 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::remove_duplicate_physics_objects
//       Access: Published
//  Description: Removes any duplicate entries of the same PhysicsObjects
//               on this collection.  If a PhysicsObject appears multiple
//               times, the first appearance is retained; subsequent
//               appearances are removed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
48 14 Dtool_9fJJmH8j 6 47 545 0 14 Dtool_9fJJmH8j 348 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::has_physics_object
//       Access: Published
//  Description: Returns true if the indicated PhysicsObject appears in
//               this collection, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  14 physics_object 1 542  
49 14 Dtool_9fJJRYCU 4 48 546 0 14 Dtool_9fJJRYCU 277 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::clear
//       Access: Published
//  Description: Removes all PhysicsObjects from the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 571  
50 14 Dtool_9fJJShsa 6 49 545 0 14 Dtool_9fJJShsa 329 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::is_empty
//       Access: Published
//  Description: Returns true if there are no PhysicsObjects in the
//               collection, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 572  
51 14 Dtool_9fJJ_B6j 6 50 574 0 14 Dtool_9fJJ_B6j 303 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::get_num_physics_objects
//       Access: Published
//  Description: Returns the number of PhysicsObjects in the collection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 572  
52 14 Dtool_9fJJ0X4b 7 51 542 0 14 Dtool_9fJJ0X4b 291 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::get_physics_object
//       Access: Published
//  Description: Returns the nth PhysicsObject in the collection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  5 index 1 574  
53 14 Dtool_9fJJSyZT 7 52 542 0 14 Dtool_9fJJSyZT 411 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator []
//       Access: Published
//  Description: Returns the nth PhysicsObject in the collection.  This is
//               the same as get_physics_object(), but it may be a more
//               convenient way to access it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  5 index 1 574  
54 14 Dtool_9fJJ2SyP 6 53 574 0 14 Dtool_9fJJ2SyP 373 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::size
//       Access: Published
//  Description: Returns the number of physics objects in the
//               collection.  This is the same thing as
//               get_num_physics_objects().
//////////////////////////////////////////////////////////////////// 1 4 this 3 572  
55 14 Dtool_9fJJOZH9 6 54 571 0 14 Dtool_9fJJOZH9 284 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator +=
//       Access: Published
//  Description: Appends the other list onto the end of this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 571  5 other 1 572  
56 14 Dtool_9fJJyMtg 7 55 571 330 14 Dtool_9fJJyMtg 334 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::operator +
//       Access: Published
//  Description: Returns a PhysicsObjectCollection representing the
//               concatenation of the two lists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  5 other 1 572  
57 14 Dtool_9fJJ8PTL 4 56 546 0 14 Dtool_9fJJ8PTL 346 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::output
//       Access: Published
//  Description: Writes a brief one-line description of the
//               PhysicsObjectCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  3 out 1 566  
58 14 Dtool_9fJJD0FZ 4 57 546 0 14 Dtool_9fJJD0FZ 350 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               PhysicsObjectCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 572  3 out 1 566  12 indent_level 1 574  
59 14 Dtool_9fJJTrb7 4 57 546 0 14 Dtool_9fJJTrb7 350 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsObjectCollection::write
//       Access: Published
//  Description: Writes a complete multi-line description of the
//               PhysicsObjectCollection to the indicated output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 572  3 out 1 566  
60 14 Dtool_9fJJkE3t 6 59 545 0 14 Dtool_9fJJkE3t 189 ////////////////////////////////////////////////////////////////////
//    Function : get_active
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 575  
61 14 Dtool_9fJJQQYE 4 60 546 0 14 Dtool_9fJJQQYE 189 ////////////////////////////////////////////////////////////////////
//    Function : set_active
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  6 active 1 545  
62 14 Dtool_9fJJw2t9 6 61 545 0 14 Dtool_9fJJw2t9 0 1 4 this 3 575  
63 14 Dtool_9fJJ_1U0 7 62 578 0 14 Dtool_9fJJ_1U0 680 // Filename: baseForce.I
// Created by:  charles (08Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : get_force_node
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 575  
64 14 Dtool_9fJJGFR8 7 63 580 0 14 Dtool_9fJJGFR8 198 ////////////////////////////////////////////////////////////////////
//    Function : get_force_node_path
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 575  
65 14 Dtool_9fJJbo8P 4 64 546 0 14 Dtool_9fJJbo8P 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 575  3 out 1 566  
66 14 Dtool_9fJJVFBH 4 65 546 0 14 Dtool_9fJJVFBH 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 575  3 out 1 566  12 indent_level 1 574  
67 14 Dtool_9fJJeSbQ 4 65 546 0 14 Dtool_9fJJeSbQ 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 575  3 out 1 566  
68 14 Dtool_9fJJ1Xv7 7 66 570 0 14 Dtool_9fJJ1Xv7 0 0 
69 14 Dtool_9fJJak2L 4 68 546 0 14 Dtool_9fJJak2L 0 2 4 this 3 581  1 a 1 547  
70 14 Dtool_9fJJK6uI 4 69 546 0 14 Dtool_9fJJK6uI 197 ////////////////////////////////////////////////////////////////////
//    Function : set_mass_Dependent
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 581  1 m 1 545  
71 14 Dtool_9fJJUWPK 6 70 547 0 14 Dtool_9fJJUWPK 192 ////////////////////////////////////////////////////////////////////
//    Function : get_amplitude
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
72 14 Dtool_9fJJbO05 6 71 545 0 14 Dtool_9fJJbO05 197 ////////////////////////////////////////////////////////////////////
//    Function : get_mass_dependent
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
73 14 Dtool_9fJJI9tL 4 72 546 0 14 Dtool_9fJJI9tL 195 ////////////////////////////////////////////////////////////////////
//    Function : set_vector_masks
//      Access : Public
//////////////////////////////////////////////////////////////////// 4 4 this 3 581  1 x 1 545  1 y 1 545  1 z 1 545  
74 14 Dtool_9fJJ0NvV 7 73 555 0 14 Dtool_9fJJ0NvV 195 ////////////////////////////////////////////////////////////////////
//    Function : set_vector_masks
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 581  
75 14 Dtool_9fJJVARA 7 74 555 0 14 Dtool_9fJJVARA 189 ////////////////////////////////////////////////////////////////////
//    Function : get_vector
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 581  2 po 1 543  
76 14 Dtool_9fJJyEgT 7 75 581 0 14 Dtool_9fJJyEgT 0 1 4 this 3 581  
77 14 Dtool_9fJJPD_f 4 76 546 0 14 Dtool_9fJJPD_f 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 582  3 out 1 566  6 indent 1 568  
78 14 Dtool_9fJJKRkx 4 76 546 0 14 Dtool_9fJJKRkx 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  3 out 1 566  
79 14 Dtool_9fJJEdvs 7 77 570 0 14 Dtool_9fJJEdvs 0 0 
80 14 Dtool_9fJJqGln 7 79 586 0 14 Dtool_9fJJqGln 0 1 4 this 3 584  
81 14 Dtool_9fJJGNn4 7 80 563 0 14 Dtool_9fJJGNn4 217 ////////////////////////////////////////////////////////////////////
//    Function : get_quat
//      Access : public
// Description : access query
//////////////////////////////////////////////////////////////////// 2 4 this 3 586  2 po 1 543  
82 14 Dtool_9fJJIedN 4 81 546 0 14 Dtool_9fJJIedN 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 584  3 out 1 566  6 indent 1 568  
83 14 Dtool_9fJJj8r_ 4 81 546 0 14 Dtool_9fJJj8r_ 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 584  3 out 1 566  
84 14 Dtool_9fJJlQpj 7 82 570 0 14 Dtool_9fJJlQpj 0 0 
85 14 Dtool_9fJJrW30 7 84 589 0 14 Dtool_9fJJrW30 352 ////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : copy constructor (note- does deep copy of pn's)
//                but does NOT attach itself to its template's
//                physicsmanager.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 587  
86 14 Dtool_9fJJvRxK 7 84 589 0 14 Dtool_9fJJvRxK 903 ////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : Default Constructor
//
//                The idea here is that most physicals will NOT 
//                be collections of sets (i.e. particle systems 
//                and whatever else).  Because of this, the default 
//                constructor, unless otherwise specified, will 
//                automatically allocate and initialize one 
//                PhysicalObject.  This makes it easier for 
//                high-level work.
//
//                pre-alloc is ONLY for multiple-object physicals, 
//                and if true, fills the physics_object vector 
//                with dead nodes, pre-allocating for the speed
//                end of the speed-vs-overhead deal.
//////////////////////////////////////////////////////////////////// 2 13 total_objects 1 574  9 pre_alloc 1 545  
87 14 Dtool_9fJJ36xJ 7 84 589 0 14 Dtool_9fJJ36xJ 903 ////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : Default Constructor
//
//                The idea here is that most physicals will NOT 
//                be collections of sets (i.e. particle systems 
//                and whatever else).  Because of this, the default 
//                constructor, unless otherwise specified, will 
//                automatically allocate and initialize one 
//                PhysicalObject.  This makes it easier for 
//                high-level work.
//
//                pre-alloc is ONLY for multiple-object physicals, 
//                and if true, fills the physics_object vector 
//                with dead nodes, pre-allocating for the speed
//                end of the speed-vs-overhead deal.
//////////////////////////////////////////////////////////////////// 1 13 total_objects 1 574  
88 14 Dtool_9fJJSZEx 7 84 589 0 14 Dtool_9fJJSZEx 903 ////////////////////////////////////////////////////////////////////
//     Function : Physical
//       Access : Public
//  Description : Default Constructor
//
//                The idea here is that most physicals will NOT 
//                be collections of sets (i.e. particle systems 
//                and whatever else).  Because of this, the default 
//                constructor, unless otherwise specified, will 
//                automatically allocate and initialize one 
//                PhysicalObject.  This makes it easier for 
//                high-level work.
//
//                pre-alloc is ONLY for multiple-object physicals, 
//                and if true, fills the physics_object vector 
//                with dead nodes, pre-allocating for the speed
//                end of the speed-vs-overhead deal.
//////////////////////////////////////////////////////////////////// 0 
89 14 Dtool_9fJJGnHU 6 85 590 0 14 Dtool_9fJJGnHU 198 ////////////////////////////////////////////////////////////////////
//    Function : get_physics_manager
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
90 14 Dtool_9fJJ_v4Q 7 86 591 0 14 Dtool_9fJJ_v4Q 196 ////////////////////////////////////////////////////////////////////
//    Function : get_physical_node
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
91 14 Dtool_9fJJgd4c 7 87 580 0 14 Dtool_9fJJgd4c 201 ////////////////////////////////////////////////////////////////////
//    Function : get_physical_node_path
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
92 14 Dtool_9fJJQp7H 7 88 542 0 14 Dtool_9fJJQp7H 192 ////////////////////////////////////////////////////////////////////
//    Function : get_phys_body
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
93 14 Dtool_9fJJkJZ_ 4 89 546 0 14 Dtool_9fJJkJZ_ 244 ////////////////////////////////////////////////////////////////////
//    Function : clear_linear_forces
//      Access : Public
// Description : Erases the linear force list
//////////////////////////////////////////////////////////////////// 1 4 this 3 589  
94 14 Dtool_9fJJY7oN 4 90 546 0 14 Dtool_9fJJY7oN 246 ////////////////////////////////////////////////////////////////////
//    Function : clear_angular_forces
//      Access : Public
// Description : Erases the angular force list
//////////////////////////////////////////////////////////////////// 1 4 this 3 589  
95 14 Dtool_9fJJJunY 4 91 546 0 14 Dtool_9fJJJunY 240 ////////////////////////////////////////////////////////////////////
//    Function : clear_physics_objects
//      Access : Public
// Description : Erases the object list
//////////////////////////////////////////////////////////////////// 1 4 this 3 589  
96 14 Dtool_9fJJYy0c 4 92 546 0 14 Dtool_9fJJYy0c 250 ////////////////////////////////////////////////////////////////////
//    Function : add_linear_force
//      Access : Public
// Description : Adds a linear force to the force list
//////////////////////////////////////////////////////////////////// 2 4 this 3 589  1 f 1 581  
97 14 Dtool_9fJJoNNk 4 93 546 0 14 Dtool_9fJJoNNk 253 ////////////////////////////////////////////////////////////////////
//    Function : add_angular_force
//      Access : Public
// Description : Adds an angular force to the force list
//////////////////////////////////////////////////////////////////// 2 4 this 3 589  1 f 1 586  
98 14 Dtool_9fJJGrhr 4 94 546 0 14 Dtool_9fJJGrhr 258 ////////////////////////////////////////////////////////////////////
//    Function : add_physics_object
//      Access : Public
// Description : Adds an object to the physics object vector
//////////////////////////////////////////////////////////////////// 2 4 this 3 589  2 po 1 542  
99 14 Dtool_9fJJlkU3 4 95 546 0 14 Dtool_9fJJlkU3 258 ////////////////////////////////////////////////////////////////////
//    Function : remove_linear_force
//      Access : Public
// Description : removes a linear force from the force list
//////////////////////////////////////////////////////////////////// 2 4 this 3 589  1 f 1 581  
100 14 Dtool_9fJJ3L9H 4 96 546 0 14 Dtool_9fJJ3L9H 261 ////////////////////////////////////////////////////////////////////
//    Function : remove_angular_force
//      Access : Public
// Description : removes an angular force from the force list
//////////////////////////////////////////////////////////////////// 2 4 this 3 589  1 f 1 586  
101 14 Dtool_9fJJ5ygv 6 97 574 0 14 Dtool_9fJJ5ygv 200 ////////////////////////////////////////////////////////////////////
//    Function : get_num_linear_forces
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
102 14 Dtool_9fJJPUJj 7 98 581 0 14 Dtool_9fJJPUJj 195 ////////////////////////////////////////////////////////////////////
//    Function : get_linear_force
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  5 index 1 574  
103 14 Dtool_9fJJJtUr 6 99 574 0 14 Dtool_9fJJJtUr 201 ////////////////////////////////////////////////////////////////////
//    Function : get_num_angular_forces
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
104 14 Dtool_9fJJBVLw 7 100 586 0 14 Dtool_9fJJBVLw 196 ////////////////////////////////////////////////////////////////////
//    Function : get_angular_force
//      Access : Public
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  5 index 1 574  
105 14 Dtool_9fJJPcA4 4 101 546 0 14 Dtool_9fJJPcA4 234 ////////////////////////////////////////////////////////////////////
//    Function : set_viscosity
//      Access : Public
// Description : Set the local viscosity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 589  9 viscosity 1 547  
106 14 Dtool_9fJJNx2x 6 102 547 0 14 Dtool_9fJJNx2x 234 ////////////////////////////////////////////////////////////////////
//    Function : get_viscosity
//      Access : Public
// Description : Get the local viscosity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
107 14 Dtool_9fJJ5O8k 7 103 572 0 14 Dtool_9fJJ5O8k 190 ////////////////////////////////////////////////////////////////////
//    Function : get_objects
//      Access : Public
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
108 14 Dtool_9fJJ9XnP 4 104 546 0 14 Dtool_9fJJ9XnP 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  3 out 1 566  
109 14 Dtool_9fJJqVpa 4 104 546 0 14 Dtool_9fJJqVpa 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
110 14 Dtool_9fJJPTed 4 105 546 0 14 Dtool_9fJJPTed 295 ////////////////////////////////////////////////////////////////////
//     Function : write_physics_objects
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 587  3 out 1 566  6 indent 1 568  
111 14 Dtool_9fJJ0ZIV 4 105 546 0 14 Dtool_9fJJ0ZIV 295 ////////////////////////////////////////////////////////////////////
//     Function : write_physics_objects
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  3 out 1 566  
112 14 Dtool_9fJJfDUt 4 105 546 0 14 Dtool_9fJJfDUt 295 ////////////////////////////////////////////////////////////////////
//     Function : write_physics_objects
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
113 14 Dtool_9fJJclJe 4 106 546 0 14 Dtool_9fJJclJe 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 587  3 out 1 566  6 indent 1 568  
114 14 Dtool_9fJJW_4i 4 106 546 0 14 Dtool_9fJJW_4i 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  3 out 1 566  
115 14 Dtool_9fJJ_CeX 4 106 546 0 14 Dtool_9fJJ_CeX 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
116 14 Dtool_9fJJHy5h 4 107 546 0 14 Dtool_9fJJHy5h 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 587  3 out 1 566  6 indent 1 568  
117 14 Dtool_9fJJXdr3 4 107 546 0 14 Dtool_9fJJXdr3 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  3 out 1 566  
118 14 Dtool_9fJJ_tdK 4 107 546 0 14 Dtool_9fJJ_tdK 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
119 14 Dtool_9fJJq83C 4 108 546 0 14 Dtool_9fJJq83C 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 587  3 out 1 566  6 indent 1 568  
120 14 Dtool_9fJJTZoV 4 108 546 0 14 Dtool_9fJJTZoV 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 587  3 out 1 566  
121 14 Dtool_9fJJ1xAo 4 108 546 0 14 Dtool_9fJJ1xAo 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 1 4 this 3 587  
122 14 Dtool_9fJJ4K_k 7 109 570 0 14 Dtool_9fJJ4K_k 0 0 
123 14 Dtool_9fJJQNir 7 112 591 0 14 Dtool_9fJJQNir 231 ////////////////////////////////////////////////////////////////////
//     Function : PhysicalNode
//       Access : public
//  Description : default constructor
//////////////////////////////////////////////////////////////////// 1 4 name 1 592  
124 14 Dtool_9fJJvC_W 4 113 546 0 14 Dtool_9fJJvC_W 670 // Filename: physicalNode.I
// Created by:  charles (01Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : clear
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 591  
125 14 Dtool_9fJJGi58 7 114 589 0 14 Dtool_9fJJGi58 187 ////////////////////////////////////////////////////////////////////
//  Function : get_physical
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 593  5 index 1 574  
126 14 Dtool_9fJJHtda 6 115 574 0 14 Dtool_9fJJHtda 192 ////////////////////////////////////////////////////////////////////
//  Function : get_num_physicals
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 593  
127 14 Dtool_9fJJmr3_ 4 116 546 0 14 Dtool_9fJJmr3_ 187 ////////////////////////////////////////////////////////////////////
//  Function : add_physical
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 591  8 physical 1 589  
128 14 Dtool_9fJJG36z 4 117 546 0 14 Dtool_9fJJG36z 234 ////////////////////////////////////////////////////////////////////
//     Function : add_physicals_from
//       Access : public
//  Description : append operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 591  5 other 1 593  
129 14 Dtool_9fJJz6iS 4 118 546 0 14 Dtool_9fJJz6iS 231 ////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : public
//  Description : remove operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 591  8 physical 1 589  
130 14 Dtool_9fJJOXfn 4 118 546 0 14 Dtool_9fJJOXfn 231 ////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : public
//  Description : remove operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 591  5 index 1 574  
131 14 Dtool_9fJJXwip 4 119 546 0 14 Dtool_9fJJXwip 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 593  3 out 1 566  6 indent 1 568  
132 14 Dtool_9fJJOEwa 4 119 546 0 14 Dtool_9fJJOEwa 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 593  3 out 1 566  
133 14 Dtool_9fJJohu_ 7 120 570 0 14 Dtool_9fJJohu_ 0 0 
134 14 Dtool_9fJJGS52 7 122 597 0 14 Dtool_9fJJGS52 226 ////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Copy Constructor.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 595  
135 14 Dtool_9fJJy4dn 7 122 597 0 14 Dtool_9fJJy4dn 220 ////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Constructor
//////////////////////////////////////////////////////////////////// 1 4 name 1 592  
136 14 Dtool_9fJJI6QP 7 122 597 0 14 Dtool_9fJJI6QP 220 ////////////////////////////////////////////////////////////////////
//     Function : ActorNode
//       Access : public
//  Description : Constructor
//////////////////////////////////////////////////////////////////// 0 
137 14 Dtool_9fJJDMRz 7 123 542 0 14 Dtool_9fJJDMRz 0 1 4 this 3 597  
138 14 Dtool_9fJJYUGc 4 124 546 0 14 Dtool_9fJJYUGc 702 // Filename: actorNode.I
// Created by:  charles (07Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_contact_vector
//      Access : Public
// Description : 
//////////////////////////////////////////////////////////////////// 2 4 this 3 597  14 contact_vector 1 552  
139 14 Dtool_9fJJjR9_ 6 125 552 0 14 Dtool_9fJJjR9_ 215 ////////////////////////////////////////////////////////////////////
//    Function : get_contact_vector
//      Access : Public
// Description : 
//////////////////////////////////////////////////////////////////// 1 4 this 3 595  
140 14 Dtool_9fJJ__bD 4 126 546 0 14 Dtool_9fJJ__bD 395 ////////////////////////////////////////////////////////////////////
//     Function : update_transform
//       Access : public
//  Description : this sets the transform generated by the contained
//                Physical, moving the node and subsequent geometry.
//                i.e. copy from PhysicsObject to PandaNode
//////////////////////////////////////////////////////////////////// 1 4 this 3 597  
141 14 Dtool_9fJJTfin 4 127 546 0 14 Dtool_9fJJTfin 0 2 4 this 3 597  5 limit 1 547  
142 14 Dtool_9fJJ2_Zr 7 128 570 0 14 Dtool_9fJJ2_Zr 0 0 
143 14 Dtool_9fJJ_Q1a 4 131 546 0 14 Dtool_9fJJ_Q1a 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 598  3 out 1 566  
144 14 Dtool_9fJJVRhD 4 132 546 0 14 Dtool_9fJJVRhD 307 ////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_linear_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 598  3 out 1 566  6 indent 1 568  
145 14 Dtool_9fJJUQbO 4 132 546 0 14 Dtool_9fJJUQbO 307 ////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_linear_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 598  3 out 1 566  
146 14 Dtool_9fJJiHWM 4 133 546 0 14 Dtool_9fJJiHWM 308 ////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_angular_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 598  3 out 1 566  6 indent 1 568  
147 14 Dtool_9fJJlQLo 4 133 546 0 14 Dtool_9fJJlQLo 308 ////////////////////////////////////////////////////////////////////
//     Function : write_precomputed_angular_matrices
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 598  3 out 1 566  
148 14 Dtool_9fJJZf2t 4 134 546 0 14 Dtool_9fJJZf2t 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 598  3 out 1 566  6 indent 1 568  
149 14 Dtool_9fJJ_kyb 4 134 546 0 14 Dtool_9fJJ_kyb 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 598  3 out 1 566  
150 14 Dtool_9fJJ4P7V 7 137 600 0 14 Dtool_9fJJ4P7V 233 ////////////////////////////////////////////////////////////////////
//     Function : AngularEulerIntegrator
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 0 
151 14 Dtool_9fJJaKTX 7 139 603 0 14 Dtool_9fJJaKTX 231 ////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 601  
152 14 Dtool_9fJJfSG2 7 139 603 0 14 Dtool_9fJJfSG2 226 ////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 4 quat 1 556  
153 14 Dtool_9fJJW9fj 7 139 603 0 14 Dtool_9fJJW9fj 226 ////////////////////////////////////////////////////////////////////
//    Function : AngularVectorForce
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 3 1 h 1 547  1 p 1 547  1 r 1 547  
154 14 Dtool_9fJJzyUf 4 140 546 0 14 Dtool_9fJJzyUf 677 // Filename: angularVectorForce.I
// Created by:  charles (09Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_quat
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 603  4 quat 1 556  
155 14 Dtool_9fJJl6zM 4 141 546 0 14 Dtool_9fJJl6zM 180 ////////////////////////////////////////////////////////////////////
// Function : set_hpr
//   Access : public
//////////////////////////////////////////////////////////////////// 4 4 this 3 603  1 h 1 547  1 p 1 547  1 r 1 547  
156 14 Dtool_9fJJlqTY 7 142 563 0 14 Dtool_9fJJlqTY 187 ////////////////////////////////////////////////////////////////////
// Function : get_local_quat
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 601  
157 14 Dtool_9fJJu8B7 7 143 570 0 14 Dtool_9fJJu8B7 0 0 
158 14 Dtool_9fJJPBy9 7 145 578 0 14 Dtool_9fJJPBy9 228 ////////////////////////////////////////////////////////////////////
//     Function : ForceNode
//       Access : public
//  Description : default constructor
//////////////////////////////////////////////////////////////////// 1 4 name 1 592  
159 14 Dtool_9fJJcXNM 4 146 546 0 14 Dtool_9fJJcXNM 667 // Filename: forceNode.I
// Created by:  charles (02Aug00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//  Function : clear
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 578  
160 14 Dtool_9fJJRzsU 7 147 577 0 14 Dtool_9fJJRzsU 184 ////////////////////////////////////////////////////////////////////
//  Function : get_force
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  5 index 1 574  
161 14 Dtool_9fJJLpP4 6 148 574 0 14 Dtool_9fJJLpP4 189 ////////////////////////////////////////////////////////////////////
//  Function : get_num_forces
//    Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 604  
162 14 Dtool_9fJJYnvh 4 149 546 0 14 Dtool_9fJJYnvh 184 ////////////////////////////////////////////////////////////////////
//  Function : add_force
//    Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  5 force 1 577  
163 14 Dtool_9fJJxhJz 4 150 546 0 14 Dtool_9fJJxhJz 231 ////////////////////////////////////////////////////////////////////
//     Function : add_forces_from
//       Access : public
//  Description : append operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  5 other 1 604  
164 14 Dtool_9fJJhgaF 4 151 546 0 14 Dtool_9fJJhgaF 228 ////////////////////////////////////////////////////////////////////
//     Function : remove_force
//       Access : public
//  Description : remove operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  1 f 1 577  
165 14 Dtool_9fJJ_QKj 4 151 546 0 14 Dtool_9fJJ_QKj 228 ////////////////////////////////////////////////////////////////////
//     Function : remove_force
//       Access : public
//  Description : remove operation
//////////////////////////////////////////////////////////////////// 2 4 this 3 578  5 index 1 574  
166 14 Dtool_9fJJGWKp 4 152 546 0 14 Dtool_9fJJGWKp 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 604  3 out 1 566  6 indent 1 568  
167 14 Dtool_9fJJ6BRM 4 152 546 0 14 Dtool_9fJJ6BRM 293 ////////////////////////////////////////////////////////////////////
//     Function : write_linear_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  3 out 1 566  
168 14 Dtool_9fJJuw7S 4 153 546 0 14 Dtool_9fJJuw7S 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 604  3 out 1 566  6 indent 1 568  
169 14 Dtool_9fJJOb8p 4 153 546 0 14 Dtool_9fJJOb8p 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 604  3 out 1 566  
170 14 Dtool_9fJJGQOV 7 154 570 0 14 Dtool_9fJJGQOV 0 0 
171 14 Dtool_9fJJdEHh 7 156 608 0 14 Dtool_9fJJdEHh 234 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 606  
172 14 Dtool_9fJJnvpE 7 156 608 0 14 Dtool_9fJJnvpE 236 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 3 2 po 1 543  1 a 1 547  4 mass 1 545  
173 14 Dtool_9fJJOXT4 7 156 608 0 14 Dtool_9fJJOXT4 236 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 2 2 po 1 543  1 a 1 547  
174 14 Dtool_9fJJzzhR 7 156 608 0 14 Dtool_9fJJzzhR 236 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 1 2 po 1 543  
175 14 Dtool_9fJJrBGx 7 156 608 0 14 Dtool_9fJJrBGx 236 ////////////////////////////////////////////////////////////////////
//     Function : LinearControlForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 0 
176 14 Dtool_9fJJBcIH 4 157 546 0 14 Dtool_9fJJBcIH 736 // Filename: linearControlForce.I
// Created by: Dave Schuyler (2006)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : clear_physics_object
//      Access : Public
// Description : encapsulating wrapper
//////////////////////////////////////////////////////////////////// 1 4 this 3 608  
177 14 Dtool_9fJJdZiu 4 158 546 0 14 Dtool_9fJJdZiu 236 ////////////////////////////////////////////////////////////////////
//    Function : set_physics_object
//      Access : Public
// Description : encapsulating wrapper
//////////////////////////////////////////////////////////////////// 2 4 this 3 608  2 po 1 543  
178 14 Dtool_9fJJkeFq 7 159 543 0 14 Dtool_9fJJkeFq 246 ////////////////////////////////////////////////////////////////////
//    Function : get_physics_object
//      Access : Public
// Description : piecewise encapsulating wrapper
//////////////////////////////////////////////////////////////////// 1 4 this 3 606  
179 14 Dtool_9fJJac16 4 160 546 0 14 Dtool_9fJJac16 228 ////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : encapsulating wrapper
//////////////////////////////////////////////////////////////////// 2 4 this 3 608  1 v 1 552  
180 14 Dtool_9fJJ_tD1 4 160 546 0 14 Dtool_9fJJ_tD1 238 ////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : piecewise encapsulating wrapper
//////////////////////////////////////////////////////////////////// 4 4 this 3 608  1 x 1 547  1 y 1 547  1 z 1 547  
181 14 Dtool_9fJJsAOU 7 161 555 0 14 Dtool_9fJJsAOU 212 ////////////////////////////////////////////////////////////////////
//    Function : get_local_vector
//      Access : Public
// Description :
//////////////////////////////////////////////////////////////////// 1 4 this 3 606  
182 14 Dtool_9fJJ6Mgp 7 162 570 0 14 Dtool_9fJJ6Mgp 0 0 
183 14 Dtool_9fJJx55x 7 164 611 0 14 Dtool_9fJJx55x 238 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 609  
184 14 Dtool_9fJJnCN4 7 164 611 0 14 Dtool_9fJJnCN4 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 5 6 radius 1 547  6 length 1 547  4 coef 1 547  1 a 1 547  2 md 1 545  
185 14 Dtool_9fJJCnEA 7 164 611 0 14 Dtool_9fJJCnEA 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 4 6 radius 1 547  6 length 1 547  4 coef 1 547  1 a 1 547  
186 14 Dtool_9fJJStkP 7 164 611 0 14 Dtool_9fJJStkP 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 3 6 radius 1 547  6 length 1 547  4 coef 1 547  
187 14 Dtool_9fJJfl9B 7 164 611 0 14 Dtool_9fJJfl9B 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 2 6 radius 1 547  6 length 1 547  
188 14 Dtool_9fJJQc4_ 7 164 611 0 14 Dtool_9fJJQc4_ 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 1 6 radius 1 547  
189 14 Dtool_9fJJE3hd 7 164 611 0 14 Dtool_9fJJE3hd 240 ////////////////////////////////////////////////////////////////////
//    Function : LinearCylinderVortexForce
//      Access : public
// Description : Simple Constructor
//////////////////////////////////////////////////////////////////// 0 
190 14 Dtool_9fJJBlCt 4 165 546 0 14 Dtool_9fJJBlCt 181 ////////////////////////////////////////////////////////////////////
// Function : set_coef
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 611  4 coef 1 547  
191 14 Dtool_9fJJZM30 6 166 547 0 14 Dtool_9fJJZM30 181 ////////////////////////////////////////////////////////////////////
// Function : get_coef
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 609  
192 14 Dtool_9fJJeg2d 4 167 546 0 14 Dtool_9fJJeg2d 686 // Filename: linearCylinderVortexForce.I
// Created by:  charles (24Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_radius
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 611  6 radius 1 547  
193 14 Dtool_9fJJObDi 6 168 547 0 14 Dtool_9fJJObDi 183 ////////////////////////////////////////////////////////////////////
// Function : get_radius
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 609  
194 14 Dtool_9fJJuquM 4 169 546 0 14 Dtool_9fJJuquM 183 ////////////////////////////////////////////////////////////////////
// Function : set_length
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 611  6 length 1 547  
195 14 Dtool_9fJJ_n8Q 6 170 547 0 14 Dtool_9fJJ_n8Q 183 ////////////////////////////////////////////////////////////////////
// Function : get_length
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 609  
196 14 Dtool_9fJJdafq 7 171 570 0 14 Dtool_9fJJdafq 0 0 
197 14 Dtool_9fJJnZ9d 4 174 546 0 14 Dtool_9fJJnZ9d 221 ////////////////////////////////////////////////////////////////////
//    Function : set_radius
//      Access : Public
// Description : set the radius
//////////////////////////////////////////////////////////////////// 2 4 this 3 612  1 r 1 547  
198 14 Dtool_9fJJsEHZ 4 175 546 0 14 Dtool_9fJJsEHZ 741 // Filename: linearDistanceForce.I
// Created by:  charles (21Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_falloff_type
//      Access : Public
// Description : falloff_type encapsulating wrap
//////////////////////////////////////////////////////////////////// 2 4 this 3 612  2 ft 1 528  
199 14 Dtool_9fJJjHEK 4 176 546 0 14 Dtool_9fJJjHEK 233 ////////////////////////////////////////////////////////////////////
//    Function : set_force_center
//      Access : Public
// Description : set the force center
//////////////////////////////////////////////////////////////////// 2 4 this 3 612  1 p 1 548  
200 14 Dtool_9fJJ6NAO 6 177 547 0 14 Dtool_9fJJ6NAO 219 ////////////////////////////////////////////////////////////////////
//    Function : get_radius
//      Access : public
// Description : radius query
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
201 14 Dtool_9fJJfx6e 6 178 528 0 14 Dtool_9fJJfx6e 231 ////////////////////////////////////////////////////////////////////
//    Function : get_falloff_type
//      Access : public
// Description : falloff_type query
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
202 14 Dtool_9fJJXLIy 7 179 551 0 14 Dtool_9fJJXLIy 231 ////////////////////////////////////////////////////////////////////
//    Function : get_force_center
//      Access : public
// Description : force_center query
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
203 14 Dtool_9fJJSM3k 6 180 547 0 14 Dtool_9fJJSM3k 248 ////////////////////////////////////////////////////////////////////
//    Function : get_scalar_term
//      Access : private
// Description : calculate the term based on falloff
//////////////////////////////////////////////////////////////////// 1 4 this 3 613  
204 14 Dtool_9fJJ4jKf 7 181 570 0 14 Dtool_9fJJ4jKf 0 0 
205 14 Dtool_9fJJbpBu 7 184 615 0 14 Dtool_9fJJbpBu 232 ////////////////////////////////////////////////////////////////////
//     Function : LinearEulerIntegrator
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 0 
206 14 Dtool_9fJJt_V5 7 186 618 0 14 Dtool_9fJJt_V5 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 616  
207 14 Dtool_9fJJ1Aho 7 186 618 0 14 Dtool_9fJJ1Aho 227 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 3 4 coef 1 547  1 a 1 547  1 m 1 545  
208 14 Dtool_9fJJfgK3 7 186 618 0 14 Dtool_9fJJfgK3 227 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 2 4 coef 1 547  1 a 1 547  
209 14 Dtool_9fJJZk3b 7 186 618 0 14 Dtool_9fJJZk3b 227 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 1 4 coef 1 547  
210 14 Dtool_9fJJvrU5 7 186 618 0 14 Dtool_9fJJvrU5 227 ////////////////////////////////////////////////////////////////////
//    Function : LinearFrictionForce
//      Access : Public
// Description : Constructor
//////////////////////////////////////////////////////////////////// 0 
211 14 Dtool_9fJJ6iox 4 187 546 0 14 Dtool_9fJJ6iox 678 // Filename: linearFrictionForce.I
// Created by:  charles (31Jul00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Function : set_coef
//   Access : public
//////////////////////////////////////////////////////////////////// 2 4 this 3 618  4 coef 1 547  
212 14 Dtool_9fJJOTwt 6 188 547 0 14 Dtool_9fJJOTwt 181 ////////////////////////////////////////////////////////////////////
// Function : get_coef
//   Access : public
//////////////////////////////////////////////////////////////////// 1 4 this 3 616  
213 14 Dtool_9fJJxun1 7 189 570 0 14 Dtool_9fJJxun1 0 0 
214 14 Dtool_9fJJD0XP 7 191 570 0 14 Dtool_9fJJD0XP 0 0 
215 14 Dtool_9fJJXcP8 7 193 621 0 14 Dtool_9fJJXcP8 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 619  
216 14 Dtool_9fJJ0EEl 7 193 621 0 14 Dtool_9fJJ0EEl 225 ////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 2 1 a 1 547  1 m 1 545  
217 14 Dtool_9fJJkctU 7 193 621 0 14 Dtool_9fJJkctU 225 ////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 1 1 a 1 547  
218 14 Dtool_9fJJE51r 7 193 621 0 14 Dtool_9fJJE51r 225 ////////////////////////////////////////////////////////////////////
//    Function : LinearJitterForce
//      Access : Public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
219 14 Dtool_9fJJDAAU 7 194 570 0 14 Dtool_9fJJDAAU 0 0 
220 14 Dtool_9fJJif_B 7 196 624 0 14 Dtool_9fJJif_B 232 ////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 622  
221 14 Dtool_9fJJgrE1 7 196 624 0 14 Dtool_9fJJgrE1 227 ////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 2 1 a 1 547  1 m 1 545  
222 14 Dtool_9fJJN_EG 7 196 624 0 14 Dtool_9fJJN_EG 227 ////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 1 1 a 1 547  
223 14 Dtool_9fJJpAku 7 196 624 0 14 Dtool_9fJJpAku 227 ////////////////////////////////////////////////////////////////////
//     Function : LinearNoiseForce
//       Access : Public
//  Description : constructor
//////////////////////////////////////////////////////////////////// 0 
224 14 Dtool_9fJJfpMh 7 197 570 0 14 Dtool_9fJJfpMh 0 0 
225 14 Dtool_9fJJgiE_ 7 199 625 0 14 Dtool_9fJJgiE_ 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 0 
226 14 Dtool_9fJJaAMU 7 199 625 0 14 Dtool_9fJJaAMU 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 5 1 p 1 548  1 f 1 528  1 r 1 547  1 a 1 547  1 m 1 545  
227 14 Dtool_9fJJ1Nsz 7 199 625 0 14 Dtool_9fJJ1Nsz 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 4 1 p 1 548  1 f 1 528  1 r 1 547  1 a 1 547  
228 14 Dtool_9fJJ9kox 7 199 625 0 14 Dtool_9fJJ9kox 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 3 1 p 1 548  1 f 1 528  1 r 1 547  
229 14 Dtool_9fJJjL1w 7 199 625 0 14 Dtool_9fJJjL1w 228 ////////////////////////////////////////////////////////////////////
//    Function : LinearSinkForce
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 626  
230 14 Dtool_9fJJ_dB3 7 200 570 0 14 Dtool_9fJJ_dB3 0 0 
231 14 Dtool_9fJJ76nW 7 202 628 0 14 Dtool_9fJJ76nW 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 0 
232 14 Dtool_9fJJSjwD 7 202 628 0 14 Dtool_9fJJSjwD 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 5 1 p 1 548  1 f 1 528  1 r 1 547  1 a 1 547  4 mass 1 545  
233 14 Dtool_9fJJMEul 7 202 628 0 14 Dtool_9fJJMEul 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 4 1 p 1 548  1 f 1 528  1 r 1 547  1 a 1 547  
234 14 Dtool_9fJJmKnZ 7 202 628 0 14 Dtool_9fJJmKnZ 232 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : Simple constructor
//////////////////////////////////////////////////////////////////// 3 1 p 1 548  1 f 1 528  1 r 1 547  
235 14 Dtool_9fJJmBjF 7 202 628 0 14 Dtool_9fJJmBjF 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearSourceForce
//      Access : Public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 629  
236 14 Dtool_9fJJQ1Mb 7 203 570 0 14 Dtool_9fJJQ1Mb 0 0 
237 14 Dtool_9fJJosNC 7 205 631 0 14 Dtool_9fJJosNC 230 ////////////////////////////////////////////////////////////////////
//    Function : LinearUserDefinedForce
//      Access : public
// Description : constructor
//////////////////////////////////////////////////////////////////// 0 
238 14 Dtool_9fJJOyYN 7 205 631 0 14 Dtool_9fJJOyYN 235 ////////////////////////////////////////////////////////////////////
//    Function : LinearUserDefinedForce
//      Access : public
// Description : copy constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 632  
239 14 Dtool_9fJJnYsf 7 207 570 0 14 Dtool_9fJJnYsf 0 0 
240 14 Dtool_9fJJn_HH 7 209 634 0 14 Dtool_9fJJn_HH 235 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 3 3 vec 1 552  1 a 1 547  4 mass 1 545  
241 14 Dtool_9fJJ5pxV 7 209 634 0 14 Dtool_9fJJ5pxV 235 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 2 3 vec 1 552  1 a 1 547  
242 14 Dtool_9fJJ51f6 7 209 634 0 14 Dtool_9fJJ51f6 235 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Vector Constructor
//////////////////////////////////////////////////////////////////// 1 3 vec 1 552  
243 14 Dtool_9fJJ2TTR 7 209 634 0 14 Dtool_9fJJ2TTR 233 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Copy Constructor
//////////////////////////////////////////////////////////////////// 1 4 copy 1 635  
244 14 Dtool_9fJJ_9B9 7 209 634 0 14 Dtool_9fJJ_9B9 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 5 1 x 1 547  1 y 1 547  1 z 1 547  1 a 1 547  4 mass 1 545  
245 14 Dtool_9fJJzxk3 7 209 634 0 14 Dtool_9fJJzxk3 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 4 1 x 1 547  1 y 1 547  1 z 1 547  1 a 1 547  
246 14 Dtool_9fJJpPZK 7 209 634 0 14 Dtool_9fJJpPZK 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 3 1 x 1 547  1 y 1 547  1 z 1 547  
247 14 Dtool_9fJJf8n5 7 209 634 0 14 Dtool_9fJJf8n5 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 2 1 x 1 547  1 y 1 547  
248 14 Dtool_9fJJ1Z3E 7 209 634 0 14 Dtool_9fJJ1Z3E 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 1 1 x 1 547  
249 14 Dtool_9fJJnFAc 7 209 634 0 14 Dtool_9fJJnFAc 246 ////////////////////////////////////////////////////////////////////
//     Function : LinearVectorForce
//       Access : Public
//  Description : Default/Piecewise constructor
//////////////////////////////////////////////////////////////////// 0 
250 14 Dtool_9fJJlk_l 4 210 546 0 14 Dtool_9fJJlk_l 723 // Filename: linearVectorForce.I
// Created by:  charles (21Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : encapsulating wrapper
//////////////////////////////////////////////////////////////////// 2 4 this 3 634  1 v 1 552  
251 14 Dtool_9fJJVGyt 4 210 546 0 14 Dtool_9fJJVGyt 238 ////////////////////////////////////////////////////////////////////
//    Function : set_vector
//      Access : Public
// Description : piecewise encapsulating wrapper
//////////////////////////////////////////////////////////////////// 4 4 this 3 634  1 x 1 547  1 y 1 547  1 z 1 547  
252 14 Dtool_9fJJM4vu 7 211 555 0 14 Dtool_9fJJM4vu 212 ////////////////////////////////////////////////////////////////////
//    Function : get_local_vector
//      Access : Public
// Description :
//////////////////////////////////////////////////////////////////// 1 4 this 3 635  
253 14 Dtool_9fJJlzdJ 7 212 570 0 14 Dtool_9fJJlzdJ 0 0 
254 14 Dtool_9fJJ4b5t 7 215 637 0 14 Dtool_9fJJ4b5t 232 ////////////////////////////////////////////////////////////////////
//     Function: PhysicsCollisionHandler::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
255 14 Dtool_9fJJbPFH 4 216 546 0 14 Dtool_9fJJbPFH 48 // These setters and getter are a bit of a hack: 2 4 this 3 637  5 speed 1 547  
256 14 Dtool_9fJJkpbd 6 217 547 0 14 Dtool_9fJJkpbd 48 // These setters and getter are a bit of a hack: 1 4 this 3 637  
257 14 Dtool_9fJJnSD1 4 218 546 0 14 Dtool_9fJJnSD1 0 2 4 this 3 637  4 coef 1 547  
258 14 Dtool_9fJJDybx 6 219 547 0 14 Dtool_9fJJDybx 0 1 4 this 3 637  
259 14 Dtool_9fJJ_3NV 4 220 546 0 14 Dtool_9fJJ_3NV 0 2 4 this 3 637  4 coef 1 547  
260 14 Dtool_9fJJXqrD 6 221 547 0 14 Dtool_9fJJXqrD 0 1 4 this 3 637  
261 14 Dtool_9fJJm1_7 7 222 570 0 14 Dtool_9fJJm1_7 0 0 
262 14 Dtool_9fJJPQAe 7 224 590 484 14 Dtool_9fJJPQAe 300 ////////////////////////////////////////////////////////////////////
//     Function : PhysicsManager
//       Access : Public
//  Description : Default Constructor.  NOTE: EulerIntegrator is
//                the standard default.
//////////////////////////////////////////////////////////////////// 0 
263 14 Dtool_9fJJ42XZ 4 226 546 0 14 Dtool_9fJJ42XZ 263 ////////////////////////////////////////////////////////////////////
//    Function : attach_linear_integrator
//      Access : Public
// Description : Hooks a linear integrator into the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 i 1 638  
264 14 Dtool_9fJJwg3X 4 227 546 0 14 Dtool_9fJJwg3X 266 ////////////////////////////////////////////////////////////////////
//    Function : attach_angular_integrator
//      Access : Public
// Description : Hooks an angular integrator into the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 i 1 639  
265 14 Dtool_9fJJWVm7 4 228 546 0 14 Dtool_9fJJWVm7 747 // Filename: physicsManager.I
// Created by:  charles (14Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//    Function : attach_physical
//      Access : Public
// Description : Registers a Physical class with the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 p 1 589  
266 14 Dtool_9fJJBiJv 4 229 546 0 14 Dtool_9fJJBiJv 257 ////////////////////////////////////////////////////////////////////
//    Function : attach_physicalnode
//      Access : Public
// Description : Please call attach_physical_node instead.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 p 1 591  
267 14 Dtool_9fJJTnRZ 4 230 546 0 14 Dtool_9fJJTnRZ 258 ////////////////////////////////////////////////////////////////////
//    Function : attach_physical_node
//      Access : Public
// Description : Registers a physicalnode with the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 p 1 591  
268 14 Dtool_9fJJCQEN 4 231 546 0 14 Dtool_9fJJCQEN 265 ////////////////////////////////////////////////////////////////////
//    Function : attach_linear_force
//      Access : Public
// Description : Adds a global linear force to the physics manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 f 1 581  
269 14 Dtool_9fJJLLwm 4 232 546 0 14 Dtool_9fJJLLwm 267 ////////////////////////////////////////////////////////////////////
//    Function : attach_angular_force
//      Access : Public
// Description : Adds a global angular force to the physics manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 f 1 586  
270 14 Dtool_9fJJpFDw 4 233 546 0 14 Dtool_9fJJpFDw 255 ////////////////////////////////////////////////////////////////////
//    Function : clear_linear_forces
//      Access : Public
// Description : Resets the physics manager force vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 590  
271 14 Dtool_9fJJbGDA 4 234 546 0 14 Dtool_9fJJbGDA 256 ////////////////////////////////////////////////////////////////////
//    Function : clear_angular_forces
//      Access : Public
// Description : Resets the physics manager force vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 590  
272 14 Dtool_9fJJL5GU 4 235 546 0 14 Dtool_9fJJL5GU 253 ////////////////////////////////////////////////////////////////////
//    Function : clear_physicals
//      Access : Public
// Description : Resets the physics manager objects vector
//////////////////////////////////////////////////////////////////// 1 4 this 3 590  
273 14 Dtool_9fJJNgcX 4 236 546 0 14 Dtool_9fJJNgcX 235 ////////////////////////////////////////////////////////////////////
//    Function : set_viscosity
//      Access : Public
// Description : Set the global viscosity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  9 viscosity 1 547  
274 14 Dtool_9fJJ_DJO 6 237 547 0 14 Dtool_9fJJ_DJO 235 ////////////////////////////////////////////////////////////////////
//    Function : get_viscosity
//      Access : Public
// Description : Get the global viscosity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 640  
275 14 Dtool_9fJJR29e 4 238 546 0 14 Dtool_9fJJR29e 254 ////////////////////////////////////////////////////////////////////
//     Function : remove_physical
//       Access : Public
//  Description : takes a physical out of the object list
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 p 1 589  
276 14 Dtool_9fJJQym8 4 239 546 0 14 Dtool_9fJJQym8 256 ////////////////////////////////////////////////////////////////////
//    Function : remove_physical_node
//      Access : Public
// Description : Removes a physicalnode from the manager
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 p 1 591  
277 14 Dtool_9fJJ_0ov 4 240 546 0 14 Dtool_9fJJ_0ov 263 ////////////////////////////////////////////////////////////////////
//     Function : remove_linear_force
//       Access : Public
//  Description : takes a linear force out of the physics list
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 f 1 581  
278 14 Dtool_9fJJgZkY 4 241 546 0 14 Dtool_9fJJgZkY 266 ////////////////////////////////////////////////////////////////////
//     Function : remove_angular_force
//       Access : Public
//  Description : takes an angular force out of the physics list
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  1 f 1 586  
279 14 Dtool_9fJJRoJp 4 242 546 0 14 Dtool_9fJJRoJp 314 ////////////////////////////////////////////////////////////////////
//     Function : DoPhysics
//       Access : Public
//  Description : This is the main high-level API call.  Performs
//                integration on every attached Physical.
//////////////////////////////////////////////////////////////////// 2 4 this 3 590  2 dt 1 547  
280 14 Dtool_9fJJoY19 4 242 546 0 14 Dtool_9fJJoY19 372 ////////////////////////////////////////////////////////////////////
//     Function : DoPhysics
//       Access : Public
//  Description : This is the main high-level API call.  Performs
//                integration on a single physical.  Make sure its 
//                associated forces are active.
//////////////////////////////////////////////////////////////////// 3 4 this 3 590  2 dt 1 547  1 p 1 589  
281 14 Dtool_9fJJ_sOL 4 243 546 0 14 Dtool_9fJJ_sOL 388 ////////////////////////////////////////////////////////////////////
//     Function : InitRandomSeed
//       Access : Public
//  Description : One-time config function, sets up the random seed
//                used by the physics and particle systems.
//                For synchronizing across distributed computers
//////////////////////////////////////////////////////////////////// 1 4 this 3 590  
282 14 Dtool_9fJJiQi_ 4 244 546 0 14 Dtool_9fJJiQi_ 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 640  3 out 1 566  
283 14 Dtool_9fJJHsEB 4 245 546 0 14 Dtool_9fJJHsEB 289 ////////////////////////////////////////////////////////////////////
//     Function : write_physicals
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 640  3 out 1 566  6 indent 1 568  
284 14 Dtool_9fJJGCw4 4 245 546 0 14 Dtool_9fJJGCw4 289 ////////////////////////////////////////////////////////////////////
//     Function : write_physicals
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 640  3 out 1 566  
285 14 Dtool_9fJJJKvl 4 246 546 0 14 Dtool_9fJJJKvl 286 ////////////////////////////////////////////////////////////////////
//     Function : write_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 640  3 out 1 566  6 indent 1 568  
286 14 Dtool_9fJJqHRR 4 246 546 0 14 Dtool_9fJJqHRR 286 ////////////////////////////////////////////////////////////////////
//     Function : write_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 640  3 out 1 566  
287 14 Dtool_9fJJAG8W 4 247 546 0 14 Dtool_9fJJAG8W 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 640  3 out 1 566  6 indent 1 568  
288 14 Dtool_9fJJ_gRG 4 247 546 0 14 Dtool_9fJJ_gRG 294 ////////////////////////////////////////////////////////////////////
//     Function : write_angular_forces
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 640  3 out 1 566  
289 14 Dtool_9fJJKfjR 4 248 546 0 14 Dtool_9fJJKfjR 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 640  3 out 1 566  6 indent 1 568  
290 14 Dtool_9fJJble_ 4 248 546 0 14 Dtool_9fJJble_ 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 640  3 out 1 566  
291 14 Dtool_9fJJM4Pj 4 249 546 0 14 Dtool_9fJJM4Pj 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 640  3 out 1 566  6 indent 1 568  
292 14 Dtool_9fJJ3rbp 4 249 546 0 14 Dtool_9fJJ3rbp 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 640  3 out 1 566  
134
509 13 PhysicsObject 75777 13 PhysicsObject 13 PhysicsObject 0 0 0 1 293 0 0 34 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 0 0 1 0 510 0 0 0 0 373
////////////////////////////////////////////////////////////////////
//       Class : PhysicsObject
// Description : A body on which physics will be applied.  If you're
//               looking to add physical motion to your class, do
//               NOT derive from this.  Derive from Physical instead.
////////////////////////////////////////////////////////////////////

510 19 TypedReferenceCount 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

511 23 PhysicsObjectCollection 26625 23 PhysicsObjectCollection 23 PhysicsObjectCollection 0 0 0 1 328 330 0 17 329 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 1 643 0 0 0 0 361
////////////////////////////////////////////////////////////////////
//       Class : PhysicsObjectCollection
// Description : This is a set of zero or more PhysicsObjects.  It's handy
//               for returning from functions that need to return
//               multiple PhysicsObjects.
////////////////////////////////////////////////////////////////////

512 9 BaseForce 75777 9 BaseForce 9 BaseForce 0 0 0 0 0 0 8 347 348 349 350 351 352 353 354 0 0 1 0 510 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//        Class : BaseForce
//  Description : pure virtual base class for all forces that could
//                POSSIBLY exist.
////////////////////////////////////////////////////////////////////

513 11 LinearForce 75777 11 LinearForce 11 LinearForce 0 0 0 0 0 0 10 355 356 357 358 359 360 361 362 363 364 0 0 1 0 512 0 0 0 0 0

514 12 AngularForce 75777 12 AngularForce 12 AngularForce 0 0 0 0 0 0 4 365 366 367 368 0 0 1 0 512 0 0 0 0 230
////////////////////////////////////////////////////////////////////
//       Class : AngularForce
// Description : pure virtual parent of all quat-based forces.
////////////////////////////////////////////////////////////////////

515 8 Physical 75777 8 Physical 8 Physical 0 0 0 1 369 0 0 25 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 2 644 645 0 1 0 510 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : Physical
// Description : Defines a set of physically modeled attributes.
//               If you want physics applied to your class, derive
//               it from this.
////////////////////////////////////////////////////////////////////

516 12 PhysicalNode 75777 12 PhysicalNode 12 PhysicalNode 0 0 0 1 395 0 0 8 396 397 398 399 400 401 402 403 1 646 0 1 0 517 0 0 0 0 0

517 9 PandaNode 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

518 9 ActorNode 75777 9 ActorNode 9 ActorNode 0 0 0 1 404 0 0 6 405 406 407 408 409 410 0 0 1 0 516 0 0 0 0 0

519 14 BaseIntegrator 75777 14 BaseIntegrator 14 BaseIntegrator 0 0 0 0 0 0 4 411 412 413 414 0 0 1 0 520 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : BaseIntegrator
// Description : pure virtual integrator class that holds cached
//               matrix information that really should be common to
//               any possible child implementation.
////////////////////////////////////////////////////////////////////

520 14 ReferenceCount 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

521 17 AngularIntegrator 75777 17 AngularIntegrator 17 AngularIntegrator 0 0 0 0 0 0 0 0 0 1 0 519 0 0 0 0 337
////////////////////////////////////////////////////////////////////
//       Class : BaseAngularIntegrator
// Description : Pure virtual base class for physical modeling.
//               Takes physically modelable objects and applies
//               forces to them.
////////////////////////////////////////////////////////////////////

522 22 AngularEulerIntegrator 75777 22 AngularEulerIntegrator 22 AngularEulerIntegrator 0 0 0 1 415 0 0 0 0 0 1 0 521 0 0 0 0 0

523 18 AngularVectorForce 75777 18 AngularVectorForce 18 AngularVectorForce 0 0 0 1 416 0 0 4 417 418 419 420 0 0 1 0 514 0 0 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : AngularVectorForce
// Description : a simple directed torque force, the angular
//               equivalent of simple vector force.
////////////////////////////////////////////////////////////////////

524 9 ForceNode 75777 9 ForceNode 9 ForceNode 0 0 0 1 421 0 0 9 422 423 424 425 426 427 428 429 430 1 647 0 1 0 517 0 0 0 0 420
////////////////////////////////////////////////////////////////////
//        Class : ForceNode
//  Description : A force that lives in the scene graph and is
//                therefore subject to local coordinate systems.
//                An example of this would be simulating gravity
//                in a rotating space station.  or something.
////////////////////////////////////////////////////////////////////

525 18 LinearControlForce 75777 18 LinearControlForce 18 LinearControlForce 0 0 0 1 431 0 0 6 432 433 434 435 436 437 0 0 1 0 513 0 0 0 0 551
////////////////////////////////////////////////////////////////
//       Class : LinearControlForce
// Description : Simple directed vector force.  This force is 
//               different from the others in that it can be
//               global and still only affect a single object.
//               That might not make sense for a physics simulation,
//               but it's very handy for a game.  I.e. this is
//               the force applied by user on the selected object.
////////////////////////////////////////////////////////////////

526 25 LinearCylinderVortexForce 75777 25 LinearCylinderVortexForce 25 LinearCylinderVortexForce 0 0 0 1 438 0 0 7 439 440 441 442 443 444 445 0 0 1 0 513 0 0 0 0 604
////////////////////////////////////////////////////////////////////
//       Class : LinearCylinderVortexForce
// Description : Defines a cylinder inside of which all forces are
//               tangential to the theta of the particle wrt the
//               z-axis in local coord. space.  This happens by
//               assigning the force a node by which the cylinder is
//               transformed.  Be warned- this will suck anything
//               that it can reach directly into orbit and will NOT
//               let go.
////////////////////////////////////////////////////////////////////

527 19 LinearDistanceForce 43009 19 LinearDistanceForce 19 LinearDistanceForce 0 0 0 0 0 0 8 446 447 448 449 450 451 452 453 0 0 1 0 513 0 0 0 1 528 232
////////////////////////////////////////////////////////////////////
//       Class : LinearDistanceForce
// Description : Pure virtual class for sinks and sources
////////////////////////////////////////////////////////////////////

528 11 FalloffType 794624 32 LinearDistanceForce::FalloffType 32 LinearDistanceForce::FalloffType 527 0 0 0 0 0 0 0 0 0 3 13 FT_ONE_OVER_R 34 LinearDistanceForce::FT_ONE_OVER_R 0 21 FT_ONE_OVER_R_SQUARED 42 LinearDistanceForce::FT_ONE_OVER_R_SQUARED 1 19 FT_ONE_OVER_R_CUBED 40 LinearDistanceForce::FT_ONE_OVER_R_CUBED 2 0 0

529 16 LinearIntegrator 75777 16 LinearIntegrator 16 LinearIntegrator 0 0 0 0 0 0 0 0 0 1 0 519 0 0 0 0 332
////////////////////////////////////////////////////////////////////
//       Class : LinearIntegrator
// Description : Pure virtual base class for physical modeling.
//               Takes physically modelable objects and applies
//               forces to them.
////////////////////////////////////////////////////////////////////

530 21 LinearEulerIntegrator 75777 21 LinearEulerIntegrator 21 LinearEulerIntegrator 0 0 0 1 454 0 0 0 0 0 1 0 529 0 0 0 0 0

531 19 LinearFrictionForce 75777 19 LinearFrictionForce 19 LinearFrictionForce 0 0 0 1 455 0 0 3 456 457 458 0 0 1 0 513 0 0 0 0 217
////////////////////////////////////////////////////////////////////
//       Class : LinearFrictionForce
// Description : Friction-based drag force
////////////////////////////////////////////////////////////////////

532 17 LinearRandomForce 75777 17 LinearRandomForce 17 LinearRandomForce 0 0 0 0 0 0 1 459 0 0 1 0 513 0 0 0 0 240
////////////////////////////////////////////////////////////////////
//       Class : LinearRandomForce
// Description : Pure virtual, parent to noiseForce and jitterForce
////////////////////////////////////////////////////////////////////

533 17 LinearJitterForce 75777 17 LinearJitterForce 17 LinearJitterForce 0 0 0 1 460 0 0 1 461 0 0 1 0 532 0 0 0 0 0

534 16 LinearNoiseForce 75777 16 LinearNoiseForce 16 LinearNoiseForce 0 0 0 1 462 0 0 1 463 0 0 1 0 532 0 0 0 0 218
////////////////////////////////////////////////////////////////////
//       Class : LinearNoiseForce
// Description : Repeating noise force vector.
////////////////////////////////////////////////////////////////////

535 15 LinearSinkForce 75777 15 LinearSinkForce 15 LinearSinkForce 0 0 0 1 464 0 0 1 465 0 0 1 0 527 0 0 0 0 223
////////////////////////////////////////////////////////////////////
//       Class : LinearSinkForce
// Description : Attractor force.  Think black hole.
////////////////////////////////////////////////////////////////////

536 17 LinearSourceForce 75777 17 LinearSourceForce 17 LinearSourceForce 0 0 0 1 466 0 0 1 467 0 0 1 0 527 0 0 0 0 206
////////////////////////////////////////////////////////////////////
//       Class : LinearSourceForce
// Description : Repellant force.
////////////////////////////////////////////////////////////////////

537 22 LinearUserDefinedForce 75777 22 LinearUserDefinedForce 22 LinearUserDefinedForce 0 0 0 1 468 0 0 2 469 470 0 0 1 0 513 0 0 0 0 550
////////////////////////////////////////////////////////////////////
//       Class : LinearUserDefinedForce
// Description : a programmable force that takes an evaluator fn.
//
//        NOTE : AS OF Interrogate => Squeak, this class does NOT
//               get FFI'd due to the function pointer bug, and is
//               currently NOT getting interrogated.  Change this
//               in the makefile when the time is right or this class
//               becomes needed...
////////////////////////////////////////////////////////////////////

538 17 LinearVectorForce 75777 17 LinearVectorForce 17 LinearVectorForce 0 0 0 1 471 0 0 3 472 473 474 0 0 1 0 513 0 0 0 0 278
////////////////////////////////////////////////////////////////
//       Class : LinearVectorForce
// Description : Simple directed vector force.  Suitable for
//               gravity, non-turbulent wind, etc...
////////////////////////////////////////////////////////////////

539 23 PhysicsCollisionHandler 75777 23 PhysicsCollisionHandler 23 PhysicsCollisionHandler 0 0 0 1 475 0 0 7 476 477 478 479 480 481 482 0 0 1 0 540 0 0 0 0 389
////////////////////////////////////////////////////////////////////
//       Class : PhysicsCollisionHandler
// Description : A specialized kind of CollisionHandler that simply
//               pushes back on things that attempt to move into solid
//               walls.  This also puts forces onto the physics objects
////////////////////////////////////////////////////////////////////

540 22 CollisionHandlerPusher 2049 22 CollisionHandlerPusher 22 CollisionHandlerPusher 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : CollisionHandlerPusher
// Description : A specialized kind of CollisionHandler that simply
//               pushes back on things that attempt to move into solid
//               walls.  This is the simplest kind of "real-world"
//               collisions you can have.
////////////////////////////////////////////////////////////////////

541 14 PhysicsManager 26625 14 PhysicsManager 14 PhysicsManager 0 0 0 1 483 484 0 24 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 0 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : PhysicsManager
// Description : Physics don't get much higher-level than this.
//               Attach as many Physicals (particle systems, etc..)
//               as you want, pick an integrator and go.
////////////////////////////////////////////////////////////////////

542 15 PhysicsObject * 8576 15 PhysicsObject * 15 PhysicsObject * 0 0 509 0 0 0 0 0 0 0 0 0 0

543 21 PhysicsObject const * 8576 21 PhysicsObject const * 21 PhysicsObject const * 0 0 544 0 0 0 0 0 0 0 0 0 0

544 19 PhysicsObject const 8832 19 PhysicsObject const 19 PhysicsObject const 0 0 509 0 0 0 0 0 0 0 0 0 0

545 4 bool 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

546 4 void 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

547 5 float 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

548 16 LPoint3f const * 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 549 0 0 0 0 0 0 0 0 0 0

549 14 LPoint3f const 8832 14 LPoint3f const 14 LPoint3f const 0 0 550 0 0 0 0 0 0 0 0 0 0

550 7 Vertexf 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 1083
// Filename: lpoint3_src.h
// Created by:  drose (25Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

551 10 LPoint3f * 8576 10 LPoint3f * 10 LPoint3f * 0 0 550 0 0 0 0 0 0 0 0 0 0

552 17 LVector3f const * 8576 17 LVector3f const * 17 LVector3f const * 0 0 553 0 0 0 0 0 0 0 0 0 0

553 15 LVector3f const 8832 15 LVector3f const 15 LVector3f const 0 0 554 0 0 0 0 0 0 0 0 0 0

554 7 Normalf 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 1086
// Filename: lvector3_src.h
// Created by:  drose (24Sep99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

555 11 LVector3f * 8576 11 LVector3f * 11 LVector3f * 0 0 554 0 0 0 0 0 0 0 0 0 0

556 18 LRotationf const * 8576 18 LRotationf const * 18 LRotationf const * 0 0 557 0 0 0 0 0 0 0 0 0 0

557 16 LRotationf const 8832 16 LRotationf const 16 LRotationf const 0 0 558 0 0 0 0 0 0 0 0 0 0

558 10 LRotationf 2048 10 LRotationf 10 LRotationf 0 0 0 0 0 0 0 0 0 0 0 0 738
// Filename: lrotation_src.h
// Created by:  frang, charles (23Jun00)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

559 21 LOrientationf const * 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 560 0 0 0 0 0 0 0 0 0 0

560 19 LOrientationf const 8832 19 LOrientationf const 19 LOrientationf const 0 0 561 0 0 0 0 0 0 0 0 0 0

561 13 LOrientationf 2048 13 LOrientationf 13 LOrientationf 0 0 0 0 0 0 0 0 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

562 15 LOrientationf * 8576 15 LOrientationf * 15 LOrientationf * 0 0 561 0 0 0 0 0 0 0 0 0 0

563 12 LRotationf * 8576 12 LRotationf * 12 LRotationf * 0 0 558 0 0 0 0 0 0 0 0 0 0

564 9 LMatrix4f 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 648 649 650 0 0 0 0 703
// Filename: lmatrix4_src.h
// Created by:  drose (15Jan99)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

565 11 LMatrix4f * 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 564 0 0 0 0 0 0 0 0 0 0

566 9 ostream * 8576 9 ostream * 9 ostream * 0 0 567 0 0 0 0 0 0 0 0 0 0

567 7 ostream 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

568 12 unsigned int 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

569 10 TypeHandle 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

570 12 TypeHandle * 8576 12 TypeHandle * 12 TypeHandle * 0 0 569 0 0 0 0 0 0 0 0 0 0

571 25 PhysicsObjectCollection * 8576 25 PhysicsObjectCollection * 25 PhysicsObjectCollection * 0 0 511 0 0 0 0 0 0 0 0 0 0

572 31 PhysicsObjectCollection const * 8576 31 PhysicsObjectCollection const * 31 PhysicsObjectCollection const * 0 0 573 0 0 0 0 0 0 0 0 0 0

573 29 PhysicsObjectCollection const 8832 29 PhysicsObjectCollection const 29 PhysicsObjectCollection const 0 0 511 0 0 0 0 0 0 0 0 0 0

574 3 int 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

575 17 BaseForce const * 8576 17 BaseForce const * 17 BaseForce const * 0 0 576 0 0 0 0 0 0 0 0 0 0

576 15 BaseForce const 8832 15 BaseForce const 15 BaseForce const 0 0 512 0 0 0 0 0 0 0 0 0 0

577 11 BaseForce * 8576 11 BaseForce * 11 BaseForce * 0 0 512 0 0 0 0 0 0 0 0 0 0

578 11 ForceNode * 8576 11 ForceNode * 11 ForceNode * 0 0 524 0 0 0 0 0 0 0 0 0 0

579 8 NodePath 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 651 652 0 0 0 0 4938
//
// A NodePath is the fundamental unit of high-level interaction with
// the scene graph.  It encapsulates the complete path down to a node
// from some other node, usually the root of the scene graph.  This is
// used to resolve ambiguities associated with instancing.
//
// NodePath also contains a number of handy high-level methods for
// common scene-graph manipulations, such as reparenting, and common
// state changes, such as repositioning.
//
// There are also a number of NodePath methods for finding nodes deep
// within the tree by name or by type.  These take a path string,
// which at its simplest consists of a series of node names separated
// by slashes, like a directory pathname.
//
// Each component of the path string may optionally consist of one of
// the following special names, instead of a node name:
//
//   *          -- matches exactly one node, with any name.
//   **         -- matches any sequence of zero or more nodes.
//   +typename  -- matches any node that is or derives from the given type.
//   -typename  -- matches any node that is the given type exactly.
//   =tag       -- matches any node that has the indicated tag.
//   =tag=value -- matches any node whose tag matches the indicated value.
//
// Furthermore, a node name may itself contain standard filename
// globbing characters, like *, ?, and [a-z], that will be accepted as
// a partial match.  (In fact, the '*' special name may be seen as
// just a special case of this.)  The globbing characters may not be
// used with the typename matches or with tag matches, but they may
// be used to match a tag's value in the =tag=value syntax.
//
// The special characters "@@", appearing at the beginning of a node
// name, indicate a stashed node.  Normally, stashed nodes are not
// returned by a find (but see the special flags, below), but a
// stashed node may be found if it is explicitly named with its
// leading @@ characters.  By extension, "@@*" may be used to identify
// any stashed node.
//
// Examples:
//
// "room//graph" will look for a node named "graph", which is a child
// of an unnamed node, which is a child of a node named "room", which
// is a child of the starting path.
//
// "**/red*" will look for any node anywhere in the tree (below the
// starting path) with a name that begins with "red".
//
// "**/+PartBundleNode/**/head" will look for a node named "head",
// somewhere below a PartBundleNode anywhere in the tree.
//
//
// The search is always potentially ambiguous, even if the special
// wildcard operators are not used, because there may be multiple
// nodes in the tree with the same name.  In general, in the case of
// an ambiguity, the shortest path is preferred; when a method (such
// as extend_by) must choose only only one of several possible paths,
// it will choose the shortest available; on the other hand, when a
// method (such as find_all_matches) is to return all of the matching
// paths, it will sort them so that the shortest paths appear first in
// the output.
//
//
// Special flags.  The entire string may optionally be followed by the
// ";" character, followed by one or more of the following special
// control flags, with no intervening spaces or punctuation:
//
//    -h    Do not return hidden nodes.
//    +h    Do return hidden nodes.
//    -s    Do not return stashed nodes unless explicitly referenced with @@.
//    +s    Return stashed nodes even without any explicit @@ characters.
//    -i    Node name comparisons are not case insensitive: case must match
//          exactly.
//    +i    Node name comparisons are case insensitive: case is not important.
//          This affects matches against the node name only; node type
//          and tag strings are always case sensitive.
//
// The default flags are +h-s-i.
//
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

580 10 NodePath * 8576 10 NodePath * 10 NodePath * 0 0 579 0 0 0 0 0 0 0 0 0 0

581 13 LinearForce * 8576 13 LinearForce * 13 LinearForce * 0 0 513 0 0 0 0 0 0 0 0 0 0

582 19 LinearForce const * 8576 19 LinearForce const * 19 LinearForce const * 0 0 583 0 0 0 0 0 0 0 0 0 0

583 17 LinearForce const 8832 17 LinearForce const 17 LinearForce const 0 0 513 0 0 0 0 0 0 0 0 0 0

584 20 AngularForce const * 8576 20 AngularForce const * 20 AngularForce const * 0 0 585 0 0 0 0 0 0 0 0 0 0

585 18 AngularForce const 8832 18 AngularForce const 18 AngularForce const 0 0 514 0 0 0 0 0 0 0 0 0 0

586 14 AngularForce * 8576 14 AngularForce * 14 AngularForce * 0 0 514 0 0 0 0 0 0 0 0 0 0

587 16 Physical const * 8576 16 Physical const * 16 Physical const * 0 0 588 0 0 0 0 0 0 0 0 0 0

588 14 Physical const 8832 14 Physical const 14 Physical const 0 0 515 0 0 0 0 0 0 0 0 0 0

589 10 Physical * 8576 10 Physical * 10 Physical * 0 0 515 0 0 0 0 0 0 0 0 0 0

590 16 PhysicsManager * 8576 16 PhysicsManager * 16 PhysicsManager * 0 0 541 0 0 0 0 0 0 0 0 0 0

591 14 PhysicalNode * 8576 14 PhysicalNode * 14 PhysicalNode * 0 0 516 0 0 0 0 0 0 0 0 0 0

592 13 atomic string 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

593 20 PhysicalNode const * 8576 20 PhysicalNode const * 20 PhysicalNode const * 0 0 594 0 0 0 0 0 0 0 0 0 0

594 18 PhysicalNode const 8832 18 PhysicalNode const 18 PhysicalNode const 0 0 516 0 0 0 0 0 0 0 0 0 0

595 17 ActorNode const * 8576 17 ActorNode const * 17 ActorNode const * 0 0 596 0 0 0 0 0 0 0 0 0 0

596 15 ActorNode const 8832 15 ActorNode const 15 ActorNode const 0 0 518 0 0 0 0 0 0 0 0 0 0

597 11 ActorNode * 8576 11 ActorNode * 11 ActorNode * 0 0 518 0 0 0 0 0 0 0 0 0 0

598 22 BaseIntegrator const * 8576 22 BaseIntegrator const * 22 BaseIntegrator const * 0 0 599 0 0 0 0 0 0 0 0 0 0

599 20 BaseIntegrator const 8832 20 BaseIntegrator const 20 BaseIntegrator const 0 0 519 0 0 0 0 0 0 0 0 0 0

600 24 AngularEulerIntegrator * 8576 24 AngularEulerIntegrator * 24 AngularEulerIntegrator * 0 0 522 0 0 0 0 0 0 0 0 0 0

601 26 AngularVectorForce const * 8576 26 AngularVectorForce const * 26 AngularVectorForce const * 0 0 602 0 0 0 0 0 0 0 0 0 0

602 24 AngularVectorForce const 8832 24 AngularVectorForce const 24 AngularVectorForce const 0 0 523 0 0 0 0 0 0 0 0 0 0

603 20 AngularVectorForce * 8576 20 AngularVectorForce * 20 AngularVectorForce * 0 0 523 0 0 0 0 0 0 0 0 0 0

604 17 ForceNode const * 8576 17 ForceNode const * 17 ForceNode const * 0 0 605 0 0 0 0 0 0 0 0 0 0

605 15 ForceNode const 8832 15 ForceNode const 15 ForceNode const 0 0 524 0 0 0 0 0 0 0 0 0 0

606 26 LinearControlForce const * 8576 26 LinearControlForce const * 26 LinearControlForce const * 0 0 607 0 0 0 0 0 0 0 0 0 0

607 24 LinearControlForce const 8832 24 LinearControlForce const 24 LinearControlForce const 0 0 525 0 0 0 0 0 0 0 0 0 0

608 20 LinearControlForce * 8576 20 LinearControlForce * 20 LinearControlForce * 0 0 525 0 0 0 0 0 0 0 0 0 0

609 33 LinearCylinderVortexForce const * 8576 33 LinearCylinderVortexForce const * 33 LinearCylinderVortexForce const * 0 0 610 0 0 0 0 0 0 0 0 0 0

610 31 LinearCylinderVortexForce const 8832 31 LinearCylinderVortexForce const 31 LinearCylinderVortexForce const 0 0 526 0 0 0 0 0 0 0 0 0 0

611 27 LinearCylinderVortexForce * 8576 27 LinearCylinderVortexForce * 27 LinearCylinderVortexForce * 0 0 526 0 0 0 0 0 0 0 0 0 0

612 21 LinearDistanceForce * 8576 21 LinearDistanceForce * 21 LinearDistanceForce * 0 0 527 0 0 0 0 0 0 0 0 0 0

613 27 LinearDistanceForce const * 8576 27 LinearDistanceForce const * 27 LinearDistanceForce const * 0 0 614 0 0 0 0 0 0 0 0 0 0

614 25 LinearDistanceForce const 8832 25 LinearDistanceForce const 25 LinearDistanceForce const 0 0 527 0 0 0 0 0 0 0 0 0 0

615 23 LinearEulerIntegrator * 8576 23 LinearEulerIntegrator * 23 LinearEulerIntegrator * 0 0 530 0 0 0 0 0 0 0 0 0 0

616 27 LinearFrictionForce const * 8576 27 LinearFrictionForce const * 27 LinearFrictionForce const * 0 0 617 0 0 0 0 0 0 0 0 0 0

617 25 LinearFrictionForce const 8832 25 LinearFrictionForce const 25 LinearFrictionForce const 0 0 531 0 0 0 0 0 0 0 0 0 0

618 21 LinearFrictionForce * 8576 21 LinearFrictionForce * 21 LinearFrictionForce * 0 0 531 0 0 0 0 0 0 0 0 0 0

619 25 LinearJitterForce const * 8576 25 LinearJitterForce const * 25 LinearJitterForce const * 0 0 620 0 0 0 0 0 0 0 0 0 0

620 23 LinearJitterForce const 8832 23 LinearJitterForce const 23 LinearJitterForce const 0 0 533 0 0 0 0 0 0 0 0 0 0

621 19 LinearJitterForce * 8576 19 LinearJitterForce * 19 LinearJitterForce * 0 0 533 0 0 0 0 0 0 0 0 0 0

622 24 LinearNoiseForce const * 8576 24 LinearNoiseForce const * 24 LinearNoiseForce const * 0 0 623 0 0 0 0 0 0 0 0 0 0

623 22 LinearNoiseForce const 8832 22 LinearNoiseForce const 22 LinearNoiseForce const 0 0 534 0 0 0 0 0 0 0 0 0 0

624 18 LinearNoiseForce * 8576 18 LinearNoiseForce * 18 LinearNoiseForce * 0 0 534 0 0 0 0 0 0 0 0 0 0

625 17 LinearSinkForce * 8576 17 LinearSinkForce * 17 LinearSinkForce * 0 0 535 0 0 0 0 0 0 0 0 0 0

626 23 LinearSinkForce const * 8576 23 LinearSinkForce const * 23 LinearSinkForce const * 0 0 627 0 0 0 0 0 0 0 0 0 0

627 21 LinearSinkForce const 8832 21 LinearSinkForce const 21 LinearSinkForce const 0 0 535 0 0 0 0 0 0 0 0 0 0

628 19 LinearSourceForce * 8576 19 LinearSourceForce * 19 LinearSourceForce * 0 0 536 0 0 0 0 0 0 0 0 0 0

629 25 LinearSourceForce const * 8576 25 LinearSourceForce const * 25 LinearSourceForce const * 0 0 630 0 0 0 0 0 0 0 0 0 0

630 23 LinearSourceForce const 8832 23 LinearSourceForce const 23 LinearSourceForce const 0 0 536 0 0 0 0 0 0 0 0 0 0

631 24 LinearUserDefinedForce * 8576 24 LinearUserDefinedForce * 24 LinearUserDefinedForce * 0 0 537 0 0 0 0 0 0 0 0 0 0

632 30 LinearUserDefinedForce const * 8576 30 LinearUserDefinedForce const * 30 LinearUserDefinedForce const * 0 0 633 0 0 0 0 0 0 0 0 0 0

633 28 LinearUserDefinedForce const 8832 28 LinearUserDefinedForce const 28 LinearUserDefinedForce const 0 0 537 0 0 0 0 0 0 0 0 0 0

634 19 LinearVectorForce * 8576 19 LinearVectorForce * 19 LinearVectorForce * 0 0 538 0 0 0 0 0 0 0 0 0 0

635 25 LinearVectorForce const * 8576 25 LinearVectorForce const * 25 LinearVectorForce const * 0 0 636 0 0 0 0 0 0 0 0 0 0

636 23 LinearVectorForce const 8832 23 LinearVectorForce const 23 LinearVectorForce const 0 0 538 0 0 0 0 0 0 0 0 0 0

637 25 PhysicsCollisionHandler * 8576 25 PhysicsCollisionHandler * 25 PhysicsCollisionHandler * 0 0 539 0 0 0 0 0 0 0 0 0 0

638 18 LinearIntegrator * 8576 18 LinearIntegrator * 18 LinearIntegrator * 0 0 529 0 0 0 0 0 0 0 0 0 0

639 19 AngularIntegrator * 8576 19 AngularIntegrator * 19 AngularIntegrator * 0 0 521 0 0 0 0 0 0 0 0 0 0

640 22 PhysicsManager const * 8576 22 PhysicsManager const * 22 PhysicsManager const * 0 0 641 0 0 0 0 0 0 0 0 0 0

641 20 PhysicsManager const 8832 20 PhysicsManager const 20 PhysicsManager const 0 0 541 0 0 0 0 0 0 0 0 0 0

642 6 string 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
10
643 0 38 19 get_physics_objects 23 get_num_physics_objects 18 get_physics_object 
644 0 83 17 get_linear_forces 21 get_num_linear_forces 16 get_linear_force 
645 0 83 18 get_angular_forces 22 get_num_angular_forces 17 get_angular_force 
646 0 110 13 get_physicals 17 get_num_physicals 12 get_physical 
647 0 144 10 get_forces 14 get_num_forces 9 get_force 
648 0 304 8 get_rows 4 size 7 get_row 
649 0 304 8 get_cols 4 size 7 get_col 
650 0 304 9 get_row3s 4 size 8 get_row3 
651 0 351 9 get_nodes 13 get_num_nodes 8 get_node 
652 0 351 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
